
Torpedo Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d04  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009edc  08009edc  0000aedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f34  08009f34  0000b184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009f34  08009f34  0000b184  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009f34  08009f34  0000b184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f34  08009f34  0000af34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f38  08009f38  0000af38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08009f3c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ac  20000184  0800a0c0  0000b184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001430  0800a0c0  0000b430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194d6  00000000  00000000  0000b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e2c  00000000  00000000  0002468a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  000284b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001193  00000000  00000000  00029ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fd1  00000000  00000000  0002ad3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4bb  00000000  00000000  0004bd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7a6a  00000000  00000000  000681c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012fc31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa8  00000000  00000000  0012fc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00135c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009ec4 	.word	0x08009ec4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009ec4 	.word	0x08009ec4

08000218 <HAL_I2C_ListenCpltCallback>:
		I2C_REGISTERS[startREG++] = RxData[indx++];
	}
}

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Set PA5 HIGH
 8000220:	2201      	movs	r2, #1
 8000222:	2101      	movs	r1, #1
 8000224:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000228:	f000 feba 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800022c:	2064      	movs	r0, #100	@ 0x64
 800022e:	f000 fb8f 	bl	8000950 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Set PA5 LOW
 8000232:	2200      	movs	r2, #0
 8000234:	2101      	movs	r1, #1
 8000236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800023a:	f000 feb1 	bl	8000fa0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800023e:	2064      	movs	r0, #100	@ 0x64
 8000240:	f000 fb86 	bl	8000950 <HAL_Delay>
	
	HAL_I2C_EnableListen_IT(hi2c);
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f001 f8c3 	bl	80013d0 <HAL_I2C_EnableListen_IT>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	460b      	mov	r3, r1
 800025e:	70fb      	strb	r3, [r7, #3]
 8000260:	4613      	mov	r3, r2
 8000262:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 8000264:	78fb      	ldrb	r3, [r7, #3]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d116      	bne.n	8000298 <HAL_I2C_AddrCallback+0x44>
	{
		if (is_first_recvd == 0)
 800026a:	4b18      	ldr	r3, [pc, #96]	@ (80002cc <HAL_I2C_AddrCallback+0x78>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d127      	bne.n	80002c2 <HAL_I2C_AddrCallback+0x6e>
		{
			rxcount = 0;
 8000272:	4b17      	ldr	r3, [pc, #92]	@ (80002d0 <HAL_I2C_AddrCallback+0x7c>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
			countAddr++;
 8000278:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <HAL_I2C_AddrCallback+0x80>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	4a15      	ldr	r2, [pc, #84]	@ (80002d4 <HAL_I2C_AddrCallback+0x80>)
 8000280:	6013      	str	r3, [r2, #0]
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 8000282:	4b13      	ldr	r3, [pc, #76]	@ (80002d0 <HAL_I2C_AddrCallback+0x7c>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	461a      	mov	r2, r3
 8000288:	4b13      	ldr	r3, [pc, #76]	@ (80002d8 <HAL_I2C_AddrCallback+0x84>)
 800028a:	18d1      	adds	r1, r2, r3
 800028c:	2300      	movs	r3, #0
 800028e:	2201      	movs	r2, #1
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f000 ffeb 	bl	800126c <HAL_I2C_Slave_Seq_Receive_IT>
	{
		txcount = 0;
		startPosition = RxData[0];
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_NEXT_FRAME);
	}
}
 8000296:	e014      	b.n	80002c2 <HAL_I2C_AddrCallback+0x6e>
		txcount = 0;
 8000298:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <HAL_I2C_AddrCallback+0x88>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
		startPosition = RxData[0];
 800029e:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <HAL_I2C_AddrCallback+0x84>)
 80002a0:	781a      	ldrb	r2, [r3, #0]
 80002a2:	4b0f      	ldr	r3, [pc, #60]	@ (80002e0 <HAL_I2C_AddrCallback+0x8c>)
 80002a4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_NEXT_FRAME);
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <HAL_I2C_AddrCallback+0x8c>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b0b      	ldr	r3, [pc, #44]	@ (80002dc <HAL_I2C_AddrCallback+0x88>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	4413      	add	r3, r2
 80002b2:	4a0c      	ldr	r2, [pc, #48]	@ (80002e4 <HAL_I2C_AddrCallback+0x90>)
 80002b4:	1899      	adds	r1, r3, r2
 80002b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80002ba:	2201      	movs	r2, #1
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f000 ff23 	bl	8001108 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	200001b4 	.word	0x200001b4
 80002d0:	200001ae 	.word	0x200001ae
 80002d4:	200001b8 	.word	0x200001b8
 80002d8:	200001ac 	.word	0x200001ac
 80002dc:	200001af 	.word	0x200001af
 80002e0:	200001b0 	.word	0x200001b0
 80002e4:	200001a0 	.word	0x200001a0

080002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ec:	f000 fabf 	bl	800086e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f0:	f000 f816 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f4:	f000 f904 	bl	8000500 <MX_GPIO_Init>
  MX_I2C2_Init();
 80002f8:	f000 f85e 	bl	80003b8 <MX_I2C2_Init>
  MX_TIM2_Init();
 80002fc:	f000 f89c 	bl	8000438 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000300:	f009 f8d0 	bl	80094a4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK)
 8000304:	4805      	ldr	r0, [pc, #20]	@ (800031c <main+0x34>)
 8000306:	f001 f863 	bl	80013d0 <HAL_I2C_EnableListen_IT>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d002      	beq.n	8000316 <main+0x2e>
  {
	  Error_Handler();
 8000310:	f000 f940 	bl	8000594 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	e7fd      	b.n	8000316 <main+0x2e>
 800031a:	bf00      	nop
 800031c:	200001bc 	.word	0x200001bc

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b094      	sub	sp, #80	@ 0x50
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0318 	add.w	r3, r7, #24
 800032a:	2238      	movs	r2, #56	@ 0x38
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f009 fd9c 	bl	8009e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000342:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000346:	f004 f8e5 	bl	8004514 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034a:	2302      	movs	r3, #2
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000352:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000354:	2340      	movs	r3, #64	@ 0x40
 8000356:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000358:	2302      	movs	r3, #2
 800035a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800035c:	2302      	movs	r3, #2
 800035e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000360:	2301      	movs	r3, #1
 8000362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000364:	230c      	movs	r3, #12
 8000366:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000368:	2302      	movs	r3, #2
 800036a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800036c:	2304      	movs	r3, #4
 800036e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000370:	2302      	movs	r3, #2
 8000372:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000374:	f107 0318 	add.w	r3, r7, #24
 8000378:	4618      	mov	r0, r3
 800037a:	f004 f97f 	bl	800467c <HAL_RCC_OscConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000384:	f000 f906 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	230f      	movs	r3, #15
 800038a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038c:	2301      	movs	r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f004 fc7d 	bl	8004ca0 <HAL_RCC_ClockConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003ac:	f000 f8f2 	bl	8000594 <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	3750      	adds	r7, #80	@ 0x50
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_I2C2_Init+0x74>)
 80003be:	4a1c      	ldr	r2, [pc, #112]	@ (8000430 <MX_I2C2_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	@ (800042c <MX_I2C2_Init+0x74>)
 80003c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000434 <MX_I2C2_Init+0x7c>)
 80003c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 158;
 80003c8:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_I2C2_Init+0x74>)
 80003ca:	229e      	movs	r2, #158	@ 0x9e
 80003cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ce:	4b17      	ldr	r3, [pc, #92]	@ (800042c <MX_I2C2_Init+0x74>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d4:	4b15      	ldr	r3, [pc, #84]	@ (800042c <MX_I2C2_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003da:	4b14      	ldr	r3, [pc, #80]	@ (800042c <MX_I2C2_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_I2C2_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e6:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_I2C2_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_I2C2_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003f2:	480e      	ldr	r0, [pc, #56]	@ (800042c <MX_I2C2_Init+0x74>)
 80003f4:	f000 fdec 	bl	8000fd0 <HAL_I2C_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003fe:	f000 f8c9 	bl	8000594 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000402:	2100      	movs	r1, #0
 8000404:	4809      	ldr	r0, [pc, #36]	@ (800042c <MX_I2C2_Init+0x74>)
 8000406:	f002 faed 	bl	80029e4 <HAL_I2CEx_ConfigAnalogFilter>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000410:	f000 f8c0 	bl	8000594 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000414:	2100      	movs	r1, #0
 8000416:	4805      	ldr	r0, [pc, #20]	@ (800042c <MX_I2C2_Init+0x74>)
 8000418:	f002 fb2f 	bl	8002a7a <HAL_I2CEx_ConfigDigitalFilter>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000422:	f000 f8b7 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200001bc 	.word	0x200001bc
 8000430:	40005800 	.word	0x40005800
 8000434:	00503d58 	.word	0x00503d58

08000438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b08a      	sub	sp, #40	@ 0x28
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043e:	f107 031c 	add.w	r3, r7, #28
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800044a:	463b      	mov	r3, r7
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
 8000458:	615a      	str	r2, [r3, #20]
 800045a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800045c:	4b27      	ldr	r3, [pc, #156]	@ (80004fc <MX_TIM2_Init+0xc4>)
 800045e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000462:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8000464:	4b25      	ldr	r3, [pc, #148]	@ (80004fc <MX_TIM2_Init+0xc4>)
 8000466:	f240 623f 	movw	r2, #1599	@ 0x63f
 800046a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046c:	4b23      	ldr	r3, [pc, #140]	@ (80004fc <MX_TIM2_Init+0xc4>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000472:	4b22      	ldr	r3, [pc, #136]	@ (80004fc <MX_TIM2_Init+0xc4>)
 8000474:	2263      	movs	r2, #99	@ 0x63
 8000476:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000478:	4b20      	ldr	r3, [pc, #128]	@ (80004fc <MX_TIM2_Init+0xc4>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047e:	4b1f      	ldr	r3, [pc, #124]	@ (80004fc <MX_TIM2_Init+0xc4>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000484:	481d      	ldr	r0, [pc, #116]	@ (80004fc <MX_TIM2_Init+0xc4>)
 8000486:	f004 ffdf 	bl	8005448 <HAL_TIM_PWM_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000490:	f000 f880 	bl	8000594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800049c:	f107 031c 	add.w	r3, r7, #28
 80004a0:	4619      	mov	r1, r3
 80004a2:	4816      	ldr	r0, [pc, #88]	@ (80004fc <MX_TIM2_Init+0xc4>)
 80004a4:	f005 fcce 	bl	8005e44 <HAL_TIMEx_MasterConfigSynchronization>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80004ae:	f000 f871 	bl	8000594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b2:	2360      	movs	r3, #96	@ 0x60
 80004b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	4619      	mov	r1, r3
 80004c8:	480c      	ldr	r0, [pc, #48]	@ (80004fc <MX_TIM2_Init+0xc4>)
 80004ca:	f005 f815 	bl	80054f8 <HAL_TIM_PWM_ConfigChannel>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80004d4:	f000 f85e 	bl	8000594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004d8:	463b      	mov	r3, r7
 80004da:	2204      	movs	r2, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	4807      	ldr	r0, [pc, #28]	@ (80004fc <MX_TIM2_Init+0xc4>)
 80004e0:	f005 f80a 	bl	80054f8 <HAL_TIM_PWM_ConfigChannel>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80004ea:	f000 f853 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004ee:	4803      	ldr	r0, [pc, #12]	@ (80004fc <MX_TIM2_Init+0xc4>)
 80004f0:	f000 f900 	bl	80006f4 <HAL_TIM_MspPostInit>

}
 80004f4:	bf00      	nop
 80004f6:	3728      	adds	r7, #40	@ 0x28
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000210 	.word	0x20000210

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <MX_GPIO_Init+0x90>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	4a1d      	ldr	r2, [pc, #116]	@ (8000590 <MX_GPIO_Init+0x90>)
 800051c:	f043 0320 	orr.w	r3, r3, #32
 8000520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000522:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <MX_GPIO_Init+0x90>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	f003 0320 	and.w	r3, r3, #32
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <MX_GPIO_Init+0x90>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	4a17      	ldr	r2, [pc, #92]	@ (8000590 <MX_GPIO_Init+0x90>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <MX_GPIO_Init+0x90>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <MX_GPIO_Init+0x90>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	4a11      	ldr	r2, [pc, #68]	@ (8000590 <MX_GPIO_Init+0x90>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000552:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_GPIO_Init+0x90>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2101      	movs	r1, #1
 8000562:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000566:	f000 fd1b 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800056a:	2301      	movs	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4619      	mov	r1, r3
 8000580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000584:	f000 fb8a 	bl	8000c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <Error_Handler+0x8>

080005a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <HAL_MspInit+0x44>)
 80005a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005aa:	4a0e      	ldr	r2, [pc, #56]	@ (80005e4 <HAL_MspInit+0x44>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <HAL_MspInit+0x44>)
 80005b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <HAL_MspInit+0x44>)
 80005c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005c2:	4a08      	ldr	r2, [pc, #32]	@ (80005e4 <HAL_MspInit+0x44>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80005ca:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <HAL_MspInit+0x44>)
 80005cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005d6:	f004 f841 	bl	800465c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09a      	sub	sp, #104	@ 0x68
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	2244      	movs	r2, #68	@ 0x44
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f009 fc2f 	bl	8009e6c <memset>
  if(hi2c->Instance==I2C2)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a27      	ldr	r2, [pc, #156]	@ (80006b0 <HAL_I2C_MspInit+0xc8>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d147      	bne.n	80006a8 <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000618:	2380      	movs	r3, #128	@ 0x80
 800061a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800061c:	2300      	movs	r3, #0
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4618      	mov	r0, r3
 8000626:	f004 fd1f 	bl	8005068 <HAL_RCCEx_PeriphCLKConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000630:	f7ff ffb0 	bl	8000594 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <HAL_I2C_MspInit+0xcc>)
 8000636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000638:	4a1e      	ldr	r2, [pc, #120]	@ (80006b4 <HAL_I2C_MspInit+0xcc>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000640:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <HAL_I2C_MspInit+0xcc>)
 8000642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800064c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000652:	2312      	movs	r3, #18
 8000654:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800065e:	2304      	movs	r3, #4
 8000660:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000666:	4619      	mov	r1, r3
 8000668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066c:	f000 fb16 	bl	8000c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000670:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <HAL_I2C_MspInit+0xcc>)
 8000672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000674:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <HAL_I2C_MspInit+0xcc>)
 8000676:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800067a:	6593      	str	r3, [r2, #88]	@ 0x58
 800067c:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <HAL_I2C_MspInit+0xcc>)
 800067e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2021      	movs	r0, #33	@ 0x21
 800068e:	f000 fa5c 	bl	8000b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000692:	2021      	movs	r0, #33	@ 0x21
 8000694:	f000 fa73 	bl	8000b7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	2022      	movs	r0, #34	@ 0x22
 800069e:	f000 fa54 	bl	8000b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80006a2:	2022      	movs	r0, #34	@ 0x22
 80006a4:	f000 fa6b 	bl	8000b7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80006a8:	bf00      	nop
 80006aa:	3768      	adds	r7, #104	@ 0x68
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40005800 	.word	0x40005800
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006c8:	d10b      	bne.n	80006e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <HAL_TIM_PWM_MspInit+0x38>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <HAL_TIM_PWM_MspInit+0x38>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_TIM_PWM_MspInit+0x38>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000714:	d11c      	bne.n	8000750 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <HAL_TIM_MspPostInit+0x64>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	4a0f      	ldr	r2, [pc, #60]	@ (8000758 <HAL_TIM_MspPostInit+0x64>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <HAL_TIM_MspPostInit+0x64>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800072e:	2322      	movs	r3, #34	@ 0x22
 8000730:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800073e:	2301      	movs	r3, #1
 8000740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074c:	f000 faa6 	bl	8000c9c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <NMI_Handler+0x4>

08000764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <MemManage_Handler+0x4>

08000774 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <UsageFault_Handler+0x4>

08000784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b2:	f000 f8af 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007c0:	4802      	ldr	r0, [pc, #8]	@ (80007cc <USB_LP_IRQHandler+0x10>)
 80007c2:	f002 fa96 	bl	8002cf2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000f34 	.word	0x20000f34

080007d0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <I2C2_EV_IRQHandler+0x10>)
 80007d6:	f000 fe1b 	bl	8001410 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200001bc 	.word	0x200001bc

080007e4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80007e8:	4802      	ldr	r0, [pc, #8]	@ (80007f4 <I2C2_ER_IRQHandler+0x10>)
 80007ea:	f000 fe2b 	bl	8001444 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200001bc 	.word	0x200001bc

080007f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <SystemInit+0x20>)
 80007fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000802:	4a05      	ldr	r2, [pc, #20]	@ (8000818 <SystemInit+0x20>)
 8000804:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000808:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800081c:	480d      	ldr	r0, [pc, #52]	@ (8000854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000820:	f7ff ffea 	bl	80007f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	@ (8000858 <LoopForever+0x6>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	@ (800085c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	@ (8000860 <LoopForever+0xe>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	@ (8000868 <LoopForever+0x16>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800084a:	f009 fb17 	bl	8009e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800084e:	f7ff fd4b 	bl	80002e8 <main>

08000852 <LoopForever>:

LoopForever:
    b LoopForever
 8000852:	e7fe      	b.n	8000852 <LoopForever>
  ldr   r0, =_estack
 8000854:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000860:	08009f3c 	.word	0x08009f3c
  ldr r2, =_sbss
 8000864:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000868:	20001430 	.word	0x20001430

0800086c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_2_IRQHandler>

0800086e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000874:	2300      	movs	r3, #0
 8000876:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 f95b 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800087e:	200f      	movs	r0, #15
 8000880:	f000 f80e 	bl	80008a0 <HAL_InitTick>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d002      	beq.n	8000890 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	e001      	b.n	8000894 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000890:	f7ff fe86 	bl	80005a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000894:	79fb      	ldrb	r3, [r7, #7]

}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <HAL_InitTick+0x68>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d022      	beq.n	80008fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <HAL_InitTick+0x6c>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <HAL_InitTick+0x68>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80008c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f966 	bl	8000b9a <HAL_SYSTICK_Config>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10f      	bne.n	80008f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d809      	bhi.n	80008ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008da:	2200      	movs	r2, #0
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	f04f 30ff 	mov.w	r0, #4294967295
 80008e2:	f000 f932 	bl	8000b4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <HAL_InitTick+0x70>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	e007      	b.n	80008fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
 80008f2:	e004      	b.n	80008fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e001      	b.n	80008fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000008 	.word	0x20000008
 800090c:	20000000 	.word	0x20000000
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <HAL_IncTick+0x1c>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <HAL_IncTick+0x20>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4413      	add	r3, r2
 8000922:	4a03      	ldr	r2, [pc, #12]	@ (8000930 <HAL_IncTick+0x1c>)
 8000924:	6013      	str	r3, [r2, #0]
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	2000025c 	.word	0x2000025c
 8000934:	20000008 	.word	0x20000008

08000938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	2000025c 	.word	0x2000025c

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff ffee 	bl	8000938 <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000968:	d004      	beq.n	8000974 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_Delay+0x40>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4413      	add	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000974:	bf00      	nop
 8000976:	f7ff ffdf 	bl	8000938 <HAL_GetTick>
 800097a:	4602      	mov	r2, r0
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	429a      	cmp	r2, r3
 8000984:	d8f7      	bhi.n	8000976 <HAL_Delay+0x26>
  {
  }
}
 8000986:	bf00      	nop
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000008 	.word	0x20000008

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	db0b      	blt.n	8000a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 021f 	and.w	r2, r3, #31
 8000a10:	4907      	ldr	r1, [pc, #28]	@ (8000a30 <__NVIC_EnableIRQ+0x38>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	2001      	movs	r0, #1
 8000a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	@ (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	@ 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f7ff ff8e 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff29 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff40 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff90 	bl	8000a88 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5f 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff33 	bl	80009f8 <__NVIC_EnableIRQ>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffa4 	bl	8000af0 <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d00d      	beq.n	8000be6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2204      	movs	r2, #4
 8000bce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	73fb      	strb	r3, [r7, #15]
 8000be4:	e047      	b.n	8000c76 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f022 020e 	bic.w	r2, r2, #14
 8000bf4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0201 	bic.w	r2, r2, #1
 8000c04:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000c14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	f003 021f 	and.w	r2, r3, #31
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	2101      	movs	r1, #1
 8000c24:	fa01 f202 	lsl.w	r2, r1, r2
 8000c28:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000c32:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d00c      	beq.n	8000c56 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000c4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000c54:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	4798      	blx	r3
    }
  }
  return status;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c8e:	b2db      	uxtb	r3, r3
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000caa:	e15a      	b.n	8000f62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 814c 	beq.w	8000f5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d005      	beq.n	8000cdc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d130      	bne.n	8000d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d12:	2201      	movs	r2, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	f003 0201 	and.w	r2, r3, #1
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d017      	beq.n	8000d7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d123      	bne.n	8000dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	08da      	lsrs	r2, r3, #3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	6939      	ldr	r1, [r7, #16]
 8000dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0203 	and.w	r2, r3, #3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 80a6 	beq.w	8000f5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e10:	4b5b      	ldr	r3, [pc, #364]	@ (8000f80 <HAL_GPIO_Init+0x2e4>)
 8000e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e14:	4a5a      	ldr	r2, [pc, #360]	@ (8000f80 <HAL_GPIO_Init+0x2e4>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e1c:	4b58      	ldr	r3, [pc, #352]	@ (8000f80 <HAL_GPIO_Init+0x2e4>)
 8000e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e28:	4a56      	ldr	r2, [pc, #344]	@ (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e52:	d01f      	beq.n	8000e94 <HAL_GPIO_Init+0x1f8>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a4c      	ldr	r2, [pc, #304]	@ (8000f88 <HAL_GPIO_Init+0x2ec>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d019      	beq.n	8000e90 <HAL_GPIO_Init+0x1f4>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a4b      	ldr	r2, [pc, #300]	@ (8000f8c <HAL_GPIO_Init+0x2f0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d013      	beq.n	8000e8c <HAL_GPIO_Init+0x1f0>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a4a      	ldr	r2, [pc, #296]	@ (8000f90 <HAL_GPIO_Init+0x2f4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d00d      	beq.n	8000e88 <HAL_GPIO_Init+0x1ec>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a49      	ldr	r2, [pc, #292]	@ (8000f94 <HAL_GPIO_Init+0x2f8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d007      	beq.n	8000e84 <HAL_GPIO_Init+0x1e8>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a48      	ldr	r2, [pc, #288]	@ (8000f98 <HAL_GPIO_Init+0x2fc>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d101      	bne.n	8000e80 <HAL_GPIO_Init+0x1e4>
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	e00a      	b.n	8000e96 <HAL_GPIO_Init+0x1fa>
 8000e80:	2306      	movs	r3, #6
 8000e82:	e008      	b.n	8000e96 <HAL_GPIO_Init+0x1fa>
 8000e84:	2304      	movs	r3, #4
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x1fa>
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e004      	b.n	8000e96 <HAL_GPIO_Init+0x1fa>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x1fa>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <HAL_GPIO_Init+0x1fa>
 8000e94:	2300      	movs	r3, #0
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4093      	lsls	r3, r2
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea6:	4937      	ldr	r1, [pc, #220]	@ (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eb4:	4b39      	ldr	r3, [pc, #228]	@ (8000f9c <HAL_GPIO_Init+0x300>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ed8:	4a30      	ldr	r2, [pc, #192]	@ (8000f9c <HAL_GPIO_Init+0x300>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ede:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <HAL_GPIO_Init+0x300>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f02:	4a26      	ldr	r2, [pc, #152]	@ (8000f9c <HAL_GPIO_Init+0x300>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f08:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <HAL_GPIO_Init+0x300>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f9c <HAL_GPIO_Init+0x300>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <HAL_GPIO_Init+0x300>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f56:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <HAL_GPIO_Init+0x300>)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f47f ae9d 	bne.w	8000cac <HAL_GPIO_Init+0x10>
  }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010000 	.word	0x40010000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	48000c00 	.word	0x48000c00
 8000f94:	48001000 	.word	0x48001000
 8000f98:	48001400 	.word	0x48001400
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e08d      	b.n	80010fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d106      	bne.n	8000ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff faf6 	bl	80005e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2224      	movs	r2, #36	@ 0x24
 8001000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d107      	bne.n	800104a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	e006      	b.n	8001058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d108      	bne.n	8001072 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	e007      	b.n	8001082 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691a      	ldr	r2, [r3, #16]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69d9      	ldr	r1, [r3, #28]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1a      	ldr	r2, [r3, #32]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0201 	orr.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2220      	movs	r2, #32
 80010ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4613      	mov	r3, r2
 8001116:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001124:	2b28      	cmp	r3, #40	@ 0x28
 8001126:	f040 8098 	bne.w	800125a <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d105      	bne.n	8001142 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800113c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e08c      	b.n	800125c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001142:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f001 fbee 	bl	8002928 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8001156:	2302      	movs	r3, #2
 8001158:	e080      	b.n	800125c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b2a      	cmp	r3, #42	@ 0x2a
 800116c:	d12a      	bne.n	80011c4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800116e:	2102      	movs	r1, #2
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f001 fbd9 	bl	8002928 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001184:	d11e      	bne.n	80011c4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001194:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800119a:	2b00      	cmp	r3, #0
 800119c:	d012      	beq.n	80011c4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011a2:	4a30      	ldr	r2, [pc, #192]	@ (8001264 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fd01 	bl	8000bb2 <HAL_DMA_Abort_IT>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80011c0:	4610      	mov	r0, r2
 80011c2:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2229      	movs	r2, #41	@ 0x29
 80011c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2220      	movs	r2, #32
 80011d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011e8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	88fa      	ldrh	r2, [r7, #6]
 80011f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4a17      	ldr	r2, [pc, #92]	@ (8001268 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 800120a:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b08      	cmp	r3, #8
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	0c1b      	lsrs	r3, r3, #16
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d106      	bne.n	8001244 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2208      	movs	r2, #8
 8001242:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800124c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f001 fae5 	bl	8002820 <I2C_Enable_IRQ>

    return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
  }
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0800277f 	.word	0x0800277f
 8001268:	080015a7 	.word	0x080015a7

0800126c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	4613      	mov	r3, r2
 800127a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001288:	2b28      	cmp	r3, #40	@ 0x28
 800128a:	f040 8098 	bne.w	80013be <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d105      	bne.n	80012a6 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e08c      	b.n	80013c0 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80012a6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f001 fb3c 	bl	8002928 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e080      	b.n	80013c0 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b29      	cmp	r3, #41	@ 0x29
 80012d0:	d12a      	bne.n	8001328 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80012d2:	2101      	movs	r1, #1
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f001 fb27 	bl	8002928 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80012e8:	d11e      	bne.n	8001328 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80012f8:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d012      	beq.n	8001328 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001306:	4a30      	ldr	r2, [pc, #192]	@ (80013c8 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001308:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fc4f 	bl	8000bb2 <HAL_DMA_Abort_IT>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800131e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001324:	4610      	mov	r0, r2
 8001326:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	222a      	movs	r2, #42	@ 0x2a
 800132c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2220      	movs	r2, #32
 8001334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800134c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	88fa      	ldrh	r2, [r7, #6]
 8001358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800135e:	b29a      	uxth	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b08      	cmp	r3, #8
 800137c:	bf0c      	ite	eq
 800137e:	2301      	moveq	r3, #1
 8001380:	2300      	movne	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	0c1b      	lsrs	r3, r3, #16
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2208      	movs	r2, #8
 80013a6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80013b0:	f248 0102 	movw	r1, #32770	@ 0x8002
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f001 fa33 	bl	8002820 <I2C_Enable_IRQ>

    return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
  }
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0800277f 	.word	0x0800277f
 80013cc:	080015a7 	.word	0x080015a7

080013d0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b20      	cmp	r3, #32
 80013e2:	d10d      	bne.n	8001400 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2228      	movs	r2, #40	@ 0x28
 80013e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a07      	ldr	r2, [pc, #28]	@ (800140c <HAL_I2C_EnableListen_IT+0x3c>)
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80013f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f001 fa12 	bl	8002820 <I2C_Enable_IRQ>

    return HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e000      	b.n	8001402 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001400:	2302      	movs	r3, #2
  }
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	080015a7 	.word	0x080015a7

08001410 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4798      	blx	r3
  }
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d010      	beq.n	800148a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	09db      	lsrs	r3, r3, #7
 800146c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00a      	beq.n	800148a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001478:	f043 0201 	orr.w	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	0a9b      	lsrs	r3, r3, #10
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d010      	beq.n	80014b8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	09db      	lsrs	r3, r3, #7
 800149a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00a      	beq.n	80014b8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f043 0208 	orr.w	r2, r3, #8
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	0a5b      	lsrs	r3, r3, #9
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d010      	beq.n	80014e6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	09db      	lsrs	r3, r3, #7
 80014c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00a      	beq.n	80014e6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d4:	f043 0202 	orr.w	r2, r3, #2
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 030b 	and.w	r3, r3, #11
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80014f6:	68f9      	ldr	r1, [r7, #12]
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f001 f805 	bl	8002508 <I2C_ITError>
  }
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <I2C_Slave_ISR_IT+0x24>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e0ed      	b.n	80017a6 <I2C_Slave_ISR_IT+0x200>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	095b      	lsrs	r3, r3, #5
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00a      	beq.n	80015f4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	095b      	lsrs	r3, r3, #5
 80015e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80015ea:	6939      	ldr	r1, [r7, #16]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 fdcb 	bl	8002188 <I2C_ITSlaveCplt>
 80015f2:	e0d3      	b.n	800179c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d04d      	beq.n	800169c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001608:	2b00      	cmp	r3, #0
 800160a:	d047      	beq.n	800169c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001610:	b29b      	uxth	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d128      	bne.n	8001668 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b28      	cmp	r3, #40	@ 0x28
 8001620:	d108      	bne.n	8001634 <I2C_Slave_ISR_IT+0x8e>
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001628:	d104      	bne.n	8001634 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800162a:	6939      	ldr	r1, [r7, #16]
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 ff15 	bl	800245c <I2C_ITListenCplt>
 8001632:	e032      	b.n	800169a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b29      	cmp	r3, #41	@ 0x29
 800163e:	d10e      	bne.n	800165e <I2C_Slave_ISR_IT+0xb8>
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001646:	d00a      	beq.n	800165e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2210      	movs	r2, #16
 800164e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f001 f870 	bl	8002736 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 fc6e 	bl	8001f38 <I2C_ITSlaveSeqCplt>
 800165c:	e01d      	b.n	800169a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2210      	movs	r2, #16
 8001664:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001666:	e096      	b.n	8001796 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2210      	movs	r2, #16
 800166e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001674:	f043 0204 	orr.w	r2, r3, #4
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <I2C_Slave_ISR_IT+0xe6>
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001688:	f040 8085 	bne.w	8001796 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001690:	4619      	mov	r1, r3
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 ff38 	bl	8002508 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001698:	e07d      	b.n	8001796 <I2C_Slave_ISR_IT+0x1f0>
 800169a:	e07c      	b.n	8001796 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d030      	beq.n	800170a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d02a      	beq.n	800170a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d018      	beq.n	80016f0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d14f      	bne.n	800179a <I2C_Slave_ISR_IT+0x1f4>
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001700:	d04b      	beq.n	800179a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 fc18 	bl	8001f38 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001708:	e047      	b.n	800179a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800171e:	2b00      	cmp	r3, #0
 8001720:	d004      	beq.n	800172c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001722:	6939      	ldr	r1, [r7, #16]
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 fb46 	bl	8001db6 <I2C_ITAddrCplt>
 800172a:	e037      	b.n	800179c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d031      	beq.n	800179c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001740:	2b00      	cmp	r3, #0
 8001742:	d02b      	beq.n	800179c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d018      	beq.n	8001780 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001768:	b29b      	uxth	r3, r3
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001776:	3b01      	subs	r3, #1
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800177e:	e00d      	b.n	800179c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001786:	d002      	beq.n	800178e <I2C_Slave_ISR_IT+0x1e8>
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 fbd2 	bl	8001f38 <I2C_ITSlaveSeqCplt>
 8001794:	e002      	b.n	800179c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8001796:	bf00      	nop
 8001798:	e000      	b.n	800179c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800179a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b088      	sub	sp, #32
 80017b2:	af02      	add	r7, sp, #8
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <I2C_Master_ISR_DMA+0x1a>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e0e1      	b.n	800198c <I2C_Master_ISR_DMA+0x1de>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d017      	beq.n	800180c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d011      	beq.n	800180c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2210      	movs	r2, #16
 80017ee:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	f043 0204 	orr.w	r2, r3, #4
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80017fc:	2120      	movs	r1, #32
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f001 f80e 	bl	8002820 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 ff96 	bl	8002736 <I2C_Flush_TXDR>
 800180a:	e0ba      	b.n	8001982 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	09db      	lsrs	r3, r3, #7
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d072      	beq.n	80018fe <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001820:	2b00      	cmp	r3, #0
 8001822:	d06c      	beq.n	80018fe <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001832:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001838:	b29b      	uxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d04e      	beq.n	80018dc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	b29b      	uxth	r3, r3
 8001846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800184a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001850:	b29b      	uxth	r3, r3
 8001852:	2bff      	cmp	r3, #255	@ 0xff
 8001854:	d906      	bls.n	8001864 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	22ff      	movs	r2, #255	@ 0xff
 800185a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800185c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	e010      	b.n	8001886 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001872:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001876:	d003      	beq.n	8001880 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e002      	b.n	8001886 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001880:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001884:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800188a:	b2da      	uxtb	r2, r3
 800188c:	8a79      	ldrh	r1, [r7, #18]
 800188e:	2300      	movs	r3, #0
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 ff91 	bl	80027bc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b22      	cmp	r3, #34	@ 0x22
 80018b6:	d108      	bne.n	80018ca <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018c6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018c8:	e05b      	b.n	8001982 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018da:	e052      	b.n	8001982 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80018ea:	d003      	beq.n	80018f4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 fae6 	bl	8001ebe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80018f2:	e046      	b.n	8001982 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80018f4:	2140      	movs	r1, #64	@ 0x40
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 fe06 	bl	8002508 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80018fc:	e041      	b.n	8001982 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	099b      	lsrs	r3, r3, #6
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d029      	beq.n	800195e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001912:	2b00      	cmp	r3, #0
 8001914:	d023      	beq.n	800195e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191a:	b29b      	uxth	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d119      	bne.n	8001954 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800192e:	d027      	beq.n	8001980 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001934:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001938:	d108      	bne.n	800194c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001948:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800194a:	e019      	b.n	8001980 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 fab6 	bl	8001ebe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001952:	e015      	b.n	8001980 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001954:	2140      	movs	r1, #64	@ 0x40
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fdd6 	bl	8002508 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800195c:	e010      	b.n	8001980 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	095b      	lsrs	r3, r3, #5
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00b      	beq.n	8001982 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	095b      	lsrs	r3, r3, #5
 800196e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 fb3b 	bl	8001ff4 <I2C_ITMasterCplt>
 800197e:	e000      	b.n	8001982 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001980:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80019a0:	4b92      	ldr	r3, [pc, #584]	@ (8001bec <I2C_Mem_ISR_DMA+0x258>)
 80019a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <I2C_Mem_ISR_DMA+0x1e>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e118      	b.n	8001be4 <I2C_Mem_ISR_DMA+0x250>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d017      	beq.n	80019f6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d011      	beq.n	80019f6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2210      	movs	r2, #16
 80019d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	f043 0204 	orr.w	r2, r3, #4
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80019e6:	2120      	movs	r1, #32
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 ff19 	bl	8002820 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fea1 	bl	8002736 <I2C_Flush_TXDR>
 80019f4:	e0f1      	b.n	8001bda <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00f      	beq.n	8001a22 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a16:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a20:	e0db      	b.n	8001bda <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	09db      	lsrs	r3, r3, #7
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d060      	beq.n	8001af0 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	099b      	lsrs	r3, r3, #6
 8001a32:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d05a      	beq.n	8001af0 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 ff73 	bl	8002928 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001a42:	2110      	movs	r1, #16
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 feeb 	bl	8002820 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d048      	beq.n	8001ae6 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	2bff      	cmp	r3, #255	@ 0xff
 8001a5c:	d910      	bls.n	8001a80 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	22ff      	movs	r2, #255	@ 0xff
 8001a62:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 fe9f 	bl	80027bc <I2C_TransferConfig>
 8001a7e:	e011      	b.n	8001aa4 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	b299      	uxth	r1, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	2300      	movs	r3, #0
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fe8c 	bl	80027bc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b22      	cmp	r3, #34	@ 0x22
 8001ac0:	d108      	bne.n	8001ad4 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ad0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001ad2:	e082      	b.n	8001bda <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ae2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001ae4:	e079      	b.n	8001bda <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ae6:	2140      	movs	r1, #64	@ 0x40
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fd0d 	bl	8002508 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001aee:	e074      	b.n	8001bda <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d05e      	beq.n	8001bba <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d058      	beq.n	8001bba <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b08:	2101      	movs	r1, #1
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 ff0c 	bl	8002928 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001b10:	2110      	movs	r1, #16
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 fe84 	bl	8002820 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b22      	cmp	r3, #34	@ 0x22
 8001b22:	d101      	bne.n	8001b28 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8001b24:	4b32      	ldr	r3, [pc, #200]	@ (8001bf0 <I2C_Mem_ISR_DMA+0x25c>)
 8001b26:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2bff      	cmp	r3, #255	@ 0xff
 8001b30:	d910      	bls.n	8001b54 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	22ff      	movs	r2, #255	@ 0xff
 8001b36:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fe35 	bl	80027bc <I2C_TransferConfig>
 8001b52:	e011      	b.n	8001b78 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	b299      	uxth	r1, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 fe22 	bl	80027bc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b22      	cmp	r3, #34	@ 0x22
 8001b94:	d108      	bne.n	8001ba8 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ba4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ba6:	e018      	b.n	8001bda <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bb6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bb8:	e00f      	b.n	8001bda <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	095b      	lsrs	r3, r3, #5
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	095b      	lsrs	r3, r3, #5
 8001bca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fa0d 	bl	8001ff4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	80002000 	.word	0x80002000
 8001bf0:	80002400 	.word	0x80002400

08001bf4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c04:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <I2C_Slave_ISR_DMA+0x24>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e0ca      	b.n	8001dae <I2C_Slave_ISR_DMA+0x1ba>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00a      	beq.n	8001c42 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 faa4 	bl	8002188 <I2C_ITSlaveCplt>
 8001c40:	e0b0      	b.n	8001da4 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 809a 	beq.w	8001d84 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8093 	beq.w	8001d84 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0b9b      	lsrs	r3, r3, #14
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d105      	bne.n	8001c76 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0bdb      	lsrs	r3, r3, #15
 8001c6e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d07f      	beq.n	8001d76 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00d      	beq.n	8001c9a <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0bdb      	lsrs	r3, r3, #15
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00d      	beq.n	8001cbe <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0b9b      	lsrs	r3, r3, #14
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d128      	bne.n	8001d16 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b28      	cmp	r3, #40	@ 0x28
 8001cce:	d108      	bne.n	8001ce2 <I2C_Slave_ISR_DMA+0xee>
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cd6:	d104      	bne.n	8001ce2 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 fbbe 	bl	800245c <I2C_ITListenCplt>
 8001ce0:	e048      	b.n	8001d74 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b29      	cmp	r3, #41	@ 0x29
 8001cec:	d10e      	bne.n	8001d0c <I2C_Slave_ISR_DMA+0x118>
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cf4:	d00a      	beq.n	8001d0c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fd19 	bl	8002736 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f917 	bl	8001f38 <I2C_ITSlaveSeqCplt>
 8001d0a:	e033      	b.n	8001d74 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2210      	movs	r2, #16
 8001d12:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001d14:	e034      	b.n	8001d80 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2210      	movs	r2, #16
 8001d1c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	f043 0204 	orr.w	r2, r3, #4
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d30:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <I2C_Slave_ISR_DMA+0x14c>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d3e:	d11f      	bne.n	8001d80 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b21      	cmp	r3, #33	@ 0x21
 8001d44:	d002      	beq.n	8001d4c <I2C_Slave_ISR_DMA+0x158>
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	2b29      	cmp	r3, #41	@ 0x29
 8001d4a:	d103      	bne.n	8001d54 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2221      	movs	r2, #33	@ 0x21
 8001d50:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d52:	e008      	b.n	8001d66 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b22      	cmp	r3, #34	@ 0x22
 8001d58:	d002      	beq.n	8001d60 <I2C_Slave_ISR_DMA+0x16c>
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
 8001d5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d5e:	d102      	bne.n	8001d66 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2222      	movs	r2, #34	@ 0x22
 8001d64:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fbcb 	bl	8002508 <I2C_ITError>
      if (treatdmanack == 1U)
 8001d72:	e005      	b.n	8001d80 <I2C_Slave_ISR_DMA+0x18c>
 8001d74:	e004      	b.n	8001d80 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001d7e:	e011      	b.n	8001da4 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8001d80:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001d82:	e00f      	b.n	8001da4 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	08db      	lsrs	r3, r3, #3
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f809 	bl	8001db6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001dcc:	2b28      	cmp	r3, #40	@ 0x28
 8001dce:	d16a      	bne.n	8001ea6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	0c1b      	lsrs	r3, r3, #16
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	0c1b      	lsrs	r3, r3, #16
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001dee:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dfc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001e0a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d138      	bne.n	8001e86 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001e14:	897b      	ldrh	r3, [r7, #10]
 8001e16:	09db      	lsrs	r3, r3, #7
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	4053      	eors	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	f003 0306 	and.w	r3, r3, #6
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11c      	bne.n	8001e62 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001e28:	897b      	ldrh	r3, [r7, #10]
 8001e2a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d13b      	bne.n	8001eb6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e54:	89ba      	ldrh	r2, [r7, #12]
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe f9fa 	bl	8000254 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001e60:	e029      	b.n	8001eb6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001e62:	893b      	ldrh	r3, [r7, #8]
 8001e64:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fd5c 	bl	8002928 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e78:	89ba      	ldrh	r2, [r7, #12]
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe f9e8 	bl	8000254 <HAL_I2C_AddrCallback>
}
 8001e84:	e017      	b.n	8001eb6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fd4c 	bl	8002928 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e98:	89ba      	ldrh	r2, [r7, #12]
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe f9d8 	bl	8000254 <HAL_I2C_AddrCallback>
}
 8001ea4:	e007      	b.n	8001eb6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2208      	movs	r2, #8
 8001eac:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b21      	cmp	r3, #33	@ 0x21
 8001ed8:	d115      	bne.n	8001f06 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2211      	movs	r2, #17
 8001ee6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001eee:	2101      	movs	r1, #1
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fd19 	bl	8002928 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fb01 	bl	8001506 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f04:	e014      	b.n	8001f30 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2212      	movs	r2, #18
 8001f12:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fd03 	bl	8002928 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff faf5 	bl	800151a <HAL_I2C_MasterRxCpltCallback>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	0b9b      	lsrs	r3, r3, #14
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e00d      	b.n	8001f8a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	0bdb      	lsrs	r3, r3, #15
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f88:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b29      	cmp	r3, #41	@ 0x29
 8001f94:	d112      	bne.n	8001fbc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2228      	movs	r2, #40	@ 0x28
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2221      	movs	r2, #33	@ 0x21
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fcbe 	bl	8002928 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff faba 	bl	800152e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001fba:	e017      	b.n	8001fec <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fc6:	d111      	bne.n	8001fec <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2228      	movs	r2, #40	@ 0x28
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2222      	movs	r2, #34	@ 0x22
 8001fd4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fca5 	bl	8002928 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff faab 	bl	8001542 <HAL_I2C_SlaveRxCpltCallback>
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2220      	movs	r2, #32
 8002008:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b21      	cmp	r3, #33	@ 0x21
 8002014:	d107      	bne.n	8002026 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002016:	2101      	movs	r1, #1
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fc85 	bl	8002928 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2211      	movs	r2, #17
 8002022:	631a      	str	r2, [r3, #48]	@ 0x30
 8002024:	e00c      	b.n	8002040 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b22      	cmp	r3, #34	@ 0x22
 8002030:	d106      	bne.n	8002040 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002032:	2102      	movs	r1, #2
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fc77 	bl	8002928 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2212      	movs	r2, #18
 800203e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6859      	ldr	r1, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b4d      	ldr	r3, [pc, #308]	@ (8002180 <I2C_ITMasterCplt+0x18c>)
 800204c:	400b      	ands	r3, r1
 800204e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4a      	ldr	r2, [pc, #296]	@ (8002184 <I2C_ITMasterCplt+0x190>)
 800205a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2210      	movs	r2, #16
 800206e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002074:	f043 0204 	orr.w	r2, r3, #4
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b60      	cmp	r3, #96	@ 0x60
 8002086:	d10b      	bne.n	80020a0 <I2C_ITMasterCplt+0xac>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	b2db      	uxtb	r3, r3
 800209c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800209e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fb48 	bl	8002736 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020aa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b60      	cmp	r3, #96	@ 0x60
 80020b6:	d002      	beq.n	80020be <I2C_ITMasterCplt+0xca>
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	4619      	mov	r1, r3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fa1f 	bl	8002508 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80020ca:	e054      	b.n	8002176 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b21      	cmp	r3, #33	@ 0x21
 80020d6:	d124      	bne.n	8002122 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b40      	cmp	r3, #64	@ 0x40
 80020f0:	d10b      	bne.n	800210a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fa27 	bl	8001556 <HAL_I2C_MemTxCpltCallback>
}
 8002108:	e035      	b.n	8002176 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff f9f3 	bl	8001506 <HAL_I2C_MasterTxCpltCallback>
}
 8002120:	e029      	b.n	8002176 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b22      	cmp	r3, #34	@ 0x22
 800212c:	d123      	bne.n	8002176 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b40      	cmp	r3, #64	@ 0x40
 8002146:	d10b      	bne.n	8002160 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff fa06 	bl	800156a <HAL_I2C_MemRxCpltCallback>
}
 800215e:	e00a      	b.n	8002176 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff f9d2 	bl	800151a <HAL_I2C_MasterRxCpltCallback>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	fe00e800 	.word	0xfe00e800
 8002184:	ffff0000 	.word	0xffff0000

08002188 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021aa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2220      	movs	r2, #32
 80021b2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021b4:	7afb      	ldrb	r3, [r7, #11]
 80021b6:	2b21      	cmp	r3, #33	@ 0x21
 80021b8:	d002      	beq.n	80021c0 <I2C_ITSlaveCplt+0x38>
 80021ba:	7afb      	ldrb	r3, [r7, #11]
 80021bc:	2b29      	cmp	r3, #41	@ 0x29
 80021be:	d108      	bne.n	80021d2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80021c0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fbaf 	bl	8002928 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2221      	movs	r2, #33	@ 0x21
 80021ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80021d0:	e019      	b.n	8002206 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80021d2:	7afb      	ldrb	r3, [r7, #11]
 80021d4:	2b22      	cmp	r3, #34	@ 0x22
 80021d6:	d002      	beq.n	80021de <I2C_ITSlaveCplt+0x56>
 80021d8:	7afb      	ldrb	r3, [r7, #11]
 80021da:	2b2a      	cmp	r3, #42	@ 0x2a
 80021dc:	d108      	bne.n	80021f0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80021de:	f248 0102 	movw	r1, #32770	@ 0x8002
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fba0 	bl	8002928 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2222      	movs	r2, #34	@ 0x22
 80021ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80021ee:	e00a      	b.n	8002206 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80021f0:	7afb      	ldrb	r3, [r7, #11]
 80021f2:	2b28      	cmp	r3, #40	@ 0x28
 80021f4:	d107      	bne.n	8002206 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80021f6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fb94 	bl	8002928 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002214:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b8c      	ldr	r3, [pc, #560]	@ (8002454 <I2C_ITSlaveCplt+0x2cc>)
 8002222:	400b      	ands	r3, r1
 8002224:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fa85 	bl	8002736 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	0b9b      	lsrs	r3, r3, #14
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002246:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	b29a      	uxth	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800225e:	e018      	b.n	8002292 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	0bdb      	lsrs	r3, r3, #15
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d012      	beq.n	8002292 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800227a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	b29a      	uxth	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d020      	beq.n	80022e0 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00c      	beq.n	80022e0 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	f043 0204 	orr.w	r2, r3, #4
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d04a      	beq.n	8002398 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800230a:	2b00      	cmp	r3, #0
 800230c:	d044      	beq.n	8002398 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d128      	bne.n	800236a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b28      	cmp	r3, #40	@ 0x28
 8002322:	d108      	bne.n	8002336 <I2C_ITSlaveCplt+0x1ae>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800232a:	d104      	bne.n	8002336 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800232c:	6979      	ldr	r1, [r7, #20]
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f894 	bl	800245c <I2C_ITListenCplt>
 8002334:	e030      	b.n	8002398 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b29      	cmp	r3, #41	@ 0x29
 8002340:	d10e      	bne.n	8002360 <I2C_ITSlaveCplt+0x1d8>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002348:	d00a      	beq.n	8002360 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2210      	movs	r2, #16
 8002350:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f9ef 	bl	8002736 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff fded 	bl	8001f38 <I2C_ITSlaveSeqCplt>
 800235e:	e01b      	b.n	8002398 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2210      	movs	r2, #16
 8002366:	61da      	str	r2, [r3, #28]
 8002368:	e016      	b.n	8002398 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2210      	movs	r2, #16
 8002370:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f043 0204 	orr.w	r2, r3, #4
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <I2C_ITSlaveCplt+0x204>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800238a:	d105      	bne.n	8002398 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8b8 	bl	8002508 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d010      	beq.n	80023d0 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4619      	mov	r1, r3
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f8a7 	bl	8002508 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b28      	cmp	r3, #40	@ 0x28
 80023c4:	d141      	bne.n	800244a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80023c6:	6979      	ldr	r1, [r7, #20]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f847 	bl	800245c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023ce:	e03c      	b.n	800244a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023d8:	d014      	beq.n	8002404 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fdac 	bl	8001f38 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002458 <I2C_ITSlaveCplt+0x2d0>)
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fd ff0b 	bl	8000218 <HAL_I2C_ListenCpltCallback>
}
 8002402:	e022      	b.n	800244a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b22      	cmp	r3, #34	@ 0x22
 800240e:	d10e      	bne.n	800242e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff f88b 	bl	8001542 <HAL_I2C_SlaveRxCpltCallback>
}
 800242c:	e00d      	b.n	800244a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff f872 	bl	800152e <HAL_I2C_SlaveTxCpltCallback>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	fe00e800 	.word	0xfe00e800
 8002458:	ffff0000 	.word	0xffff0000

0800245c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a26      	ldr	r2, [pc, #152]	@ (8002504 <I2C_ITListenCplt+0xa8>)
 800246a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d022      	beq.n	80024da <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d012      	beq.n	80024da <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	f043 0204 	orr.w	r2, r3, #4
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80024da:	f248 0103 	movw	r1, #32771	@ 0x8003
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa22 	bl	8002928 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2210      	movs	r2, #16
 80024ea:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7fd fe8f 	bl	8000218 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	ffff0000 	.word	0xffff0000

08002508 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002518:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a6d      	ldr	r2, [pc, #436]	@ (80026dc <I2C_ITError+0x1d4>)
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b28      	cmp	r3, #40	@ 0x28
 800253e:	d005      	beq.n	800254c <I2C_ITError+0x44>
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b29      	cmp	r3, #41	@ 0x29
 8002544:	d002      	beq.n	800254c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2b2a      	cmp	r3, #42	@ 0x2a
 800254a:	d10b      	bne.n	8002564 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800254c:	2103      	movs	r1, #3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f9ea 	bl	8002928 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2228      	movs	r2, #40	@ 0x28
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a60      	ldr	r2, [pc, #384]	@ (80026e0 <I2C_ITError+0x1d8>)
 8002560:	635a      	str	r2, [r3, #52]	@ 0x34
 8002562:	e030      	b.n	80025c6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002564:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f9dd 	bl	8002928 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8e1 	bl	8002736 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b60      	cmp	r3, #96	@ 0x60
 800257e:	d01f      	beq.n	80025c0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b20      	cmp	r3, #32
 8002594:	d114      	bne.n	80025c0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d109      	bne.n	80025b8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2210      	movs	r2, #16
 80025aa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b0:	f043 0204 	orr.w	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2220      	movs	r2, #32
 80025be:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d039      	beq.n	8002648 <I2C_ITError+0x140>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b11      	cmp	r3, #17
 80025d8:	d002      	beq.n	80025e0 <I2C_ITError+0xd8>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b21      	cmp	r3, #33	@ 0x21
 80025de:	d133      	bne.n	8002648 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025ee:	d107      	bne.n	8002600 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80025fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fb3b 	bl	8000c80 <HAL_DMA_GetState>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d017      	beq.n	8002640 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002614:	4a33      	ldr	r2, [pc, #204]	@ (80026e4 <I2C_ITError+0x1dc>)
 8002616:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fac4 	bl	8000bb2 <HAL_DMA_Abort_IT>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d04d      	beq.n	80026cc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800263a:	4610      	mov	r0, r2
 800263c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800263e:	e045      	b.n	80026cc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f851 	bl	80026e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002646:	e041      	b.n	80026cc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d039      	beq.n	80026c4 <I2C_ITError+0x1bc>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b12      	cmp	r3, #18
 8002654:	d002      	beq.n	800265c <I2C_ITError+0x154>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b22      	cmp	r3, #34	@ 0x22
 800265a:	d133      	bne.n	80026c4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800266a:	d107      	bne.n	800267c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800267a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fafd 	bl	8000c80 <HAL_DMA_GetState>
 8002686:	4603      	mov	r3, r0
 8002688:	2b01      	cmp	r3, #1
 800268a:	d017      	beq.n	80026bc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <I2C_ITError+0x1dc>)
 8002692:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe fa86 	bl	8000bb2 <HAL_DMA_Abort_IT>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d011      	beq.n	80026d0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026b6:	4610      	mov	r0, r2
 80026b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026ba:	e009      	b.n	80026d0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f813 	bl	80026e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026c2:	e005      	b.n	80026d0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f80f 	bl	80026e8 <I2C_TreatErrorCallback>
  }
}
 80026ca:	e002      	b.n	80026d2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026cc:	bf00      	nop
 80026ce:	e000      	b.n	80026d2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026d0:	bf00      	nop
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	ffff0000 	.word	0xffff0000
 80026e0:	080015a7 	.word	0x080015a7
 80026e4:	0800277f 	.word	0x0800277f

080026e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b60      	cmp	r3, #96	@ 0x60
 80026fa:	d10e      	bne.n	800271a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe ff3d 	bl	8001592 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002718:	e009      	b.n	800272e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7fe ff28 	bl	800157e <HAL_I2C_ErrorCallback>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b02      	cmp	r3, #2
 800274a:	d103      	bne.n	8002754 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d007      	beq.n	8002772 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	619a      	str	r2, [r3, #24]
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002798:	2200      	movs	r2, #0
 800279a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a8:	2200      	movs	r2, #0
 80027aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff ff9b 	bl	80026e8 <I2C_TreatErrorCallback>
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	817b      	strh	r3, [r7, #10]
 80027ca:	4613      	mov	r3, r2
 80027cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027d4:	7a7b      	ldrb	r3, [r7, #9]
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	0d5b      	lsrs	r3, r3, #21
 80027f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80027fa:	4b08      	ldr	r3, [pc, #32]	@ (800281c <I2C_TransferConfig+0x60>)
 80027fc:	430b      	orrs	r3, r1
 80027fe:	43db      	mvns	r3, r3
 8002800:	ea02 0103 	and.w	r1, r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	03ff63ff 	.word	0x03ff63ff

08002820 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002834:	4a39      	ldr	r2, [pc, #228]	@ (800291c <I2C_Enable_IRQ+0xfc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d032      	beq.n	80028a0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800283e:	4a38      	ldr	r2, [pc, #224]	@ (8002920 <I2C_Enable_IRQ+0x100>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d02d      	beq.n	80028a0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002848:	4a36      	ldr	r2, [pc, #216]	@ (8002924 <I2C_Enable_IRQ+0x104>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d028      	beq.n	80028a0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800284e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002852:	2b00      	cmp	r3, #0
 8002854:	da03      	bge.n	800285e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800285c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800286e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002880:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	2b10      	cmp	r3, #16
 8002886:	d103      	bne.n	8002890 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800288e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	2b20      	cmp	r3, #32
 8002894:	d133      	bne.n	80028fe <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f043 0320 	orr.w	r3, r3, #32
 800289c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800289e:	e02e      	b.n	80028fe <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80028a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	da03      	bge.n	80028b0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80028ae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80028c0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80028d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d103      	bne.n	80028e2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80028e0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d103      	bne.n	80028f0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80028ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80028f0:	887b      	ldrh	r3, [r7, #2]
 80028f2:	2b40      	cmp	r3, #64	@ 0x40
 80028f4:	d103      	bne.n	80028fe <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
}
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	080017af 	.word	0x080017af
 8002920:	08001bf5 	.word	0x08001bf5
 8002924:	08001995 	.word	0x08001995

08002928 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002938:	887b      	ldrh	r3, [r7, #2]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00f      	beq.n	8002962 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002948:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002956:	2b28      	cmp	r3, #40	@ 0x28
 8002958:	d003      	beq.n	8002962 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002960:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00f      	beq.n	800298c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002972:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002980:	2b28      	cmp	r3, #40	@ 0x28
 8002982:	d003      	beq.n	800298c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800298a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800298c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002990:	2b00      	cmp	r3, #0
 8002992:	da03      	bge.n	800299c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800299a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800299c:	887b      	ldrh	r3, [r7, #2]
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d103      	bne.n	80029aa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80029aa:	887b      	ldrh	r3, [r7, #2]
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d103      	bne.n	80029b8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f043 0320 	orr.w	r3, r3, #32
 80029b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	2b40      	cmp	r3, #64	@ 0x40
 80029bc:	d103      	bne.n	80029c6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	43da      	mvns	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	400a      	ands	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d138      	bne.n	8002a6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e032      	b.n	8002a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	@ 0x24
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
  }
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d139      	bne.n	8002b04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e033      	b.n	8002b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2224      	movs	r2, #36	@ 0x24
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002acc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e000      	b.n	8002b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b04:	2302      	movs	r3, #2
  }
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0c0      	b.n	8002ca6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f006 fe93 	bl	8009864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2203      	movs	r2, #3
 8002b42:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fa13 	bl	8005f76 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]
 8002b54:	e03e      	b.n	8002bd4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	3311      	adds	r3, #17
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	3310      	adds	r3, #16
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3313      	adds	r3, #19
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3320      	adds	r3, #32
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3324      	adds	r3, #36	@ 0x24
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	791b      	ldrb	r3, [r3, #4]
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d3bb      	bcc.n	8002b56 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	e044      	b.n	8002c6e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	440b      	add	r3, r1
 8002c08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	791b      	ldrb	r3, [r3, #4]
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3b5      	bcc.n	8002be4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c84:	f003 f992 	bl	8005fac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7a9b      	ldrb	r3, [r3, #10]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f001 fc0e 	bl	80044c0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_PCD_Start+0x16>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e012      	b.n	8002cea <HAL_PCD_Start+0x3c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 f939 	bl	8005f48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f004 ff16 	bl	8007b0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 ff1b 	bl	8007b3a <USB_ReadInterrupts>
 8002d04:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fb06 	bl	8003322 <PCD_EP_ISR_Handler>

    return;
 8002d16:	e110      	b.n	8002f3a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d013      	beq.n	8002d4a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d34:	b292      	uxth	r2, r2
 8002d36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f006 fe23 	bl	8009986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d40:	2100      	movs	r1, #0
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8fc 	bl	8002f40 <HAL_PCD_SetAddress>

    return;
 8002d48:	e0f7      	b.n	8002f3a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00c      	beq.n	8002d6e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d66:	b292      	uxth	r2, r2
 8002d68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d6c:	e0e5      	b.n	8002f3a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00c      	beq.n	8002d92 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d8a:	b292      	uxth	r2, r2
 8002d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d90:	e0d3      	b.n	8002f3a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d034      	beq.n	8002e06 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0204 	bic.w	r2, r2, #4
 8002dae:	b292      	uxth	r2, r2
 8002db0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0208 	bic.w	r2, r2, #8
 8002dc6:	b292      	uxth	r2, r2
 8002dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dde:	2100      	movs	r1, #0
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f006 ffc3 	bl	8009d6c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f006 fe06 	bl	80099f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e04:	e099      	b.n	8002f3a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d027      	beq.n	8002e60 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0208 	orr.w	r2, r2, #8
 8002e22:	b292      	uxth	r2, r2
 8002e24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e3a:	b292      	uxth	r2, r2
 8002e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0204 	orr.w	r2, r2, #4
 8002e52:	b292      	uxth	r2, r2
 8002e54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f006 fdb3 	bl	80099c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e5e:	e06c      	b.n	8002f3a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d040      	beq.n	8002eec <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d12b      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0204 	orr.w	r2, r2, #4
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0208 	orr.w	r2, r2, #8
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	089b      	lsrs	r3, r3, #2
 8002ed0:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002eda:	2101      	movs	r1, #1
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f006 ff45 	bl	8009d6c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002ee2:	e02a      	b.n	8002f3a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f006 fd6d 	bl	80099c4 <HAL_PCD_SuspendCallback>
    return;
 8002eea:	e026      	b.n	8002f3a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00f      	beq.n	8002f16 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f006 fd2b 	bl	800996a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f14:	e011      	b.n	8002f3a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00c      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f32:	b292      	uxth	r2, r2
 8002f34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f38:	bf00      	nop
  }
}
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_PCD_SetAddress+0x1a>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e012      	b.n	8002f80 <HAL_PCD_SetAddress+0x40>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f004 fdb7 	bl	8007ae4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	70fb      	strb	r3, [r7, #3]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	803b      	strh	r3, [r7, #0]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da0e      	bge.n	8002fcc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 0207 	and.w	r2, r3, #7
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	3310      	adds	r3, #16
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	705a      	strb	r2, [r3, #1]
 8002fca:	e00e      	b.n	8002fea <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 0207 	and.w	r2, r3, #7
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002ff6:	883b      	ldrh	r3, [r7, #0]
 8002ff8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	78ba      	ldrb	r2, [r7, #2]
 8003004:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003006:	78bb      	ldrb	r3, [r7, #2]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d102      	bne.n	8003012 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_PCD_EP_Open+0x98>
 800301c:	2302      	movs	r3, #2
 800301e:	e00e      	b.n	800303e <HAL_PCD_EP_Open+0xb6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68f9      	ldr	r1, [r7, #12]
 800302e:	4618      	mov	r0, r3
 8003030:	f002 ffda 	bl	8005fe8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800303c:	7afb      	ldrb	r3, [r7, #11]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003056:	2b00      	cmp	r3, #0
 8003058:	da0e      	bge.n	8003078 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	f003 0207 	and.w	r2, r3, #7
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	3310      	adds	r3, #16
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	705a      	strb	r2, [r3, #1]
 8003076:	e00e      	b.n	8003096 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	f003 0207 	and.w	r2, r3, #7
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_PCD_EP_Close+0x6a>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e00e      	b.n	80030ce <HAL_PCD_EP_Close+0x88>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68f9      	ldr	r1, [r7, #12]
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 fc7a 	bl	80069b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	460b      	mov	r3, r1
 80030e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e6:	7afb      	ldrb	r3, [r7, #11]
 80030e8:	f003 0207 	and.w	r2, r3, #7
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2200      	movs	r2, #0
 800310e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2200      	movs	r2, #0
 8003114:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003116:	7afb      	ldrb	r3, [r7, #11]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	b2da      	uxtb	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6979      	ldr	r1, [r7, #20]
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fe32 	bl	8006d92 <USB_EPStartXfer>

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f003 0207 	and.w	r2, r3, #7
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	440b      	add	r3, r1
 8003156:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	460b      	mov	r3, r1
 8003176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003178:	7afb      	ldrb	r3, [r7, #11]
 800317a:	f003 0207 	and.w	r2, r3, #7
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	3310      	adds	r3, #16
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2201      	movs	r2, #1
 80031b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b4:	7afb      	ldrb	r3, [r7, #11]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6979      	ldr	r1, [r7, #20]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f003 fde3 	bl	8006d92 <USB_EPStartXfer>

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	7912      	ldrb	r2, [r2, #4]
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e03e      	b.n	8003272 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	da0e      	bge.n	800321a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	f003 0207 	and.w	r2, r3, #7
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	3310      	adds	r3, #16
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	705a      	strb	r2, [r3, #1]
 8003218:	e00c      	b.n	8003234 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_PCD_EP_SetStall+0x7e>
 8003250:	2302      	movs	r3, #2
 8003252:	e00e      	b.n	8003272 <HAL_PCD_EP_SetStall+0x9c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68f9      	ldr	r1, [r7, #12]
 8003262:	4618      	mov	r0, r3
 8003264:	f004 fb44 	bl	80078f0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	7912      	ldrb	r2, [r2, #4]
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e040      	b.n	800331a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329c:	2b00      	cmp	r3, #0
 800329e:	da0e      	bge.n	80032be <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 0207 	and.w	r2, r3, #7
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	3310      	adds	r3, #16
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	705a      	strb	r2, [r3, #1]
 80032bc:	e00e      	b.n	80032dc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	f003 0207 	and.w	r2, r3, #7
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_PCD_EP_ClrStall+0x82>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e00e      	b.n	800331a <HAL_PCD_EP_ClrStall+0xa0>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	4618      	mov	r0, r3
 800330c:	f004 fb41 	bl	8007992 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b092      	sub	sp, #72	@ 0x48
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800332a:	e333      	b.n	8003994 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003334:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003336:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003342:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 8108 	bne.w	800355c <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800334c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d14c      	bne.n	80033f0 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003366:	813b      	strh	r3, [r7, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	893b      	ldrh	r3, [r7, #8]
 800336e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003376:	b29b      	uxth	r3, r3
 8003378:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3310      	adds	r3, #16
 800337e:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003388:	b29b      	uxth	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	4413      	add	r3, r2
 800339a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	441a      	add	r2, r3
 80033b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033b6:	2100      	movs	r1, #0
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f006 fabc 	bl	8009936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	7b1b      	ldrb	r3, [r3, #12]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 82e5 	beq.w	8003994 <PCD_EP_ISR_Handler+0x672>
 80033ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 82e0 	bne.w	8003994 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	7b1b      	ldrb	r3, [r3, #12]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	731a      	strb	r2, [r3, #12]
 80033ee:	e2d1      	b.n	8003994 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033f6:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003400:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003402:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003406:	2b00      	cmp	r3, #0
 8003408:	d032      	beq.n	8003470 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	4413      	add	r3, r2
 8003424:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800342e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003430:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800343c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800343e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003442:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003444:	b29b      	uxth	r3, r3
 8003446:	f004 fbcb 	bl	8007be0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29a      	uxth	r2, r3
 8003452:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003456:	4013      	ands	r3, r2
 8003458:	817b      	strh	r3, [r7, #10]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	897a      	ldrh	r2, [r7, #10]
 8003460:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003464:	b292      	uxth	r2, r2
 8003466:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f006 fa37 	bl	80098dc <HAL_PCD_SetupStageCallback>
 800346e:	e291      	b.n	8003994 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003470:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003474:	2b00      	cmp	r3, #0
 8003476:	f280 828d 	bge.w	8003994 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	b29a      	uxth	r2, r3
 8003482:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003486:	4013      	ands	r3, r2
 8003488:	81fb      	strh	r3, [r7, #14]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	89fa      	ldrh	r2, [r7, #14]
 8003490:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003494:	b292      	uxth	r2, r2
 8003496:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80034c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d019      	beq.n	80034fc <PCD_EP_ISR_Handler+0x1da>
 80034c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d015      	beq.n	80034fc <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d6:	6959      	ldr	r1, [r3, #20]
 80034d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f004 fb7d 	bl	8007be0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	441a      	add	r2, r3
 80034f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034f4:	2100      	movs	r1, #0
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f006 fa02 	bl	8009900 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003504:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003506:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800350a:	2b00      	cmp	r3, #0
 800350c:	f040 8242 	bne.w	8003994 <PCD_EP_ISR_Handler+0x672>
 8003510:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003512:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003516:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800351a:	f000 823b 	beq.w	8003994 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800352a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800352e:	81bb      	strh	r3, [r7, #12]
 8003530:	89bb      	ldrh	r3, [r7, #12]
 8003532:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003536:	81bb      	strh	r3, [r7, #12]
 8003538:	89bb      	ldrh	r3, [r7, #12]
 800353a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800353e:	81bb      	strh	r3, [r7, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	89bb      	ldrh	r3, [r7, #12]
 8003546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800354a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800354e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003556:	b29b      	uxth	r3, r3
 8003558:	8013      	strh	r3, [r2, #0]
 800355a:	e21b      	b.n	8003994 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800356e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003572:	2b00      	cmp	r3, #0
 8003574:	f280 80f1 	bge.w	800375a <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29a      	uxth	r2, r3
 800358a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800358e:	4013      	ands	r3, r2
 8003590:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035a6:	b292      	uxth	r2, r2
 80035a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035aa:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c2:	7b1b      	ldrb	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d123      	bne.n	8003610 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80035f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 808b 	beq.w	8003710 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003600:	6959      	ldr	r1, [r3, #20]
 8003602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003604:	88da      	ldrh	r2, [r3, #6]
 8003606:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800360a:	f004 fae9 	bl	8007be0 <USB_ReadPMA>
 800360e:	e07f      	b.n	8003710 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003612:	78db      	ldrb	r3, [r3, #3]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d109      	bne.n	800362c <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003618:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800361a:	461a      	mov	r2, r3
 800361c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f9c6 	bl	80039b0 <HAL_PCD_EP_DB_Receive>
 8003624:	4603      	mov	r3, r0
 8003626:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800362a:	e071      	b.n	8003710 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	b29b      	uxth	r3, r3
 800363e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003646:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800365c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003664:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003668:	b29b      	uxth	r3, r3
 800366a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d022      	beq.n	80036cc <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800368e:	b29b      	uxth	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80036ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02c      	beq.n	8003710 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036bc:	6959      	ldr	r1, [r3, #20]
 80036be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c0:	891a      	ldrh	r2, [r3, #8]
 80036c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036c6:	f004 fa8b 	bl	8007be0 <USB_ReadPMA>
 80036ca:	e021      	b.n	8003710 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	4413      	add	r3, r2
 80036e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036f0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80036f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d009      	beq.n	8003710 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003702:	6959      	ldr	r1, [r3, #20]
 8003704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003706:	895a      	ldrh	r2, [r3, #10]
 8003708:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800370c:	f004 fa68 	bl	8007be0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003718:	441a      	add	r2, r3
 800371a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800371e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003726:	441a      	add	r2, r3
 8003728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800372c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <PCD_EP_ISR_Handler+0x41e>
 8003734:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	429a      	cmp	r2, r3
 800373e:	d206      	bcs.n	800374e <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	4619      	mov	r1, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f006 f8da 	bl	8009900 <HAL_PCD_DataOutStageCallback>
 800374c:	e005      	b.n	800375a <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003754:	4618      	mov	r0, r3
 8003756:	f003 fb1c 	bl	8006d92 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800375a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800375c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8117 	beq.w	8003994 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003766:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	3310      	adds	r3, #16
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003794:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	441a      	add	r2, r3
 80037a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80037a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80037b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b4:	78db      	ldrb	r3, [r3, #3]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	f040 80a1 	bne.w	80038fe <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80037bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037be:	2200      	movs	r2, #0
 80037c0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80037c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c4:	7b1b      	ldrb	r3, [r3, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8092 	beq.w	80038f0 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d046      	beq.n	8003864 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d126      	bne.n	800382c <PCD_EP_ISR_Handler+0x50a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	4413      	add	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	00da      	lsls	r2, r3, #3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	4413      	add	r3, r2
 8003800:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003810:	b29a      	uxth	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	801a      	strh	r2, [r3, #0]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003824:	b29a      	uxth	r2, r3
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	e061      	b.n	80038f0 <PCD_EP_ISR_Handler+0x5ce>
 800382c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800382e:	785b      	ldrb	r3, [r3, #1]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d15d      	bne.n	80038f0 <PCD_EP_ISR_Handler+0x5ce>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003842:	b29b      	uxth	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	00da      	lsls	r2, r3, #3
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2200      	movs	r2, #0
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	e045      	b.n	80038f0 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800386a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d126      	bne.n	80038c0 <PCD_EP_ISR_Handler+0x59e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003880:	b29b      	uxth	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	4413      	add	r3, r2
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24
 800388a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	00da      	lsls	r2, r3, #3
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	4413      	add	r3, r2
 8003894:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003898:	623b      	str	r3, [r7, #32]
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	801a      	strh	r2, [r3, #0]
 80038be:	e017      	b.n	80038f0 <PCD_EP_ISR_Handler+0x5ce>
 80038c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c2:	785b      	ldrb	r3, [r3, #1]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d113      	bne.n	80038f0 <PCD_EP_ISR_Handler+0x5ce>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d6:	4413      	add	r3, r2
 80038d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	00da      	lsls	r2, r3, #3
 80038e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e2:	4413      	add	r3, r2
 80038e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ec:	2200      	movs	r2, #0
 80038ee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f006 f81d 	bl	8009936 <HAL_PCD_DataInStageCallback>
 80038fc:	e04a      	b.n	8003994 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80038fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d13f      	bne.n	8003988 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003910:	b29b      	uxth	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	4413      	add	r3, r2
 8003922:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800392c:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800392e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003934:	429a      	cmp	r2, r3
 8003936:	d906      	bls.n	8003946 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800393e:	1ad2      	subs	r2, r2, r3
 8003940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003942:	619a      	str	r2, [r3, #24]
 8003944:	e002      	b.n	800394c <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003948:	2200      	movs	r2, #0
 800394a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800394c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	4619      	mov	r1, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f005 ffeb 	bl	8009936 <HAL_PCD_DataInStageCallback>
 8003960:	e018      	b.n	8003994 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003968:	441a      	add	r2, r3
 800396a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800396e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003970:	69da      	ldr	r2, [r3, #28]
 8003972:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003974:	441a      	add	r2, r3
 8003976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003978:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fa06 	bl	8006d92 <USB_EPStartXfer>
 8003986:	e005      	b.n	8003994 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003988:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800398a:	461a      	mov	r2, r3
 800398c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f917 	bl	8003bc2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800399c:	b29b      	uxth	r3, r3
 800399e:	b21b      	sxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f6ff acc3 	blt.w	800332c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3748      	adds	r7, #72	@ 0x48
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d07c      	beq.n	8003ac2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	8b7b      	ldrh	r3, [r7, #26]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d306      	bcc.n	8003a06 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	699a      	ldr	r2, [r3, #24]
 80039fc:	8b7b      	ldrh	r3, [r7, #26]
 80039fe:	1ad2      	subs	r2, r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	619a      	str	r2, [r3, #24]
 8003a04:	e002      	b.n	8003a0c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d123      	bne.n	8003a5c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2e:	833b      	strh	r3, [r7, #24]
 8003a30:	8b3b      	ldrh	r3, [r7, #24]
 8003a32:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a36:	833b      	strh	r3, [r7, #24]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	441a      	add	r2, r3
 8003a46:	8b3b      	ldrh	r3, [r7, #24]
 8003a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01f      	beq.n	8003aa6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a80:	82fb      	strh	r3, [r7, #22]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	441a      	add	r2, r3
 8003a90:	8afb      	ldrh	r3, [r7, #22]
 8003a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003aa6:	8b7b      	ldrh	r3, [r7, #26]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8085 	beq.w	8003bb8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6959      	ldr	r1, [r3, #20]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	891a      	ldrh	r2, [r3, #8]
 8003aba:	8b7b      	ldrh	r3, [r7, #26]
 8003abc:	f004 f890 	bl	8007be0 <USB_ReadPMA>
 8003ac0:	e07a      	b.n	8003bb8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	4413      	add	r3, r2
 8003adc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	8b7b      	ldrh	r3, [r7, #26]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d306      	bcc.n	8003b00 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	8b7b      	ldrh	r3, [r7, #26]
 8003af8:	1ad2      	subs	r2, r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	619a      	str	r2, [r3, #24]
 8003afe:	e002      	b.n	8003b06 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2200      	movs	r2, #0
 8003b04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d123      	bne.n	8003b56 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b28:	83fb      	strh	r3, [r7, #30]
 8003b2a:	8bfb      	ldrh	r3, [r7, #30]
 8003b2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b30:	83fb      	strh	r3, [r7, #30]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	441a      	add	r2, r3
 8003b40:	8bfb      	ldrh	r3, [r7, #30]
 8003b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11f      	bne.n	8003ba0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7a:	83bb      	strh	r3, [r7, #28]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	8bbb      	ldrh	r3, [r7, #28]
 8003b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ba0:	8b7b      	ldrh	r3, [r7, #26]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6959      	ldr	r1, [r3, #20]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	895a      	ldrh	r2, [r3, #10]
 8003bb2:	8b7b      	ldrh	r3, [r7, #26]
 8003bb4:	f004 f814 	bl	8007be0 <USB_ReadPMA>
    }
  }

  return count;
 8003bb8:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b0a6      	sub	sp, #152	@ 0x98
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 81f7 	beq.w	8003fca <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c00:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d907      	bls.n	8003c20 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c18:	1ad2      	subs	r2, r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	619a      	str	r2, [r3, #24]
 8003c1e:	e002      	b.n	8003c26 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2200      	movs	r2, #0
 8003c24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f040 80e1 	bne.w	8003df2 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	785b      	ldrb	r3, [r3, #1]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d126      	bne.n	8003c86 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4c:	4413      	add	r3, r2
 8003c4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	00da      	lsls	r2, r3, #3
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	4413      	add	r3, r2
 8003c5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c82:	801a      	strh	r2, [r3, #0]
 8003c84:	e01a      	b.n	8003cbc <HAL_PCD_EP_DB_Transmit+0xfa>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d116      	bne.n	8003cbc <HAL_PCD_EP_DB_Transmit+0xfa>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca2:	4413      	add	r3, r2
 8003ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	00da      	lsls	r2, r3, #3
 8003cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cae:	4413      	add	r3, r2
 8003cb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb8:	2200      	movs	r2, #0
 8003cba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	785b      	ldrb	r3, [r3, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d126      	bne.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x156>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	4413      	add	r3, r2
 8003ce0:	623b      	str	r3, [r7, #32]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	00da      	lsls	r2, r3, #3
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	4413      	add	r3, r2
 8003cec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	801a      	strh	r2, [r3, #0]
 8003d16:	e017      	b.n	8003d48 <HAL_PCD_EP_DB_Transmit+0x186>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	785b      	ldrb	r3, [r3, #1]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d113      	bne.n	8003d48 <HAL_PCD_EP_DB_Transmit+0x186>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2e:	4413      	add	r3, r2
 8003d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	00da      	lsls	r2, r3, #3
 8003d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	2200      	movs	r2, #0
 8003d46:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	78db      	ldrb	r3, [r3, #3]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d123      	bne.n	8003d98 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d6a:	837b      	strh	r3, [r7, #26]
 8003d6c:	8b7b      	ldrh	r3, [r7, #26]
 8003d6e:	f083 0320 	eor.w	r3, r3, #32
 8003d72:	837b      	strh	r3, [r7, #26]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	441a      	add	r2, r3
 8003d82:	8b7b      	ldrh	r3, [r7, #26]
 8003d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f005 fdc9 	bl	8009936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01f      	beq.n	8003dee <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc8:	833b      	strh	r3, [r7, #24]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	441a      	add	r2, r3
 8003dd8:	8b3b      	ldrh	r3, [r7, #24]
 8003dda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003de2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e31f      	b.n	8004432 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d021      	beq.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e16:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	441a      	add	r2, r3
 8003e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	f040 82ca 	bne.w	80043e0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e54:	441a      	add	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e62:	441a      	add	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d309      	bcc.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e80:	1ad2      	subs	r2, r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	621a      	str	r2, [r3, #32]
 8003e86:	e015      	b.n	8003eb4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003e90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e94:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e9e:	e009      	b.n	8003eb4 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	785b      	ldrb	r3, [r3, #1]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d15f      	bne.n	8003f7c <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed0:	4413      	add	r3, r2
 8003ed2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	00da      	lsls	r2, r3, #3
 8003eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003edc:	4413      	add	r3, r2
 8003ede:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f0c:	801a      	strh	r2, [r3, #0]
 8003f0e:	e051      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f12:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f14:	d816      	bhi.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x382>
 8003f16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_PCD_EP_DB_Transmit+0x36a>
 8003f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f28:	3301      	adds	r3, #1
 8003f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	029b      	lsls	r3, r3, #10
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f40:	801a      	strh	r2, [r3, #0]
 8003f42:	e037      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x398>
 8003f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f56:	3b01      	subs	r3, #1
 8003f58:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	029b      	lsls	r3, r3, #10
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f78:	801a      	strh	r2, [r3, #0]
 8003f7a:	e01b      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	785b      	ldrb	r3, [r3, #1]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d117      	bne.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f98:	4413      	add	r3, r2
 8003f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	00da      	lsls	r2, r3, #3
 8003fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fb2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6959      	ldr	r1, [r3, #20]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	891a      	ldrh	r2, [r3, #8]
 8003fc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f003 fdc9 	bl	8007b5a <USB_WritePMA>
 8003fc8:	e20a      	b.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4413      	add	r3, r2
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fee:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d307      	bcc.n	800400e <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004006:	1ad2      	subs	r2, r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	619a      	str	r2, [r3, #24]
 800400c:	e002      	b.n	8004014 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2200      	movs	r2, #0
 8004012:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 80f6 	bne.w	800420a <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	785b      	ldrb	r3, [r3, #1]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d126      	bne.n	8004074 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	677b      	str	r3, [r7, #116]	@ 0x74
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004034:	b29b      	uxth	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800403a:	4413      	add	r3, r2
 800403c:	677b      	str	r3, [r7, #116]	@ 0x74
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	00da      	lsls	r2, r3, #3
 8004044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004046:	4413      	add	r3, r2
 8004048:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800404c:	673b      	str	r3, [r7, #112]	@ 0x70
 800404e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004058:	b29a      	uxth	r2, r3
 800405a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800406c:	b29a      	uxth	r2, r3
 800406e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004070:	801a      	strh	r2, [r3, #0]
 8004072:	e01a      	b.n	80040aa <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d116      	bne.n	80040aa <HAL_PCD_EP_DB_Transmit+0x4e8>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004090:	4413      	add	r3, r2
 8004092:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	00da      	lsls	r2, r3, #3
 800409a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800409c:	4413      	add	r3, r2
 800409e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040a6:	2200      	movs	r2, #0
 80040a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d12f      	bne.n	800411a <HAL_PCD_EP_DB_Transmit+0x558>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d2:	4413      	add	r3, r2
 80040d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	00da      	lsls	r2, r3, #3
 80040de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040e2:	4413      	add	r3, r2
 80040e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800410c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004110:	b29a      	uxth	r2, r3
 8004112:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004116:	801a      	strh	r2, [r3, #0]
 8004118:	e01c      	b.n	8004154 <HAL_PCD_EP_DB_Transmit+0x592>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	785b      	ldrb	r3, [r3, #1]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d118      	bne.n	8004154 <HAL_PCD_EP_DB_Transmit+0x592>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800412a:	b29b      	uxth	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004132:	4413      	add	r3, r2
 8004134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	00da      	lsls	r2, r3, #3
 800413e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004142:	4413      	add	r3, r2
 8004144:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004148:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800414c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004150:	2200      	movs	r2, #0
 8004152:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	78db      	ldrb	r3, [r3, #3]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d127      	bne.n	80041ac <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004176:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800417a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800417e:	f083 0320 	eor.w	r3, r3, #32
 8004182:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	441a      	add	r2, r3
 8004194:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800419c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	4619      	mov	r1, r3
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f005 fbbf 	bl	8009936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d121      	bne.n	8004206 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041dc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	441a      	add	r2, r3
 80041ee:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80041f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e113      	b.n	8004432 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d121      	bne.n	8004258 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800422a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800422e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800424c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004254:	b29b      	uxth	r3, r3
 8004256:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800425e:	2b01      	cmp	r3, #1
 8004260:	f040 80be 	bne.w	80043e0 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800426c:	441a      	add	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800427a:	441a      	add	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6a1a      	ldr	r2, [r3, #32]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	429a      	cmp	r2, r3
 800428a:	d309      	bcc.n	80042a0 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6a1a      	ldr	r2, [r3, #32]
 8004296:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004298:	1ad2      	subs	r2, r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	621a      	str	r2, [r3, #32]
 800429e:	e015      	b.n	80042cc <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d107      	bne.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80042a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042ac:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042b6:	e009      	b.n	80042cc <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2200      	movs	r2, #0
 80042c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d15f      	bne.n	800439a <HAL_PCD_EP_DB_Transmit+0x7d8>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042ee:	4413      	add	r3, r2
 80042f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	00da      	lsls	r2, r3, #3
 80042f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042fa:	4413      	add	r3, r2
 80042fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004300:	667b      	str	r3, [r7, #100]	@ 0x64
 8004302:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800430c:	b29a      	uxth	r2, r3
 800430e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <HAL_PCD_EP_DB_Transmit+0x76c>
 8004318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	b29b      	uxth	r3, r3
 800431e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004326:	b29a      	uxth	r2, r3
 8004328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800432a:	801a      	strh	r2, [r3, #0]
 800432c:	e04e      	b.n	80043cc <HAL_PCD_EP_DB_Transmit+0x80a>
 800432e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004330:	2b3e      	cmp	r3, #62	@ 0x3e
 8004332:	d816      	bhi.n	8004362 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004334:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004336:	085b      	lsrs	r3, r3, #1
 8004338:	663b      	str	r3, [r7, #96]	@ 0x60
 800433a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_PCD_EP_DB_Transmit+0x788>
 8004344:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004346:	3301      	adds	r3, #1
 8004348:	663b      	str	r3, [r7, #96]	@ 0x60
 800434a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29a      	uxth	r2, r3
 8004350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004352:	b29b      	uxth	r3, r3
 8004354:	029b      	lsls	r3, r3, #10
 8004356:	b29b      	uxth	r3, r3
 8004358:	4313      	orrs	r3, r2
 800435a:	b29a      	uxth	r2, r3
 800435c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	e034      	b.n	80043cc <HAL_PCD_EP_DB_Transmit+0x80a>
 8004362:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	663b      	str	r3, [r7, #96]	@ 0x60
 8004368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004372:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004374:	3b01      	subs	r3, #1
 8004376:	663b      	str	r3, [r7, #96]	@ 0x60
 8004378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29a      	uxth	r2, r3
 800437e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004380:	b29b      	uxth	r3, r3
 8004382:	029b      	lsls	r3, r3, #10
 8004384:	b29b      	uxth	r3, r3
 8004386:	4313      	orrs	r3, r2
 8004388:	b29b      	uxth	r3, r3
 800438a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004392:	b29a      	uxth	r2, r3
 8004394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	e018      	b.n	80043cc <HAL_PCD_EP_DB_Transmit+0x80a>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	785b      	ldrb	r3, [r3, #1]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d114      	bne.n	80043cc <HAL_PCD_EP_DB_Transmit+0x80a>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b0:	4413      	add	r3, r2
 80043b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	00da      	lsls	r2, r3, #3
 80043ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043bc:	4413      	add	r3, r2
 80043be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6959      	ldr	r1, [r3, #20]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	895a      	ldrh	r2, [r3, #10]
 80043d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f003 fbbd 	bl	8007b5a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043fa:	82fb      	strh	r3, [r7, #22]
 80043fc:	8afb      	ldrh	r3, [r7, #22]
 80043fe:	f083 0310 	eor.w	r3, r3, #16
 8004402:	82fb      	strh	r3, [r7, #22]
 8004404:	8afb      	ldrh	r3, [r7, #22]
 8004406:	f083 0320 	eor.w	r3, r3, #32
 800440a:	82fb      	strh	r3, [r7, #22]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	8afb      	ldrh	r3, [r7, #22]
 800441c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800442c:	b29b      	uxth	r3, r3
 800442e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3798      	adds	r7, #152	@ 0x98
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800443a:	b480      	push	{r7}
 800443c:	b087      	sub	sp, #28
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	607b      	str	r3, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	817b      	strh	r3, [r7, #10]
 8004448:	4613      	mov	r3, r2
 800444a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800444c:	897b      	ldrh	r3, [r7, #10]
 800444e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00b      	beq.n	8004470 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004458:	897b      	ldrh	r3, [r7, #10]
 800445a:	f003 0207 	and.w	r2, r3, #7
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	3310      	adds	r3, #16
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	e009      	b.n	8004484 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004470:	897a      	ldrh	r2, [r7, #10]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004484:	893b      	ldrh	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	b29a      	uxth	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	80da      	strh	r2, [r3, #6]
 8004498:	e00b      	b.n	80044b2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2201      	movs	r2, #1
 800449e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f043 0302 	orr.w	r3, r3, #2
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d141      	bne.n	80045a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004522:	4b4b      	ldr	r3, [pc, #300]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800452a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452e:	d131      	bne.n	8004594 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004530:	4b47      	ldr	r3, [pc, #284]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004536:	4a46      	ldr	r2, [pc, #280]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800453c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004540:	4b43      	ldr	r3, [pc, #268]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004548:	4a41      	ldr	r2, [pc, #260]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800454e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004550:	4b40      	ldr	r3, [pc, #256]	@ (8004654 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2232      	movs	r2, #50	@ 0x32
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	4a3f      	ldr	r2, [pc, #252]	@ (8004658 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	0c9b      	lsrs	r3, r3, #18
 8004562:	3301      	adds	r3, #1
 8004564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004566:	e002      	b.n	800456e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3b01      	subs	r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800456e:	4b38      	ldr	r3, [pc, #224]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800457a:	d102      	bne.n	8004582 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f2      	bne.n	8004568 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004582:	4b33      	ldr	r3, [pc, #204]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458e:	d158      	bne.n	8004642 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e057      	b.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004594:	4b2e      	ldr	r3, [pc, #184]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800459a:	4a2d      	ldr	r2, [pc, #180]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800459c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045a4:	e04d      	b.n	8004642 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ac:	d141      	bne.n	8004632 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045ae:	4b28      	ldr	r3, [pc, #160]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ba:	d131      	bne.n	8004620 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045bc:	4b24      	ldr	r3, [pc, #144]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045c2:	4a23      	ldr	r2, [pc, #140]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045cc:	4b20      	ldr	r3, [pc, #128]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004654 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2232      	movs	r2, #50	@ 0x32
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004658 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	0c9b      	lsrs	r3, r3, #18
 80045ee:	3301      	adds	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045f2:	e002      	b.n	80045fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045fa:	4b15      	ldr	r3, [pc, #84]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004606:	d102      	bne.n	800460e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f2      	bne.n	80045f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800460e:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800461a:	d112      	bne.n	8004642 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e011      	b.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004626:	4a0a      	ldr	r2, [pc, #40]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800462c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004630:	e007      	b.n	8004642 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004632:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800463a:	4a05      	ldr	r2, [pc, #20]	@ (8004650 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004640:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40007000 	.word	0x40007000
 8004654:	20000000 	.word	0x20000000
 8004658:	431bde83 	.word	0x431bde83

0800465c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004660:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4a04      	ldr	r2, [pc, #16]	@ (8004678 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800466a:	6093      	str	r3, [r2, #8]
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40007000 	.word	0x40007000

0800467c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e2fe      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d075      	beq.n	8004786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800469a:	4b97      	ldr	r3, [pc, #604]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046a4:	4b94      	ldr	r3, [pc, #592]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b0c      	cmp	r3, #12
 80046b2:	d102      	bne.n	80046ba <HAL_RCC_OscConfig+0x3e>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d002      	beq.n	80046c0 <HAL_RCC_OscConfig+0x44>
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d10b      	bne.n	80046d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c0:	4b8d      	ldr	r3, [pc, #564]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d05b      	beq.n	8004784 <HAL_RCC_OscConfig+0x108>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d157      	bne.n	8004784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e2d9      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e0:	d106      	bne.n	80046f0 <HAL_RCC_OscConfig+0x74>
 80046e2:	4b85      	ldr	r3, [pc, #532]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a84      	ldr	r2, [pc, #528]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e01d      	b.n	800472c <HAL_RCC_OscConfig+0xb0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046f8:	d10c      	bne.n	8004714 <HAL_RCC_OscConfig+0x98>
 80046fa:	4b7f      	ldr	r3, [pc, #508]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a7e      	ldr	r2, [pc, #504]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	4b7c      	ldr	r3, [pc, #496]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a7b      	ldr	r2, [pc, #492]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 800470c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e00b      	b.n	800472c <HAL_RCC_OscConfig+0xb0>
 8004714:	4b78      	ldr	r3, [pc, #480]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a77      	ldr	r2, [pc, #476]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 800471a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	4b75      	ldr	r3, [pc, #468]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a74      	ldr	r2, [pc, #464]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800472a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d013      	beq.n	800475c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7fc f900 	bl	8000938 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800473c:	f7fc f8fc 	bl	8000938 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	@ 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e29e      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800474e:	4b6a      	ldr	r3, [pc, #424]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0xc0>
 800475a:	e014      	b.n	8004786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fc f8ec 	bl	8000938 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004764:	f7fc f8e8 	bl	8000938 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	@ 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e28a      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004776:	4b60      	ldr	r3, [pc, #384]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0xe8>
 8004782:	e000      	b.n	8004786 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d075      	beq.n	800487e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004792:	4b59      	ldr	r3, [pc, #356]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800479c:	4b56      	ldr	r3, [pc, #344]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b0c      	cmp	r3, #12
 80047aa:	d102      	bne.n	80047b2 <HAL_RCC_OscConfig+0x136>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d002      	beq.n	80047b8 <HAL_RCC_OscConfig+0x13c>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d11f      	bne.n	80047f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047b8:	4b4f      	ldr	r3, [pc, #316]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_OscConfig+0x154>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e25d      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d0:	4b49      	ldr	r3, [pc, #292]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	061b      	lsls	r3, r3, #24
 80047de:	4946      	ldr	r1, [pc, #280]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047e4:	4b45      	ldr	r3, [pc, #276]	@ (80048fc <HAL_RCC_OscConfig+0x280>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fc f859 	bl	80008a0 <HAL_InitTick>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d043      	beq.n	800487c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e249      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d023      	beq.n	8004848 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004800:	4b3d      	ldr	r3, [pc, #244]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a3c      	ldr	r2, [pc, #240]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800480a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fc f894 	bl	8000938 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004814:	f7fc f890 	bl	8000938 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e232      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004826:	4b34      	ldr	r3, [pc, #208]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004832:	4b31      	ldr	r3, [pc, #196]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	492d      	ldr	r1, [pc, #180]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
 8004846:	e01a      	b.n	800487e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004848:	4b2b      	ldr	r3, [pc, #172]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a2a      	ldr	r2, [pc, #168]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 800484e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fc f870 	bl	8000938 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485c:	f7fc f86c 	bl	8000938 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e20e      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800486e:	4b22      	ldr	r3, [pc, #136]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x1e0>
 800487a:	e000      	b.n	800487e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800487c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d041      	beq.n	800490e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01c      	beq.n	80048cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004892:	4b19      	ldr	r3, [pc, #100]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 8004894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004898:	4a17      	ldr	r2, [pc, #92]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a2:	f7fc f849 	bl	8000938 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048aa:	f7fc f845 	bl	8000938 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e1e7      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048bc:	4b0e      	ldr	r3, [pc, #56]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 80048be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0ef      	beq.n	80048aa <HAL_RCC_OscConfig+0x22e>
 80048ca:	e020      	b.n	800490e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048cc:	4b0a      	ldr	r3, [pc, #40]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 80048ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048d2:	4a09      	ldr	r2, [pc, #36]	@ (80048f8 <HAL_RCC_OscConfig+0x27c>)
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048dc:	f7fc f82c 	bl	8000938 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048e2:	e00d      	b.n	8004900 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e4:	f7fc f828 	bl	8000938 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d906      	bls.n	8004900 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e1ca      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004900:	4b8c      	ldr	r3, [pc, #560]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1ea      	bne.n	80048e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80a6 	beq.w	8004a68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491c:	2300      	movs	r3, #0
 800491e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004920:	4b84      	ldr	r3, [pc, #528]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_OscConfig+0x2b4>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <HAL_RCC_OscConfig+0x2b6>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00d      	beq.n	8004952 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004936:	4b7f      	ldr	r3, [pc, #508]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 800493c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004940:	6593      	str	r3, [r2, #88]	@ 0x58
 8004942:	4b7c      	ldr	r3, [pc, #496]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800494e:	2301      	movs	r3, #1
 8004950:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004952:	4b79      	ldr	r3, [pc, #484]	@ (8004b38 <HAL_RCC_OscConfig+0x4bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d118      	bne.n	8004990 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800495e:	4b76      	ldr	r3, [pc, #472]	@ (8004b38 <HAL_RCC_OscConfig+0x4bc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a75      	ldr	r2, [pc, #468]	@ (8004b38 <HAL_RCC_OscConfig+0x4bc>)
 8004964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800496a:	f7fb ffe5 	bl	8000938 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004972:	f7fb ffe1 	bl	8000938 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e183      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004984:	4b6c      	ldr	r3, [pc, #432]	@ (8004b38 <HAL_RCC_OscConfig+0x4bc>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d108      	bne.n	80049aa <HAL_RCC_OscConfig+0x32e>
 8004998:	4b66      	ldr	r3, [pc, #408]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499e:	4a65      	ldr	r2, [pc, #404]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049a8:	e024      	b.n	80049f4 <HAL_RCC_OscConfig+0x378>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d110      	bne.n	80049d4 <HAL_RCC_OscConfig+0x358>
 80049b2:	4b60      	ldr	r3, [pc, #384]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 80049ba:	f043 0304 	orr.w	r3, r3, #4
 80049be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049d2:	e00f      	b.n	80049f4 <HAL_RCC_OscConfig+0x378>
 80049d4:	4b57      	ldr	r3, [pc, #348]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049da:	4a56      	ldr	r2, [pc, #344]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049e4:	4b53      	ldr	r3, [pc, #332]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ea:	4a52      	ldr	r2, [pc, #328]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 80049ec:	f023 0304 	bic.w	r3, r3, #4
 80049f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d016      	beq.n	8004a2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fc:	f7fb ff9c 	bl	8000938 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a04:	f7fb ff98 	bl	8000938 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e138      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a1a:	4b46      	ldr	r3, [pc, #280]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ed      	beq.n	8004a04 <HAL_RCC_OscConfig+0x388>
 8004a28:	e015      	b.n	8004a56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2a:	f7fb ff85 	bl	8000938 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fb ff81 	bl	8000938 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e121      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a48:	4b3a      	ldr	r3, [pc, #232]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1ed      	bne.n	8004a32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a56:	7ffb      	ldrb	r3, [r7, #31]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d105      	bne.n	8004a68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5c:	4b35      	ldr	r3, [pc, #212]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a60:	4a34      	ldr	r2, [pc, #208]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d03c      	beq.n	8004aee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01c      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a82:	4a2c      	ldr	r2, [pc, #176]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8c:	f7fb ff54 	bl	8000938 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a94:	f7fb ff50 	bl	8000938 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e0f2      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aa6:	4b23      	ldr	r3, [pc, #140]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0ef      	beq.n	8004a94 <HAL_RCC_OscConfig+0x418>
 8004ab4:	e01b      	b.n	8004aee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004abc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac6:	f7fb ff37 	bl	8000938 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ace:	f7fb ff33 	bl	8000938 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e0d5      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ae0:	4b14      	ldr	r3, [pc, #80]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1ef      	bne.n	8004ace <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 80c9 	beq.w	8004c8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004af8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 030c 	and.w	r3, r3, #12
 8004b00:	2b0c      	cmp	r3, #12
 8004b02:	f000 8083 	beq.w	8004c0c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d15e      	bne.n	8004bcc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0e:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a08      	ldr	r2, [pc, #32]	@ (8004b34 <HAL_RCC_OscConfig+0x4b8>)
 8004b14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1a:	f7fb ff0d 	bl	8000938 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b20:	e00c      	b.n	8004b3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b22:	f7fb ff09 	bl	8000938 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d905      	bls.n	8004b3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e0ab      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
 8004b34:	40021000 	.word	0x40021000
 8004b38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3c:	4b55      	ldr	r3, [pc, #340]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1ec      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b48:	4b52      	ldr	r3, [pc, #328]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	4b52      	ldr	r3, [pc, #328]	@ (8004c98 <HAL_RCC_OscConfig+0x61c>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6a11      	ldr	r1, [r2, #32]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b58:	3a01      	subs	r2, #1
 8004b5a:	0112      	lsls	r2, r2, #4
 8004b5c:	4311      	orrs	r1, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b62:	0212      	lsls	r2, r2, #8
 8004b64:	4311      	orrs	r1, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b6a:	0852      	lsrs	r2, r2, #1
 8004b6c:	3a01      	subs	r2, #1
 8004b6e:	0552      	lsls	r2, r2, #21
 8004b70:	4311      	orrs	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b76:	0852      	lsrs	r2, r2, #1
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	0652      	lsls	r2, r2, #25
 8004b7c:	4311      	orrs	r1, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b82:	06d2      	lsls	r2, r2, #27
 8004b84:	430a      	orrs	r2, r1
 8004b86:	4943      	ldr	r1, [pc, #268]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b8c:	4b41      	ldr	r3, [pc, #260]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a40      	ldr	r2, [pc, #256]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b98:	4b3e      	ldr	r3, [pc, #248]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4a3d      	ldr	r2, [pc, #244]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fb fec8 	bl	8000938 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bac:	f7fb fec4 	bl	8000938 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e066      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bbe:	4b35      	ldr	r3, [pc, #212]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0x530>
 8004bca:	e05e      	b.n	8004c8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bcc:	4b31      	ldr	r3, [pc, #196]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a30      	ldr	r2, [pc, #192]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004bd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fb feae 	bl	8000938 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fb feaa 	bl	8000938 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e04c      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf2:	4b28      	ldr	r3, [pc, #160]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004bfe:	4b25      	ldr	r3, [pc, #148]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	4924      	ldr	r1, [pc, #144]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004c04:	4b25      	ldr	r3, [pc, #148]	@ (8004c9c <HAL_RCC_OscConfig+0x620>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	60cb      	str	r3, [r1, #12]
 8004c0a:	e03e      	b.n	8004c8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e039      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c18:	4b1e      	ldr	r3, [pc, #120]	@ (8004c94 <HAL_RCC_OscConfig+0x618>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f003 0203 	and.w	r2, r3, #3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d12c      	bne.n	8004c86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	3b01      	subs	r3, #1
 8004c38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d123      	bne.n	8004c86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d11b      	bne.n	8004c86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d113      	bne.n	8004c86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c68:	085b      	lsrs	r3, r3, #1
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c7c:	085b      	lsrs	r3, r3, #1
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d001      	beq.n	8004c8a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40021000 	.word	0x40021000
 8004c98:	019f800c 	.word	0x019f800c
 8004c9c:	feeefffc 	.word	0xfeeefffc

08004ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e11e      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb8:	4b91      	ldr	r3, [pc, #580]	@ (8004f00 <HAL_RCC_ClockConfig+0x260>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d910      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc6:	4b8e      	ldr	r3, [pc, #568]	@ (8004f00 <HAL_RCC_ClockConfig+0x260>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 020f 	bic.w	r2, r3, #15
 8004cce:	498c      	ldr	r1, [pc, #560]	@ (8004f00 <HAL_RCC_ClockConfig+0x260>)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	4b8a      	ldr	r3, [pc, #552]	@ (8004f00 <HAL_RCC_ClockConfig+0x260>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e106      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d073      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d129      	bne.n	8004d50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfc:	4b81      	ldr	r3, [pc, #516]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0f4      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d0c:	f000 f966 	bl	8004fdc <RCC_GetSysClockFreqFromPLLSource>
 8004d10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4a7c      	ldr	r2, [pc, #496]	@ (8004f08 <HAL_RCC_ClockConfig+0x268>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d93f      	bls.n	8004d9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d1a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d033      	beq.n	8004d9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d12f      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d3a:	4b72      	ldr	r3, [pc, #456]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d42:	4a70      	ldr	r2, [pc, #448]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d4a:	2380      	movs	r3, #128	@ 0x80
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	e024      	b.n	8004d9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d58:	4b6a      	ldr	r3, [pc, #424]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0c6      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d68:	4b66      	ldr	r3, [pc, #408]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0be      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d78:	f000 f8ce 	bl	8004f18 <HAL_RCC_GetSysClockFreq>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4a61      	ldr	r2, [pc, #388]	@ (8004f08 <HAL_RCC_ClockConfig+0x268>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d909      	bls.n	8004d9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d86:	4b5f      	ldr	r3, [pc, #380]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d8e:	4a5d      	ldr	r2, [pc, #372]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f023 0203 	bic.w	r2, r3, #3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4957      	ldr	r1, [pc, #348]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dac:	f7fb fdc4 	bl	8000938 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db4:	f7fb fdc0 	bl	8000938 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e095      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	4b4e      	ldr	r3, [pc, #312]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 020c 	and.w	r2, r3, #12
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d1eb      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d023      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df4:	4b43      	ldr	r3, [pc, #268]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a42      	ldr	r2, [pc, #264]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004dfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004dfe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e14:	4a3b      	ldr	r2, [pc, #236]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004e16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e1c:	4b39      	ldr	r3, [pc, #228]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4936      	ldr	r1, [pc, #216]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b80      	cmp	r3, #128	@ 0x80
 8004e34:	d105      	bne.n	8004e42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e36:	4b33      	ldr	r3, [pc, #204]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	4a32      	ldr	r2, [pc, #200]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004e3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e42:	4b2f      	ldr	r3, [pc, #188]	@ (8004f00 <HAL_RCC_ClockConfig+0x260>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d21d      	bcs.n	8004e8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e50:	4b2b      	ldr	r3, [pc, #172]	@ (8004f00 <HAL_RCC_ClockConfig+0x260>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f023 020f 	bic.w	r2, r3, #15
 8004e58:	4929      	ldr	r1, [pc, #164]	@ (8004f00 <HAL_RCC_ClockConfig+0x260>)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e60:	f7fb fd6a 	bl	8000938 <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e68:	f7fb fd66 	bl	8000938 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e03b      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7e:	4b20      	ldr	r3, [pc, #128]	@ (8004f00 <HAL_RCC_ClockConfig+0x260>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d1ed      	bne.n	8004e68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e98:	4b1a      	ldr	r3, [pc, #104]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4917      	ldr	r1, [pc, #92]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eb6:	4b13      	ldr	r3, [pc, #76]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	490f      	ldr	r1, [pc, #60]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004eca:	f000 f825 	bl	8004f18 <HAL_RCC_GetSysClockFreq>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f04 <HAL_RCC_ClockConfig+0x264>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	490c      	ldr	r1, [pc, #48]	@ (8004f0c <HAL_RCC_ClockConfig+0x26c>)
 8004edc:	5ccb      	ldrb	r3, [r1, r3]
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f10 <HAL_RCC_ClockConfig+0x270>)
 8004ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004eea:	4b0a      	ldr	r3, [pc, #40]	@ (8004f14 <HAL_RCC_ClockConfig+0x274>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fb fcd6 	bl	80008a0 <HAL_InitTick>
 8004ef4:	4603      	mov	r3, r0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40022000 	.word	0x40022000
 8004f04:	40021000 	.word	0x40021000
 8004f08:	04c4b400 	.word	0x04c4b400
 8004f0c:	08009f24 	.word	0x08009f24
 8004f10:	20000000 	.word	0x20000000
 8004f14:	20000004 	.word	0x20000004

08004f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d102      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	e047      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f30:	4b27      	ldr	r3, [pc, #156]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 030c 	and.w	r3, r3, #12
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d102      	bne.n	8004f42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f3c:	4b26      	ldr	r3, [pc, #152]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	e03e      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f42:	4b23      	ldr	r3, [pc, #140]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b0c      	cmp	r3, #12
 8004f4c:	d136      	bne.n	8004fbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f4e:	4b20      	ldr	r3, [pc, #128]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	3301      	adds	r3, #1
 8004f64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	4a16      	ldr	r2, [pc, #88]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f76:	68d2      	ldr	r2, [r2, #12]
 8004f78:	0a12      	lsrs	r2, r2, #8
 8004f7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	617b      	str	r3, [r7, #20]
      break;
 8004f84:	e00c      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f86:	4a13      	ldr	r2, [pc, #76]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	4a10      	ldr	r2, [pc, #64]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f90:	68d2      	ldr	r2, [r2, #12]
 8004f92:	0a12      	lsrs	r2, r2, #8
 8004f94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f98:	fb02 f303 	mul.w	r3, r2, r3
 8004f9c:	617b      	str	r3, [r7, #20]
      break;
 8004f9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	0e5b      	lsrs	r3, r3, #25
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	3301      	adds	r3, #1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	e001      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fc0:	693b      	ldr	r3, [r7, #16]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	00f42400 	.word	0x00f42400
 8004fd8:	007a1200 	.word	0x007a1200

08004fdc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800505c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fec:	4b1b      	ldr	r3, [pc, #108]	@ (800505c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d10c      	bne.n	800501a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005000:	4a17      	ldr	r2, [pc, #92]	@ (8005060 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	4a14      	ldr	r2, [pc, #80]	@ (800505c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800500a:	68d2      	ldr	r2, [r2, #12]
 800500c:	0a12      	lsrs	r2, r2, #8
 800500e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	617b      	str	r3, [r7, #20]
    break;
 8005018:	e00c      	b.n	8005034 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800501a:	4a12      	ldr	r2, [pc, #72]	@ (8005064 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	4a0e      	ldr	r2, [pc, #56]	@ (800505c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005024:	68d2      	ldr	r2, [r2, #12]
 8005026:	0a12      	lsrs	r2, r2, #8
 8005028:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	617b      	str	r3, [r7, #20]
    break;
 8005032:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005034:	4b09      	ldr	r3, [pc, #36]	@ (800505c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	0e5b      	lsrs	r3, r3, #25
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	3301      	adds	r3, #1
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800504e:	687b      	ldr	r3, [r7, #4]
}
 8005050:	4618      	mov	r0, r3
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40021000 	.word	0x40021000
 8005060:	007a1200 	.word	0x007a1200
 8005064:	00f42400 	.word	0x00f42400

08005068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005070:	2300      	movs	r3, #0
 8005072:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005074:	2300      	movs	r3, #0
 8005076:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8098 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005086:	2300      	movs	r3, #0
 8005088:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508a:	4b43      	ldr	r3, [pc, #268]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10d      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	4b40      	ldr	r3, [pc, #256]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509a:	4a3f      	ldr	r2, [pc, #252]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800509c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80050a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ae:	2301      	movs	r3, #1
 80050b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b2:	4b3a      	ldr	r3, [pc, #232]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a39      	ldr	r2, [pc, #228]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050be:	f7fb fc3b 	bl	8000938 <HAL_GetTick>
 80050c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050c4:	e009      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c6:	f7fb fc37 	bl	8000938 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d902      	bls.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	74fb      	strb	r3, [r7, #19]
        break;
 80050d8:	e005      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050da:	4b30      	ldr	r3, [pc, #192]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0ef      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80050e6:	7cfb      	ldrb	r3, [r7, #19]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d159      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01e      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	429a      	cmp	r2, r3
 8005106:	d019      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005108:	4b23      	ldr	r3, [pc, #140]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005112:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005114:	4b20      	ldr	r3, [pc, #128]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511a:	4a1f      	ldr	r2, [pc, #124]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005124:	4b1c      	ldr	r3, [pc, #112]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512a:	4a1b      	ldr	r2, [pc, #108]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800512c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005134:	4a18      	ldr	r2, [pc, #96]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005146:	f7fb fbf7 	bl	8000938 <HAL_GetTick>
 800514a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514c:	e00b      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514e:	f7fb fbf3 	bl	8000938 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515c:	4293      	cmp	r3, r2
 800515e:	d902      	bls.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	74fb      	strb	r3, [r7, #19]
            break;
 8005164:	e006      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005166:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ec      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800517a:	4b07      	ldr	r3, [pc, #28]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800517c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005188:	4903      	ldr	r1, [pc, #12]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005190:	e008      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005192:	7cfb      	ldrb	r3, [r7, #19]
 8005194:	74bb      	strb	r3, [r7, #18]
 8005196:	e005      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005198:	40021000 	.word	0x40021000
 800519c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a4:	7c7b      	ldrb	r3, [r7, #17]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d105      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051aa:	4ba6      	ldr	r3, [pc, #664]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ae:	4aa5      	ldr	r2, [pc, #660]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051c2:	4ba0      	ldr	r3, [pc, #640]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c8:	f023 0203 	bic.w	r2, r3, #3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	499c      	ldr	r1, [pc, #624]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051e4:	4b97      	ldr	r3, [pc, #604]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ea:	f023 020c 	bic.w	r2, r3, #12
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	4994      	ldr	r1, [pc, #592]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005206:	4b8f      	ldr	r3, [pc, #572]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	498b      	ldr	r1, [pc, #556]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005228:	4b86      	ldr	r3, [pc, #536]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	4983      	ldr	r1, [pc, #524]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800524a:	4b7e      	ldr	r3, [pc, #504]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005250:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	497a      	ldr	r1, [pc, #488]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800526c:	4b75      	ldr	r3, [pc, #468]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005272:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	4972      	ldr	r1, [pc, #456]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800528e:	4b6d      	ldr	r3, [pc, #436]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005294:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	4969      	ldr	r1, [pc, #420]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052b0:	4b64      	ldr	r3, [pc, #400]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	4961      	ldr	r1, [pc, #388]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052d2:	4b5c      	ldr	r3, [pc, #368]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	4958      	ldr	r1, [pc, #352]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d015      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052f4:	4b53      	ldr	r3, [pc, #332]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005302:	4950      	ldr	r1, [pc, #320]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005312:	d105      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005314:	4b4b      	ldr	r3, [pc, #300]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4a4a      	ldr	r2, [pc, #296]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800531e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005328:	2b00      	cmp	r3, #0
 800532a:	d015      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800532c:	4b45      	ldr	r3, [pc, #276]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005332:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533a:	4942      	ldr	r1, [pc, #264]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005346:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800534a:	d105      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800534c:	4b3d      	ldr	r3, [pc, #244]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a3c      	ldr	r2, [pc, #240]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005356:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d015      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005364:	4b37      	ldr	r3, [pc, #220]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	4934      	ldr	r1, [pc, #208]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005382:	d105      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005384:	4b2f      	ldr	r3, [pc, #188]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	4a2e      	ldr	r2, [pc, #184]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800538e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d015      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800539c:	4b29      	ldr	r3, [pc, #164]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053aa:	4926      	ldr	r1, [pc, #152]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ba:	d105      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053bc:	4b21      	ldr	r3, [pc, #132]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4a20      	ldr	r2, [pc, #128]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d015      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	4918      	ldr	r1, [pc, #96]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053f2:	d105      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f4:	4b13      	ldr	r3, [pc, #76]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4a12      	ldr	r2, [pc, #72]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d015      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800540c:	4b0d      	ldr	r3, [pc, #52]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005412:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541a:	490a      	ldr	r1, [pc, #40]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542a:	d105      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800542c:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4a04      	ldr	r2, [pc, #16]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005436:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005438:	7cbb      	ldrb	r3, [r7, #18]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000

08005448 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e049      	b.n	80054ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fb f922 	bl	80006b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f000 f94a 	bl	8005720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005512:	2302      	movs	r3, #2
 8005514:	e0ff      	b.n	8005716 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b14      	cmp	r3, #20
 8005522:	f200 80f0 	bhi.w	8005706 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005526:	a201      	add	r2, pc, #4	@ (adr r2, 800552c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	08005581 	.word	0x08005581
 8005530:	08005707 	.word	0x08005707
 8005534:	08005707 	.word	0x08005707
 8005538:	08005707 	.word	0x08005707
 800553c:	080055c1 	.word	0x080055c1
 8005540:	08005707 	.word	0x08005707
 8005544:	08005707 	.word	0x08005707
 8005548:	08005707 	.word	0x08005707
 800554c:	08005603 	.word	0x08005603
 8005550:	08005707 	.word	0x08005707
 8005554:	08005707 	.word	0x08005707
 8005558:	08005707 	.word	0x08005707
 800555c:	08005643 	.word	0x08005643
 8005560:	08005707 	.word	0x08005707
 8005564:	08005707 	.word	0x08005707
 8005568:	08005707 	.word	0x08005707
 800556c:	08005685 	.word	0x08005685
 8005570:	08005707 	.word	0x08005707
 8005574:	08005707 	.word	0x08005707
 8005578:	08005707 	.word	0x08005707
 800557c:	080056c5 	.word	0x080056c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f966 	bl	8005858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0204 	bic.w	r2, r2, #4
 80055aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6999      	ldr	r1, [r3, #24]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	619a      	str	r2, [r3, #24]
      break;
 80055be:	e0a5      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 f9d6 	bl	8005978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6999      	ldr	r1, [r3, #24]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	619a      	str	r2, [r3, #24]
      break;
 8005600:	e084      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fa3f 	bl	8005a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0208 	orr.w	r2, r2, #8
 800561c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0204 	bic.w	r2, r2, #4
 800562c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69d9      	ldr	r1, [r3, #28]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	61da      	str	r2, [r3, #28]
      break;
 8005640:	e064      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 faa7 	bl	8005b9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800565c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800566c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69d9      	ldr	r1, [r3, #28]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	021a      	lsls	r2, r3, #8
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	61da      	str	r2, [r3, #28]
      break;
 8005682:	e043      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fb10 	bl	8005cb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0208 	orr.w	r2, r2, #8
 800569e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0204 	bic.w	r2, r2, #4
 80056ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	691a      	ldr	r2, [r3, #16]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80056c2:	e023      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fb54 	bl	8005d78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	021a      	lsls	r2, r3, #8
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005704:	e002      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	75fb      	strb	r3, [r7, #23]
      break;
 800570a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005714:	7dfb      	ldrb	r3, [r7, #23]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop

08005720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a42      	ldr	r2, [pc, #264]	@ (800583c <TIM_Base_SetConfig+0x11c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00f      	beq.n	8005758 <TIM_Base_SetConfig+0x38>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573e:	d00b      	beq.n	8005758 <TIM_Base_SetConfig+0x38>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a3f      	ldr	r2, [pc, #252]	@ (8005840 <TIM_Base_SetConfig+0x120>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d007      	beq.n	8005758 <TIM_Base_SetConfig+0x38>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a3e      	ldr	r2, [pc, #248]	@ (8005844 <TIM_Base_SetConfig+0x124>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_Base_SetConfig+0x38>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a3d      	ldr	r2, [pc, #244]	@ (8005848 <TIM_Base_SetConfig+0x128>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d108      	bne.n	800576a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a33      	ldr	r2, [pc, #204]	@ (800583c <TIM_Base_SetConfig+0x11c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d01b      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005778:	d017      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a30      	ldr	r2, [pc, #192]	@ (8005840 <TIM_Base_SetConfig+0x120>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a2f      	ldr	r2, [pc, #188]	@ (8005844 <TIM_Base_SetConfig+0x124>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00f      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a2e      	ldr	r2, [pc, #184]	@ (8005848 <TIM_Base_SetConfig+0x128>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00b      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a2d      	ldr	r2, [pc, #180]	@ (800584c <TIM_Base_SetConfig+0x12c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a2c      	ldr	r2, [pc, #176]	@ (8005850 <TIM_Base_SetConfig+0x130>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_Base_SetConfig+0x8a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005854 <TIM_Base_SetConfig+0x134>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d108      	bne.n	80057bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a16      	ldr	r2, [pc, #88]	@ (800583c <TIM_Base_SetConfig+0x11c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00f      	beq.n	8005808 <TIM_Base_SetConfig+0xe8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a17      	ldr	r2, [pc, #92]	@ (8005848 <TIM_Base_SetConfig+0x128>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00b      	beq.n	8005808 <TIM_Base_SetConfig+0xe8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a16      	ldr	r2, [pc, #88]	@ (800584c <TIM_Base_SetConfig+0x12c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_Base_SetConfig+0xe8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a15      	ldr	r2, [pc, #84]	@ (8005850 <TIM_Base_SetConfig+0x130>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_Base_SetConfig+0xe8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a14      	ldr	r2, [pc, #80]	@ (8005854 <TIM_Base_SetConfig+0x134>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d103      	bne.n	8005810 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b01      	cmp	r3, #1
 8005820:	d105      	bne.n	800582e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f023 0201 	bic.w	r2, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	611a      	str	r2, [r3, #16]
  }
}
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40012c00 	.word	0x40012c00
 8005840:	40000400 	.word	0x40000400
 8005844:	40000800 	.word	0x40000800
 8005848:	40013400 	.word	0x40013400
 800584c:	40014000 	.word	0x40014000
 8005850:	40014400 	.word	0x40014400
 8005854:	40014800 	.word	0x40014800

08005858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f023 0201 	bic.w	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 0302 	bic.w	r3, r3, #2
 80058a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005964 <TIM_OC1_SetConfig+0x10c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00f      	beq.n	80058d8 <TIM_OC1_SetConfig+0x80>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005968 <TIM_OC1_SetConfig+0x110>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00b      	beq.n	80058d8 <TIM_OC1_SetConfig+0x80>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a2a      	ldr	r2, [pc, #168]	@ (800596c <TIM_OC1_SetConfig+0x114>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d007      	beq.n	80058d8 <TIM_OC1_SetConfig+0x80>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a29      	ldr	r2, [pc, #164]	@ (8005970 <TIM_OC1_SetConfig+0x118>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d003      	beq.n	80058d8 <TIM_OC1_SetConfig+0x80>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a28      	ldr	r2, [pc, #160]	@ (8005974 <TIM_OC1_SetConfig+0x11c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d10c      	bne.n	80058f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0308 	bic.w	r3, r3, #8
 80058de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005964 <TIM_OC1_SetConfig+0x10c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00f      	beq.n	800591a <TIM_OC1_SetConfig+0xc2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005968 <TIM_OC1_SetConfig+0x110>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00b      	beq.n	800591a <TIM_OC1_SetConfig+0xc2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a19      	ldr	r2, [pc, #100]	@ (800596c <TIM_OC1_SetConfig+0x114>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <TIM_OC1_SetConfig+0xc2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a18      	ldr	r2, [pc, #96]	@ (8005970 <TIM_OC1_SetConfig+0x118>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_OC1_SetConfig+0xc2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a17      	ldr	r2, [pc, #92]	@ (8005974 <TIM_OC1_SetConfig+0x11c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d111      	bne.n	800593e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	621a      	str	r2, [r3, #32]
}
 8005958:	bf00      	nop
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	40012c00 	.word	0x40012c00
 8005968:	40013400 	.word	0x40013400
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	f023 0210 	bic.w	r2, r3, #16
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f023 0320 	bic.w	r3, r3, #32
 80059c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a28      	ldr	r2, [pc, #160]	@ (8005a78 <TIM_OC2_SetConfig+0x100>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_OC2_SetConfig+0x6c>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a27      	ldr	r2, [pc, #156]	@ (8005a7c <TIM_OC2_SetConfig+0x104>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d10d      	bne.n	8005a00 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a1d      	ldr	r2, [pc, #116]	@ (8005a78 <TIM_OC2_SetConfig+0x100>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00f      	beq.n	8005a28 <TIM_OC2_SetConfig+0xb0>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005a7c <TIM_OC2_SetConfig+0x104>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00b      	beq.n	8005a28 <TIM_OC2_SetConfig+0xb0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a1b      	ldr	r2, [pc, #108]	@ (8005a80 <TIM_OC2_SetConfig+0x108>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <TIM_OC2_SetConfig+0xb0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8005a84 <TIM_OC2_SetConfig+0x10c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_OC2_SetConfig+0xb0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a19      	ldr	r2, [pc, #100]	@ (8005a88 <TIM_OC2_SetConfig+0x110>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d113      	bne.n	8005a50 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	621a      	str	r2, [r3, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	40013400 	.word	0x40013400
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800

08005a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
 8005ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a27      	ldr	r2, [pc, #156]	@ (8005b88 <TIM_OC3_SetConfig+0xfc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d003      	beq.n	8005af6 <TIM_OC3_SetConfig+0x6a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a26      	ldr	r2, [pc, #152]	@ (8005b8c <TIM_OC3_SetConfig+0x100>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d10d      	bne.n	8005b12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a1c      	ldr	r2, [pc, #112]	@ (8005b88 <TIM_OC3_SetConfig+0xfc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00f      	beq.n	8005b3a <TIM_OC3_SetConfig+0xae>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005b8c <TIM_OC3_SetConfig+0x100>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00b      	beq.n	8005b3a <TIM_OC3_SetConfig+0xae>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1a      	ldr	r2, [pc, #104]	@ (8005b90 <TIM_OC3_SetConfig+0x104>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d007      	beq.n	8005b3a <TIM_OC3_SetConfig+0xae>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a19      	ldr	r2, [pc, #100]	@ (8005b94 <TIM_OC3_SetConfig+0x108>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d003      	beq.n	8005b3a <TIM_OC3_SetConfig+0xae>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a18      	ldr	r2, [pc, #96]	@ (8005b98 <TIM_OC3_SetConfig+0x10c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d113      	bne.n	8005b62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	621a      	str	r2, [r3, #32]
}
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	031b      	lsls	r3, r3, #12
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a28      	ldr	r2, [pc, #160]	@ (8005c9c <TIM_OC4_SetConfig+0x100>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC4_SetConfig+0x6c>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a27      	ldr	r2, [pc, #156]	@ (8005ca0 <TIM_OC4_SetConfig+0x104>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d10d      	bne.n	8005c24 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	031b      	lsls	r3, r3, #12
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a1d      	ldr	r2, [pc, #116]	@ (8005c9c <TIM_OC4_SetConfig+0x100>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00f      	beq.n	8005c4c <TIM_OC4_SetConfig+0xb0>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca0 <TIM_OC4_SetConfig+0x104>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00b      	beq.n	8005c4c <TIM_OC4_SetConfig+0xb0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca4 <TIM_OC4_SetConfig+0x108>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d007      	beq.n	8005c4c <TIM_OC4_SetConfig+0xb0>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ca8 <TIM_OC4_SetConfig+0x10c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_OC4_SetConfig+0xb0>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a19      	ldr	r2, [pc, #100]	@ (8005cac <TIM_OC4_SetConfig+0x110>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d113      	bne.n	8005c74 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c52:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c5a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	019b      	lsls	r3, r3, #6
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	019b      	lsls	r3, r3, #6
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40013400 	.word	0x40013400
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40014400 	.word	0x40014400
 8005cac:	40014800 	.word	0x40014800

08005cb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005cf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	041b      	lsls	r3, r3, #16
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a17      	ldr	r2, [pc, #92]	@ (8005d64 <TIM_OC5_SetConfig+0xb4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00f      	beq.n	8005d2a <TIM_OC5_SetConfig+0x7a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a16      	ldr	r2, [pc, #88]	@ (8005d68 <TIM_OC5_SetConfig+0xb8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00b      	beq.n	8005d2a <TIM_OC5_SetConfig+0x7a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a15      	ldr	r2, [pc, #84]	@ (8005d6c <TIM_OC5_SetConfig+0xbc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d007      	beq.n	8005d2a <TIM_OC5_SetConfig+0x7a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a14      	ldr	r2, [pc, #80]	@ (8005d70 <TIM_OC5_SetConfig+0xc0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d003      	beq.n	8005d2a <TIM_OC5_SetConfig+0x7a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a13      	ldr	r2, [pc, #76]	@ (8005d74 <TIM_OC5_SetConfig+0xc4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d109      	bne.n	8005d3e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	621a      	str	r2, [r3, #32]
}
 8005d58:	bf00      	nop
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	40012c00 	.word	0x40012c00
 8005d68:	40013400 	.word	0x40013400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400
 8005d74:	40014800 	.word	0x40014800

08005d78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	051b      	lsls	r3, r3, #20
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <TIM_OC6_SetConfig+0xb8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00f      	beq.n	8005df4 <TIM_OC6_SetConfig+0x7c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a17      	ldr	r2, [pc, #92]	@ (8005e34 <TIM_OC6_SetConfig+0xbc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00b      	beq.n	8005df4 <TIM_OC6_SetConfig+0x7c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a16      	ldr	r2, [pc, #88]	@ (8005e38 <TIM_OC6_SetConfig+0xc0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d007      	beq.n	8005df4 <TIM_OC6_SetConfig+0x7c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a15      	ldr	r2, [pc, #84]	@ (8005e3c <TIM_OC6_SetConfig+0xc4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_OC6_SetConfig+0x7c>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a14      	ldr	r2, [pc, #80]	@ (8005e40 <TIM_OC6_SetConfig+0xc8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d109      	bne.n	8005e08 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	029b      	lsls	r3, r3, #10
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e065      	b.n	8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a2c      	ldr	r2, [pc, #176]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d108      	bne.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d018      	beq.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed2:	d013      	beq.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a18      	ldr	r2, [pc, #96]	@ (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00e      	beq.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a17      	ldr	r2, [pc, #92]	@ (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d009      	beq.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a12      	ldr	r2, [pc, #72]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d004      	beq.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a13      	ldr	r2, [pc, #76]	@ (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d10c      	bne.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	40012c00 	.word	0x40012c00
 8005f38:	40013400 	.word	0x40013400
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40014000 	.word	0x40014000

08005f48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f58:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005f5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f7e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005f82:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4013      	ands	r3, r2
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	1d3b      	adds	r3, r7, #4
 8005fb6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b0a7      	sub	sp, #156	@ 0x9c
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800600a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	78db      	ldrb	r3, [r3, #3]
 8006016:	2b03      	cmp	r3, #3
 8006018:	d81f      	bhi.n	800605a <USB_ActivateEndpoint+0x72>
 800601a:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <USB_ActivateEndpoint+0x38>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006031 	.word	0x08006031
 8006024:	0800604d 	.word	0x0800604d
 8006028:	08006063 	.word	0x08006063
 800602c:	0800603f 	.word	0x0800603f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006030:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006034:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006038:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800603c:	e012      	b.n	8006064 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800603e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006042:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006046:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800604a:	e00b      	b.n	8006064 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800604c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006050:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006054:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006058:	e004      	b.n	8006064 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8006060:	e000      	b.n	8006064 <USB_ActivateEndpoint+0x7c>
      break;
 8006062:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	441a      	add	r2, r3
 800606e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800607a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800607e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006082:	b29b      	uxth	r3, r3
 8006084:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	b21b      	sxth	r3, r3
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800609a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800609e:	b21a      	sxth	r2, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	b21b      	sxth	r3, r3
 80060a6:	4313      	orrs	r3, r2
 80060a8:	b21b      	sxth	r3, r3
 80060aa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	441a      	add	r2, r3
 80060b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	7b1b      	ldrb	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f040 8180 	bne.w	80063da <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	785b      	ldrb	r3, [r3, #1]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 8084 	beq.w	80061ec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	4413      	add	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	00da      	lsls	r2, r3, #3
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	88db      	ldrh	r3, [r3, #6]
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	b29b      	uxth	r3, r3
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	827b      	strh	r3, [r7, #18]
 8006126:	8a7b      	ldrh	r3, [r7, #18]
 8006128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01b      	beq.n	8006168 <USB_ActivateEndpoint+0x180>
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006146:	823b      	strh	r3, [r7, #16]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	441a      	add	r2, r3
 8006152:	8a3b      	ldrh	r3, [r7, #16]
 8006154:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006158:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800615c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006160:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006164:	b29b      	uxth	r3, r3
 8006166:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	78db      	ldrb	r3, [r3, #3]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d020      	beq.n	80061b2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006186:	81bb      	strh	r3, [r7, #12]
 8006188:	89bb      	ldrh	r3, [r7, #12]
 800618a:	f083 0320 	eor.w	r3, r3, #32
 800618e:	81bb      	strh	r3, [r7, #12]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	441a      	add	r2, r3
 800619a:	89bb      	ldrh	r3, [r7, #12]
 800619c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	8013      	strh	r3, [r2, #0]
 80061b0:	e3f9      	b.n	80069a6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c8:	81fb      	strh	r3, [r7, #14]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	441a      	add	r2, r3
 80061d4:	89fb      	ldrh	r3, [r7, #14]
 80061d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	8013      	strh	r3, [r2, #0]
 80061ea:	e3dc      	b.n	80069a6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	4413      	add	r3, r2
 80061fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	00da      	lsls	r2, r3, #3
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	4413      	add	r3, r2
 800620a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800620e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	88db      	ldrh	r3, [r3, #6]
 8006214:	085b      	lsrs	r3, r3, #1
 8006216:	b29b      	uxth	r3, r3
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800622a:	b29b      	uxth	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006230:	4413      	add	r3, r2
 8006232:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	00da      	lsls	r2, r3, #3
 800623a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623c:	4413      	add	r3, r2
 800623e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
 8006244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800624e:	b29a      	uxth	r2, r3
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <USB_ActivateEndpoint+0x28a>
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626a:	b29a      	uxth	r2, r3
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	e041      	b.n	80062f6 <USB_ActivateEndpoint+0x30e>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b3e      	cmp	r3, #62	@ 0x3e
 8006278:	d81c      	bhi.n	80062b4 <USB_ActivateEndpoint+0x2cc>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d004      	beq.n	800629a <USB_ActivateEndpoint+0x2b2>
 8006290:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006294:	3301      	adds	r3, #1
 8006296:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	029b      	lsls	r3, r3, #10
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	4313      	orrs	r3, r2
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	e020      	b.n	80062f6 <USB_ActivateEndpoint+0x30e>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f003 031f 	and.w	r3, r3, #31
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d104      	bne.n	80062d4 <USB_ActivateEndpoint+0x2ec>
 80062ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80062ce:	3b01      	subs	r3, #1
 80062d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29a      	uxth	r2, r3
 80062da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80062de:	b29b      	uxth	r3, r3
 80062e0:	029b      	lsls	r3, r3, #10
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	4313      	orrs	r3, r2
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006304:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01b      	beq.n	8006346 <USB_ActivateEndpoint+0x35e>
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006320:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006324:	843b      	strh	r3, [r7, #32]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	441a      	add	r2, r3
 8006330:	8c3b      	ldrh	r3, [r7, #32]
 8006332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800633a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800633e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006342:	b29b      	uxth	r3, r3
 8006344:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d124      	bne.n	8006398 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006364:	83bb      	strh	r3, [r7, #28]
 8006366:	8bbb      	ldrh	r3, [r7, #28]
 8006368:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800636c:	83bb      	strh	r3, [r7, #28]
 800636e:	8bbb      	ldrh	r3, [r7, #28]
 8006370:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006374:	83bb      	strh	r3, [r7, #28]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	441a      	add	r2, r3
 8006380:	8bbb      	ldrh	r3, [r7, #28]
 8006382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800638a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800638e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006392:	b29b      	uxth	r3, r3
 8006394:	8013      	strh	r3, [r2, #0]
 8006396:	e306      	b.n	80069a6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ae:	83fb      	strh	r3, [r7, #30]
 80063b0:	8bfb      	ldrh	r3, [r7, #30]
 80063b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063b6:	83fb      	strh	r3, [r7, #30]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	8bfb      	ldrh	r3, [r7, #30]
 80063c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	8013      	strh	r3, [r2, #0]
 80063d8:	e2e5      	b.n	80069a6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	78db      	ldrb	r3, [r3, #3]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d11e      	bne.n	8006420 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	441a      	add	r2, r3
 8006406:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800640a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800640e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006412:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800641a:	b29b      	uxth	r3, r3
 800641c:	8013      	strh	r3, [r2, #0]
 800641e:	e01d      	b.n	800645c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006436:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	441a      	add	r2, r3
 8006444:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800644c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006450:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006458:	b29b      	uxth	r3, r3
 800645a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006466:	b29b      	uxth	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800646c:	4413      	add	r3, r2
 800646e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	00da      	lsls	r2, r3, #3
 8006476:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006478:	4413      	add	r3, r2
 800647a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800647e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	891b      	ldrh	r3, [r3, #8]
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	b29a      	uxth	r2, r3
 800648c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	677b      	str	r3, [r7, #116]	@ 0x74
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800649a:	b29b      	uxth	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064a0:	4413      	add	r3, r2
 80064a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	00da      	lsls	r2, r3, #3
 80064aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064ac:	4413      	add	r3, r2
 80064ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	895b      	ldrh	r3, [r3, #10]
 80064b8:	085b      	lsrs	r3, r3, #1
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	785b      	ldrb	r3, [r3, #1]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f040 81af 	bne.w	800682c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80064de:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80064e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d01d      	beq.n	8006526 <USB_ActivateEndpoint+0x53e>
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006500:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800651a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800651e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006522:	b29b      	uxth	r3, r3
 8006524:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006536:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800653a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d01d      	beq.n	800657e <USB_ActivateEndpoint+0x596>
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006558:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	441a      	add	r2, r3
 8006566:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800656a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800656e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006576:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800657a:	b29b      	uxth	r3, r3
 800657c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d16b      	bne.n	800665e <USB_ActivateEndpoint+0x676>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006590:	b29b      	uxth	r3, r3
 8006592:	461a      	mov	r2, r3
 8006594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006596:	4413      	add	r3, r2
 8006598:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	00da      	lsls	r2, r3, #3
 80065a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a2:	4413      	add	r3, r2
 80065a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <USB_ActivateEndpoint+0x5f0>
 80065c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	e05d      	b.n	8006694 <USB_ActivateEndpoint+0x6ac>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80065de:	d81c      	bhi.n	800661a <USB_ActivateEndpoint+0x632>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <USB_ActivateEndpoint+0x618>
 80065f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065fa:	3301      	adds	r3, #1
 80065fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29a      	uxth	r2, r3
 8006606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800660a:	b29b      	uxth	r3, r3
 800660c:	029b      	lsls	r3, r3, #10
 800660e:	b29b      	uxth	r3, r3
 8006610:	4313      	orrs	r3, r2
 8006612:	b29a      	uxth	r2, r3
 8006614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	e03c      	b.n	8006694 <USB_ActivateEndpoint+0x6ac>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f003 031f 	and.w	r3, r3, #31
 800662c:	2b00      	cmp	r3, #0
 800662e:	d104      	bne.n	800663a <USB_ActivateEndpoint+0x652>
 8006630:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006634:	3b01      	subs	r3, #1
 8006636:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800663a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	b29a      	uxth	r2, r3
 8006640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006644:	b29b      	uxth	r3, r3
 8006646:	029b      	lsls	r3, r3, #10
 8006648:	b29b      	uxth	r3, r3
 800664a:	4313      	orrs	r3, r2
 800664c:	b29b      	uxth	r3, r3
 800664e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006656:	b29a      	uxth	r2, r3
 8006658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800665a:	801a      	strh	r2, [r3, #0]
 800665c:	e01a      	b.n	8006694 <USB_ActivateEndpoint+0x6ac>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	785b      	ldrb	r3, [r3, #1]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d116      	bne.n	8006694 <USB_ActivateEndpoint+0x6ac>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	657b      	str	r3, [r7, #84]	@ 0x54
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006670:	b29b      	uxth	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006676:	4413      	add	r3, r2
 8006678:	657b      	str	r3, [r7, #84]	@ 0x54
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	00da      	lsls	r2, r3, #3
 8006680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006682:	4413      	add	r3, r2
 8006684:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006688:	653b      	str	r3, [r7, #80]	@ 0x50
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	b29a      	uxth	r2, r3
 8006690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006692:	801a      	strh	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	647b      	str	r3, [r7, #68]	@ 0x44
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d16b      	bne.n	8006778 <USB_ActivateEndpoint+0x790>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066b0:	4413      	add	r3, r2
 80066b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	00da      	lsls	r2, r3, #3
 80066ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066bc:	4413      	add	r3, r2
 80066be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10a      	bne.n	80066f2 <USB_ActivateEndpoint+0x70a>
 80066dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	e05b      	b.n	80067aa <USB_ActivateEndpoint+0x7c2>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80066f8:	d81c      	bhi.n	8006734 <USB_ActivateEndpoint+0x74c>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <USB_ActivateEndpoint+0x732>
 8006710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006714:	3301      	adds	r3, #1
 8006716:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800671a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29a      	uxth	r2, r3
 8006720:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006724:	b29b      	uxth	r3, r3
 8006726:	029b      	lsls	r3, r3, #10
 8006728:	b29b      	uxth	r3, r3
 800672a:	4313      	orrs	r3, r2
 800672c:	b29a      	uxth	r2, r3
 800672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006730:	801a      	strh	r2, [r3, #0]
 8006732:	e03a      	b.n	80067aa <USB_ActivateEndpoint+0x7c2>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <USB_ActivateEndpoint+0x76c>
 800674a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800674e:	3b01      	subs	r3, #1
 8006750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29a      	uxth	r2, r3
 800675a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800675e:	b29b      	uxth	r3, r3
 8006760:	029b      	lsls	r3, r3, #10
 8006762:	b29b      	uxth	r3, r3
 8006764:	4313      	orrs	r3, r2
 8006766:	b29b      	uxth	r3, r3
 8006768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800676c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006770:	b29a      	uxth	r2, r3
 8006772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	e018      	b.n	80067aa <USB_ActivateEndpoint+0x7c2>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d114      	bne.n	80067aa <USB_ActivateEndpoint+0x7c2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006786:	b29b      	uxth	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800678c:	4413      	add	r3, r2
 800678e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	00da      	lsls	r2, r3, #3
 8006796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006798:	4413      	add	r3, r2
 800679a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800679e:	643b      	str	r3, [r7, #64]	@ 0x40
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067a8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80067c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80067ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	441a      	add	r2, r3
 80067dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006808:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800681a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800681e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006826:	b29b      	uxth	r3, r3
 8006828:	8013      	strh	r3, [r2, #0]
 800682a:	e0bc      	b.n	80069a6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800683c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01d      	beq.n	8006884 <USB_ActivateEndpoint+0x89c>
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800685a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006870:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006874:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006878:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800687c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006880:	b29b      	uxth	r3, r3
 8006882:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006894:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01d      	beq.n	80068dc <USB_ActivateEndpoint+0x8f4>
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	441a      	add	r2, r3
 80068c4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80068c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068d8:	b29b      	uxth	r3, r3
 80068da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	78db      	ldrb	r3, [r3, #3]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d024      	beq.n	800692e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068fa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80068fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006902:	f083 0320 	eor.w	r3, r3, #32
 8006906:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	441a      	add	r2, r3
 8006914:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]
 800692c:	e01d      	b.n	800696a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006944:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	441a      	add	r2, r3
 8006952:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800695a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800695e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006966:	b29b      	uxth	r3, r3
 8006968:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800697c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006980:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	441a      	add	r2, r3
 800698e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800699a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800699e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80069a6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	379c      	adds	r7, #156	@ 0x9c
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop

080069b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b08d      	sub	sp, #52	@ 0x34
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	7b1b      	ldrb	r3, [r3, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f040 808e 	bne.w	8006ae8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d044      	beq.n	8006a5e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	81bb      	strh	r3, [r7, #12]
 80069e2:	89bb      	ldrh	r3, [r7, #12]
 80069e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01b      	beq.n	8006a24 <USB_DeactivateEndpoint+0x6c>
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a02:	817b      	strh	r3, [r7, #10]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	441a      	add	r2, r3
 8006a0e:	897b      	ldrh	r3, [r7, #10]
 8006a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a3a:	813b      	strh	r3, [r7, #8]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	441a      	add	r2, r3
 8006a46:	893b      	ldrh	r3, [r7, #8]
 8006a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	8013      	strh	r3, [r2, #0]
 8006a5c:	e192      	b.n	8006d84 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	827b      	strh	r3, [r7, #18]
 8006a6c:	8a7b      	ldrh	r3, [r7, #18]
 8006a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d01b      	beq.n	8006aae <USB_DeactivateEndpoint+0xf6>
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a8c:	823b      	strh	r3, [r7, #16]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	441a      	add	r2, r3
 8006a98:	8a3b      	ldrh	r3, [r7, #16]
 8006a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac4:	81fb      	strh	r3, [r7, #14]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	89fb      	ldrh	r3, [r7, #14]
 8006ad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	8013      	strh	r3, [r2, #0]
 8006ae6:	e14d      	b.n	8006d84 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	785b      	ldrb	r3, [r3, #1]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f040 80a5 	bne.w	8006c3c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	843b      	strh	r3, [r7, #32]
 8006b00:	8c3b      	ldrh	r3, [r7, #32]
 8006b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d01b      	beq.n	8006b42 <USB_DeactivateEndpoint+0x18a>
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b20:	83fb      	strh	r3, [r7, #30]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	441a      	add	r2, r3
 8006b2c:	8bfb      	ldrh	r3, [r7, #30]
 8006b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	83bb      	strh	r3, [r7, #28]
 8006b50:	8bbb      	ldrh	r3, [r7, #28]
 8006b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d01b      	beq.n	8006b92 <USB_DeactivateEndpoint+0x1da>
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b70:	837b      	strh	r3, [r7, #26]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	8b7b      	ldrh	r3, [r7, #26]
 8006b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba8:	833b      	strh	r3, [r7, #24]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	441a      	add	r2, r3
 8006bb4:	8b3b      	ldrh	r3, [r7, #24]
 8006bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be0:	82fb      	strh	r3, [r7, #22]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	441a      	add	r2, r3
 8006bec:	8afb      	ldrh	r3, [r7, #22]
 8006bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c18:	82bb      	strh	r3, [r7, #20]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	441a      	add	r2, r3
 8006c24:	8abb      	ldrh	r3, [r7, #20]
 8006c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	8013      	strh	r3, [r2, #0]
 8006c3a:	e0a3      	b.n	8006d84 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006c4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01b      	beq.n	8006c8c <USB_DeactivateEndpoint+0x2d4>
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	441a      	add	r2, r3
 8006c76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006c9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01b      	beq.n	8006cdc <USB_DeactivateEndpoint+0x324>
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cba:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	441a      	add	r2, r3
 8006cc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	441a      	add	r2, r3
 8006cfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	441a      	add	r2, r3
 8006d36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d62:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	441a      	add	r2, r3
 8006d6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3734      	adds	r7, #52	@ 0x34
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b0ac      	sub	sp, #176	@ 0xb0
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	f040 84ca 	bne.w	800773a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	699a      	ldr	r2, [r3, #24]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d904      	bls.n	8006dbc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006dba:	e003      	b.n	8006dc4 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	7b1b      	ldrb	r3, [r3, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d122      	bne.n	8006e12 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	6959      	ldr	r1, [r3, #20]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	88da      	ldrh	r2, [r3, #6]
 8006dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 febd 	bl	8007b5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	613b      	str	r3, [r7, #16]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	4413      	add	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	00da      	lsls	r2, r3, #3
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	801a      	strh	r2, [r3, #0]
 8006e0e:	f000 bc6f 	b.w	80076f0 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	78db      	ldrb	r3, [r3, #3]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	f040 831e 	bne.w	8007458 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	6a1a      	ldr	r2, [r3, #32]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	f240 82cf 	bls.w	80073c8 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e40:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	441a      	add	r2, r3
 8006e4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e5a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6a1a      	ldr	r2, [r3, #32]
 8006e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 814f 	beq.w	800712a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d16b      	bne.n	8006f70 <USB_EPStartXfer+0x1de>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea8:	4413      	add	r3, r2
 8006eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	00da      	lsls	r2, r3, #3
 8006eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <USB_EPStartXfer+0x158>
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	e05b      	b.n	8006fa2 <USB_EPStartXfer+0x210>
 8006eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eee:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ef0:	d81c      	bhi.n	8006f2c <USB_EPStartXfer+0x19a>
 8006ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <USB_EPStartXfer+0x180>
 8006f08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	029b      	lsls	r3, r3, #10
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	4313      	orrs	r3, r2
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	e03a      	b.n	8006fa2 <USB_EPStartXfer+0x210>
 8006f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f30:	095b      	lsrs	r3, r3, #5
 8006f32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d104      	bne.n	8006f4c <USB_EPStartXfer+0x1ba>
 8006f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f46:	3b01      	subs	r3, #1
 8006f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	029b      	lsls	r3, r3, #10
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	e018      	b.n	8006fa2 <USB_EPStartXfer+0x210>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	785b      	ldrb	r3, [r3, #1]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d114      	bne.n	8006fa2 <USB_EPStartXfer+0x210>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	4413      	add	r3, r2
 8006f86:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	00da      	lsls	r2, r3, #3
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f90:	4413      	add	r3, r2
 8006f92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	895b      	ldrh	r3, [r3, #10]
 8006fa6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6959      	ldr	r1, [r3, #20]
 8006fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fdce 	bl	8007b5a <USB_WritePMA>
            ep->xfer_buff += len;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	695a      	ldr	r2, [r3, #20]
 8006fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fc6:	441a      	add	r2, r3
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	6a1a      	ldr	r2, [r3, #32]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d907      	bls.n	8006fe8 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6a1a      	ldr	r2, [r3, #32]
 8006fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fe0:	1ad2      	subs	r2, r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	621a      	str	r2, [r3, #32]
 8006fe6:	e006      	b.n	8006ff6 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d16b      	bne.n	80070d6 <USB_EPStartXfer+0x344>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	4413      	add	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	00da      	lsls	r2, r3, #3
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	4413      	add	r3, r2
 800701c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800702c:	b29a      	uxth	r2, r3
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <USB_EPStartXfer+0x2be>
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007048:	b29a      	uxth	r2, r3
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	e05d      	b.n	800710c <USB_EPStartXfer+0x37a>
 8007050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007054:	2b3e      	cmp	r3, #62	@ 0x3e
 8007056:	d81c      	bhi.n	8007092 <USB_EPStartXfer+0x300>
 8007058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800705c:	085b      	lsrs	r3, r3, #1
 800705e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d004      	beq.n	8007078 <USB_EPStartXfer+0x2e6>
 800706e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007072:	3301      	adds	r3, #1
 8007074:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29a      	uxth	r2, r3
 800707e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007082:	b29b      	uxth	r3, r3
 8007084:	029b      	lsls	r3, r3, #10
 8007086:	b29b      	uxth	r3, r3
 8007088:	4313      	orrs	r3, r2
 800708a:	b29a      	uxth	r2, r3
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	801a      	strh	r2, [r3, #0]
 8007090:	e03c      	b.n	800710c <USB_EPStartXfer+0x37a>
 8007092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800709c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <USB_EPStartXfer+0x320>
 80070a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80070ac:	3b01      	subs	r3, #1
 80070ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80070bc:	b29b      	uxth	r3, r3
 80070be:	029b      	lsls	r3, r3, #10
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	4313      	orrs	r3, r2
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	e01a      	b.n	800710c <USB_EPStartXfer+0x37a>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	785b      	ldrb	r3, [r3, #1]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d116      	bne.n	800710c <USB_EPStartXfer+0x37a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	623b      	str	r3, [r7, #32]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	461a      	mov	r2, r3
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	4413      	add	r3, r2
 80070f0:	623b      	str	r3, [r7, #32]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	00da      	lsls	r2, r3, #3
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	4413      	add	r3, r2
 80070fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007100:	61fb      	str	r3, [r7, #28]
 8007102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007106:	b29a      	uxth	r2, r3
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	891b      	ldrh	r3, [r3, #8]
 8007110:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	6959      	ldr	r1, [r3, #20]
 8007118:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800711c:	b29b      	uxth	r3, r3
 800711e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fd19 	bl	8007b5a <USB_WritePMA>
 8007128:	e2e2      	b.n	80076f0 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	785b      	ldrb	r3, [r3, #1]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d16b      	bne.n	800720a <USB_EPStartXfer+0x478>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800713c:	b29b      	uxth	r3, r3
 800713e:	461a      	mov	r2, r3
 8007140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007142:	4413      	add	r3, r2
 8007144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	00da      	lsls	r2, r3, #3
 800714c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800714e:	4413      	add	r3, r2
 8007150:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007154:	647b      	str	r3, [r7, #68]	@ 0x44
 8007156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007160:	b29a      	uxth	r2, r3
 8007162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007164:	801a      	strh	r2, [r3, #0]
 8007166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <USB_EPStartXfer+0x3f2>
 800716e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29b      	uxth	r3, r3
 8007174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800717c:	b29a      	uxth	r2, r3
 800717e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	e05d      	b.n	8007240 <USB_EPStartXfer+0x4ae>
 8007184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007188:	2b3e      	cmp	r3, #62	@ 0x3e
 800718a:	d81c      	bhi.n	80071c6 <USB_EPStartXfer+0x434>
 800718c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007190:	085b      	lsrs	r3, r3, #1
 8007192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <USB_EPStartXfer+0x41a>
 80071a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071a6:	3301      	adds	r3, #1
 80071a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	029b      	lsls	r3, r3, #10
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	4313      	orrs	r3, r2
 80071be:	b29a      	uxth	r2, r3
 80071c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	e03c      	b.n	8007240 <USB_EPStartXfer+0x4ae>
 80071c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071d4:	f003 031f 	and.w	r3, r3, #31
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d104      	bne.n	80071e6 <USB_EPStartXfer+0x454>
 80071dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071e0:	3b01      	subs	r3, #1
 80071e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	029b      	lsls	r3, r3, #10
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	4313      	orrs	r3, r2
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007202:	b29a      	uxth	r2, r3
 8007204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e01a      	b.n	8007240 <USB_EPStartXfer+0x4ae>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d116      	bne.n	8007240 <USB_EPStartXfer+0x4ae>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	653b      	str	r3, [r7, #80]	@ 0x50
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800721c:	b29b      	uxth	r3, r3
 800721e:	461a      	mov	r2, r3
 8007220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007222:	4413      	add	r3, r2
 8007224:	653b      	str	r3, [r7, #80]	@ 0x50
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	00da      	lsls	r2, r3, #3
 800722c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800722e:	4413      	add	r3, r2
 8007230:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800723a:	b29a      	uxth	r2, r3
 800723c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800723e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	891b      	ldrh	r3, [r3, #8]
 8007244:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	6959      	ldr	r1, [r3, #20]
 800724c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007250:	b29b      	uxth	r3, r3
 8007252:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fc7f 	bl	8007b5a <USB_WritePMA>
            ep->xfer_buff += len;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	695a      	ldr	r2, [r3, #20]
 8007260:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007264:	441a      	add	r2, r3
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6a1a      	ldr	r2, [r3, #32]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	429a      	cmp	r2, r3
 8007274:	d907      	bls.n	8007286 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	6a1a      	ldr	r2, [r3, #32]
 800727a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	621a      	str	r2, [r3, #32]
 8007284:	e006      	b.n	8007294 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2200      	movs	r2, #0
 8007292:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	643b      	str	r3, [r7, #64]	@ 0x40
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	785b      	ldrb	r3, [r3, #1]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d16b      	bne.n	8007378 <USB_EPStartXfer+0x5e6>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	461a      	mov	r2, r3
 80072ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b0:	4413      	add	r3, r2
 80072b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	00da      	lsls	r2, r3, #3
 80072ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072bc:	4413      	add	r3, r2
 80072be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <USB_EPStartXfer+0x560>
 80072dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	e05b      	b.n	80073aa <USB_EPStartXfer+0x618>
 80072f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80072f8:	d81c      	bhi.n	8007334 <USB_EPStartXfer+0x5a2>
 80072fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <USB_EPStartXfer+0x588>
 8007310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007314:	3301      	adds	r3, #1
 8007316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800731a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29a      	uxth	r2, r3
 8007320:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007324:	b29b      	uxth	r3, r3
 8007326:	029b      	lsls	r3, r3, #10
 8007328:	b29b      	uxth	r3, r3
 800732a:	4313      	orrs	r3, r2
 800732c:	b29a      	uxth	r2, r3
 800732e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007330:	801a      	strh	r2, [r3, #0]
 8007332:	e03a      	b.n	80073aa <USB_EPStartXfer+0x618>
 8007334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800733e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <USB_EPStartXfer+0x5c2>
 800734a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800734e:	3b01      	subs	r3, #1
 8007350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	b29a      	uxth	r2, r3
 800735a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800735e:	b29b      	uxth	r3, r3
 8007360:	029b      	lsls	r3, r3, #10
 8007362:	b29b      	uxth	r3, r3
 8007364:	4313      	orrs	r3, r2
 8007366:	b29b      	uxth	r3, r3
 8007368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007370:	b29a      	uxth	r2, r3
 8007372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007374:	801a      	strh	r2, [r3, #0]
 8007376:	e018      	b.n	80073aa <USB_EPStartXfer+0x618>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d114      	bne.n	80073aa <USB_EPStartXfer+0x618>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800738c:	4413      	add	r3, r2
 800738e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	00da      	lsls	r2, r3, #3
 8007396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007398:	4413      	add	r3, r2
 800739a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800739e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	895b      	ldrh	r3, [r3, #10]
 80073ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6959      	ldr	r1, [r3, #20]
 80073b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fbca 	bl	8007b5a <USB_WritePMA>
 80073c6:	e193      	b.n	80076f0 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80073e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073e6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	441a      	add	r2, r3
 80073f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80073f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007400:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007408:	b29b      	uxth	r3, r3
 800740a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007416:	b29b      	uxth	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800741c:	4413      	add	r3, r2
 800741e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	00da      	lsls	r2, r3, #3
 8007426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007428:	4413      	add	r3, r2
 800742a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800742e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007434:	b29a      	uxth	r2, r3
 8007436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007438:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	891b      	ldrh	r3, [r3, #8]
 800743e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	6959      	ldr	r1, [r3, #20]
 8007446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800744a:	b29b      	uxth	r3, r3
 800744c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fb82 	bl	8007b5a <USB_WritePMA>
 8007456:	e14b      	b.n	80076f0 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	6a1a      	ldr	r2, [r3, #32]
 800745c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007460:	1ad2      	subs	r2, r2, r3
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 809a 	beq.w	80075b2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	673b      	str	r3, [r7, #112]	@ 0x70
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d16b      	bne.n	8007562 <USB_EPStartXfer+0x7d0>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007494:	b29b      	uxth	r3, r3
 8007496:	461a      	mov	r2, r3
 8007498:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800749a:	4413      	add	r3, r2
 800749c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	00da      	lsls	r2, r3, #3
 80074a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074a6:	4413      	add	r3, r2
 80074a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80074ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074bc:	801a      	strh	r2, [r3, #0]
 80074be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10a      	bne.n	80074dc <USB_EPStartXfer+0x74a>
 80074c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	e05b      	b.n	8007594 <USB_EPStartXfer+0x802>
 80074dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80074e2:	d81c      	bhi.n	800751e <USB_EPStartXfer+0x78c>
 80074e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074e8:	085b      	lsrs	r3, r3, #1
 80074ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <USB_EPStartXfer+0x772>
 80074fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074fe:	3301      	adds	r3, #1
 8007500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29a      	uxth	r2, r3
 800750a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800750e:	b29b      	uxth	r3, r3
 8007510:	029b      	lsls	r3, r3, #10
 8007512:	b29b      	uxth	r3, r3
 8007514:	4313      	orrs	r3, r2
 8007516:	b29a      	uxth	r2, r3
 8007518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	e03a      	b.n	8007594 <USB_EPStartXfer+0x802>
 800751e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007522:	095b      	lsrs	r3, r3, #5
 8007524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <USB_EPStartXfer+0x7ac>
 8007534:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007538:	3b01      	subs	r3, #1
 800753a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800753e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29a      	uxth	r2, r3
 8007544:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007548:	b29b      	uxth	r3, r3
 800754a:	029b      	lsls	r3, r3, #10
 800754c:	b29b      	uxth	r3, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	b29b      	uxth	r3, r3
 8007552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755a:	b29a      	uxth	r2, r3
 800755c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800755e:	801a      	strh	r2, [r3, #0]
 8007560:	e018      	b.n	8007594 <USB_EPStartXfer+0x802>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d114      	bne.n	8007594 <USB_EPStartXfer+0x802>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007570:	b29b      	uxth	r3, r3
 8007572:	461a      	mov	r2, r3
 8007574:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007576:	4413      	add	r3, r2
 8007578:	673b      	str	r3, [r7, #112]	@ 0x70
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	00da      	lsls	r2, r3, #3
 8007580:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007582:	4413      	add	r3, r2
 8007584:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007588:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800758a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800758e:	b29a      	uxth	r2, r3
 8007590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007592:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	895b      	ldrh	r3, [r3, #10]
 8007598:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	6959      	ldr	r1, [r3, #20]
 80075a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fad5 	bl	8007b5a <USB_WritePMA>
 80075b0:	e09e      	b.n	80076f0 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d16b      	bne.n	8007692 <USB_EPStartXfer+0x900>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075ca:	4413      	add	r3, r2
 80075cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	00da      	lsls	r2, r3, #3
 80075d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075d6:	4413      	add	r3, r2
 80075d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075ec:	801a      	strh	r2, [r3, #0]
 80075ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <USB_EPStartXfer+0x87a>
 80075f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007604:	b29a      	uxth	r2, r3
 8007606:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007608:	801a      	strh	r2, [r3, #0]
 800760a:	e063      	b.n	80076d4 <USB_EPStartXfer+0x942>
 800760c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007610:	2b3e      	cmp	r3, #62	@ 0x3e
 8007612:	d81c      	bhi.n	800764e <USB_EPStartXfer+0x8bc>
 8007614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007618:	085b      	lsrs	r3, r3, #1
 800761a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800761e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <USB_EPStartXfer+0x8a2>
 800762a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800762e:	3301      	adds	r3, #1
 8007630:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b29a      	uxth	r2, r3
 800763a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800763e:	b29b      	uxth	r3, r3
 8007640:	029b      	lsls	r3, r3, #10
 8007642:	b29b      	uxth	r3, r3
 8007644:	4313      	orrs	r3, r2
 8007646:	b29a      	uxth	r2, r3
 8007648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800764a:	801a      	strh	r2, [r3, #0]
 800764c:	e042      	b.n	80076d4 <USB_EPStartXfer+0x942>
 800764e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800765c:	f003 031f 	and.w	r3, r3, #31
 8007660:	2b00      	cmp	r3, #0
 8007662:	d104      	bne.n	800766e <USB_EPStartXfer+0x8dc>
 8007664:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007668:	3b01      	subs	r3, #1
 800766a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800766e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29a      	uxth	r2, r3
 8007674:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007678:	b29b      	uxth	r3, r3
 800767a:	029b      	lsls	r3, r3, #10
 800767c:	b29b      	uxth	r3, r3
 800767e:	4313      	orrs	r3, r2
 8007680:	b29b      	uxth	r3, r3
 8007682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800768a:	b29a      	uxth	r2, r3
 800768c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800768e:	801a      	strh	r2, [r3, #0]
 8007690:	e020      	b.n	80076d4 <USB_EPStartXfer+0x942>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d11c      	bne.n	80076d4 <USB_EPStartXfer+0x942>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076ae:	4413      	add	r3, r2
 80076b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	00da      	lsls	r2, r3, #3
 80076ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076be:	4413      	add	r3, r2
 80076c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80076d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	891b      	ldrh	r3, [r3, #8]
 80076d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	6959      	ldr	r1, [r3, #20]
 80076e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa35 	bl	8007b5a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007706:	817b      	strh	r3, [r7, #10]
 8007708:	897b      	ldrh	r3, [r7, #10]
 800770a:	f083 0310 	eor.w	r3, r3, #16
 800770e:	817b      	strh	r3, [r7, #10]
 8007710:	897b      	ldrh	r3, [r7, #10]
 8007712:	f083 0320 	eor.w	r3, r3, #32
 8007716:	817b      	strh	r3, [r7, #10]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	441a      	add	r2, r3
 8007722:	897b      	ldrh	r3, [r7, #10]
 8007724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800772c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007734:	b29b      	uxth	r3, r3
 8007736:	8013      	strh	r3, [r2, #0]
 8007738:	e0d5      	b.n	80078e6 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	7b1b      	ldrb	r3, [r3, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d156      	bne.n	80077f0 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d122      	bne.n	8007790 <USB_EPStartXfer+0x9fe>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	78db      	ldrb	r3, [r3, #3]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d11e      	bne.n	8007790 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007768:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	441a      	add	r2, r3
 8007776:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800777a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800777e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007782:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778a:	b29b      	uxth	r3, r3
 800778c:	8013      	strh	r3, [r2, #0]
 800778e:	e01d      	b.n	80077cc <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80077a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077a6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	441a      	add	r2, r3
 80077b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80077b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	699a      	ldr	r2, [r3, #24]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d907      	bls.n	80077e8 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	699a      	ldr	r2, [r3, #24]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	1ad2      	subs	r2, r2, r3
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	619a      	str	r2, [r3, #24]
 80077e6:	e054      	b.n	8007892 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2200      	movs	r2, #0
 80077ec:	619a      	str	r2, [r3, #24]
 80077ee:	e050      	b.n	8007892 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	78db      	ldrb	r3, [r3, #3]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d142      	bne.n	800787e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d048      	beq.n	8007892 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007810:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <USB_EPStartXfer+0xa96>
 800781c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10b      	bne.n	8007840 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007828:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800782c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007830:	2b00      	cmp	r3, #0
 8007832:	d12e      	bne.n	8007892 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007834:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	d128      	bne.n	8007892 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29b      	uxth	r3, r3
 800784e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007856:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	441a      	add	r2, r3
 8007864:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800786c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007874:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007878:	b29b      	uxth	r3, r3
 800787a:	8013      	strh	r3, [r2, #0]
 800787c:	e009      	b.n	8007892 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	78db      	ldrb	r3, [r3, #3]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d103      	bne.n	800788e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2200      	movs	r2, #0
 800788a:	619a      	str	r2, [r3, #24]
 800788c:	e001      	b.n	8007892 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e02a      	b.n	80078e8 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80078ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80078b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80078b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80078bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80078c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	441a      	add	r2, r3
 80078ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80078d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	37b0      	adds	r7, #176	@ 0xb0
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	785b      	ldrb	r3, [r3, #1]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d020      	beq.n	8007944 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007918:	81bb      	strh	r3, [r7, #12]
 800791a:	89bb      	ldrh	r3, [r7, #12]
 800791c:	f083 0310 	eor.w	r3, r3, #16
 8007920:	81bb      	strh	r3, [r7, #12]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	441a      	add	r2, r3
 800792c:	89bb      	ldrh	r3, [r7, #12]
 800792e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800793a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800793e:	b29b      	uxth	r3, r3
 8007940:	8013      	strh	r3, [r2, #0]
 8007942:	e01f      	b.n	8007984 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800795a:	81fb      	strh	r3, [r7, #14]
 800795c:	89fb      	ldrh	r3, [r7, #14]
 800795e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007962:	81fb      	strh	r3, [r7, #14]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	441a      	add	r2, r3
 800796e:	89fb      	ldrh	r3, [r7, #14]
 8007970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800797c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007980:	b29b      	uxth	r3, r3
 8007982:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007992:	b480      	push	{r7}
 8007994:	b087      	sub	sp, #28
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d04c      	beq.n	8007a3e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	823b      	strh	r3, [r7, #16]
 80079b2:	8a3b      	ldrh	r3, [r7, #16]
 80079b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01b      	beq.n	80079f4 <USB_EPClearStall+0x62>
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079d2:	81fb      	strh	r3, [r7, #14]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	441a      	add	r2, r3
 80079de:	89fb      	ldrh	r3, [r7, #14]
 80079e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	78db      	ldrb	r3, [r3, #3]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d06c      	beq.n	8007ad6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a12:	81bb      	strh	r3, [r7, #12]
 8007a14:	89bb      	ldrh	r3, [r7, #12]
 8007a16:	f083 0320 	eor.w	r3, r3, #32
 8007a1a:	81bb      	strh	r3, [r7, #12]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	441a      	add	r2, r3
 8007a26:	89bb      	ldrh	r3, [r7, #12]
 8007a28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	8013      	strh	r3, [r2, #0]
 8007a3c:	e04b      	b.n	8007ad6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	82fb      	strh	r3, [r7, #22]
 8007a4c:	8afb      	ldrh	r3, [r7, #22]
 8007a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d01b      	beq.n	8007a8e <USB_EPClearStall+0xfc>
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a6c:	82bb      	strh	r3, [r7, #20]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	441a      	add	r2, r3
 8007a78:	8abb      	ldrh	r3, [r7, #20]
 8007a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aa4:	827b      	strh	r3, [r7, #18]
 8007aa6:	8a7b      	ldrh	r3, [r7, #18]
 8007aa8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007aac:	827b      	strh	r3, [r7, #18]
 8007aae:	8a7b      	ldrh	r3, [r7, #18]
 8007ab0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ab4:	827b      	strh	r3, [r7, #18]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	441a      	add	r2, r3
 8007ac0:	8a7b      	ldrh	r3, [r7, #18]
 8007ac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d103      	bne.n	8007afe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2280      	movs	r2, #128	@ 0x80
 8007afa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b085      	sub	sp, #20
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b08b      	sub	sp, #44	@ 0x2c
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	4611      	mov	r1, r2
 8007b66:	461a      	mov	r2, r3
 8007b68:	460b      	mov	r3, r1
 8007b6a:	80fb      	strh	r3, [r7, #6]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b70:	88bb      	ldrh	r3, [r7, #4]
 8007b72:	3301      	adds	r3, #1
 8007b74:	085b      	lsrs	r3, r3, #1
 8007b76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b80:	88fa      	ldrh	r2, [r7, #6]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b8a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b90:	e01c      	b.n	8007bcc <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b21b      	sxth	r3, r3
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	b21a      	sxth	r2, r3
 8007ba4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	b21b      	sxth	r3, r3
 8007bac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	8a7a      	ldrh	r2, [r7, #18]
 8007bb2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	3302      	adds	r3, #2
 8007bb8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1df      	bne.n	8007b92 <USB_WritePMA+0x38>
  }
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	372c      	adds	r7, #44	@ 0x2c
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b08b      	sub	sp, #44	@ 0x2c
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	4611      	mov	r1, r2
 8007bec:	461a      	mov	r2, r3
 8007bee:	460b      	mov	r3, r1
 8007bf0:	80fb      	strh	r3, [r7, #6]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007bf6:	88bb      	ldrh	r3, [r7, #4]
 8007bf8:	085b      	lsrs	r3, r3, #1
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c06:	88fa      	ldrh	r2, [r7, #6]
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c10:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c16:	e018      	b.n	8007c4a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	3302      	adds	r3, #2
 8007c24:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	3301      	adds	r3, #1
 8007c32:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	3301      	adds	r3, #1
 8007c42:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	3b01      	subs	r3, #1
 8007c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e3      	bne.n	8007c18 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007c50:	88bb      	ldrh	r3, [r7, #4]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	881b      	ldrh	r3, [r3, #0]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	701a      	strb	r2, [r3, #0]
  }
}
 8007c6c:	bf00      	nop
 8007c6e:	372c      	adds	r7, #44	@ 0x2c
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c84:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007c88:	f002 f8a6 	bl	8009dd8 <USBD_static_malloc>
 8007c8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d105      	bne.n	8007ca0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e066      	b.n	8007d6e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	7c1b      	ldrb	r3, [r3, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d119      	bne.n	8007ce4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	2181      	movs	r1, #129	@ 0x81
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 ff34 	bl	8009b26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cc8:	2202      	movs	r2, #2
 8007cca:	2101      	movs	r1, #1
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 ff2a 	bl	8009b26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2210      	movs	r2, #16
 8007cde:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8007ce2:	e016      	b.n	8007d12 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ce4:	2340      	movs	r3, #64	@ 0x40
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	2181      	movs	r1, #129	@ 0x81
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 ff1b 	bl	8009b26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cf6:	2340      	movs	r3, #64	@ 0x40
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 ff12 	bl	8009b26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2210      	movs	r2, #16
 8007d0e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d12:	2308      	movs	r3, #8
 8007d14:	2203      	movs	r2, #3
 8007d16:	2182      	movs	r1, #130	@ 0x82
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 ff04 	bl	8009b26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	7c1b      	ldrb	r3, [r3, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d109      	bne.n	8007d5c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d52:	2101      	movs	r1, #1
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 ffd5 	bl	8009d04 <USBD_LL_PrepareReceive>
 8007d5a:	e007      	b.n	8007d6c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d62:	2340      	movs	r3, #64	@ 0x40
 8007d64:	2101      	movs	r1, #1
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 ffcc 	bl	8009d04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d82:	2181      	movs	r1, #129	@ 0x81
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 fef4 	bl	8009b72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d90:	2101      	movs	r1, #1
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 feed 	bl	8009b72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007da0:	2182      	movs	r1, #130	@ 0x82
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 fee5 	bl	8009b72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00e      	beq.n	8007de0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f002 f80e 	bl	8009df4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dfc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e0af      	b.n	8007f74 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d03f      	beq.n	8007ea0 <USBD_CDC_Setup+0xb4>
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	f040 809f 	bne.w	8007f64 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	88db      	ldrh	r3, [r3, #6]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d02e      	beq.n	8007e8c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	b25b      	sxtb	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	da16      	bge.n	8007e66 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007e44:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	88d2      	ldrh	r2, [r2, #6]
 8007e4a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	88db      	ldrh	r3, [r3, #6]
 8007e50:	2b07      	cmp	r3, #7
 8007e52:	bf28      	it	cs
 8007e54:	2307      	movcs	r3, #7
 8007e56:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	89fa      	ldrh	r2, [r7, #14]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 fa9f 	bl	80093a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007e64:	e085      	b.n	8007f72 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	785a      	ldrb	r2, [r3, #1]
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	88db      	ldrh	r3, [r3, #6]
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007e7c:	6939      	ldr	r1, [r7, #16]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	88db      	ldrh	r3, [r3, #6]
 8007e82:	461a      	mov	r2, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 fab8 	bl	80093fa <USBD_CtlPrepareRx>
      break;
 8007e8a:	e072      	b.n	8007f72 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	7850      	ldrb	r0, [r2, #1]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	4798      	blx	r3
      break;
 8007e9e:	e068      	b.n	8007f72 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	2b0b      	cmp	r3, #11
 8007ea6:	d852      	bhi.n	8007f4e <USBD_CDC_Setup+0x162>
 8007ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb0 <USBD_CDC_Setup+0xc4>)
 8007eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eae:	bf00      	nop
 8007eb0:	08007ee1 	.word	0x08007ee1
 8007eb4:	08007f5d 	.word	0x08007f5d
 8007eb8:	08007f4f 	.word	0x08007f4f
 8007ebc:	08007f4f 	.word	0x08007f4f
 8007ec0:	08007f4f 	.word	0x08007f4f
 8007ec4:	08007f4f 	.word	0x08007f4f
 8007ec8:	08007f4f 	.word	0x08007f4f
 8007ecc:	08007f4f 	.word	0x08007f4f
 8007ed0:	08007f4f 	.word	0x08007f4f
 8007ed4:	08007f4f 	.word	0x08007f4f
 8007ed8:	08007f0b 	.word	0x08007f0b
 8007edc:	08007f35 	.word	0x08007f35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d107      	bne.n	8007efc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007eec:	f107 030a 	add.w	r3, r7, #10
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 fa54 	bl	80093a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007efa:	e032      	b.n	8007f62 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 f9de 	bl	80092c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f04:	2303      	movs	r3, #3
 8007f06:	75fb      	strb	r3, [r7, #23]
          break;
 8007f08:	e02b      	b.n	8007f62 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d107      	bne.n	8007f26 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f16:	f107 030d 	add.w	r3, r7, #13
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fa3f 	bl	80093a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f24:	e01d      	b.n	8007f62 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 f9c9 	bl	80092c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	75fb      	strb	r3, [r7, #23]
          break;
 8007f32:	e016      	b.n	8007f62 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d00f      	beq.n	8007f60 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 f9bc 	bl	80092c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f4c:	e008      	b.n	8007f60 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f9b5 	bl	80092c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f56:	2303      	movs	r3, #3
 8007f58:	75fb      	strb	r3, [r7, #23]
          break;
 8007f5a:	e002      	b.n	8007f62 <USBD_CDC_Setup+0x176>
          break;
 8007f5c:	bf00      	nop
 8007f5e:	e008      	b.n	8007f72 <USBD_CDC_Setup+0x186>
          break;
 8007f60:	bf00      	nop
      }
      break;
 8007f62:	e006      	b.n	8007f72 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 f9aa 	bl	80092c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f70:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007f8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e04f      	b.n	800803e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fa4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007fa6:	78fa      	ldrb	r2, [r7, #3]
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	3318      	adds	r3, #24
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d029      	beq.n	8008010 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007fbc:	78fa      	ldrb	r2, [r7, #3]
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	440b      	add	r3, r1
 8007fca:	3318      	adds	r3, #24
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	78f9      	ldrb	r1, [r7, #3]
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	00db      	lsls	r3, r3, #3
 8007fda:	4403      	add	r3, r0
 8007fdc:	3320      	adds	r3, #32
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fe4:	fb01 f303 	mul.w	r3, r1, r3
 8007fe8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d110      	bne.n	8008010 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	3318      	adds	r3, #24
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008002:	78f9      	ldrb	r1, [r7, #3]
 8008004:	2300      	movs	r3, #0
 8008006:	2200      	movs	r2, #0
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 fe5a 	bl	8009cc2 <USBD_LL_Transmit>
 800800e:	e015      	b.n	800803c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2200      	movs	r2, #0
 8008014:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008038:	78fa      	ldrb	r2, [r7, #3]
 800803a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008058:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008064:	2303      	movs	r3, #3
 8008066:	e015      	b.n	8008094 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 fe6a 	bl	8009d46 <USBD_LL_GetRxDataSize>
 8008072:	4602      	mov	r2, r0
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800808e:	4611      	mov	r1, r2
 8008090:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080aa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e01a      	b.n	80080ec <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d014      	beq.n	80080ea <USBD_CDC_EP0_RxReady+0x4e>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80080c6:	2bff      	cmp	r3, #255	@ 0xff
 80080c8:	d00f      	beq.n	80080ea <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80080d8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	22ff      	movs	r2, #255	@ 0xff
 80080e6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2243      	movs	r2, #67	@ 0x43
 8008100:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008102:	4b03      	ldr	r3, [pc, #12]	@ (8008110 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	20000094 	.word	0x20000094

08008114 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2243      	movs	r2, #67	@ 0x43
 8008120:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008122:	4b03      	ldr	r3, [pc, #12]	@ (8008130 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	20000050 	.word	0x20000050

08008134 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2243      	movs	r2, #67	@ 0x43
 8008140:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008142:	4b03      	ldr	r3, [pc, #12]	@ (8008150 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	200000d8 	.word	0x200000d8

08008154 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	220a      	movs	r2, #10
 8008160:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008162:	4b03      	ldr	r3, [pc, #12]	@ (8008170 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	2000000c 	.word	0x2000000c

08008174 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008184:	2303      	movs	r3, #3
 8008186:	e004      	b.n	8008192 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800819e:	b480      	push	{r7}
 80081a0:	b087      	sub	sp, #28
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081b0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e008      	b.n	80081ce <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081ea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e004      	b.n	8008200 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800821a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008226:	2303      	movs	r3, #3
 8008228:	e016      	b.n	8008258 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	7c1b      	ldrb	r3, [r3, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d109      	bne.n	8008246 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008238:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800823c:	2101      	movs	r1, #1
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 fd60 	bl	8009d04 <USBD_LL_PrepareReceive>
 8008244:	e007      	b.n	8008256 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800824c:	2340      	movs	r3, #64	@ 0x40
 800824e:	2101      	movs	r1, #1
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 fd57 	bl	8009d04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008274:	2303      	movs	r3, #3
 8008276:	e01f      	b.n	80082b8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	79fa      	ldrb	r2, [r7, #7]
 80082aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f001 fbbf 	bl	8009a30 <USBD_LL_Init>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3718      	adds	r7, #24
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e016      	b.n	8008306 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f4:	f107 020e 	add.w	r2, r7, #14
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	4602      	mov	r2, r0
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 fbea 	bl	8009af0 <USBD_LL_Start>
 800831c:	4603      	mov	r3, r0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008348:	2303      	movs	r3, #3
 800834a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	78fa      	ldrb	r2, [r7, #3]
 8008360:	4611      	mov	r1, r2
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	4798      	blx	r3
 8008366:	4603      	mov	r3, r0
 8008368:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800836a:	7bfb      	ldrb	r3, [r7, #15]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	78fa      	ldrb	r2, [r7, #3]
 8008394:	4611      	mov	r1, r2
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	4798      	blx	r3
  }

  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 ff48 	bl	800924c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80083ca:	461a      	mov	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083d8:	f003 031f 	and.w	r3, r3, #31
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d01a      	beq.n	8008416 <USBD_LL_SetupStage+0x72>
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d822      	bhi.n	800842a <USBD_LL_SetupStage+0x86>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <USBD_LL_SetupStage+0x4a>
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d00a      	beq.n	8008402 <USBD_LL_SetupStage+0x5e>
 80083ec:	e01d      	b.n	800842a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f9f0 	bl	80087dc <USBD_StdDevReq>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008400:	e020      	b.n	8008444 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa54 	bl	80088b8 <USBD_StdItfReq>
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]
      break;
 8008414:	e016      	b.n	8008444 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fa93 	bl	800894a <USBD_StdEPReq>
 8008424:	4603      	mov	r3, r0
 8008426:	73fb      	strb	r3, [r7, #15]
      break;
 8008428:	e00c      	b.n	8008444 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008430:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008434:	b2db      	uxtb	r3, r3
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 fbb9 	bl	8009bb0 <USBD_LL_StallEP>
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]
      break;
 8008442:	bf00      	nop
  }

  return ret;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b086      	sub	sp, #24
 8008452:	af00      	add	r7, sp, #0
 8008454:	60f8      	str	r0, [r7, #12]
 8008456:	460b      	mov	r3, r1
 8008458:	607a      	str	r2, [r7, #4]
 800845a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800845c:	7afb      	ldrb	r3, [r7, #11]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d138      	bne.n	80084d4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008468:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008470:	2b03      	cmp	r3, #3
 8008472:	d14a      	bne.n	800850a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	429a      	cmp	r2, r3
 800847e:	d913      	bls.n	80084a8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	1ad2      	subs	r2, r2, r3
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	4293      	cmp	r3, r2
 8008498:	bf28      	it	cs
 800849a:	4613      	movcs	r3, r2
 800849c:	461a      	mov	r2, r3
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 ffc7 	bl	8009434 <USBD_CtlContinueRx>
 80084a6:	e030      	b.n	800850a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d10b      	bne.n	80084cc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d005      	beq.n	80084cc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 ffc2 	bl	8009456 <USBD_CtlSendStatus>
 80084d2:	e01a      	b.n	800850a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d114      	bne.n	800850a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00e      	beq.n	800850a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	7afa      	ldrb	r2, [r7, #11]
 80084f6:	4611      	mov	r1, r2
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	4798      	blx	r3
 80084fc:	4603      	mov	r3, r0
 80084fe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008506:	7dfb      	ldrb	r3, [r7, #23]
 8008508:	e000      	b.n	800850c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	460b      	mov	r3, r1
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008522:	7afb      	ldrb	r3, [r7, #11]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d16b      	bne.n	8008600 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3314      	adds	r3, #20
 800852c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008534:	2b02      	cmp	r3, #2
 8008536:	d156      	bne.n	80085e6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	429a      	cmp	r2, r3
 8008542:	d914      	bls.n	800856e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	1ad2      	subs	r2, r2, r3
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	461a      	mov	r2, r3
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 ff3c 	bl	80093d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008560:	2300      	movs	r3, #0
 8008562:	2200      	movs	r2, #0
 8008564:	2100      	movs	r1, #0
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f001 fbcc 	bl	8009d04 <USBD_LL_PrepareReceive>
 800856c:	e03b      	b.n	80085e6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	429a      	cmp	r2, r3
 8008578:	d11c      	bne.n	80085b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008582:	429a      	cmp	r2, r3
 8008584:	d316      	bcc.n	80085b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008590:	429a      	cmp	r2, r3
 8008592:	d20f      	bcs.n	80085b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008594:	2200      	movs	r2, #0
 8008596:	2100      	movs	r1, #0
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 ff1d 	bl	80093d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085a6:	2300      	movs	r3, #0
 80085a8:	2200      	movs	r2, #0
 80085aa:	2100      	movs	r1, #0
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f001 fba9 	bl	8009d04 <USBD_LL_PrepareReceive>
 80085b2:	e018      	b.n	80085e6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d10b      	bne.n	80085d8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085d8:	2180      	movs	r1, #128	@ 0x80
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f001 fae8 	bl	8009bb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 ff4b 	bl	800947c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d122      	bne.n	8008636 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f7ff fe98 	bl	8008326 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80085fe:	e01a      	b.n	8008636 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b03      	cmp	r3, #3
 800860a:	d114      	bne.n	8008636 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00e      	beq.n	8008636 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	7afa      	ldrb	r2, [r7, #11]
 8008622:	4611      	mov	r1, r2
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	4798      	blx	r3
 8008628:	4603      	mov	r3, r0
 800862a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008632:	7dfb      	ldrb	r3, [r7, #23]
 8008634:	e000      	b.n	8008638 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008670:	2303      	movs	r3, #3
 8008672:	e02f      	b.n	80086d4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00f      	beq.n	800869e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6852      	ldr	r2, [r2, #4]
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	4611      	mov	r1, r2
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800869e:	2340      	movs	r3, #64	@ 0x40
 80086a0:	2200      	movs	r2, #0
 80086a2:	2100      	movs	r1, #0
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 fa3e 	bl	8009b26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2240      	movs	r2, #64	@ 0x40
 80086b6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086ba:	2340      	movs	r3, #64	@ 0x40
 80086bc:	2200      	movs	r2, #0
 80086be:	2180      	movs	r1, #128	@ 0x80
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 fa30 	bl	8009b26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2240      	movs	r2, #64	@ 0x40
 80086d0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800870a:	b2da      	uxtb	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2204      	movs	r2, #4
 8008716:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b04      	cmp	r3, #4
 800873a:	d106      	bne.n	800874a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008742:	b2da      	uxtb	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800876a:	2303      	movs	r3, #3
 800876c:	e012      	b.n	8008794 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b03      	cmp	r3, #3
 8008778:	d10b      	bne.n	8008792 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	3301      	adds	r3, #1
 80087b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80087ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	b21a      	sxth	r2, r3
 80087c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	b21b      	sxth	r3, r3
 80087ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087cc:	89fb      	ldrh	r3, [r7, #14]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	371c      	adds	r7, #28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087f2:	2b40      	cmp	r3, #64	@ 0x40
 80087f4:	d005      	beq.n	8008802 <USBD_StdDevReq+0x26>
 80087f6:	2b40      	cmp	r3, #64	@ 0x40
 80087f8:	d853      	bhi.n	80088a2 <USBD_StdDevReq+0xc6>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00b      	beq.n	8008816 <USBD_StdDevReq+0x3a>
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d14f      	bne.n	80088a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]
      break;
 8008814:	e04a      	b.n	80088ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b09      	cmp	r3, #9
 800881c:	d83b      	bhi.n	8008896 <USBD_StdDevReq+0xba>
 800881e:	a201      	add	r2, pc, #4	@ (adr r2, 8008824 <USBD_StdDevReq+0x48>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	08008879 	.word	0x08008879
 8008828:	0800888d 	.word	0x0800888d
 800882c:	08008897 	.word	0x08008897
 8008830:	08008883 	.word	0x08008883
 8008834:	08008897 	.word	0x08008897
 8008838:	08008857 	.word	0x08008857
 800883c:	0800884d 	.word	0x0800884d
 8008840:	08008897 	.word	0x08008897
 8008844:	0800886f 	.word	0x0800886f
 8008848:	08008861 	.word	0x08008861
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f9de 	bl	8008c10 <USBD_GetDescriptor>
          break;
 8008854:	e024      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fb6d 	bl	8008f38 <USBD_SetAddress>
          break;
 800885e:	e01f      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fbac 	bl	8008fc0 <USBD_SetConfig>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]
          break;
 800886c:	e018      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fc4b 	bl	800910c <USBD_GetConfig>
          break;
 8008876:	e013      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fc7c 	bl	8009178 <USBD_GetStatus>
          break;
 8008880:	e00e      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fcab 	bl	80091e0 <USBD_SetFeature>
          break;
 800888a:	e009      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fcba 	bl	8009208 <USBD_ClrFeature>
          break;
 8008894:	e004      	b.n	80088a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fd11 	bl	80092c0 <USBD_CtlError>
          break;
 800889e:	bf00      	nop
      }
      break;
 80088a0:	e004      	b.n	80088ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fd0b 	bl	80092c0 <USBD_CtlError>
      break;
 80088aa:	bf00      	nop
  }

  return ret;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop

080088b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088ce:	2b40      	cmp	r3, #64	@ 0x40
 80088d0:	d005      	beq.n	80088de <USBD_StdItfReq+0x26>
 80088d2:	2b40      	cmp	r3, #64	@ 0x40
 80088d4:	d82f      	bhi.n	8008936 <USBD_StdItfReq+0x7e>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <USBD_StdItfReq+0x26>
 80088da:	2b20      	cmp	r3, #32
 80088dc:	d12b      	bne.n	8008936 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	3b01      	subs	r3, #1
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d81d      	bhi.n	8008928 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	889b      	ldrh	r3, [r3, #4]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d813      	bhi.n	800891e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	4798      	blx	r3
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	88db      	ldrh	r3, [r3, #6]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d110      	bne.n	8008932 <USBD_StdItfReq+0x7a>
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10d      	bne.n	8008932 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fd9d 	bl	8009456 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800891c:	e009      	b.n	8008932 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fccd 	bl	80092c0 <USBD_CtlError>
          break;
 8008926:	e004      	b.n	8008932 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fcc8 	bl	80092c0 <USBD_CtlError>
          break;
 8008930:	e000      	b.n	8008934 <USBD_StdItfReq+0x7c>
          break;
 8008932:	bf00      	nop
      }
      break;
 8008934:	e004      	b.n	8008940 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fcc1 	bl	80092c0 <USBD_CtlError>
      break;
 800893e:	bf00      	nop
  }

  return ret;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	889b      	ldrh	r3, [r3, #4]
 800895c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008966:	2b40      	cmp	r3, #64	@ 0x40
 8008968:	d007      	beq.n	800897a <USBD_StdEPReq+0x30>
 800896a:	2b40      	cmp	r3, #64	@ 0x40
 800896c:	f200 8145 	bhi.w	8008bfa <USBD_StdEPReq+0x2b0>
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00c      	beq.n	800898e <USBD_StdEPReq+0x44>
 8008974:	2b20      	cmp	r3, #32
 8008976:	f040 8140 	bne.w	8008bfa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	4798      	blx	r3
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
      break;
 800898c:	e13a      	b.n	8008c04 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	785b      	ldrb	r3, [r3, #1]
 8008992:	2b03      	cmp	r3, #3
 8008994:	d007      	beq.n	80089a6 <USBD_StdEPReq+0x5c>
 8008996:	2b03      	cmp	r3, #3
 8008998:	f300 8129 	bgt.w	8008bee <USBD_StdEPReq+0x2a4>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d07f      	beq.n	8008aa0 <USBD_StdEPReq+0x156>
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d03c      	beq.n	8008a1e <USBD_StdEPReq+0xd4>
 80089a4:	e123      	b.n	8008bee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d002      	beq.n	80089b8 <USBD_StdEPReq+0x6e>
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d016      	beq.n	80089e4 <USBD_StdEPReq+0x9a>
 80089b6:	e02c      	b.n	8008a12 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00d      	beq.n	80089da <USBD_StdEPReq+0x90>
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b80      	cmp	r3, #128	@ 0x80
 80089c2:	d00a      	beq.n	80089da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f8f1 	bl	8009bb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ce:	2180      	movs	r1, #128	@ 0x80
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 f8ed 	bl	8009bb0 <USBD_LL_StallEP>
 80089d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089d8:	e020      	b.n	8008a1c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc6f 	bl	80092c0 <USBD_CtlError>
              break;
 80089e2:	e01b      	b.n	8008a1c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	885b      	ldrh	r3, [r3, #2]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10e      	bne.n	8008a0a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00b      	beq.n	8008a0a <USBD_StdEPReq+0xc0>
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b80      	cmp	r3, #128	@ 0x80
 80089f6:	d008      	beq.n	8008a0a <USBD_StdEPReq+0xc0>
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	88db      	ldrh	r3, [r3, #6]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d104      	bne.n	8008a0a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 f8d3 	bl	8009bb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fd23 	bl	8009456 <USBD_CtlSendStatus>

              break;
 8008a10:	e004      	b.n	8008a1c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fc53 	bl	80092c0 <USBD_CtlError>
              break;
 8008a1a:	bf00      	nop
          }
          break;
 8008a1c:	e0ec      	b.n	8008bf8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d002      	beq.n	8008a30 <USBD_StdEPReq+0xe6>
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d016      	beq.n	8008a5c <USBD_StdEPReq+0x112>
 8008a2e:	e030      	b.n	8008a92 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00d      	beq.n	8008a52 <USBD_StdEPReq+0x108>
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	2b80      	cmp	r3, #128	@ 0x80
 8008a3a:	d00a      	beq.n	8008a52 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 f8b5 	bl	8009bb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a46:	2180      	movs	r1, #128	@ 0x80
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 f8b1 	bl	8009bb0 <USBD_LL_StallEP>
 8008a4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a50:	e025      	b.n	8008a9e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fc33 	bl	80092c0 <USBD_CtlError>
              break;
 8008a5a:	e020      	b.n	8008a9e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	885b      	ldrh	r3, [r3, #2]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d11b      	bne.n	8008a9c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d004      	beq.n	8008a78 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 f8bb 	bl	8009bee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fcec 	bl	8009456 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	4798      	blx	r3
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008a90:	e004      	b.n	8008a9c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fc13 	bl	80092c0 <USBD_CtlError>
              break;
 8008a9a:	e000      	b.n	8008a9e <USBD_StdEPReq+0x154>
              break;
 8008a9c:	bf00      	nop
          }
          break;
 8008a9e:	e0ab      	b.n	8008bf8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d002      	beq.n	8008ab2 <USBD_StdEPReq+0x168>
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d032      	beq.n	8008b16 <USBD_StdEPReq+0x1cc>
 8008ab0:	e097      	b.n	8008be2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d007      	beq.n	8008ac8 <USBD_StdEPReq+0x17e>
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	2b80      	cmp	r3, #128	@ 0x80
 8008abc:	d004      	beq.n	8008ac8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fbfd 	bl	80092c0 <USBD_CtlError>
                break;
 8008ac6:	e091      	b.n	8008bec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	da0b      	bge.n	8008ae8 <USBD_StdEPReq+0x19e>
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	3310      	adds	r3, #16
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	e00b      	b.n	8008b00 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aee:	4613      	mov	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	4413      	add	r3, r2
 8008afe:	3304      	adds	r3, #4
 8008b00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fc47 	bl	80093a2 <USBD_CtlSendData>
              break;
 8008b14:	e06a      	b.n	8008bec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da11      	bge.n	8008b42 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	f003 020f 	and.w	r2, r3, #15
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	440b      	add	r3, r1
 8008b30:	3324      	adds	r3, #36	@ 0x24
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d117      	bne.n	8008b68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fbc0 	bl	80092c0 <USBD_CtlError>
                  break;
 8008b40:	e054      	b.n	8008bec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
 8008b44:	f003 020f 	and.w	r2, r3, #15
 8008b48:	6879      	ldr	r1, [r7, #4]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	440b      	add	r3, r1
 8008b54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d104      	bne.n	8008b68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fbad 	bl	80092c0 <USBD_CtlError>
                  break;
 8008b66:	e041      	b.n	8008bec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	da0b      	bge.n	8008b88 <USBD_StdEPReq+0x23e>
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	3310      	adds	r3, #16
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	3304      	adds	r3, #4
 8008b86:	e00b      	b.n	8008ba0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <USBD_StdEPReq+0x264>
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	2b80      	cmp	r3, #128	@ 0x80
 8008bac:	d103      	bne.n	8008bb6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	e00e      	b.n	8008bd4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 f836 	bl	8009c2c <USBD_LL_IsStallEP>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	e002      	b.n	8008bd4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fbe1 	bl	80093a2 <USBD_CtlSendData>
              break;
 8008be0:	e004      	b.n	8008bec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fb6b 	bl	80092c0 <USBD_CtlError>
              break;
 8008bea:	bf00      	nop
          }
          break;
 8008bec:	e004      	b.n	8008bf8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fb65 	bl	80092c0 <USBD_CtlError>
          break;
 8008bf6:	bf00      	nop
      }
      break;
 8008bf8:	e004      	b.n	8008c04 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fb5f 	bl	80092c0 <USBD_CtlError>
      break;
 8008c02:	bf00      	nop
  }

  return ret;
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	885b      	ldrh	r3, [r3, #2]
 8008c2a:	0a1b      	lsrs	r3, r3, #8
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	2b0e      	cmp	r3, #14
 8008c32:	f200 8152 	bhi.w	8008eda <USBD_GetDescriptor+0x2ca>
 8008c36:	a201      	add	r2, pc, #4	@ (adr r2, 8008c3c <USBD_GetDescriptor+0x2c>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008cad 	.word	0x08008cad
 8008c40:	08008cc5 	.word	0x08008cc5
 8008c44:	08008d05 	.word	0x08008d05
 8008c48:	08008edb 	.word	0x08008edb
 8008c4c:	08008edb 	.word	0x08008edb
 8008c50:	08008e7b 	.word	0x08008e7b
 8008c54:	08008ea7 	.word	0x08008ea7
 8008c58:	08008edb 	.word	0x08008edb
 8008c5c:	08008edb 	.word	0x08008edb
 8008c60:	08008edb 	.word	0x08008edb
 8008c64:	08008edb 	.word	0x08008edb
 8008c68:	08008edb 	.word	0x08008edb
 8008c6c:	08008edb 	.word	0x08008edb
 8008c70:	08008edb 	.word	0x08008edb
 8008c74:	08008c79 	.word	0x08008c79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00b      	beq.n	8008c9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	7c12      	ldrb	r2, [r2, #16]
 8008c90:	f107 0108 	add.w	r1, r7, #8
 8008c94:	4610      	mov	r0, r2
 8008c96:	4798      	blx	r3
 8008c98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c9a:	e126      	b.n	8008eea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fb0e 	bl	80092c0 <USBD_CtlError>
        err++;
 8008ca4:	7afb      	ldrb	r3, [r7, #11]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	72fb      	strb	r3, [r7, #11]
      break;
 8008caa:	e11e      	b.n	8008eea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	7c12      	ldrb	r2, [r2, #16]
 8008cb8:	f107 0108 	add.w	r1, r7, #8
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4798      	blx	r3
 8008cc0:	60f8      	str	r0, [r7, #12]
      break;
 8008cc2:	e112      	b.n	8008eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	7c1b      	ldrb	r3, [r3, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10d      	bne.n	8008ce8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd4:	f107 0208 	add.w	r2, r7, #8
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4798      	blx	r3
 8008cdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ce6:	e100      	b.n	8008eea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf0:	f107 0208 	add.w	r2, r7, #8
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
 8008cf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	2202      	movs	r2, #2
 8008d00:	701a      	strb	r2, [r3, #0]
      break;
 8008d02:	e0f2      	b.n	8008eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	885b      	ldrh	r3, [r3, #2]
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	f200 80ac 	bhi.w	8008e68 <USBD_GetDescriptor+0x258>
 8008d10:	a201      	add	r2, pc, #4	@ (adr r2, 8008d18 <USBD_GetDescriptor+0x108>)
 8008d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d16:	bf00      	nop
 8008d18:	08008d31 	.word	0x08008d31
 8008d1c:	08008d65 	.word	0x08008d65
 8008d20:	08008d99 	.word	0x08008d99
 8008d24:	08008dcd 	.word	0x08008dcd
 8008d28:	08008e01 	.word	0x08008e01
 8008d2c:	08008e35 	.word	0x08008e35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00b      	beq.n	8008d54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	7c12      	ldrb	r2, [r2, #16]
 8008d48:	f107 0108 	add.w	r1, r7, #8
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4798      	blx	r3
 8008d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d52:	e091      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fab2 	bl	80092c0 <USBD_CtlError>
            err++;
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	72fb      	strb	r3, [r7, #11]
          break;
 8008d62:	e089      	b.n	8008e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00b      	beq.n	8008d88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	7c12      	ldrb	r2, [r2, #16]
 8008d7c:	f107 0108 	add.w	r1, r7, #8
 8008d80:	4610      	mov	r0, r2
 8008d82:	4798      	blx	r3
 8008d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d86:	e077      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa98 	bl	80092c0 <USBD_CtlError>
            err++;
 8008d90:	7afb      	ldrb	r3, [r7, #11]
 8008d92:	3301      	adds	r3, #1
 8008d94:	72fb      	strb	r3, [r7, #11]
          break;
 8008d96:	e06f      	b.n	8008e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	7c12      	ldrb	r2, [r2, #16]
 8008db0:	f107 0108 	add.w	r1, r7, #8
 8008db4:	4610      	mov	r0, r2
 8008db6:	4798      	blx	r3
 8008db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dba:	e05d      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fa7e 	bl	80092c0 <USBD_CtlError>
            err++;
 8008dc4:	7afb      	ldrb	r3, [r7, #11]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8008dca:	e055      	b.n	8008e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00b      	beq.n	8008df0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	7c12      	ldrb	r2, [r2, #16]
 8008de4:	f107 0108 	add.w	r1, r7, #8
 8008de8:	4610      	mov	r0, r2
 8008dea:	4798      	blx	r3
 8008dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dee:	e043      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fa64 	bl	80092c0 <USBD_CtlError>
            err++;
 8008df8:	7afb      	ldrb	r3, [r7, #11]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dfe:	e03b      	b.n	8008e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00b      	beq.n	8008e24 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	7c12      	ldrb	r2, [r2, #16]
 8008e18:	f107 0108 	add.w	r1, r7, #8
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4798      	blx	r3
 8008e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e22:	e029      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fa4a 	bl	80092c0 <USBD_CtlError>
            err++;
 8008e2c:	7afb      	ldrb	r3, [r7, #11]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	72fb      	strb	r3, [r7, #11]
          break;
 8008e32:	e021      	b.n	8008e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	7c12      	ldrb	r2, [r2, #16]
 8008e4c:	f107 0108 	add.w	r1, r7, #8
 8008e50:	4610      	mov	r0, r2
 8008e52:	4798      	blx	r3
 8008e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e56:	e00f      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fa30 	bl	80092c0 <USBD_CtlError>
            err++;
 8008e60:	7afb      	ldrb	r3, [r7, #11]
 8008e62:	3301      	adds	r3, #1
 8008e64:	72fb      	strb	r3, [r7, #11]
          break;
 8008e66:	e007      	b.n	8008e78 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa28 	bl	80092c0 <USBD_CtlError>
          err++;
 8008e70:	7afb      	ldrb	r3, [r7, #11]
 8008e72:	3301      	adds	r3, #1
 8008e74:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008e76:	bf00      	nop
      }
      break;
 8008e78:	e037      	b.n	8008eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	7c1b      	ldrb	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e8a:	f107 0208 	add.w	r2, r7, #8
 8008e8e:	4610      	mov	r0, r2
 8008e90:	4798      	blx	r3
 8008e92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e94:	e029      	b.n	8008eea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fa11 	bl	80092c0 <USBD_CtlError>
        err++;
 8008e9e:	7afb      	ldrb	r3, [r7, #11]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ea4:	e021      	b.n	8008eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	7c1b      	ldrb	r3, [r3, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10d      	bne.n	8008eca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb6:	f107 0208 	add.w	r2, r7, #8
 8008eba:	4610      	mov	r0, r2
 8008ebc:	4798      	blx	r3
 8008ebe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	2207      	movs	r2, #7
 8008ec6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ec8:	e00f      	b.n	8008eea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f9f7 	bl	80092c0 <USBD_CtlError>
        err++;
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ed8:	e007      	b.n	8008eea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f9ef 	bl	80092c0 <USBD_CtlError>
      err++;
 8008ee2:	7afb      	ldrb	r3, [r7, #11]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ee8:	bf00      	nop
  }

  if (err != 0U)
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d11e      	bne.n	8008f2e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	88db      	ldrh	r3, [r3, #6]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d016      	beq.n	8008f26 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008ef8:	893b      	ldrh	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00e      	beq.n	8008f1c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	88da      	ldrh	r2, [r3, #6]
 8008f02:	893b      	ldrh	r3, [r7, #8]
 8008f04:	4293      	cmp	r3, r2
 8008f06:	bf28      	it	cs
 8008f08:	4613      	movcs	r3, r2
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f0e:	893b      	ldrh	r3, [r7, #8]
 8008f10:	461a      	mov	r2, r3
 8008f12:	68f9      	ldr	r1, [r7, #12]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa44 	bl	80093a2 <USBD_CtlSendData>
 8008f1a:	e009      	b.n	8008f30 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f9ce 	bl	80092c0 <USBD_CtlError>
 8008f24:	e004      	b.n	8008f30 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa95 	bl	8009456 <USBD_CtlSendStatus>
 8008f2c:	e000      	b.n	8008f30 <USBD_GetDescriptor+0x320>
    return;
 8008f2e:	bf00      	nop
  }
}
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop

08008f38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	889b      	ldrh	r3, [r3, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d131      	bne.n	8008fae <USBD_SetAddress+0x76>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	88db      	ldrh	r3, [r3, #6]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d12d      	bne.n	8008fae <USBD_SetAddress+0x76>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	885b      	ldrh	r3, [r3, #2]
 8008f56:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f58:	d829      	bhi.n	8008fae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	885b      	ldrh	r3, [r3, #2]
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d104      	bne.n	8008f7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f9a3 	bl	80092c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7a:	e01d      	b.n	8008fb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	7bfa      	ldrb	r2, [r7, #15]
 8008f80:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fe7b 	bl	8009c84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fa61 	bl	8009456 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d004      	beq.n	8008fa4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa2:	e009      	b.n	8008fb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fac:	e004      	b.n	8008fb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f985 	bl	80092c0 <USBD_CtlError>
  }
}
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	885b      	ldrh	r3, [r3, #2]
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8009108 <USBD_SetConfig+0x148>)
 8008fd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fd8:	4b4b      	ldr	r3, [pc, #300]	@ (8009108 <USBD_SetConfig+0x148>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d905      	bls.n	8008fec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f96c 	bl	80092c0 <USBD_CtlError>
    return USBD_FAIL;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e088      	b.n	80090fe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d002      	beq.n	8008ffe <USBD_SetConfig+0x3e>
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d025      	beq.n	8009048 <USBD_SetConfig+0x88>
 8008ffc:	e071      	b.n	80090e2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ffe:	4b42      	ldr	r3, [pc, #264]	@ (8009108 <USBD_SetConfig+0x148>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d01c      	beq.n	8009040 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009006:	4b40      	ldr	r3, [pc, #256]	@ (8009108 <USBD_SetConfig+0x148>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009010:	4b3d      	ldr	r3, [pc, #244]	@ (8009108 <USBD_SetConfig+0x148>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff f990 	bl	800833c <USBD_SetClassConfig>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d004      	beq.n	8009030 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f949 	bl	80092c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800902e:	e065      	b.n	80090fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fa10 	bl	8009456 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2203      	movs	r2, #3
 800903a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800903e:	e05d      	b.n	80090fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fa08 	bl	8009456 <USBD_CtlSendStatus>
      break;
 8009046:	e059      	b.n	80090fc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009048:	4b2f      	ldr	r3, [pc, #188]	@ (8009108 <USBD_SetConfig+0x148>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d112      	bne.n	8009076 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009058:	4b2b      	ldr	r3, [pc, #172]	@ (8009108 <USBD_SetConfig+0x148>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	461a      	mov	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009062:	4b29      	ldr	r3, [pc, #164]	@ (8009108 <USBD_SetConfig+0x148>)
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f7ff f983 	bl	8008374 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f9f1 	bl	8009456 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009074:	e042      	b.n	80090fc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009076:	4b24      	ldr	r3, [pc, #144]	@ (8009108 <USBD_SetConfig+0x148>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d02a      	beq.n	80090da <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	b2db      	uxtb	r3, r3
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff f971 	bl	8008374 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009092:	4b1d      	ldr	r3, [pc, #116]	@ (8009108 <USBD_SetConfig+0x148>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	461a      	mov	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800909c:	4b1a      	ldr	r3, [pc, #104]	@ (8009108 <USBD_SetConfig+0x148>)
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7ff f94a 	bl	800833c <USBD_SetClassConfig>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00f      	beq.n	80090d2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f903 	bl	80092c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff f956 	bl	8008374 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80090d0:	e014      	b.n	80090fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f9bf 	bl	8009456 <USBD_CtlSendStatus>
      break;
 80090d8:	e010      	b.n	80090fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f9bb 	bl	8009456 <USBD_CtlSendStatus>
      break;
 80090e0:	e00c      	b.n	80090fc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f8eb 	bl	80092c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090ea:	4b07      	ldr	r3, [pc, #28]	@ (8009108 <USBD_SetConfig+0x148>)
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff f93f 	bl	8008374 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090f6:	2303      	movs	r3, #3
 80090f8:	73fb      	strb	r3, [r7, #15]
      break;
 80090fa:	bf00      	nop
  }

  return ret;
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20000260 	.word	0x20000260

0800910c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	88db      	ldrh	r3, [r3, #6]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d004      	beq.n	8009128 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f8cd 	bl	80092c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009126:	e023      	b.n	8009170 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b02      	cmp	r3, #2
 8009132:	dc02      	bgt.n	800913a <USBD_GetConfig+0x2e>
 8009134:	2b00      	cmp	r3, #0
 8009136:	dc03      	bgt.n	8009140 <USBD_GetConfig+0x34>
 8009138:	e015      	b.n	8009166 <USBD_GetConfig+0x5a>
 800913a:	2b03      	cmp	r3, #3
 800913c:	d00b      	beq.n	8009156 <USBD_GetConfig+0x4a>
 800913e:	e012      	b.n	8009166 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3308      	adds	r3, #8
 800914a:	2201      	movs	r2, #1
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f927 	bl	80093a2 <USBD_CtlSendData>
        break;
 8009154:	e00c      	b.n	8009170 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	3304      	adds	r3, #4
 800915a:	2201      	movs	r2, #1
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f91f 	bl	80093a2 <USBD_CtlSendData>
        break;
 8009164:	e004      	b.n	8009170 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f8a9 	bl	80092c0 <USBD_CtlError>
        break;
 800916e:	bf00      	nop
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009188:	b2db      	uxtb	r3, r3
 800918a:	3b01      	subs	r3, #1
 800918c:	2b02      	cmp	r3, #2
 800918e:	d81e      	bhi.n	80091ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	88db      	ldrh	r3, [r3, #6]
 8009194:	2b02      	cmp	r3, #2
 8009196:	d004      	beq.n	80091a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f890 	bl	80092c0 <USBD_CtlError>
        break;
 80091a0:	e01a      	b.n	80091d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d005      	beq.n	80091be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f043 0202 	orr.w	r2, r3, #2
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	330c      	adds	r3, #12
 80091c2:	2202      	movs	r2, #2
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f8eb 	bl	80093a2 <USBD_CtlSendData>
      break;
 80091cc:	e004      	b.n	80091d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f875 	bl	80092c0 <USBD_CtlError>
      break;
 80091d6:	bf00      	nop
  }
}
 80091d8:	bf00      	nop
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	885b      	ldrh	r3, [r3, #2]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d106      	bne.n	8009200 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f92b 	bl	8009456 <USBD_CtlSendStatus>
  }
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009218:	b2db      	uxtb	r3, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	2b02      	cmp	r3, #2
 800921e:	d80b      	bhi.n	8009238 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	885b      	ldrh	r3, [r3, #2]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d10c      	bne.n	8009242 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f910 	bl	8009456 <USBD_CtlSendStatus>
      }
      break;
 8009236:	e004      	b.n	8009242 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f840 	bl	80092c0 <USBD_CtlError>
      break;
 8009240:	e000      	b.n	8009244 <USBD_ClrFeature+0x3c>
      break;
 8009242:	bf00      	nop
  }
}
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	781a      	ldrb	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3301      	adds	r3, #1
 8009266:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	781a      	ldrb	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3301      	adds	r3, #1
 8009274:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f7ff fa90 	bl	800879c <SWAPBYTE>
 800927c:	4603      	mov	r3, r0
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3301      	adds	r3, #1
 8009288:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3301      	adds	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff fa83 	bl	800879c <SWAPBYTE>
 8009296:	4603      	mov	r3, r0
 8009298:	461a      	mov	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3301      	adds	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff fa76 	bl	800879c <SWAPBYTE>
 80092b0:	4603      	mov	r3, r0
 80092b2:	461a      	mov	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	80da      	strh	r2, [r3, #6]
}
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092ca:	2180      	movs	r1, #128	@ 0x80
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fc6f 	bl	8009bb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092d2:	2100      	movs	r1, #0
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fc6b 	bl	8009bb0 <USBD_LL_StallEP>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b086      	sub	sp, #24
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d036      	beq.n	8009366 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80092fc:	6938      	ldr	r0, [r7, #16]
 80092fe:	f000 f836 	bl	800936e <USBD_GetLen>
 8009302:	4603      	mov	r3, r0
 8009304:	3301      	adds	r3, #1
 8009306:	b29b      	uxth	r3, r3
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	b29a      	uxth	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	4413      	add	r3, r2
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	7812      	ldrb	r2, [r2, #0]
 800931a:	701a      	strb	r2, [r3, #0]
  idx++;
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	3301      	adds	r3, #1
 8009320:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	4413      	add	r3, r2
 8009328:	2203      	movs	r2, #3
 800932a:	701a      	strb	r2, [r3, #0]
  idx++;
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	3301      	adds	r3, #1
 8009330:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009332:	e013      	b.n	800935c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	4413      	add	r3, r2
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	7812      	ldrb	r2, [r2, #0]
 800933e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	3301      	adds	r3, #1
 8009344:	613b      	str	r3, [r7, #16]
    idx++;
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	3301      	adds	r3, #1
 800934a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800934c:	7dfb      	ldrb	r3, [r7, #23]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	4413      	add	r3, r2
 8009352:	2200      	movs	r2, #0
 8009354:	701a      	strb	r2, [r3, #0]
    idx++;
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	3301      	adds	r3, #1
 800935a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e7      	bne.n	8009334 <USBD_GetString+0x52>
 8009364:	e000      	b.n	8009368 <USBD_GetString+0x86>
    return;
 8009366:	bf00      	nop
  }
}
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800936e:	b480      	push	{r7}
 8009370:	b085      	sub	sp, #20
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800937e:	e005      	b.n	800938c <USBD_GetLen+0x1e>
  {
    len++;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	3301      	adds	r3, #1
 8009384:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	3301      	adds	r3, #1
 800938a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1f5      	bne.n	8009380 <USBD_GetLen+0x12>
  }

  return len;
 8009394:	7bfb      	ldrb	r3, [r7, #15]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	60b9      	str	r1, [r7, #8]
 80093ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2202      	movs	r2, #2
 80093b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	2100      	movs	r1, #0
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 fc7a 	bl	8009cc2 <USBD_LL_Transmit>

  return USBD_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	2100      	movs	r1, #0
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 fc69 	bl	8009cc2 <USBD_LL_Transmit>

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	60f8      	str	r0, [r7, #12]
 8009402:	60b9      	str	r1, [r7, #8]
 8009404:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2203      	movs	r2, #3
 800940a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	2100      	movs	r1, #0
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 fc6d 	bl	8009d04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	2100      	movs	r1, #0
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 fc5c 	bl	8009d04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2204      	movs	r2, #4
 8009462:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009466:	2300      	movs	r3, #0
 8009468:	2200      	movs	r2, #0
 800946a:	2100      	movs	r1, #0
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fc28 	bl	8009cc2 <USBD_LL_Transmit>

  return USBD_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2205      	movs	r2, #5
 8009488:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800948c:	2300      	movs	r3, #0
 800948e:	2200      	movs	r2, #0
 8009490:	2100      	movs	r1, #0
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fc36 	bl	8009d04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80094a8:	2200      	movs	r2, #0
 80094aa:	4912      	ldr	r1, [pc, #72]	@ (80094f4 <MX_USB_Device_Init+0x50>)
 80094ac:	4812      	ldr	r0, [pc, #72]	@ (80094f8 <MX_USB_Device_Init+0x54>)
 80094ae:	f7fe fed7 	bl	8008260 <USBD_Init>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80094b8:	f7f7 f86c 	bl	8000594 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80094bc:	490f      	ldr	r1, [pc, #60]	@ (80094fc <MX_USB_Device_Init+0x58>)
 80094be:	480e      	ldr	r0, [pc, #56]	@ (80094f8 <MX_USB_Device_Init+0x54>)
 80094c0:	f7fe fefe 	bl	80082c0 <USBD_RegisterClass>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80094ca:	f7f7 f863 	bl	8000594 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80094ce:	490c      	ldr	r1, [pc, #48]	@ (8009500 <MX_USB_Device_Init+0x5c>)
 80094d0:	4809      	ldr	r0, [pc, #36]	@ (80094f8 <MX_USB_Device_Init+0x54>)
 80094d2:	f7fe fe4f 	bl	8008174 <USBD_CDC_RegisterInterface>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80094dc:	f7f7 f85a 	bl	8000594 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80094e0:	4805      	ldr	r0, [pc, #20]	@ (80094f8 <MX_USB_Device_Init+0x54>)
 80094e2:	f7fe ff14 	bl	800830e <USBD_Start>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80094ec:	f7f7 f852 	bl	8000594 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80094f0:	bf00      	nop
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	20000130 	.word	0x20000130
 80094f8:	20000264 	.word	0x20000264
 80094fc:	20000018 	.word	0x20000018
 8009500:	2000011c 	.word	0x2000011c

08009504 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009508:	2200      	movs	r2, #0
 800950a:	4905      	ldr	r1, [pc, #20]	@ (8009520 <CDC_Init_FS+0x1c>)
 800950c:	4805      	ldr	r0, [pc, #20]	@ (8009524 <CDC_Init_FS+0x20>)
 800950e:	f7fe fe46 	bl	800819e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009512:	4905      	ldr	r1, [pc, #20]	@ (8009528 <CDC_Init_FS+0x24>)
 8009514:	4803      	ldr	r0, [pc, #12]	@ (8009524 <CDC_Init_FS+0x20>)
 8009516:	f7fe fe60 	bl	80081da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800951a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800951c:	4618      	mov	r0, r3
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20000934 	.word	0x20000934
 8009524:	20000264 	.word	0x20000264
 8009528:	20000534 	.word	0x20000534

0800952c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009530:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009532:	4618      	mov	r0, r3
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	6039      	str	r1, [r7, #0]
 8009546:	71fb      	strb	r3, [r7, #7]
 8009548:	4613      	mov	r3, r2
 800954a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	2b23      	cmp	r3, #35	@ 0x23
 8009550:	d84a      	bhi.n	80095e8 <CDC_Control_FS+0xac>
 8009552:	a201      	add	r2, pc, #4	@ (adr r2, 8009558 <CDC_Control_FS+0x1c>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	080095e9 	.word	0x080095e9
 800955c:	080095e9 	.word	0x080095e9
 8009560:	080095e9 	.word	0x080095e9
 8009564:	080095e9 	.word	0x080095e9
 8009568:	080095e9 	.word	0x080095e9
 800956c:	080095e9 	.word	0x080095e9
 8009570:	080095e9 	.word	0x080095e9
 8009574:	080095e9 	.word	0x080095e9
 8009578:	080095e9 	.word	0x080095e9
 800957c:	080095e9 	.word	0x080095e9
 8009580:	080095e9 	.word	0x080095e9
 8009584:	080095e9 	.word	0x080095e9
 8009588:	080095e9 	.word	0x080095e9
 800958c:	080095e9 	.word	0x080095e9
 8009590:	080095e9 	.word	0x080095e9
 8009594:	080095e9 	.word	0x080095e9
 8009598:	080095e9 	.word	0x080095e9
 800959c:	080095e9 	.word	0x080095e9
 80095a0:	080095e9 	.word	0x080095e9
 80095a4:	080095e9 	.word	0x080095e9
 80095a8:	080095e9 	.word	0x080095e9
 80095ac:	080095e9 	.word	0x080095e9
 80095b0:	080095e9 	.word	0x080095e9
 80095b4:	080095e9 	.word	0x080095e9
 80095b8:	080095e9 	.word	0x080095e9
 80095bc:	080095e9 	.word	0x080095e9
 80095c0:	080095e9 	.word	0x080095e9
 80095c4:	080095e9 	.word	0x080095e9
 80095c8:	080095e9 	.word	0x080095e9
 80095cc:	080095e9 	.word	0x080095e9
 80095d0:	080095e9 	.word	0x080095e9
 80095d4:	080095e9 	.word	0x080095e9
 80095d8:	080095e9 	.word	0x080095e9
 80095dc:	080095e9 	.word	0x080095e9
 80095e0:	080095e9 	.word	0x080095e9
 80095e4:	080095e9 	.word	0x080095e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80095e8:	bf00      	nop
  }

  return (USBD_OK);
 80095ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	4805      	ldr	r0, [pc, #20]	@ (800961c <CDC_Receive_FS+0x24>)
 8009606:	f7fe fde8 	bl	80081da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800960a:	4804      	ldr	r0, [pc, #16]	@ (800961c <CDC_Receive_FS+0x24>)
 800960c:	f7fe fdfe 	bl	800820c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009610:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20000264 	.word	0x20000264

08009620 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009636:	4618      	mov	r0, r3
 8009638:	371c      	adds	r7, #28
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
	...

08009644 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	6039      	str	r1, [r7, #0]
 800964e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2212      	movs	r2, #18
 8009654:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009656:	4b03      	ldr	r3, [pc, #12]	@ (8009664 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	20000150 	.word	0x20000150

08009668 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	6039      	str	r1, [r7, #0]
 8009672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	2204      	movs	r2, #4
 8009678:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800967a:	4b03      	ldr	r3, [pc, #12]	@ (8009688 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	20000164 	.word	0x20000164

0800968c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	6039      	str	r1, [r7, #0]
 8009696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009698:	79fb      	ldrb	r3, [r7, #7]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d105      	bne.n	80096aa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	4907      	ldr	r1, [pc, #28]	@ (80096c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80096a2:	4808      	ldr	r0, [pc, #32]	@ (80096c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80096a4:	f7ff fe1d 	bl	80092e2 <USBD_GetString>
 80096a8:	e004      	b.n	80096b4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	4904      	ldr	r1, [pc, #16]	@ (80096c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80096ae:	4805      	ldr	r0, [pc, #20]	@ (80096c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80096b0:	f7ff fe17 	bl	80092e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096b4:	4b02      	ldr	r3, [pc, #8]	@ (80096c0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000d34 	.word	0x20000d34
 80096c4:	08009edc 	.word	0x08009edc

080096c8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	6039      	str	r1, [r7, #0]
 80096d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	4904      	ldr	r1, [pc, #16]	@ (80096e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80096d8:	4804      	ldr	r0, [pc, #16]	@ (80096ec <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80096da:	f7ff fe02 	bl	80092e2 <USBD_GetString>
  return USBD_StrDesc;
 80096de:	4b02      	ldr	r3, [pc, #8]	@ (80096e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20000d34 	.word	0x20000d34
 80096ec:	08009ef4 	.word	0x08009ef4

080096f0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	6039      	str	r1, [r7, #0]
 80096fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	221a      	movs	r2, #26
 8009700:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009702:	f000 f843 	bl	800978c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009706:	4b02      	ldr	r3, [pc, #8]	@ (8009710 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009708:	4618      	mov	r0, r3
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20000168 	.word	0x20000168

08009714 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	6039      	str	r1, [r7, #0]
 800971e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d105      	bne.n	8009732 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	4907      	ldr	r1, [pc, #28]	@ (8009748 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800972a:	4808      	ldr	r0, [pc, #32]	@ (800974c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800972c:	f7ff fdd9 	bl	80092e2 <USBD_GetString>
 8009730:	e004      	b.n	800973c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	4904      	ldr	r1, [pc, #16]	@ (8009748 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009736:	4805      	ldr	r0, [pc, #20]	@ (800974c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009738:	f7ff fdd3 	bl	80092e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800973c:	4b02      	ldr	r3, [pc, #8]	@ (8009748 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20000d34 	.word	0x20000d34
 800974c:	08009f08 	.word	0x08009f08

08009750 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	4603      	mov	r3, r0
 8009758:	6039      	str	r1, [r7, #0]
 800975a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800975c:	79fb      	ldrb	r3, [r7, #7]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d105      	bne.n	800976e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	4907      	ldr	r1, [pc, #28]	@ (8009784 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009766:	4808      	ldr	r0, [pc, #32]	@ (8009788 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009768:	f7ff fdbb 	bl	80092e2 <USBD_GetString>
 800976c:	e004      	b.n	8009778 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	4904      	ldr	r1, [pc, #16]	@ (8009784 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009772:	4805      	ldr	r0, [pc, #20]	@ (8009788 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009774:	f7ff fdb5 	bl	80092e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009778:	4b02      	ldr	r3, [pc, #8]	@ (8009784 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000d34 	.word	0x20000d34
 8009788:	08009f14 	.word	0x08009f14

0800978c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009792:	4b0f      	ldr	r3, [pc, #60]	@ (80097d0 <Get_SerialNum+0x44>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009798:	4b0e      	ldr	r3, [pc, #56]	@ (80097d4 <Get_SerialNum+0x48>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800979e:	4b0e      	ldr	r3, [pc, #56]	@ (80097d8 <Get_SerialNum+0x4c>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4413      	add	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d009      	beq.n	80097c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80097b2:	2208      	movs	r2, #8
 80097b4:	4909      	ldr	r1, [pc, #36]	@ (80097dc <Get_SerialNum+0x50>)
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 f814 	bl	80097e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80097bc:	2204      	movs	r2, #4
 80097be:	4908      	ldr	r1, [pc, #32]	@ (80097e0 <Get_SerialNum+0x54>)
 80097c0:	68b8      	ldr	r0, [r7, #8]
 80097c2:	f000 f80f 	bl	80097e4 <IntToUnicode>
  }
}
 80097c6:	bf00      	nop
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	1fff7590 	.word	0x1fff7590
 80097d4:	1fff7594 	.word	0x1fff7594
 80097d8:	1fff7598 	.word	0x1fff7598
 80097dc:	2000016a 	.word	0x2000016a
 80097e0:	2000017a 	.word	0x2000017a

080097e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b087      	sub	sp, #28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	4613      	mov	r3, r2
 80097f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80097f6:	2300      	movs	r3, #0
 80097f8:	75fb      	strb	r3, [r7, #23]
 80097fa:	e027      	b.n	800984c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	0f1b      	lsrs	r3, r3, #28
 8009800:	2b09      	cmp	r3, #9
 8009802:	d80b      	bhi.n	800981c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	0f1b      	lsrs	r3, r3, #28
 8009808:	b2da      	uxtb	r2, r3
 800980a:	7dfb      	ldrb	r3, [r7, #23]
 800980c:	005b      	lsls	r3, r3, #1
 800980e:	4619      	mov	r1, r3
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	440b      	add	r3, r1
 8009814:	3230      	adds	r2, #48	@ 0x30
 8009816:	b2d2      	uxtb	r2, r2
 8009818:	701a      	strb	r2, [r3, #0]
 800981a:	e00a      	b.n	8009832 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	0f1b      	lsrs	r3, r3, #28
 8009820:	b2da      	uxtb	r2, r3
 8009822:	7dfb      	ldrb	r3, [r7, #23]
 8009824:	005b      	lsls	r3, r3, #1
 8009826:	4619      	mov	r1, r3
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	440b      	add	r3, r1
 800982c:	3237      	adds	r2, #55	@ 0x37
 800982e:	b2d2      	uxtb	r2, r2
 8009830:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	011b      	lsls	r3, r3, #4
 8009836:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009838:	7dfb      	ldrb	r3, [r7, #23]
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	3301      	adds	r3, #1
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	4413      	add	r3, r2
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	3301      	adds	r3, #1
 800984a:	75fb      	strb	r3, [r7, #23]
 800984c:	7dfa      	ldrb	r2, [r7, #23]
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	429a      	cmp	r2, r3
 8009852:	d3d3      	bcc.n	80097fc <IntToUnicode+0x18>
  }
}
 8009854:	bf00      	nop
 8009856:	bf00      	nop
 8009858:	371c      	adds	r7, #28
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
	...

08009864 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b094      	sub	sp, #80	@ 0x50
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800986c:	f107 030c 	add.w	r3, r7, #12
 8009870:	2244      	movs	r2, #68	@ 0x44
 8009872:	2100      	movs	r1, #0
 8009874:	4618      	mov	r0, r3
 8009876:	f000 faf9 	bl	8009e6c <memset>
  if(pcdHandle->Instance==USB)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a15      	ldr	r2, [pc, #84]	@ (80098d4 <HAL_PCD_MspInit+0x70>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d123      	bne.n	80098cc <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009888:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800988a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800988e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009890:	f107 030c 	add.w	r3, r7, #12
 8009894:	4618      	mov	r0, r3
 8009896:	f7fb fbe7 	bl	8005068 <HAL_RCCEx_PeriphCLKConfig>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 80098a0:	f7f6 fe78 	bl	8000594 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80098a4:	4b0c      	ldr	r3, [pc, #48]	@ (80098d8 <HAL_PCD_MspInit+0x74>)
 80098a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098a8:	4a0b      	ldr	r2, [pc, #44]	@ (80098d8 <HAL_PCD_MspInit+0x74>)
 80098aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80098ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80098b0:	4b09      	ldr	r3, [pc, #36]	@ (80098d8 <HAL_PCD_MspInit+0x74>)
 80098b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098b8:	60bb      	str	r3, [r7, #8]
 80098ba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80098bc:	2200      	movs	r2, #0
 80098be:	2100      	movs	r1, #0
 80098c0:	2014      	movs	r0, #20
 80098c2:	f7f7 f942 	bl	8000b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80098c6:	2014      	movs	r0, #20
 80098c8:	f7f7 f959 	bl	8000b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80098cc:	bf00      	nop
 80098ce:	3750      	adds	r7, #80	@ 0x50
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	40005c00 	.word	0x40005c00
 80098d8:	40021000 	.word	0x40021000

080098dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80098f0:	4619      	mov	r1, r3
 80098f2:	4610      	mov	r0, r2
 80098f4:	f7fe fd56 	bl	80083a4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	440b      	add	r3, r1
 8009920:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	78fb      	ldrb	r3, [r7, #3]
 8009928:	4619      	mov	r1, r3
 800992a:	f7fe fd90 	bl	800844e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800992e:	bf00      	nop
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009948:	78fa      	ldrb	r2, [r7, #3]
 800994a:	6879      	ldr	r1, [r7, #4]
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	440b      	add	r3, r1
 8009956:	3324      	adds	r3, #36	@ 0x24
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	4619      	mov	r1, r3
 800995e:	f7fe fdd9 	bl	8008514 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009978:	4618      	mov	r0, r3
 800997a:	f7fe feed 	bl	8008758 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800998e:	2301      	movs	r3, #1
 8009990:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	795b      	ldrb	r3, [r3, #5]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d001      	beq.n	800999e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800999a:	f7f6 fdfb 	bl	8000594 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80099a4:	7bfa      	ldrb	r2, [r7, #15]
 80099a6:	4611      	mov	r1, r2
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe fe97 	bl	80086dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe fe43 	bl	8008640 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80099ba:	bf00      	nop
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fe92 	bl	80086fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	7a5b      	ldrb	r3, [r3, #9]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099e0:	4b04      	ldr	r3, [pc, #16]	@ (80099f4 <HAL_PCD_SuspendCallback+0x30>)
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	4a03      	ldr	r2, [pc, #12]	@ (80099f4 <HAL_PCD_SuspendCallback+0x30>)
 80099e6:	f043 0306 	orr.w	r3, r3, #6
 80099ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	e000ed00 	.word	0xe000ed00

080099f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	7a5b      	ldrb	r3, [r3, #9]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d007      	beq.n	8009a18 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a08:	4b08      	ldr	r3, [pc, #32]	@ (8009a2c <HAL_PCD_ResumeCallback+0x34>)
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	4a07      	ldr	r2, [pc, #28]	@ (8009a2c <HAL_PCD_ResumeCallback+0x34>)
 8009a0e:	f023 0306 	bic.w	r3, r3, #6
 8009a12:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009a14:	f000 f9f8 	bl	8009e08 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fe82 	bl	8008728 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	e000ed00 	.word	0xe000ed00

08009a30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009a38:	4a2b      	ldr	r2, [pc, #172]	@ (8009ae8 <USBD_LL_Init+0xb8>)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a29      	ldr	r2, [pc, #164]	@ (8009ae8 <USBD_LL_Init+0xb8>)
 8009a44:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009a48:	4b27      	ldr	r3, [pc, #156]	@ (8009ae8 <USBD_LL_Init+0xb8>)
 8009a4a:	4a28      	ldr	r2, [pc, #160]	@ (8009aec <USBD_LL_Init+0xbc>)
 8009a4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a4e:	4b26      	ldr	r3, [pc, #152]	@ (8009ae8 <USBD_LL_Init+0xb8>)
 8009a50:	2208      	movs	r2, #8
 8009a52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009a54:	4b24      	ldr	r3, [pc, #144]	@ (8009ae8 <USBD_LL_Init+0xb8>)
 8009a56:	2202      	movs	r2, #2
 8009a58:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a5a:	4b23      	ldr	r3, [pc, #140]	@ (8009ae8 <USBD_LL_Init+0xb8>)
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009a60:	4b21      	ldr	r3, [pc, #132]	@ (8009ae8 <USBD_LL_Init+0xb8>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009a66:	4b20      	ldr	r3, [pc, #128]	@ (8009ae8 <USBD_LL_Init+0xb8>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8009ae8 <USBD_LL_Init+0xb8>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009a72:	4b1d      	ldr	r3, [pc, #116]	@ (8009ae8 <USBD_LL_Init+0xb8>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009a78:	481b      	ldr	r0, [pc, #108]	@ (8009ae8 <USBD_LL_Init+0xb8>)
 8009a7a:	f7f9 f84a 	bl	8002b12 <HAL_PCD_Init>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009a84:	f7f6 fd86 	bl	8000594 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009a8e:	2318      	movs	r3, #24
 8009a90:	2200      	movs	r2, #0
 8009a92:	2100      	movs	r1, #0
 8009a94:	f7fa fcd1 	bl	800443a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009a9e:	2358      	movs	r3, #88	@ 0x58
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2180      	movs	r1, #128	@ 0x80
 8009aa4:	f7fa fcc9 	bl	800443a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009aae:	23c0      	movs	r3, #192	@ 0xc0
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2181      	movs	r1, #129	@ 0x81
 8009ab4:	f7fa fcc1 	bl	800443a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009abe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	f7fa fcb8 	bl	800443a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2182      	movs	r1, #130	@ 0x82
 8009ad8:	f7fa fcaf 	bl	800443a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	20000f34 	.word	0x20000f34
 8009aec:	40005c00 	.word	0x40005c00

08009af0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afc:	2300      	movs	r3, #0
 8009afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7f9 f8d1 	bl	8002cae <HAL_PCD_Start>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 f97e 	bl	8009e14 <USBD_Get_USB_Status>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	4608      	mov	r0, r1
 8009b30:	4611      	mov	r1, r2
 8009b32:	461a      	mov	r2, r3
 8009b34:	4603      	mov	r3, r0
 8009b36:	70fb      	strb	r3, [r7, #3]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70bb      	strb	r3, [r7, #2]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009b4e:	78bb      	ldrb	r3, [r7, #2]
 8009b50:	883a      	ldrh	r2, [r7, #0]
 8009b52:	78f9      	ldrb	r1, [r7, #3]
 8009b54:	f7f9 fa18 	bl	8002f88 <HAL_PCD_EP_Open>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 f958 	bl	8009e14 <USBD_Get_USB_Status>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009b8c:	78fa      	ldrb	r2, [r7, #3]
 8009b8e:	4611      	mov	r1, r2
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7f9 fa58 	bl	8003046 <HAL_PCD_EP_Close>
 8009b96:	4603      	mov	r3, r0
 8009b98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 f939 	bl	8009e14 <USBD_Get_USB_Status>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009bca:	78fa      	ldrb	r2, [r7, #3]
 8009bcc:	4611      	mov	r1, r2
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f9 fb01 	bl	80031d6 <HAL_PCD_EP_SetStall>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f91a 	bl	8009e14 <USBD_Get_USB_Status>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7f9 fb34 	bl	800327a <HAL_PCD_EP_ClrStall>
 8009c12:	4603      	mov	r3, r0
 8009c14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 f8fb 	bl	8009e14 <USBD_Get_USB_Status>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009c3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	da0b      	bge.n	8009c60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c48:	78fb      	ldrb	r3, [r7, #3]
 8009c4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c4e:	68f9      	ldr	r1, [r7, #12]
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	00db      	lsls	r3, r3, #3
 8009c58:	440b      	add	r3, r1
 8009c5a:	3312      	adds	r3, #18
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	e00b      	b.n	8009c78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c66:	68f9      	ldr	r1, [r7, #12]
 8009c68:	4613      	mov	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	440b      	add	r3, r1
 8009c72:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009c76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009c9e:	78fa      	ldrb	r2, [r7, #3]
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7f9 f94c 	bl	8002f40 <HAL_PCD_SetAddress>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 f8b0 	bl	8009e14 <USBD_Get_USB_Status>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b086      	sub	sp, #24
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	603b      	str	r3, [r7, #0]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009ce0:	7af9      	ldrb	r1, [r7, #11]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	f7f9 fa3f 	bl	8003168 <HAL_PCD_EP_Transmit>
 8009cea:	4603      	mov	r3, r0
 8009cec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f88f 	bl	8009e14 <USBD_Get_USB_Status>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	607a      	str	r2, [r7, #4]
 8009d0e:	603b      	str	r3, [r7, #0]
 8009d10:	460b      	mov	r3, r1
 8009d12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009d22:	7af9      	ldrb	r1, [r7, #11]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	f7f9 f9d5 	bl	80030d6 <HAL_PCD_EP_Receive>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 f86e 	bl	8009e14 <USBD_Get_USB_Status>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b082      	sub	sp, #8
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	460b      	mov	r3, r1
 8009d50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009d58:	78fa      	ldrb	r2, [r7, #3]
 8009d5a:	4611      	mov	r1, r2
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7f9 f9eb 	bl	8003138 <HAL_PCD_EP_GetRxCount>
 8009d62:	4603      	mov	r3, r0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	460b      	mov	r3, r1
 8009d76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009d78:	78fb      	ldrb	r3, [r7, #3]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <HAL_PCDEx_LPM_Callback+0x18>
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d013      	beq.n	8009daa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009d82:	e023      	b.n	8009dcc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	7a5b      	ldrb	r3, [r3, #9]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d007      	beq.n	8009d9c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009d8c:	f000 f83c 	bl	8009e08 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d90:	4b10      	ldr	r3, [pc, #64]	@ (8009dd4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	4a0f      	ldr	r2, [pc, #60]	@ (8009dd4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009d96:	f023 0306 	bic.w	r3, r3, #6
 8009d9a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe fcc0 	bl	8008728 <USBD_LL_Resume>
    break;
 8009da8:	e010      	b.n	8009dcc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe fca3 	bl	80086fc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	7a5b      	ldrb	r3, [r3, #9]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dbe:	4b05      	ldr	r3, [pc, #20]	@ (8009dd4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	4a04      	ldr	r2, [pc, #16]	@ (8009dd4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009dc4:	f043 0306 	orr.w	r3, r3, #6
 8009dc8:	6113      	str	r3, [r2, #16]
    break;
 8009dca:	bf00      	nop
}
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	e000ed00 	.word	0xe000ed00

08009dd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009de0:	4b03      	ldr	r3, [pc, #12]	@ (8009df0 <USBD_static_malloc+0x18>)
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	20001210 	.word	0x20001210

08009df4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]

}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009e0c:	f7f6 fa88 	bl	8000320 <SystemClock_Config>
}
 8009e10:	bf00      	nop
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e22:	79fb      	ldrb	r3, [r7, #7]
 8009e24:	2b03      	cmp	r3, #3
 8009e26:	d817      	bhi.n	8009e58 <USBD_Get_USB_Status+0x44>
 8009e28:	a201      	add	r2, pc, #4	@ (adr r2, 8009e30 <USBD_Get_USB_Status+0x1c>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e41 	.word	0x08009e41
 8009e34:	08009e47 	.word	0x08009e47
 8009e38:	08009e4d 	.word	0x08009e4d
 8009e3c:	08009e53 	.word	0x08009e53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
    break;
 8009e44:	e00b      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e46:	2303      	movs	r3, #3
 8009e48:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4a:	e008      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e50:	e005      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e52:	2303      	movs	r3, #3
 8009e54:	73fb      	strb	r3, [r7, #15]
    break;
 8009e56:	e002      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e5c:	bf00      	nop
  }
  return usb_status;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <memset>:
 8009e6c:	4402      	add	r2, r0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d100      	bne.n	8009e76 <memset+0xa>
 8009e74:	4770      	bx	lr
 8009e76:	f803 1b01 	strb.w	r1, [r3], #1
 8009e7a:	e7f9      	b.n	8009e70 <memset+0x4>

08009e7c <__libc_init_array>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8009eb4 <__libc_init_array+0x38>)
 8009e80:	4c0d      	ldr	r4, [pc, #52]	@ (8009eb8 <__libc_init_array+0x3c>)
 8009e82:	1b64      	subs	r4, r4, r5
 8009e84:	10a4      	asrs	r4, r4, #2
 8009e86:	2600      	movs	r6, #0
 8009e88:	42a6      	cmp	r6, r4
 8009e8a:	d109      	bne.n	8009ea0 <__libc_init_array+0x24>
 8009e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8009ebc <__libc_init_array+0x40>)
 8009e8e:	4c0c      	ldr	r4, [pc, #48]	@ (8009ec0 <__libc_init_array+0x44>)
 8009e90:	f000 f818 	bl	8009ec4 <_init>
 8009e94:	1b64      	subs	r4, r4, r5
 8009e96:	10a4      	asrs	r4, r4, #2
 8009e98:	2600      	movs	r6, #0
 8009e9a:	42a6      	cmp	r6, r4
 8009e9c:	d105      	bne.n	8009eaa <__libc_init_array+0x2e>
 8009e9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ea4:	4798      	blx	r3
 8009ea6:	3601      	adds	r6, #1
 8009ea8:	e7ee      	b.n	8009e88 <__libc_init_array+0xc>
 8009eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eae:	4798      	blx	r3
 8009eb0:	3601      	adds	r6, #1
 8009eb2:	e7f2      	b.n	8009e9a <__libc_init_array+0x1e>
 8009eb4:	08009f34 	.word	0x08009f34
 8009eb8:	08009f34 	.word	0x08009f34
 8009ebc:	08009f34 	.word	0x08009f34
 8009ec0:	08009f38 	.word	0x08009f38

08009ec4 <_init>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr

08009ed0 <_fini>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	bf00      	nop
 8009ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed6:	bc08      	pop	{r3}
 8009ed8:	469e      	mov	lr, r3
 8009eda:	4770      	bx	lr
