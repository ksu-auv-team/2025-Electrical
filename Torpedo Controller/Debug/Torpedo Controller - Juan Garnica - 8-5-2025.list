
Torpedo Controller - Juan Garnica - 8-5-2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5a0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800a778  0800a778  0000b778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a838  0800a838  0000c0e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a838  0800a838  0000c0e8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a838  0800a838  0000c0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a838  0800a838  0000b838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a83c  0800a83c  0000b83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  0800a840  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  200000e8  0800a928  0000c0e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ea0  0800a928  0000cea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001931b  00000000  00000000  0000c118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dad  00000000  00000000  00025433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  000291e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ab  00000000  00000000  0002a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021035  00000000  00000000  0002ba93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c85c  00000000  00000000  0004cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7d34  00000000  00000000  00069324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006014  00000000  00000000  0013109c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001370b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e8 	.word	0x200000e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a760 	.word	0x0800a760

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000ec 	.word	0x200000ec
 8000214:	0800a760 	.word	0x0800a760

08000218 <process_data>:
int countAddr = 0;
int countrxcplt = 0;
int counterror = 0;

void process_data (void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0

	int startREG = RxData[0];  // get the register address
 800021e:	4b40      	ldr	r3, [pc, #256]	@ (8000320 <process_data+0x108>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	617b      	str	r3, [r7, #20]
	int numREG = rxcount-1;  // Get the number of registers
 8000224:	4b3f      	ldr	r3, [pc, #252]	@ (8000324 <process_data+0x10c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3b01      	subs	r3, #1
 800022a:	60bb      	str	r3, [r7, #8]
	int endREG = startREG + numREG -1;  // calculate the end register
 800022c:	697a      	ldr	r2, [r7, #20]
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	4413      	add	r3, r2
 8000232:	3b01      	subs	r3, #1
 8000234:	607b      	str	r3, [r7, #4]
	if (endREG>2)  // There are a total of 10 registers (0-9)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2b02      	cmp	r3, #2
 800023a:	dd01      	ble.n	8000240 <process_data+0x28>
	{
		Error_Handler();
 800023c:	f000 fa94 	bl	8000768 <Error_Handler>
	}

	int indx = 1;  // set the indx to 1 in order to start reading from RxData[1]
 8000240:	2301      	movs	r3, #1
 8000242:	613b      	str	r3, [r7, #16]

	for (int i=0; i<numREG; i++)
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e060      	b.n	800030c <process_data+0xf4>
	{
		I2C_REGISTERS[startREG++] = RxData[indx++]; // Read the data from RxData and save it in the I2C_REGISTERS
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	1c53      	adds	r3, r2, #1
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	1c59      	adds	r1, r3, #1
 8000254:	6179      	str	r1, [r7, #20]
 8000256:	4932      	ldr	r1, [pc, #200]	@ (8000320 <process_data+0x108>)
 8000258:	5c89      	ldrb	r1, [r1, r2]
 800025a:	4a33      	ldr	r2, [pc, #204]	@ (8000328 <process_data+0x110>)
 800025c:	54d1      	strb	r1, [r2, r3]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800025e:	2100      	movs	r1, #0
 8000260:	4832      	ldr	r0, [pc, #200]	@ (800032c <process_data+0x114>)
 8000262:	f005 f9b1 	bl	80055c8 <HAL_TIM_PWM_Start>
		pulseWidth = 500 + ((tim1Degrees * 2000) / 180); // pulse width in us
 8000266:	4b32      	ldr	r3, [pc, #200]	@ (8000330 <process_data+0x118>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	461a      	mov	r2, r3
 800026c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000270:	fb02 f303 	mul.w	r3, r2, r3
 8000274:	4a2f      	ldr	r2, [pc, #188]	@ (8000334 <process_data+0x11c>)
 8000276:	fb82 1203 	smull	r1, r2, r2, r3
 800027a:	441a      	add	r2, r3
 800027c:	11d2      	asrs	r2, r2, #7
 800027e:	17db      	asrs	r3, r3, #31
 8000280:	1ad3      	subs	r3, r2, r3
 8000282:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000286:	ee07 3a90 	vmov	s15, r3
 800028a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800028e:	4b2a      	ldr	r3, [pc, #168]	@ (8000338 <process_data+0x120>)
 8000290:	edc3 7a00 	vstr	s15, [r3]
		tim1PWM = pulseWidth / 100; // 1 timer period = 100us
 8000294:	4b28      	ldr	r3, [pc, #160]	@ (8000338 <process_data+0x120>)
 8000296:	ed93 7a00 	vldr	s14, [r3]
 800029a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800033c <process_data+0x124>
 800029e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002a2:	4b27      	ldr	r3, [pc, #156]	@ (8000340 <process_data+0x128>)
 80002a4:	edc3 7a00 	vstr	s15, [r3]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, tim1PWM);
 80002a8:	4b25      	ldr	r3, [pc, #148]	@ (8000340 <process_data+0x128>)
 80002aa:	edd3 7a00 	vldr	s15, [r3]
 80002ae:	4b1f      	ldr	r3, [pc, #124]	@ (800032c <process_data+0x114>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002b6:	ee17 2a90 	vmov	r2, s15
 80002ba:	635a      	str	r2, [r3, #52]	@ 0x34

		if (direction)
 80002bc:	4b21      	ldr	r3, [pc, #132]	@ (8000344 <process_data+0x12c>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d005      	beq.n	80002d0 <process_data+0xb8>
			tim1Degrees += 1;
 80002c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000330 <process_data+0x118>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <process_data+0x118>)
 80002ce:	701a      	strb	r2, [r3, #0]
		if (!direction)
 80002d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <process_data+0x12c>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d105      	bne.n	80002e4 <process_data+0xcc>
			tim1Degrees -= 1;
 80002d8:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <process_data+0x118>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	3b01      	subs	r3, #1
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b13      	ldr	r3, [pc, #76]	@ (8000330 <process_data+0x118>)
 80002e2:	701a      	strb	r2, [r3, #0]

		if (tim1Degrees >= 180)
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <process_data+0x118>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2bb3      	cmp	r3, #179	@ 0xb3
 80002ea:	d902      	bls.n	80002f2 <process_data+0xda>
			direction = 0;
 80002ec:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <process_data+0x12c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]
		if (tim1Degrees <= 0)
 80002f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <process_data+0x118>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d102      	bne.n	8000300 <process_data+0xe8>
			direction = 1;
 80002fa:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <process_data+0x12c>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	701a      	strb	r2, [r3, #0]
		HAL_Delay(28);
 8000300:	201c      	movs	r0, #28
 8000302:	f000 fc0f 	bl	8000b24 <HAL_Delay>
	for (int i=0; i<numREG; i++)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	3301      	adds	r3, #1
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	429a      	cmp	r2, r3
 8000312:	db9a      	blt.n	800024a <process_data+0x32>
	}
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000104 	.word	0x20000104
 8000324:	2000010e 	.word	0x2000010e
 8000328:	20000110 	.word	0x20000110
 800032c:	2000017c 	.word	0x2000017c
 8000330:	20000000 	.word	0x20000000
 8000334:	b60b60b7 	.word	0xb60b60b7
 8000338:	200001cc 	.word	0x200001cc
 800033c:	42c80000 	.word	0x42c80000
 8000340:	20000004 	.word	0x20000004
 8000344:	200001c8 	.word	0x200001c8

08000348 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) // Puts to listen mode to look for req from master
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f001 f88f 	bl	8001474 <HAL_I2C_EnableListen_IT>
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
 800036c:	4613      	mov	r3, r2
 800036e:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d11e      	bne.n	80003b4 <HAL_I2C_AddrCallback+0x54>
	{
		if (is_first_recvd == 0)
 8000376:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <HAL_I2C_AddrCallback+0x60>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d11c      	bne.n	80003b8 <HAL_I2C_AddrCallback+0x58>
		{
			rxcount = 0;
 800037e:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <HAL_I2C_AddrCallback+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	701a      	strb	r2, [r3, #0]
			countAddr++;
 8000384:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <HAL_I2C_AddrCallback+0x68>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	3301      	adds	r3, #1
 800038a:	4a0f      	ldr	r2, [pc, #60]	@ (80003c8 <HAL_I2C_AddrCallback+0x68>)
 800038c:	6013      	str	r3, [r2, #0]
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 800038e:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <HAL_I2C_AddrCallback+0x64>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	461a      	mov	r2, r3
 8000394:	4b0d      	ldr	r3, [pc, #52]	@ (80003cc <HAL_I2C_AddrCallback+0x6c>)
 8000396:	18d1      	adds	r1, r2, r3
 8000398:	2300      	movs	r3, #0
 800039a:	2201      	movs	r2, #1
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f000 ffb7 	bl	8001310 <HAL_I2C_Slave_Seq_Receive_IT>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80003a2:	2101      	movs	r1, #1
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003a8:	f000 fefc 	bl	80011a4 <HAL_GPIO_TogglePin>
			HAL_Delay(28);
 80003ac:	201c      	movs	r0, #28
 80003ae:	f000 fbb9 	bl	8000b24 <HAL_Delay>

	else
	{
		Error_Handler();
	}
}
 80003b2:	e001      	b.n	80003b8 <HAL_I2C_AddrCallback+0x58>
		Error_Handler();
 80003b4:	f000 f9d8 	bl	8000768 <Error_Handler>
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000011c 	.word	0x2000011c
 80003c4:	2000010e 	.word	0x2000010e
 80003c8:	20000120 	.word	0x20000120
 80003cc:	20000104 	.word	0x20000104

080003d0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	if (is_first_recvd == 0)
 80003d8:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d116      	bne.n	800040e <HAL_I2C_SlaveRxCpltCallback+0x3e>
	{
		rxcount ++;
 80003e0:	4b14      	ldr	r3, [pc, #80]	@ (8000434 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	b2da      	uxtb	r2, r3
 80003e8:	4b12      	ldr	r3, [pc, #72]	@ (8000434 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80003ea:	701a      	strb	r2, [r3, #0]
		is_first_recvd = 1;
 80003ec:	4b10      	ldr	r3, [pc, #64]	@ (8000430 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	601a      	str	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, RxData[0], I2C_LAST_FRAME);
 80003f2:	4b10      	ldr	r3, [pc, #64]	@ (8000434 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	461a      	mov	r2, r3
 80003f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003fa:	18d1      	adds	r1, r2, r3
 80003fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	461a      	mov	r2, r3
 8000402:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 ff82 	bl	8001310 <HAL_I2C_Slave_Seq_Receive_IT>
	{
		rxcount = rxcount+RxData[0];
		is_first_recvd = 0;
		process_data();
	}
}
 800040c:	e00c      	b.n	8000428 <HAL_I2C_SlaveRxCpltCallback+0x58>
		rxcount = rxcount+RxData[0];
 800040e:	4b0a      	ldr	r3, [pc, #40]	@ (8000438 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000410:	781a      	ldrb	r2, [r3, #0]
 8000412:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	4413      	add	r3, r2
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800041c:	701a      	strb	r2, [r3, #0]
		is_first_recvd = 0;
 800041e:	4b04      	ldr	r3, [pc, #16]	@ (8000430 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
		process_data();
 8000424:	f7ff fef8 	bl	8000218 <process_data>
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	2000011c 	.word	0x2000011c
 8000434:	2000010e 	.word	0x2000010e
 8000438:	20000104 	.word	0x20000104

0800043c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	counterror++;
 8000444:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <HAL_I2C_ErrorCallback+0x34>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3301      	adds	r3, #1
 800044a:	4a09      	ldr	r2, [pc, #36]	@ (8000470 <HAL_I2C_ErrorCallback+0x34>)
 800044c:	6013      	str	r3, [r2, #0]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f001 f8e7 	bl	8001622 <HAL_I2C_GetError>
 8000454:	60f8      	str	r0, [r7, #12]
	if (errorcode == 4) //AF error
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b04      	cmp	r3, #4
 800045a:	d101      	bne.n	8000460 <HAL_I2C_ErrorCallback+0x24>
	{
		process_data();
 800045c:	f7ff fedc 	bl	8000218 <process_data>
	}
	HAL_I2C_EnableListen_IT(hi2c);
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f001 f807 	bl	8001474 <HAL_I2C_EnableListen_IT>
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000124 	.word	0x20000124

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f000 fae3 	bl	8000a42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f81c 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000480:	f000 f928 	bl	80006d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000484:	f000 f8a4 	bl	80005d0 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000488:	f000 f862 	bl	8000550 <MX_I2C2_Init>
  MX_USB_Device_Init();
 800048c:	f009 fce2 	bl	8009e54 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000490:	2100      	movs	r1, #0
 8000492:	4807      	ldr	r0, [pc, #28]	@ (80004b0 <main+0x3c>)
 8000494:	f005 f898 	bl	80055c8 <HAL_TIM_PWM_Start>

	//uint32_t position = 0;

	if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK) //Enters slave to listen for master requests
 8000498:	4806      	ldr	r0, [pc, #24]	@ (80004b4 <main+0x40>)
 800049a:	f000 ffeb 	bl	8001474 <HAL_I2C_EnableListen_IT>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d002      	beq.n	80004aa <main+0x36>
	{
		Error_Handler();
 80004a4:	f000 f960 	bl	8000768 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a8:	bf00      	nop
 80004aa:	bf00      	nop
 80004ac:	e7fd      	b.n	80004aa <main+0x36>
 80004ae:	bf00      	nop
 80004b0:	2000017c 	.word	0x2000017c
 80004b4:	20000128 	.word	0x20000128

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b094      	sub	sp, #80	@ 0x50
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0318 	add.w	r3, r7, #24
 80004c2:	2238      	movs	r2, #56	@ 0x38
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f00a f91e 	bl	800a708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004de:	f004 f825 	bl	800452c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004e2:	2321      	movs	r3, #33	@ 0x21
 80004e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004ec:	2301      	movs	r3, #1
 80004ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f0:	2302      	movs	r3, #2
 80004f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f4:	2303      	movs	r3, #3
 80004f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80004f8:	2302      	movs	r3, #2
 80004fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80004fc:	230c      	movs	r3, #12
 80004fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000500:	2302      	movs	r3, #2
 8000502:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000504:	2304      	movs	r3, #4
 8000506:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000508:	2302      	movs	r3, #2
 800050a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0318 	add.w	r3, r7, #24
 8000510:	4618      	mov	r0, r3
 8000512:	f004 f8bf 	bl	8004694 <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800051c:	f000 f924 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	230f      	movs	r3, #15
 8000522:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000524:	2303      	movs	r3, #3
 8000526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2101      	movs	r1, #1
 8000538:	4618      	mov	r0, r3
 800053a:	f004 fbbd 	bl	8004cb8 <HAL_RCC_ClockConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000544:	f000 f910 	bl	8000768 <Error_Handler>
  }
}
 8000548:	bf00      	nop
 800054a:	3750      	adds	r7, #80	@ 0x50
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000554:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <MX_I2C2_Init+0x74>)
 8000556:	4a1c      	ldr	r2, [pc, #112]	@ (80005c8 <MX_I2C2_Init+0x78>)
 8000558:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 800055a:	4b1a      	ldr	r3, [pc, #104]	@ (80005c4 <MX_I2C2_Init+0x74>)
 800055c:	4a1b      	ldr	r2, [pc, #108]	@ (80005cc <MX_I2C2_Init+0x7c>)
 800055e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0x4f;
 8000560:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <MX_I2C2_Init+0x74>)
 8000562:	224f      	movs	r2, #79	@ 0x4f
 8000564:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000566:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <MX_I2C2_Init+0x74>)
 8000568:	2201      	movs	r2, #1
 800056a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800056c:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <MX_I2C2_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000572:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <MX_I2C2_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000578:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <MX_I2C2_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800057e:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <MX_I2C2_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <MX_I2C2_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800058a:	480e      	ldr	r0, [pc, #56]	@ (80005c4 <MX_I2C2_Init+0x74>)
 800058c:	f000 fe24 	bl	80011d8 <HAL_I2C_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000596:	f000 f8e7 	bl	8000768 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800059a:	2100      	movs	r1, #0
 800059c:	4809      	ldr	r0, [pc, #36]	@ (80005c4 <MX_I2C2_Init+0x74>)
 800059e:	f002 fa6b 	bl	8002a78 <HAL_I2CEx_ConfigAnalogFilter>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80005a8:	f000 f8de 	bl	8000768 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80005ac:	2100      	movs	r1, #0
 80005ae:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <MX_I2C2_Init+0x74>)
 80005b0:	f002 faad 	bl	8002b0e <HAL_I2CEx_ConfigDigitalFilter>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80005ba:	f000 f8d5 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000128 	.word	0x20000128
 80005c8:	40005800 	.word	0x40005800
 80005cc:	10805d88 	.word	0x10805d88

080005d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08e      	sub	sp, #56	@ 0x38
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000602:	4b33      	ldr	r3, [pc, #204]	@ (80006d0 <MX_TIM2_Init+0x100>)
 8000604:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000608:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 800060a:	4b31      	ldr	r3, [pc, #196]	@ (80006d0 <MX_TIM2_Init+0x100>)
 800060c:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000610:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000612:	4b2f      	ldr	r3, [pc, #188]	@ (80006d0 <MX_TIM2_Init+0x100>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000618:	4b2d      	ldr	r3, [pc, #180]	@ (80006d0 <MX_TIM2_Init+0x100>)
 800061a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800061e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000620:	4b2b      	ldr	r3, [pc, #172]	@ (80006d0 <MX_TIM2_Init+0x100>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000626:	4b2a      	ldr	r3, [pc, #168]	@ (80006d0 <MX_TIM2_Init+0x100>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800062c:	4828      	ldr	r0, [pc, #160]	@ (80006d0 <MX_TIM2_Init+0x100>)
 800062e:	f004 ff13 	bl	8005458 <HAL_TIM_Base_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000638:	f000 f896 	bl	8000768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000640:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000642:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000646:	4619      	mov	r1, r3
 8000648:	4821      	ldr	r0, [pc, #132]	@ (80006d0 <MX_TIM2_Init+0x100>)
 800064a:	f005 f9d1 	bl	80059f0 <HAL_TIM_ConfigClockSource>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000654:	f000 f888 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000658:	481d      	ldr	r0, [pc, #116]	@ (80006d0 <MX_TIM2_Init+0x100>)
 800065a:	f004 ff54 	bl	8005506 <HAL_TIM_PWM_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000664:	f000 f880 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4619      	mov	r1, r3
 8000676:	4816      	ldr	r0, [pc, #88]	@ (80006d0 <MX_TIM2_Init+0x100>)
 8000678:	f005 ff08 	bl	800648c <HAL_TIMEx_MasterConfigSynchronization>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000682:	f000 f871 	bl	8000768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000686:	2360      	movs	r3, #96	@ 0x60
 8000688:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <MX_TIM2_Init+0x100>)
 800069e:	f005 f893 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80006a8:	f000 f85e 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	2204      	movs	r2, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <MX_TIM2_Init+0x100>)
 80006b4:	f005 f888 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80006be:	f000 f853 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006c2:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <MX_TIM2_Init+0x100>)
 80006c4:	f000 f900 	bl	80008c8 <HAL_TIM_MspPostInit>

}
 80006c8:	bf00      	nop
 80006ca:	3738      	adds	r7, #56	@ 0x38
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000017c 	.word	0x2000017c

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <MX_GPIO_Init+0x90>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000764 <MX_GPIO_Init+0x90>)
 80006f0:	f043 0320 	orr.w	r3, r3, #32
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_GPIO_Init+0x90>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0320 	and.w	r3, r3, #32
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_GPIO_Init+0x90>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a17      	ldr	r2, [pc, #92]	@ (8000764 <MX_GPIO_Init+0x90>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <MX_GPIO_Init+0x90>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_GPIO_Init+0x90>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a11      	ldr	r2, [pc, #68]	@ (8000764 <MX_GPIO_Init+0x90>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_GPIO_Init+0x90>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2101      	movs	r1, #1
 8000736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073a:	f000 fd1b 	bl	8001174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073e:	2301      	movs	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000758:	f000 fb8a 	bl	8000e70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <HAL_MspInit+0x44>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800077e:	4a0e      	ldr	r2, [pc, #56]	@ (80007b8 <HAL_MspInit+0x44>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6613      	str	r3, [r2, #96]	@ 0x60
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <HAL_MspInit+0x44>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <HAL_MspInit+0x44>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000796:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <HAL_MspInit+0x44>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079c:	6593      	str	r3, [r2, #88]	@ 0x58
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007aa:	f003 ff63 	bl	8004674 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09a      	sub	sp, #104	@ 0x68
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	2244      	movs	r2, #68	@ 0x44
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f009 ff93 	bl	800a708 <memset>
  if(hi2c->Instance==I2C2)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a27      	ldr	r2, [pc, #156]	@ (8000884 <HAL_I2C_MspInit+0xc8>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d147      	bne.n	800087c <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007ec:	2380      	movs	r3, #128	@ 0x80
 80007ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4618      	mov	r0, r3
 80007fa:	f004 fc3d 	bl	8005078 <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000804:	f7ff ffb0 	bl	8000768 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <HAL_I2C_MspInit+0xcc>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080c:	4a1e      	ldr	r2, [pc, #120]	@ (8000888 <HAL_I2C_MspInit+0xcc>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000814:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <HAL_I2C_MspInit+0xcc>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000820:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000824:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000832:	2304      	movs	r3, #4
 8000834:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800083a:	4619      	mov	r1, r3
 800083c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000840:	f000 fb16 	bl	8000e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000844:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <HAL_I2C_MspInit+0xcc>)
 8000846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000848:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <HAL_I2C_MspInit+0xcc>)
 800084a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800084e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000850:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <HAL_I2C_MspInit+0xcc>)
 8000852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	2021      	movs	r0, #33	@ 0x21
 8000862:	f000 fa5c 	bl	8000d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000866:	2021      	movs	r0, #33	@ 0x21
 8000868:	f000 fa73 	bl	8000d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2022      	movs	r0, #34	@ 0x22
 8000872:	f000 fa54 	bl	8000d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000876:	2022      	movs	r0, #34	@ 0x22
 8000878:	f000 fa6b 	bl	8000d52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800087c:	bf00      	nop
 800087e:	3768      	adds	r7, #104	@ 0x68
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40005800 	.word	0x40005800
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800089c:	d10b      	bne.n	80008b6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008e8:	d11c      	bne.n	8000924 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <HAL_TIM_MspPostInit+0x64>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a0f      	ldr	r2, [pc, #60]	@ (800092c <HAL_TIM_MspPostInit+0x64>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <HAL_TIM_MspPostInit+0x64>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000902:	2322      	movs	r3, #34	@ 0x22
 8000904:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000912:	2301      	movs	r3, #1
 8000914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000920:	f000 faa6 	bl	8000e70 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <NMI_Handler+0x4>

08000938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <MemManage_Handler+0x4>

08000948 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <UsageFault_Handler+0x4>

08000958 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000986:	f000 f8af 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000994:	4802      	ldr	r0, [pc, #8]	@ (80009a0 <USB_LP_IRQHandler+0x10>)
 8000996:	f002 fa18 	bl	8002dca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200007a4 	.word	0x200007a4

080009a4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80009a8:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <I2C2_EV_IRQHandler+0x10>)
 80009aa:	f000 fd83 	bl	80014b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000128 	.word	0x20000128

080009b8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80009bc:	4802      	ldr	r0, [pc, #8]	@ (80009c8 <I2C2_ER_IRQHandler+0x10>)
 80009be:	f000 fd93 	bl	80014e8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000128 	.word	0x20000128

080009cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f4:	f7ff ffea 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f009 fe7b 	bl	800a718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a22:	f7ff fd27 	bl	8000474 <main>

08000a26 <LoopForever>:

LoopForever:
    b LoopForever
 8000a26:	e7fe      	b.n	8000a26 <LoopForever>
  ldr   r0, =_estack
 8000a28:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000a34:	0800a840 	.word	0x0800a840
  ldr r2, =_sbss
 8000a38:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000a3c:	20000ea0 	.word	0x20000ea0

08000a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_2_IRQHandler>

08000a42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f95b 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a52:	200f      	movs	r0, #15
 8000a54:	f000 f80e 	bl	8000a74 <HAL_InitTick>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	e001      	b.n	8000a68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a64:	f7ff fe86 	bl	8000774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a68:	79fb      	ldrb	r3, [r7, #7]

}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <HAL_InitTick+0x68>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d022      	beq.n	8000ace <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_InitTick+0x6c>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <HAL_InitTick+0x68>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f966 	bl	8000d6e <HAL_SYSTICK_Config>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10f      	bne.n	8000ac8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d809      	bhi.n	8000ac2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab6:	f000 f932 	bl	8000d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_InitTick+0x70>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e007      	b.n	8000ad2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
 8000ac6:	e004      	b.n	8000ad2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e001      	b.n	8000ad2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000010 	.word	0x20000010
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	2000000c 	.word	0x2000000c

08000ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <HAL_IncTick+0x1c>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <HAL_IncTick+0x20>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a03      	ldr	r2, [pc, #12]	@ (8000b04 <HAL_IncTick+0x1c>)
 8000af8:	6013      	str	r3, [r2, #0]
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	200001d0 	.word	0x200001d0
 8000b08:	20000010 	.word	0x20000010

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b03      	ldr	r3, [pc, #12]	@ (8000b20 <HAL_GetTick+0x14>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200001d0 	.word	0x200001d0

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff ffee 	bl	8000b0c <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d004      	beq.n	8000b48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <HAL_Delay+0x40>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b48:	bf00      	nop
 8000b4a:	f7ff ffdf 	bl	8000b0c <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d8f7      	bhi.n	8000b4a <HAL_Delay+0x26>
  {
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000010 	.word	0x20000010

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	@ (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	@ (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	@ (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	@ 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	@ 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd4:	d301      	bcc.n	8000cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00f      	b.n	8000cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <SysTick_Config+0x40>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f7ff ff8e 	bl	8000c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <SysTick_Config+0x40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <SysTick_Config+0x40>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff29 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff40 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff90 	bl	8000c5c <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5f 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff33 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffa4 	bl	8000cc4 <SysTick_Config>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d00d      	beq.n	8000dba <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2204      	movs	r2, #4
 8000da2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2201      	movs	r2, #1
 8000da8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e047      	b.n	8000e4a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 020e 	bic.w	r2, r2, #14
 8000dc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0201 	bic.w	r2, r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000de4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000de8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	f003 021f 	and.w	r2, r3, #31
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e06:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00c      	beq.n	8000e2a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e28:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	4798      	blx	r3
    }
  }
  return status;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e62:	b2db      	uxtb	r3, r3
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e7e:	e15a      	b.n	8001136 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	2101      	movs	r1, #1
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 814c 	beq.w	8001130 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d005      	beq.n	8000eb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d130      	bne.n	8000f12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	091b      	lsrs	r3, r3, #4
 8000efc:	f003 0201 	and.w	r2, r3, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d017      	beq.n	8000f4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d123      	bne.n	8000fa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	691a      	ldr	r2, [r3, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	6939      	ldr	r1, [r7, #16]
 8000f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0203 	and.w	r2, r3, #3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 80a6 	beq.w	8001130 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe4:	4b5b      	ldr	r3, [pc, #364]	@ (8001154 <HAL_GPIO_Init+0x2e4>)
 8000fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8001154 <HAL_GPIO_Init+0x2e4>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff0:	4b58      	ldr	r3, [pc, #352]	@ (8001154 <HAL_GPIO_Init+0x2e4>)
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffc:	4a56      	ldr	r2, [pc, #344]	@ (8001158 <HAL_GPIO_Init+0x2e8>)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001026:	d01f      	beq.n	8001068 <HAL_GPIO_Init+0x1f8>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a4c      	ldr	r2, [pc, #304]	@ (800115c <HAL_GPIO_Init+0x2ec>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d019      	beq.n	8001064 <HAL_GPIO_Init+0x1f4>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a4b      	ldr	r2, [pc, #300]	@ (8001160 <HAL_GPIO_Init+0x2f0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d013      	beq.n	8001060 <HAL_GPIO_Init+0x1f0>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a4a      	ldr	r2, [pc, #296]	@ (8001164 <HAL_GPIO_Init+0x2f4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d00d      	beq.n	800105c <HAL_GPIO_Init+0x1ec>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a49      	ldr	r2, [pc, #292]	@ (8001168 <HAL_GPIO_Init+0x2f8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d007      	beq.n	8001058 <HAL_GPIO_Init+0x1e8>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a48      	ldr	r2, [pc, #288]	@ (800116c <HAL_GPIO_Init+0x2fc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d101      	bne.n	8001054 <HAL_GPIO_Init+0x1e4>
 8001050:	2305      	movs	r3, #5
 8001052:	e00a      	b.n	800106a <HAL_GPIO_Init+0x1fa>
 8001054:	2306      	movs	r3, #6
 8001056:	e008      	b.n	800106a <HAL_GPIO_Init+0x1fa>
 8001058:	2304      	movs	r3, #4
 800105a:	e006      	b.n	800106a <HAL_GPIO_Init+0x1fa>
 800105c:	2303      	movs	r3, #3
 800105e:	e004      	b.n	800106a <HAL_GPIO_Init+0x1fa>
 8001060:	2302      	movs	r3, #2
 8001062:	e002      	b.n	800106a <HAL_GPIO_Init+0x1fa>
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <HAL_GPIO_Init+0x1fa>
 8001068:	2300      	movs	r3, #0
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	f002 0203 	and.w	r2, r2, #3
 8001070:	0092      	lsls	r2, r2, #2
 8001072:	4093      	lsls	r3, r2
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800107a:	4937      	ldr	r1, [pc, #220]	@ (8001158 <HAL_GPIO_Init+0x2e8>)
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001088:	4b39      	ldr	r3, [pc, #228]	@ (8001170 <HAL_GPIO_Init+0x300>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ac:	4a30      	ldr	r2, [pc, #192]	@ (8001170 <HAL_GPIO_Init+0x300>)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <HAL_GPIO_Init+0x300>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010d6:	4a26      	ldr	r2, [pc, #152]	@ (8001170 <HAL_GPIO_Init+0x300>)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010dc:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <HAL_GPIO_Init+0x300>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001100:	4a1b      	ldr	r2, [pc, #108]	@ (8001170 <HAL_GPIO_Init+0x300>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001106:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <HAL_GPIO_Init+0x300>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800112a:	4a11      	ldr	r2, [pc, #68]	@ (8001170 <HAL_GPIO_Init+0x300>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fa22 f303 	lsr.w	r3, r2, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	f47f ae9d 	bne.w	8000e80 <HAL_GPIO_Init+0x10>
  }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	371c      	adds	r7, #28
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000
 800115c:	48000400 	.word	0x48000400
 8001160:	48000800 	.word	0x48000800
 8001164:	48000c00 	.word	0x48000c00
 8001168:	48001000 	.word	0x48001000
 800116c:	48001400 	.word	0x48001400
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001190:	e002      	b.n	8001198 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4013      	ands	r3, r2
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43d9      	mvns	r1, r3
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	400b      	ands	r3, r1
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e08d      	b.n	8001306 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d106      	bne.n	8001204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fadc 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2224      	movs	r2, #36	@ 0x24
 8001208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0201 	bic.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001228:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001238:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d107      	bne.n	8001252 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	e006      	b.n	8001260 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800125e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d108      	bne.n	800127a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	e007      	b.n	800128a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001288:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800129c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691a      	ldr	r2, [r3, #16]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69d9      	ldr	r1, [r3, #28]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1a      	ldr	r2, [r3, #32]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2220      	movs	r2, #32
 80012f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	4613      	mov	r3, r2
 800131e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800132c:	2b28      	cmp	r3, #40	@ 0x28
 800132e:	f040 8098 	bne.w	8001462 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001344:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e08c      	b.n	8001464 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800134a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f001 fb34 	bl	80029bc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 800135e:	2302      	movs	r3, #2
 8001360:	e080      	b.n	8001464 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b29      	cmp	r3, #41	@ 0x29
 8001374:	d12a      	bne.n	80013cc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001376:	2101      	movs	r1, #1
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f001 fb1f 	bl	80029bc <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800138c:	d11e      	bne.n	80013cc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800139c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d012      	beq.n	80013cc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013aa:	4a30      	ldr	r2, [pc, #192]	@ (800146c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 80013ac:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fce7 	bl	8000d86 <HAL_DMA_Abort_IT>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013c8:	4610      	mov	r0, r2
 80013ca:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	222a      	movs	r2, #42	@ 0x2a
 80013d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2220      	movs	r2, #32
 80013d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013f0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	88fa      	ldrh	r2, [r7, #6]
 80013fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001402:	b29a      	uxth	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4a17      	ldr	r2, [pc, #92]	@ (8001470 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8001412:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b08      	cmp	r3, #8
 8001420:	bf0c      	ite	eq
 8001422:	2301      	moveq	r3, #1
 8001424:	2300      	movne	r3, #0
 8001426:	b2db      	uxtb	r3, r3
 8001428:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	0c1b      	lsrs	r3, r3, #16
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d106      	bne.n	800144c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2208      	movs	r2, #8
 800144a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001454:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f001 fa2b 	bl	80028b4 <I2C_Enable_IRQ>

    return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
  }
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	08002813 	.word	0x08002813
 8001470:	0800163b 	.word	0x0800163b

08001474 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b20      	cmp	r3, #32
 8001486:	d10d      	bne.n	80014a4 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2228      	movs	r2, #40	@ 0x28
 800148c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a07      	ldr	r2, [pc, #28]	@ (80014b0 <HAL_I2C_EnableListen_IT+0x3c>)
 8001494:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001496:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f001 fa0a 	bl	80028b4 <I2C_Enable_IRQ>

    return HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e000      	b.n	80014a6 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80014a4:	2302      	movs	r3, #2
  }
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	0800163b 	.word	0x0800163b

080014b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	68f9      	ldr	r1, [r7, #12]
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
  }
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d010      	beq.n	800152e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	09db      	lsrs	r3, r3, #7
 8001510:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00a      	beq.n	800152e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151c:	f043 0201 	orr.w	r2, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800152c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	0a9b      	lsrs	r3, r3, #10
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d010      	beq.n	800155c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	09db      	lsrs	r3, r3, #7
 800153e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00a      	beq.n	800155c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	f043 0208 	orr.w	r2, r3, #8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800155a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	0a5b      	lsrs	r3, r3, #9
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d010      	beq.n	800158a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	09db      	lsrs	r3, r3, #7
 800156c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00a      	beq.n	800158a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001578:	f043 0202 	orr.w	r2, r3, #2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001588:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 030b 	and.w	r3, r3, #11
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800159a:	68f9      	ldr	r1, [r7, #12]
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fffd 	bl	800259c <I2C_ITError>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001656:	2b01      	cmp	r3, #1
 8001658:	d101      	bne.n	800165e <I2C_Slave_ISR_IT+0x24>
 800165a:	2302      	movs	r3, #2
 800165c:	e0ed      	b.n	800183a <I2C_Slave_ISR_IT+0x200>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	095b      	lsrs	r3, r3, #5
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00a      	beq.n	8001688 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	095b      	lsrs	r3, r3, #5
 8001676:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800167e:	6939      	ldr	r1, [r7, #16]
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 fdcb 	bl	800221c <I2C_ITSlaveCplt>
 8001686:	e0d3      	b.n	8001830 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d04d      	beq.n	8001730 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800169c:	2b00      	cmp	r3, #0
 800169e:	d047      	beq.n	8001730 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d128      	bne.n	80016fc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b28      	cmp	r3, #40	@ 0x28
 80016b4:	d108      	bne.n	80016c8 <I2C_Slave_ISR_IT+0x8e>
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80016bc:	d104      	bne.n	80016c8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80016be:	6939      	ldr	r1, [r7, #16]
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 ff15 	bl	80024f0 <I2C_ITListenCplt>
 80016c6:	e032      	b.n	800172e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b29      	cmp	r3, #41	@ 0x29
 80016d2:	d10e      	bne.n	80016f2 <I2C_Slave_ISR_IT+0xb8>
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80016da:	d00a      	beq.n	80016f2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2210      	movs	r2, #16
 80016e2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f001 f870 	bl	80027ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 fc6e 	bl	8001fcc <I2C_ITSlaveSeqCplt>
 80016f0:	e01d      	b.n	800172e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2210      	movs	r2, #16
 80016f8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80016fa:	e096      	b.n	800182a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2210      	movs	r2, #16
 8001702:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001708:	f043 0204 	orr.w	r2, r3, #4
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d004      	beq.n	8001720 <I2C_Slave_ISR_IT+0xe6>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800171c:	f040 8085 	bne.w	800182a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001724:	4619      	mov	r1, r3
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 ff38 	bl	800259c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800172c:	e07d      	b.n	800182a <I2C_Slave_ISR_IT+0x1f0>
 800172e:	e07c      	b.n	800182a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d030      	beq.n	800179e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001744:	2b00      	cmp	r3, #0
 8001746:	d02a      	beq.n	800179e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174c:	b29b      	uxth	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d018      	beq.n	8001784 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176e:	3b01      	subs	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b01      	subs	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d14f      	bne.n	800182e <I2C_Slave_ISR_IT+0x1f4>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001794:	d04b      	beq.n	800182e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fc18 	bl	8001fcc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800179c:	e047      	b.n	800182e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00a      	beq.n	80017c0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d004      	beq.n	80017c0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80017b6:	6939      	ldr	r1, [r7, #16]
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 fb46 	bl	8001e4a <I2C_ITAddrCplt>
 80017be:	e037      	b.n	8001830 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d031      	beq.n	8001830 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	085b      	lsrs	r3, r3, #1
 80017d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d02b      	beq.n	8001830 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017dc:	b29b      	uxth	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d018      	beq.n	8001814 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001812:	e00d      	b.n	8001830 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800181a:	d002      	beq.n	8001822 <I2C_Slave_ISR_IT+0x1e8>
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fbd2 	bl	8001fcc <I2C_ITSlaveSeqCplt>
 8001828:	e002      	b.n	8001830 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800182a:	bf00      	nop
 800182c:	e000      	b.n	8001830 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800182e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b088      	sub	sp, #32
 8001846:	af02      	add	r7, sp, #8
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <I2C_Master_ISR_DMA+0x1a>
 8001858:	2302      	movs	r3, #2
 800185a:	e0e1      	b.n	8001a20 <I2C_Master_ISR_DMA+0x1de>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d017      	beq.n	80018a0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001878:	2b00      	cmp	r3, #0
 800187a:	d011      	beq.n	80018a0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2210      	movs	r2, #16
 8001882:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001888:	f043 0204 	orr.w	r2, r3, #4
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001890:	2120      	movs	r1, #32
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f001 f80e 	bl	80028b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 ff96 	bl	80027ca <I2C_Flush_TXDR>
 800189e:	e0ba      	b.n	8001a16 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	09db      	lsrs	r3, r3, #7
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d072      	beq.n	8001992 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	099b      	lsrs	r3, r3, #6
 80018b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d06c      	beq.n	8001992 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018c6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d04e      	beq.n	8001970 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018de:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2bff      	cmp	r3, #255	@ 0xff
 80018e8:	d906      	bls.n	80018f8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	22ff      	movs	r2, #255	@ 0xff
 80018ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80018f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e010      	b.n	800191a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001906:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800190a:	d003      	beq.n	8001914 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e002      	b.n	800191a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001914:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001918:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191e:	b2da      	uxtb	r2, r3
 8001920:	8a79      	ldrh	r1, [r7, #18]
 8001922:	2300      	movs	r3, #0
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 ff91 	bl	8002850 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b22      	cmp	r3, #34	@ 0x22
 800194a:	d108      	bne.n	800195e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800195a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800195c:	e05b      	b.n	8001a16 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800196c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800196e:	e052      	b.n	8001a16 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800197e:	d003      	beq.n	8001988 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 fae6 	bl	8001f52 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001986:	e046      	b.n	8001a16 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001988:	2140      	movs	r1, #64	@ 0x40
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fe06 	bl	800259c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001990:	e041      	b.n	8001a16 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	099b      	lsrs	r3, r3, #6
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d029      	beq.n	80019f2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d023      	beq.n	80019f2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d119      	bne.n	80019e8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019c2:	d027      	beq.n	8001a14 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80019cc:	d108      	bne.n	80019e0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019dc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80019de:	e019      	b.n	8001a14 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fab6 	bl	8001f52 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80019e6:	e015      	b.n	8001a14 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80019e8:	2140      	movs	r1, #64	@ 0x40
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 fdd6 	bl	800259c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80019f0:	e010      	b.n	8001a14 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	095b      	lsrs	r3, r3, #5
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	095b      	lsrs	r3, r3, #5
 8001a02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 fb3b 	bl	8002088 <I2C_ITMasterCplt>
 8001a12:	e000      	b.n	8001a16 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001a14:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001a34:	4b92      	ldr	r3, [pc, #584]	@ (8001c80 <I2C_Mem_ISR_DMA+0x258>)
 8001a36:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <I2C_Mem_ISR_DMA+0x1e>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e118      	b.n	8001c78 <I2C_Mem_ISR_DMA+0x250>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d017      	beq.n	8001a8a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d011      	beq.n	8001a8a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	f043 0204 	orr.w	r2, r3, #4
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 ff19 	bl	80028b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fea1 	bl	80027ca <I2C_Flush_TXDR>
 8001a88:	e0f1      	b.n	8001c6e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00f      	beq.n	8001ab6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ab4:	e0db      	b.n	8001c6e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	09db      	lsrs	r3, r3, #7
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d060      	beq.n	8001b84 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d05a      	beq.n	8001b84 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ace:	2101      	movs	r1, #1
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 ff73 	bl	80029bc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 feeb 	bl	80028b4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d048      	beq.n	8001b7a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	2bff      	cmp	r3, #255	@ 0xff
 8001af0:	d910      	bls.n	8001b14 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	22ff      	movs	r2, #255	@ 0xff
 8001af6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afc:	b299      	uxth	r1, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 fe9f 	bl	8002850 <I2C_TransferConfig>
 8001b12:	e011      	b.n	8001b38 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	b299      	uxth	r1, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 fe8c 	bl	8002850 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b22      	cmp	r3, #34	@ 0x22
 8001b54:	d108      	bne.n	8001b68 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b64:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001b66:	e082      	b.n	8001c6e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b76:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001b78:	e079      	b.n	8001c6e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001b7a:	2140      	movs	r1, #64	@ 0x40
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 fd0d 	bl	800259c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001b82:	e074      	b.n	8001c6e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d05e      	beq.n	8001c4e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d058      	beq.n	8001c4e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 ff0c 	bl	80029bc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fe84 	bl	80028b4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b22      	cmp	r3, #34	@ 0x22
 8001bb6:	d101      	bne.n	8001bbc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8001bb8:	4b32      	ldr	r3, [pc, #200]	@ (8001c84 <I2C_Mem_ISR_DMA+0x25c>)
 8001bba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2bff      	cmp	r3, #255	@ 0xff
 8001bc4:	d910      	bls.n	8001be8 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	22ff      	movs	r2, #255	@ 0xff
 8001bca:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd0:	b299      	uxth	r1, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 fe35 	bl	8002850 <I2C_TransferConfig>
 8001be6:	e011      	b.n	8001c0c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	b299      	uxth	r1, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fe22 	bl	8002850 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b22      	cmp	r3, #34	@ 0x22
 8001c28:	d108      	bne.n	8001c3c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c38:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c3a:	e018      	b.n	8001c6e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c4a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c4c:	e00f      	b.n	8001c6e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	095b      	lsrs	r3, r3, #5
 8001c5e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fa0d 	bl	8002088 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	80002000 	.word	0x80002000
 8001c84:	80002400 	.word	0x80002400

08001c88 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <I2C_Slave_ISR_DMA+0x24>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e0ca      	b.n	8001e42 <I2C_Slave_ISR_DMA+0x1ba>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 faa4 	bl	800221c <I2C_ITSlaveCplt>
 8001cd4:	e0b0      	b.n	8001e38 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 809a 	beq.w	8001e18 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8093 	beq.w	8001e18 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	0b9b      	lsrs	r3, r3, #14
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d105      	bne.n	8001d0a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0bdb      	lsrs	r3, r3, #15
 8001d02:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d07f      	beq.n	8001e0a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00d      	beq.n	8001d2e <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	0bdb      	lsrs	r3, r3, #15
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00d      	beq.n	8001d52 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	0b9b      	lsrs	r3, r3, #14
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d128      	bne.n	8001daa <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b28      	cmp	r3, #40	@ 0x28
 8001d62:	d108      	bne.n	8001d76 <I2C_Slave_ISR_DMA+0xee>
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d6a:	d104      	bne.n	8001d76 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fbbe 	bl	80024f0 <I2C_ITListenCplt>
 8001d74:	e048      	b.n	8001e08 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b29      	cmp	r3, #41	@ 0x29
 8001d80:	d10e      	bne.n	8001da0 <I2C_Slave_ISR_DMA+0x118>
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d88:	d00a      	beq.n	8001da0 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2210      	movs	r2, #16
 8001d90:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fd19 	bl	80027ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f917 	bl	8001fcc <I2C_ITSlaveSeqCplt>
 8001d9e:	e033      	b.n	8001e08 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2210      	movs	r2, #16
 8001da6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001da8:	e034      	b.n	8001e14 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2210      	movs	r2, #16
 8001db0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f043 0204 	orr.w	r2, r3, #4
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <I2C_Slave_ISR_DMA+0x14c>
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd2:	d11f      	bne.n	8001e14 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	2b21      	cmp	r3, #33	@ 0x21
 8001dd8:	d002      	beq.n	8001de0 <I2C_Slave_ISR_DMA+0x158>
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	2b29      	cmp	r3, #41	@ 0x29
 8001dde:	d103      	bne.n	8001de8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2221      	movs	r2, #33	@ 0x21
 8001de4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001de6:	e008      	b.n	8001dfa <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	2b22      	cmp	r3, #34	@ 0x22
 8001dec:	d002      	beq.n	8001df4 <I2C_Slave_ISR_DMA+0x16c>
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001df2:	d102      	bne.n	8001dfa <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2222      	movs	r2, #34	@ 0x22
 8001df8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	4619      	mov	r1, r3
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 fbcb 	bl	800259c <I2C_ITError>
      if (treatdmanack == 1U)
 8001e06:	e005      	b.n	8001e14 <I2C_Slave_ISR_DMA+0x18c>
 8001e08:	e004      	b.n	8001e14 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2210      	movs	r2, #16
 8001e10:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e12:	e011      	b.n	8001e38 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8001e14:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e16:	e00f      	b.n	8001e38 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	08db      	lsrs	r3, r3, #3
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	08db      	lsrs	r3, r3, #3
 8001e28:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f809 	bl	8001e4a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001e60:	2b28      	cmp	r3, #40	@ 0x28
 8001e62:	d16a      	bne.n	8001f3a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	0c1b      	lsrs	r3, r3, #16
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001e82:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e90:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001e9e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d138      	bne.n	8001f1a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001ea8:	897b      	ldrh	r3, [r7, #10]
 8001eaa:	09db      	lsrs	r3, r3, #7
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	89bb      	ldrh	r3, [r7, #12]
 8001eb0:	4053      	eors	r3, r2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f003 0306 	and.w	r3, r3, #6
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d11c      	bne.n	8001ef6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001ebc:	897b      	ldrh	r3, [r7, #10]
 8001ebe:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d13b      	bne.n	8001f4a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2208      	movs	r2, #8
 8001ede:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ee8:	89ba      	ldrh	r2, [r7, #12]
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	4619      	mov	r1, r3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fa36 	bl	8000360 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001ef4:	e029      	b.n	8001f4a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001ef6:	893b      	ldrh	r3, [r7, #8]
 8001ef8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001efa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fd5c 	bl	80029bc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f0c:	89ba      	ldrh	r2, [r7, #12]
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe fa24 	bl	8000360 <HAL_I2C_AddrCallback>
}
 8001f18:	e017      	b.n	8001f4a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001f1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fd4c 	bl	80029bc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f2c:	89ba      	ldrh	r2, [r7, #12]
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	4619      	mov	r1, r3
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fa14 	bl	8000360 <HAL_I2C_AddrCallback>
}
 8001f38:	e007      	b.n	8001f4a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2208      	movs	r2, #8
 8001f40:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b21      	cmp	r3, #33	@ 0x21
 8001f6c:	d115      	bne.n	8001f9a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2211      	movs	r2, #17
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f82:	2101      	movs	r1, #1
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fd19 	bl	80029bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fb09 	bl	80015aa <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f98:	e014      	b.n	8001fc4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2212      	movs	r2, #18
 8001fa6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001fae:	2102      	movs	r1, #2
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fd03 	bl	80029bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fafd 	bl	80015be <HAL_I2C_MasterRxCpltCallback>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	0b9b      	lsrs	r3, r3, #14
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e00d      	b.n	800201e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	0bdb      	lsrs	r3, r3, #15
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800201c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b29      	cmp	r3, #41	@ 0x29
 8002028:	d112      	bne.n	8002050 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2228      	movs	r2, #40	@ 0x28
 800202e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2221      	movs	r2, #33	@ 0x21
 8002036:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002038:	2101      	movs	r1, #1
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fcbe 	bl	80029bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fac2 	bl	80015d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800204e:	e017      	b.n	8002080 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b2a      	cmp	r3, #42	@ 0x2a
 800205a:	d111      	bne.n	8002080 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2228      	movs	r2, #40	@ 0x28
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2222      	movs	r2, #34	@ 0x22
 8002068:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800206a:	2102      	movs	r1, #2
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fca5 	bl	80029bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe f9a8 	bl	80003d0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2220      	movs	r2, #32
 800209c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b21      	cmp	r3, #33	@ 0x21
 80020a8:	d107      	bne.n	80020ba <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020aa:	2101      	movs	r1, #1
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fc85 	bl	80029bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2211      	movs	r2, #17
 80020b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020b8:	e00c      	b.n	80020d4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b22      	cmp	r3, #34	@ 0x22
 80020c4:	d106      	bne.n	80020d4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80020c6:	2102      	movs	r1, #2
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fc77 	bl	80029bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2212      	movs	r2, #18
 80020d2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b4d      	ldr	r3, [pc, #308]	@ (8002214 <I2C_ITMasterCplt+0x18c>)
 80020e0:	400b      	ands	r3, r1
 80020e2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002218 <I2C_ITMasterCplt+0x190>)
 80020ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2210      	movs	r2, #16
 8002102:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002108:	f043 0204 	orr.w	r2, r3, #4
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b60      	cmp	r3, #96	@ 0x60
 800211a:	d10b      	bne.n	8002134 <I2C_ITMasterCplt+0xac>
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	b2db      	uxtb	r3, r3
 8002130:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002132:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fb48 	bl	80027ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b60      	cmp	r3, #96	@ 0x60
 800214a:	d002      	beq.n	8002152 <I2C_ITMasterCplt+0xca>
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	4619      	mov	r1, r3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fa1f 	bl	800259c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800215e:	e054      	b.n	800220a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b21      	cmp	r3, #33	@ 0x21
 800216a:	d124      	bne.n	80021b6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b40      	cmp	r3, #64	@ 0x40
 8002184:	d10b      	bne.n	800219e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fa25 	bl	80015e6 <HAL_I2C_MemTxCpltCallback>
}
 800219c:	e035      	b.n	800220a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff f9fb 	bl	80015aa <HAL_I2C_MasterTxCpltCallback>
}
 80021b4:	e029      	b.n	800220a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b22      	cmp	r3, #34	@ 0x22
 80021c0:	d123      	bne.n	800220a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b40      	cmp	r3, #64	@ 0x40
 80021da:	d10b      	bne.n	80021f4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff fa04 	bl	80015fa <HAL_I2C_MemRxCpltCallback>
}
 80021f2:	e00a      	b.n	800220a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff f9da 	bl	80015be <HAL_I2C_MasterRxCpltCallback>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	fe00e800 	.word	0xfe00e800
 8002218:	ffff0000 	.word	0xffff0000

0800221c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002236:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800223e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2220      	movs	r2, #32
 8002246:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002248:	7afb      	ldrb	r3, [r7, #11]
 800224a:	2b21      	cmp	r3, #33	@ 0x21
 800224c:	d002      	beq.n	8002254 <I2C_ITSlaveCplt+0x38>
 800224e:	7afb      	ldrb	r3, [r7, #11]
 8002250:	2b29      	cmp	r3, #41	@ 0x29
 8002252:	d108      	bne.n	8002266 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002254:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fbaf 	bl	80029bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2221      	movs	r2, #33	@ 0x21
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
 8002264:	e019      	b.n	800229a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	2b22      	cmp	r3, #34	@ 0x22
 800226a:	d002      	beq.n	8002272 <I2C_ITSlaveCplt+0x56>
 800226c:	7afb      	ldrb	r3, [r7, #11]
 800226e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002270:	d108      	bne.n	8002284 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002272:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fba0 	bl	80029bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2222      	movs	r2, #34	@ 0x22
 8002280:	631a      	str	r2, [r3, #48]	@ 0x30
 8002282:	e00a      	b.n	800229a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002284:	7afb      	ldrb	r3, [r7, #11]
 8002286:	2b28      	cmp	r3, #40	@ 0x28
 8002288:	d107      	bne.n	800229a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800228a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fb94 	bl	80029bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022a8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b8c      	ldr	r3, [pc, #560]	@ (80024e8 <I2C_ITSlaveCplt+0x2cc>)
 80022b6:	400b      	ands	r3, r1
 80022b8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fa85 	bl	80027ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	0b9b      	lsrs	r3, r3, #14
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d020      	beq.n	8002326 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022f2:	e018      	b.n	8002326 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	0bdb      	lsrs	r3, r3, #15
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d012      	beq.n	8002326 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800230e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	b29a      	uxth	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d020      	beq.n	8002374 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	f043 0204 	orr.w	r2, r3, #4
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d04a      	beq.n	800242c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d044      	beq.n	800242c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d128      	bne.n	80023fe <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b28      	cmp	r3, #40	@ 0x28
 80023b6:	d108      	bne.n	80023ca <I2C_ITSlaveCplt+0x1ae>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023be:	d104      	bne.n	80023ca <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80023c0:	6979      	ldr	r1, [r7, #20]
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f894 	bl	80024f0 <I2C_ITListenCplt>
 80023c8:	e030      	b.n	800242c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b29      	cmp	r3, #41	@ 0x29
 80023d4:	d10e      	bne.n	80023f4 <I2C_ITSlaveCplt+0x1d8>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023dc:	d00a      	beq.n	80023f4 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2210      	movs	r2, #16
 80023e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f9ef 	bl	80027ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff fded 	bl	8001fcc <I2C_ITSlaveSeqCplt>
 80023f2:	e01b      	b.n	800242c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2210      	movs	r2, #16
 80023fa:	61da      	str	r2, [r3, #28]
 80023fc:	e016      	b.n	800242c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2210      	movs	r2, #16
 8002404:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	f043 0204 	orr.w	r2, r3, #4
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <I2C_ITSlaveCplt+0x204>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800241e:	d105      	bne.n	800242c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8b8 	bl	800259c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	2b00      	cmp	r3, #0
 8002440:	d010      	beq.n	8002464 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	4619      	mov	r1, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f8a7 	bl	800259c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b28      	cmp	r3, #40	@ 0x28
 8002458:	d141      	bne.n	80024de <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800245a:	6979      	ldr	r1, [r7, #20]
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f847 	bl	80024f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002462:	e03c      	b.n	80024de <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800246c:	d014      	beq.n	8002498 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff fdac 	bl	8001fcc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a1d      	ldr	r2, [pc, #116]	@ (80024ec <I2C_ITSlaveCplt+0x2d0>)
 8002478:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7fd ff59 	bl	8000348 <HAL_I2C_ListenCpltCallback>
}
 8002496:	e022      	b.n	80024de <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b22      	cmp	r3, #34	@ 0x22
 80024a2:	d10e      	bne.n	80024c2 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fd ff88 	bl	80003d0 <HAL_I2C_SlaveRxCpltCallback>
}
 80024c0:	e00d      	b.n	80024de <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff f87a 	bl	80015d2 <HAL_I2C_SlaveTxCpltCallback>
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	fe00e800 	.word	0xfe00e800
 80024ec:	ffff0000 	.word	0xffff0000

080024f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a26      	ldr	r2, [pc, #152]	@ (8002598 <I2C_ITListenCplt+0xa8>)
 80024fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d022      	beq.n	800256e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d012      	beq.n	800256e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f043 0204 	orr.w	r2, r3, #4
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800256e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa22 	bl	80029bc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2210      	movs	r2, #16
 800257e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7fd fedd 	bl	8000348 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	ffff0000 	.word	0xffff0000

0800259c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a6d      	ldr	r2, [pc, #436]	@ (8002770 <I2C_ITError+0x1d4>)
 80025ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	2b28      	cmp	r3, #40	@ 0x28
 80025d2:	d005      	beq.n	80025e0 <I2C_ITError+0x44>
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b29      	cmp	r3, #41	@ 0x29
 80025d8:	d002      	beq.n	80025e0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80025de:	d10b      	bne.n	80025f8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025e0:	2103      	movs	r1, #3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f9ea 	bl	80029bc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2228      	movs	r2, #40	@ 0x28
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a60      	ldr	r2, [pc, #384]	@ (8002774 <I2C_ITError+0x1d8>)
 80025f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80025f6:	e030      	b.n	800265a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025f8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f9dd 	bl	80029bc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8e1 	bl	80027ca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b60      	cmp	r3, #96	@ 0x60
 8002612:	d01f      	beq.n	8002654 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d114      	bne.n	8002654 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b10      	cmp	r3, #16
 8002636:	d109      	bne.n	800264c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2210      	movs	r2, #16
 800263e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002644:	f043 0204 	orr.w	r2, r3, #4
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2220      	movs	r2, #32
 8002652:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002664:	2b00      	cmp	r3, #0
 8002666:	d039      	beq.n	80026dc <I2C_ITError+0x140>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b11      	cmp	r3, #17
 800266c:	d002      	beq.n	8002674 <I2C_ITError+0xd8>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b21      	cmp	r3, #33	@ 0x21
 8002672:	d133      	bne.n	80026dc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002682:	d107      	bne.n	8002694 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002692:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fbdb 	bl	8000e54 <HAL_DMA_GetState>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d017      	beq.n	80026d4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a8:	4a33      	ldr	r2, [pc, #204]	@ (8002778 <I2C_ITError+0x1dc>)
 80026aa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fb64 	bl	8000d86 <HAL_DMA_Abort_IT>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d04d      	beq.n	8002760 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026ce:	4610      	mov	r0, r2
 80026d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026d2:	e045      	b.n	8002760 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f851 	bl	800277c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026da:	e041      	b.n	8002760 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d039      	beq.n	8002758 <I2C_ITError+0x1bc>
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b12      	cmp	r3, #18
 80026e8:	d002      	beq.n	80026f0 <I2C_ITError+0x154>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b22      	cmp	r3, #34	@ 0x22
 80026ee:	d133      	bne.n	8002758 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026fe:	d107      	bne.n	8002710 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800270e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fb9d 	bl	8000e54 <HAL_DMA_GetState>
 800271a:	4603      	mov	r3, r0
 800271c:	2b01      	cmp	r3, #1
 800271e:	d017      	beq.n	8002750 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002724:	4a14      	ldr	r2, [pc, #80]	@ (8002778 <I2C_ITError+0x1dc>)
 8002726:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe fb26 	bl	8000d86 <HAL_DMA_Abort_IT>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d011      	beq.n	8002764 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800274a:	4610      	mov	r0, r2
 800274c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800274e:	e009      	b.n	8002764 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f813 	bl	800277c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002756:	e005      	b.n	8002764 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f80f 	bl	800277c <I2C_TreatErrorCallback>
  }
}
 800275e:	e002      	b.n	8002766 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002760:	bf00      	nop
 8002762:	e000      	b.n	8002766 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002764:	bf00      	nop
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	ffff0000 	.word	0xffff0000
 8002774:	0800163b 	.word	0x0800163b
 8002778:	08002813 	.word	0x08002813

0800277c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b60      	cmp	r3, #96	@ 0x60
 800278e:	d10e      	bne.n	80027ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe ff31 	bl	800160e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80027ac:	e009      	b.n	80027c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fd fe3d 	bl	800043c <HAL_I2C_ErrorCallback>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d103      	bne.n	80027e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2200      	movs	r2, #0
 80027e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d007      	beq.n	8002806 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	619a      	str	r2, [r3, #24]
  }
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282c:	2200      	movs	r2, #0
 800282e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283c:	2200      	movs	r2, #0
 800283e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7ff ff9b 	bl	800277c <I2C_TreatErrorCallback>
}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	4613      	mov	r3, r2
 8002860:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002868:	7a7b      	ldrb	r3, [r7, #9]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002870:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	4313      	orrs	r3, r2
 800287a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800287e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	0d5b      	lsrs	r3, r3, #21
 800288a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800288e:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <I2C_TransferConfig+0x60>)
 8002890:	430b      	orrs	r3, r1
 8002892:	43db      	mvns	r3, r3
 8002894:	ea02 0103 	and.w	r1, r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	03ff63ff 	.word	0x03ff63ff

080028b4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c8:	4a39      	ldr	r2, [pc, #228]	@ (80029b0 <I2C_Enable_IRQ+0xfc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d032      	beq.n	8002934 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80028d2:	4a38      	ldr	r2, [pc, #224]	@ (80029b4 <I2C_Enable_IRQ+0x100>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d02d      	beq.n	8002934 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80028dc:	4a36      	ldr	r2, [pc, #216]	@ (80029b8 <I2C_Enable_IRQ+0x104>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d028      	beq.n	8002934 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80028e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	da03      	bge.n	80028f2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80028f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002902:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002904:	887b      	ldrh	r3, [r7, #2]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002914:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002916:	887b      	ldrh	r3, [r7, #2]
 8002918:	2b10      	cmp	r3, #16
 800291a:	d103      	bne.n	8002924 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002922:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002924:	887b      	ldrh	r3, [r7, #2]
 8002926:	2b20      	cmp	r3, #32
 8002928:	d133      	bne.n	8002992 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f043 0320 	orr.w	r3, r3, #32
 8002930:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002932:	e02e      	b.n	8002992 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002934:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002938:	2b00      	cmp	r3, #0
 800293a:	da03      	bge.n	8002944 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002942:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002944:	887b      	ldrh	r3, [r7, #2]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002954:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002956:	887b      	ldrh	r3, [r7, #2]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002966:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002968:	887b      	ldrh	r3, [r7, #2]
 800296a:	2b10      	cmp	r3, #16
 800296c:	d103      	bne.n	8002976 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002974:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	2b20      	cmp	r3, #32
 800297a:	d103      	bne.n	8002984 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002982:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	2b40      	cmp	r3, #64	@ 0x40
 8002988:	d103      	bne.n	8002992 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002990:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6819      	ldr	r1, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	08001843 	.word	0x08001843
 80029b4:	08001c89 	.word	0x08001c89
 80029b8:	08001a29 	.word	0x08001a29

080029bc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00f      	beq.n	80029f6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80029dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80029ea:	2b28      	cmp	r3, #40	@ 0x28
 80029ec:	d003      	beq.n	80029f6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80029f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00f      	beq.n	8002a20 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002a06:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a14:	2b28      	cmp	r3, #40	@ 0x28
 8002a16:	d003      	beq.n	8002a20 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002a1e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	da03      	bge.n	8002a30 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002a2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d103      	bne.n	8002a3e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a3e:	887b      	ldrh	r3, [r7, #2]
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d103      	bne.n	8002a4c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f043 0320 	orr.w	r3, r3, #32
 8002a4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002a4c:	887b      	ldrh	r3, [r7, #2]
 8002a4e:	2b40      	cmp	r3, #64	@ 0x40
 8002a50:	d103      	bne.n	8002a5a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a58:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6819      	ldr	r1, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43da      	mvns	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	400a      	ands	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d138      	bne.n	8002b00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e032      	b.n	8002b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2224      	movs	r2, #36	@ 0x24
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002aca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d139      	bne.n	8002b98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e033      	b.n	8002b9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2224      	movs	r2, #36	@ 0x24
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e000      	b.n	8002b9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b98:	2302      	movs	r3, #2
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0c0      	b.n	8002d3a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d106      	bne.n	8002bd2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f007 fac7 	bl	800a160 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f003 fced 	bl	80065be <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e03e      	b.n	8002c68 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3311      	adds	r3, #17
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3310      	adds	r3, #16
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	440b      	add	r3, r1
 8002c20:	3313      	adds	r3, #19
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	3320      	adds	r3, #32
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	3324      	adds	r3, #36	@ 0x24
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	3301      	adds	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	791b      	ldrb	r3, [r3, #4]
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d3bb      	bcc.n	8002bea <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	e044      	b.n	8002d02 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	791b      	ldrb	r3, [r3, #4]
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d3b5      	bcc.n	8002c78 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d18:	f003 fc6c 	bl	80065f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7a9b      	ldrb	r3, [r3, #10]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f001 fbd0 	bl	80044d8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_PCD_Start+0x16>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e012      	b.n	8002d7e <HAL_PCD_Start+0x3c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 fc13 	bl	8006590 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f005 f803 	bl	8007d7a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_PCD_Stop+0x16>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e012      	b.n	8002dc2 <HAL_PCD_Stop+0x3c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fc08 	bl	80065be <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f004 fff8 	bl	8007da8 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f004 fffb 	bl	8007dd2 <USB_ReadInterrupts>
 8002ddc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 faa6 	bl	800333a <PCD_EP_ISR_Handler>

    return;
 8002dee:	e110      	b.n	8003012 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d013      	beq.n	8002e22 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f007 fa35 	bl	800a282 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e18:	2100      	movs	r1, #0
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8fc 	bl	8003018 <HAL_PCD_SetAddress>

    return;
 8002e20:	e0f7      	b.n	8003012 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00c      	beq.n	8002e46 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e3e:	b292      	uxth	r2, r2
 8002e40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e44:	e0e5      	b.n	8003012 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00c      	beq.n	8002e6a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e62:	b292      	uxth	r2, r2
 8002e64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e68:	e0d3      	b.n	8003012 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d034      	beq.n	8002ede <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0204 	bic.w	r2, r2, #4
 8002e86:	b292      	uxth	r2, r2
 8002e88:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0208 	bic.w	r2, r2, #8
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f007 fba5 	bl	800a608 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f007 fa18 	bl	800a2f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ed6:	b292      	uxth	r2, r2
 8002ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002edc:	e099      	b.n	8003012 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d027      	beq.n	8002f38 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0208 	orr.w	r2, r2, #8
 8002efa:	b292      	uxth	r2, r2
 8002efc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f12:	b292      	uxth	r2, r2
 8002f14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0204 	orr.w	r2, r2, #4
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f007 f9c5 	bl	800a2c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f36:	e06c      	b.n	8003012 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d040      	beq.n	8002fc4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f54:	b292      	uxth	r2, r2
 8002f56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d12b      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0204 	orr.w	r2, r2, #4
 8002f76:	b292      	uxth	r2, r2
 8002f78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0208 	orr.w	r2, r2, #8
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f007 fb27 	bl	800a608 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002fba:	e02a      	b.n	8003012 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f007 f97f 	bl	800a2c0 <HAL_PCD_SuspendCallback>
    return;
 8002fc2:	e026      	b.n	8003012 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00f      	beq.n	8002fee <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fe0:	b292      	uxth	r2, r2
 8002fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f007 f93d 	bl	800a266 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fec:	e011      	b.n	8003012 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00c      	beq.n	8003012 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003000:	b29a      	uxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800300a:	b292      	uxth	r2, r2
 800300c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003010:	bf00      	nop
  }
}
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_PCD_SetAddress+0x1a>
 800302e:	2302      	movs	r3, #2
 8003030:	e012      	b.n	8003058 <HAL_PCD_SetAddress+0x40>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f004 fe82 	bl	8007d52 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4603      	mov	r3, r0
 8003070:	70fb      	strb	r3, [r7, #3]
 8003072:	460b      	mov	r3, r1
 8003074:	803b      	strh	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800307e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003082:	2b00      	cmp	r3, #0
 8003084:	da0e      	bge.n	80030a4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 0207 	and.w	r2, r3, #7
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	3310      	adds	r3, #16
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	705a      	strb	r2, [r3, #1]
 80030a2:	e00e      	b.n	80030c2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	f003 0207 	and.w	r2, r3, #7
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030ce:	883b      	ldrh	r3, [r7, #0]
 80030d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	78ba      	ldrb	r2, [r7, #2]
 80030dc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030de:	78bb      	ldrb	r3, [r7, #2]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d102      	bne.n	80030ea <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_PCD_EP_Open+0x98>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e00e      	b.n	8003116 <HAL_PCD_EP_Open+0xb6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68f9      	ldr	r1, [r7, #12]
 8003106:	4618      	mov	r0, r3
 8003108:	f003 fa92 	bl	8006630 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003114:	7afb      	ldrb	r3, [r7, #11]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	460b      	mov	r3, r1
 800312c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	f003 0207 	and.w	r2, r3, #7
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2200      	movs	r2, #0
 8003156:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2200      	movs	r2, #0
 800315c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800315e:	7afb      	ldrb	r3, [r7, #11]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	b2da      	uxtb	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6979      	ldr	r1, [r7, #20]
 8003170:	4618      	mov	r0, r3
 8003172:	f003 ff45 	bl	8007000 <USB_EPStartXfer>

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	460b      	mov	r3, r1
 800318e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003190:	7afb      	ldrb	r3, [r7, #11]
 8003192:	f003 0207 	and.w	r2, r3, #7
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	3310      	adds	r3, #16
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2201      	movs	r2, #1
 80031ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031cc:	7afb      	ldrb	r3, [r7, #11]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6979      	ldr	r1, [r7, #20]
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 ff0e 	bl	8007000 <USB_EPStartXfer>

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	7912      	ldrb	r2, [r2, #4]
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e03e      	b.n	800328a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800320c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003210:	2b00      	cmp	r3, #0
 8003212:	da0e      	bge.n	8003232 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 0207 	and.w	r2, r3, #7
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	3310      	adds	r3, #16
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	705a      	strb	r2, [r3, #1]
 8003230:	e00c      	b.n	800324c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	b2da      	uxtb	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_PCD_EP_SetStall+0x7e>
 8003268:	2302      	movs	r3, #2
 800326a:	e00e      	b.n	800328a <HAL_PCD_EP_SetStall+0x9c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68f9      	ldr	r1, [r7, #12]
 800327a:	4618      	mov	r0, r3
 800327c:	f004 fc6f 	bl	8007b5e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	7912      	ldrb	r2, [r2, #4]
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e040      	b.n	8003332 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	da0e      	bge.n	80032d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 0207 	and.w	r2, r3, #7
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	3310      	adds	r3, #16
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	705a      	strb	r2, [r3, #1]
 80032d4:	e00e      	b.n	80032f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	f003 0207 	and.w	r2, r3, #7
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_PCD_EP_ClrStall+0x82>
 8003310:	2302      	movs	r3, #2
 8003312:	e00e      	b.n	8003332 <HAL_PCD_EP_ClrStall+0xa0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	4618      	mov	r0, r3
 8003324:	f004 fc6c 	bl	8007c00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b092      	sub	sp, #72	@ 0x48
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003342:	e333      	b.n	80039ac <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800334c:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800334e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800335a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 8108 	bne.w	8003574 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003364:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d14c      	bne.n	8003408 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800337a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337e:	813b      	strh	r3, [r7, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	893b      	ldrh	r3, [r7, #8]
 8003386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800338a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800338e:	b29b      	uxth	r3, r3
 8003390:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3310      	adds	r3, #16
 8003396:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	4413      	add	r3, r2
 80033b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	441a      	add	r2, r3
 80033ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033ce:	2100      	movs	r1, #0
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f006 ff2e 	bl	800a232 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7b1b      	ldrb	r3, [r3, #12]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 82e5 	beq.w	80039ac <PCD_EP_ISR_Handler+0x672>
 80033e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 82e0 	bne.w	80039ac <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	7b1b      	ldrb	r3, [r3, #12]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	731a      	strb	r2, [r3, #12]
 8003406:	e2d1      	b.n	80039ac <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800340e:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003418:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800341a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800341e:	2b00      	cmp	r3, #0
 8003420:	d032      	beq.n	8003488 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	4413      	add	r3, r2
 800343c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003448:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003456:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800345a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800345c:	b29b      	uxth	r3, r3
 800345e:	f004 fd0b 	bl	8007e78 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29a      	uxth	r2, r3
 800346a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800346e:	4013      	ands	r3, r2
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	897a      	ldrh	r2, [r7, #10]
 8003478:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800347c:	b292      	uxth	r2, r2
 800347e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f006 fea9 	bl	800a1d8 <HAL_PCD_SetupStageCallback>
 8003486:	e291      	b.n	80039ac <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003488:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800348c:	2b00      	cmp	r3, #0
 800348e:	f280 828d 	bge.w	80039ac <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29a      	uxth	r2, r3
 800349a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800349e:	4013      	ands	r3, r2
 80034a0:	81fb      	strh	r3, [r7, #14]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	89fa      	ldrh	r2, [r7, #14]
 80034a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034ac:	b292      	uxth	r2, r2
 80034ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	4413      	add	r3, r2
 80034ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80034d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d019      	beq.n	8003514 <PCD_EP_ISR_Handler+0x1da>
 80034e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ee:	6959      	ldr	r1, [r3, #20]
 80034f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	f004 fcbd 	bl	8007e78 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	441a      	add	r2, r3
 8003508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800350c:	2100      	movs	r1, #0
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f006 fe74 	bl	800a1fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800351c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800351e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 8242 	bne.w	80039ac <PCD_EP_ISR_Handler+0x672>
 8003528:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800352a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800352e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003532:	f000 823b 	beq.w	80039ac <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003546:	81bb      	strh	r3, [r7, #12]
 8003548:	89bb      	ldrh	r3, [r7, #12]
 800354a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800354e:	81bb      	strh	r3, [r7, #12]
 8003550:	89bb      	ldrh	r3, [r7, #12]
 8003552:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003556:	81bb      	strh	r3, [r7, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	89bb      	ldrh	r3, [r7, #12]
 800355e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800356a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800356e:	b29b      	uxth	r3, r3
 8003570:	8013      	strh	r3, [r2, #0]
 8003572:	e21b      	b.n	80039ac <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003586:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800358a:	2b00      	cmp	r3, #0
 800358c:	f280 80f1 	bge.w	8003772 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035a6:	4013      	ands	r3, r2
 80035a8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035be:	b292      	uxth	r2, r2
 80035c0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035c2:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035da:	7b1b      	ldrb	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d123      	bne.n	8003628 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	4413      	add	r3, r2
 80035fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003604:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003608:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 808b 	beq.w	8003728 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003618:	6959      	ldr	r1, [r3, #20]
 800361a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800361c:	88da      	ldrh	r2, [r3, #6]
 800361e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003622:	f004 fc29 	bl	8007e78 <USB_ReadPMA>
 8003626:	e07f      	b.n	8003728 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800362a:	78db      	ldrb	r3, [r3, #3]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d109      	bne.n	8003644 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003630:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003632:	461a      	mov	r2, r3
 8003634:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f9c6 	bl	80039c8 <HAL_PCD_EP_DB_Receive>
 800363c:	4603      	mov	r3, r0
 800363e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003642:	e071      	b.n	8003728 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800365a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800367c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003680:	b29b      	uxth	r3, r3
 8003682:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d022      	beq.n	80036e4 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	4413      	add	r3, r2
 80036b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80036c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d02c      	beq.n	8003728 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d4:	6959      	ldr	r1, [r3, #20]
 80036d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d8:	891a      	ldrh	r2, [r3, #8]
 80036da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036de:	f004 fbcb 	bl	8007e78 <USB_ReadPMA>
 80036e2:	e021      	b.n	8003728 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	4413      	add	r3, r2
 80036fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003708:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800370c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371a:	6959      	ldr	r1, [r3, #20]
 800371c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371e:	895a      	ldrh	r2, [r3, #10]
 8003720:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003724:	f004 fba8 	bl	8007e78 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003730:	441a      	add	r2, r3
 8003732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003734:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800373e:	441a      	add	r2, r3
 8003740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003742:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <PCD_EP_ISR_Handler+0x41e>
 800374c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	429a      	cmp	r2, r3
 8003756:	d206      	bcs.n	8003766 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f006 fd4c 	bl	800a1fc <HAL_PCD_DataOutStageCallback>
 8003764:	e005      	b.n	8003772 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800376c:	4618      	mov	r0, r3
 800376e:	f003 fc47 	bl	8007000 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003772:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8117 	beq.w	80039ac <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800377e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	3310      	adds	r3, #16
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	4413      	add	r3, r2
 8003790:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80037a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80037be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80037ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037cc:	78db      	ldrb	r3, [r3, #3]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	f040 80a1 	bne.w	8003916 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80037d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d6:	2200      	movs	r2, #0
 80037d8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80037da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037dc:	7b1b      	ldrb	r3, [r3, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8092 	beq.w	8003908 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80037e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d046      	beq.n	800387c <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f0:	785b      	ldrb	r3, [r3, #1]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d126      	bne.n	8003844 <PCD_EP_ISR_Handler+0x50a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003804:	b29b      	uxth	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	4413      	add	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	00da      	lsls	r2, r3, #3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4413      	add	r3, r2
 8003818:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003828:	b29a      	uxth	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	b29b      	uxth	r3, r3
 8003834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383c:	b29a      	uxth	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	801a      	strh	r2, [r3, #0]
 8003842:	e061      	b.n	8003908 <PCD_EP_ISR_Handler+0x5ce>
 8003844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003846:	785b      	ldrb	r3, [r3, #1]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d15d      	bne.n	8003908 <PCD_EP_ISR_Handler+0x5ce>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800385a:	b29b      	uxth	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	00da      	lsls	r2, r3, #3
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4413      	add	r3, r2
 800386e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2200      	movs	r2, #0
 8003878:	801a      	strh	r2, [r3, #0]
 800387a:	e045      	b.n	8003908 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003884:	785b      	ldrb	r3, [r3, #1]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d126      	bne.n	80038d8 <PCD_EP_ISR_Handler+0x59e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003898:	b29b      	uxth	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	4413      	add	r3, r2
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	00da      	lsls	r2, r3, #3
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	4413      	add	r3, r2
 80038ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038b0:	623b      	str	r3, [r7, #32]
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038bc:	b29a      	uxth	r2, r3
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	801a      	strh	r2, [r3, #0]
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	801a      	strh	r2, [r3, #0]
 80038d6:	e017      	b.n	8003908 <PCD_EP_ISR_Handler+0x5ce>
 80038d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038da:	785b      	ldrb	r3, [r3, #1]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d113      	bne.n	8003908 <PCD_EP_ISR_Handler+0x5ce>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ee:	4413      	add	r3, r2
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	00da      	lsls	r2, r3, #3
 80038f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fa:	4413      	add	r3, r2
 80038fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003904:	2200      	movs	r2, #0
 8003906:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f006 fc8f 	bl	800a232 <HAL_PCD_DataInStageCallback>
 8003914:	e04a      	b.n	80039ac <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003916:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d13f      	bne.n	80039a0 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003928:	b29b      	uxth	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	4413      	add	r3, r2
 800393a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003944:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800394c:	429a      	cmp	r2, r3
 800394e:	d906      	bls.n	800395e <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003952:	699a      	ldr	r2, [r3, #24]
 8003954:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003956:	1ad2      	subs	r2, r2, r3
 8003958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800395a:	619a      	str	r2, [r3, #24]
 800395c:	e002      	b.n	8003964 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800395e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003960:	2200      	movs	r2, #0
 8003962:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800396c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	4619      	mov	r1, r3
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f006 fc5d 	bl	800a232 <HAL_PCD_DataInStageCallback>
 8003978:	e018      	b.n	80039ac <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800397a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003980:	441a      	add	r2, r3
 8003982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003984:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800398c:	441a      	add	r2, r3
 800398e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003990:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003998:	4618      	mov	r0, r3
 800399a:	f003 fb31 	bl	8007000 <USB_EPStartXfer>
 800399e:	e005      	b.n	80039ac <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039a2:	461a      	mov	r2, r3
 80039a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f917 	bl	8003bda <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	b21b      	sxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f6ff acc3 	blt.w	8003344 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3748      	adds	r7, #72	@ 0x48
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d07c      	beq.n	8003ada <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	8b7b      	ldrh	r3, [r7, #26]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d306      	bcc.n	8003a1e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	8b7b      	ldrh	r3, [r7, #26]
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	619a      	str	r2, [r3, #24]
 8003a1c:	e002      	b.n	8003a24 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2200      	movs	r2, #0
 8003a22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d123      	bne.n	8003a74 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a46:	833b      	strh	r3, [r7, #24]
 8003a48:	8b3b      	ldrh	r3, [r7, #24]
 8003a4a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a4e:	833b      	strh	r3, [r7, #24]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	441a      	add	r2, r3
 8003a5e:	8b3b      	ldrh	r3, [r7, #24]
 8003a60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01f      	beq.n	8003abe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a98:	82fb      	strh	r3, [r7, #22]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	441a      	add	r2, r3
 8003aa8:	8afb      	ldrh	r3, [r7, #22]
 8003aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ab6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003abe:	8b7b      	ldrh	r3, [r7, #26]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8085 	beq.w	8003bd0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	6959      	ldr	r1, [r3, #20]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	891a      	ldrh	r2, [r3, #8]
 8003ad2:	8b7b      	ldrh	r3, [r7, #26]
 8003ad4:	f004 f9d0 	bl	8007e78 <USB_ReadPMA>
 8003ad8:	e07a      	b.n	8003bd0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003afe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	8b7b      	ldrh	r3, [r7, #26]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d306      	bcc.n	8003b18 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	8b7b      	ldrh	r3, [r7, #26]
 8003b10:	1ad2      	subs	r2, r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	619a      	str	r2, [r3, #24]
 8003b16:	e002      	b.n	8003b1e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d123      	bne.n	8003b6e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b40:	83fb      	strh	r3, [r7, #30]
 8003b42:	8bfb      	ldrh	r3, [r7, #30]
 8003b44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b48:	83fb      	strh	r3, [r7, #30]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	441a      	add	r2, r3
 8003b58:	8bfb      	ldrh	r3, [r7, #30]
 8003b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d11f      	bne.n	8003bb8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b92:	83bb      	strh	r3, [r7, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	441a      	add	r2, r3
 8003ba2:	8bbb      	ldrh	r3, [r7, #28]
 8003ba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bb0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bb8:	8b7b      	ldrh	r3, [r7, #26]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6959      	ldr	r1, [r3, #20]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	895a      	ldrh	r2, [r3, #10]
 8003bca:	8b7b      	ldrh	r3, [r7, #26]
 8003bcc:	f004 f954 	bl	8007e78 <USB_ReadPMA>
    }
  }

  return count;
 8003bd0:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b0a6      	sub	sp, #152	@ 0x98
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	4613      	mov	r3, r2
 8003be6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 81f7 	beq.w	8003fe2 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c18:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d907      	bls.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c30:	1ad2      	subs	r2, r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	619a      	str	r2, [r3, #24]
 8003c36:	e002      	b.n	8003c3e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f040 80e1 	bne.w	8003e0a <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	785b      	ldrb	r3, [r3, #1]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d126      	bne.n	8003c9e <HAL_PCD_EP_DB_Transmit+0xc4>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	4413      	add	r3, r2
 8003c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	00da      	lsls	r2, r3, #3
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	4413      	add	r3, r2
 8003c72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c86:	801a      	strh	r2, [r3, #0]
 8003c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	e01a      	b.n	8003cd4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	785b      	ldrb	r3, [r3, #1]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d116      	bne.n	8003cd4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cba:	4413      	add	r3, r2
 8003cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	00da      	lsls	r2, r3, #3
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d126      	bne.n	8003d30 <HAL_PCD_EP_DB_Transmit+0x156>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	623b      	str	r3, [r7, #32]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	00da      	lsls	r2, r3, #3
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	4413      	add	r3, r2
 8003d04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	801a      	strh	r2, [r3, #0]
 8003d2e:	e017      	b.n	8003d60 <HAL_PCD_EP_DB_Transmit+0x186>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d113      	bne.n	8003d60 <HAL_PCD_EP_DB_Transmit+0x186>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d46:	4413      	add	r3, r2
 8003d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	00da      	lsls	r2, r3, #3
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	4413      	add	r3, r2
 8003d54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	78db      	ldrb	r3, [r3, #3]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d123      	bne.n	8003db0 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d82:	837b      	strh	r3, [r7, #26]
 8003d84:	8b7b      	ldrh	r3, [r7, #26]
 8003d86:	f083 0320 	eor.w	r3, r3, #32
 8003d8a:	837b      	strh	r3, [r7, #26]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	441a      	add	r2, r3
 8003d9a:	8b7b      	ldrh	r3, [r7, #26]
 8003d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f006 fa3b 	bl	800a232 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01f      	beq.n	8003e06 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de0:	833b      	strh	r3, [r7, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	441a      	add	r2, r3
 8003df0:	8b3b      	ldrh	r3, [r7, #24]
 8003df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003df6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e31f      	b.n	800444a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d021      	beq.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	441a      	add	r2, r3
 8003e40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	f040 82ca 	bne.w	80043f8 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e6c:	441a      	add	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e7a:	441a      	add	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6a1a      	ldr	r2, [r3, #32]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d309      	bcc.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	6a1a      	ldr	r2, [r3, #32]
 8003e96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e98:	1ad2      	subs	r2, r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	621a      	str	r2, [r3, #32]
 8003e9e:	e015      	b.n	8003ecc <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d107      	bne.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003ea8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003eac:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003eb6:	e009      	b.n	8003ecc <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d15f      	bne.n	8003f94 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee8:	4413      	add	r3, r2
 8003eea:	643b      	str	r3, [r7, #64]	@ 0x40
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	00da      	lsls	r2, r3, #3
 8003ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f0a:	801a      	strh	r2, [r3, #0]
 8003f0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	e051      	b.n	8003fcc <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f2c:	d816      	bhi.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x382>
 8003f2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f40:	3301      	adds	r3, #1
 8003f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	029b      	lsls	r3, r3, #10
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	4313      	orrs	r3, r2
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	e037      	b.n	8003fcc <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <HAL_PCD_EP_DB_Transmit+0x398>
 8003f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	029b      	lsls	r3, r3, #10
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	4313      	orrs	r3, r2
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f90:	801a      	strh	r2, [r3, #0]
 8003f92:	e01b      	b.n	8003fcc <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d117      	bne.n	8003fcc <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb0:	4413      	add	r3, r2
 8003fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	00da      	lsls	r2, r3, #3
 8003fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	6959      	ldr	r1, [r3, #20]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	891a      	ldrh	r2, [r3, #8]
 8003fd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f003 ff09 	bl	8007df2 <USB_WritePMA>
 8003fe0:	e20a      	b.n	80043f8 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004006:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004012:	429a      	cmp	r2, r3
 8004014:	d307      	bcc.n	8004026 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	619a      	str	r2, [r3, #24]
 8004024:	e002      	b.n	800402c <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f040 80f6 	bne.w	8004222 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	785b      	ldrb	r3, [r3, #1]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d126      	bne.n	800408c <HAL_PCD_EP_DB_Transmit+0x4b2>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	677b      	str	r3, [r7, #116]	@ 0x74
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800404c:	b29b      	uxth	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004052:	4413      	add	r3, r2
 8004054:	677b      	str	r3, [r7, #116]	@ 0x74
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	00da      	lsls	r2, r3, #3
 800405c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800405e:	4413      	add	r3, r2
 8004060:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004064:	673b      	str	r3, [r7, #112]	@ 0x70
 8004066:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004070:	b29a      	uxth	r2, r3
 8004072:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004074:	801a      	strh	r2, [r3, #0]
 8004076:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004084:	b29a      	uxth	r2, r3
 8004086:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004088:	801a      	strh	r2, [r3, #0]
 800408a:	e01a      	b.n	80040c2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d116      	bne.n	80040c2 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040a8:	4413      	add	r3, r2
 80040aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	00da      	lsls	r2, r3, #3
 80040b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040b4:	4413      	add	r3, r2
 80040b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040be:	2200      	movs	r2, #0
 80040c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	785b      	ldrb	r3, [r3, #1]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d12f      	bne.n	8004132 <HAL_PCD_EP_DB_Transmit+0x558>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ea:	4413      	add	r3, r2
 80040ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	00da      	lsls	r2, r3, #3
 80040f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040fa:	4413      	add	r3, r2
 80040fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004110:	b29a      	uxth	r2, r3
 8004112:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004116:	801a      	strh	r2, [r3, #0]
 8004118:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004128:	b29a      	uxth	r2, r3
 800412a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800412e:	801a      	strh	r2, [r3, #0]
 8004130:	e01c      	b.n	800416c <HAL_PCD_EP_DB_Transmit+0x592>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	785b      	ldrb	r3, [r3, #1]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d118      	bne.n	800416c <HAL_PCD_EP_DB_Transmit+0x592>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800414a:	4413      	add	r3, r2
 800414c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	00da      	lsls	r2, r3, #3
 8004156:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800415a:	4413      	add	r3, r2
 800415c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004164:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004168:	2200      	movs	r2, #0
 800416a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	78db      	ldrb	r3, [r3, #3]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d127      	bne.n	80041c4 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800418a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800418e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004192:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004196:	f083 0320 	eor.w	r3, r3, #32
 800419a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	441a      	add	r2, r3
 80041ac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80041b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	4619      	mov	r1, r3
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f006 f831 	bl	800a232 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041d0:	88fb      	ldrh	r3, [r7, #6]
 80041d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d121      	bne.n	800421e <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	441a      	add	r2, r3
 8004206:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800420a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800420e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004212:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800421a:	b29b      	uxth	r3, r3
 800421c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e113      	b.n	800444a <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d121      	bne.n	8004270 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004246:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	441a      	add	r2, r3
 8004258:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800425c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004264:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800426c:	b29b      	uxth	r3, r3
 800426e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004276:	2b01      	cmp	r3, #1
 8004278:	f040 80be 	bne.w	80043f8 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004284:	441a      	add	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	69da      	ldr	r2, [r3, #28]
 800428e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004292:	441a      	add	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d309      	bcc.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042b0:	1ad2      	subs	r2, r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	621a      	str	r2, [r3, #32]
 80042b6:	e015      	b.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d107      	bne.n	80042d0 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80042c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042c4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042ce:	e009      	b.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2200      	movs	r2, #0
 80042da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d15f      	bne.n	80043b2 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004300:	b29b      	uxth	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004306:	4413      	add	r3, r2
 8004308:	66bb      	str	r3, [r7, #104]	@ 0x68
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	00da      	lsls	r2, r3, #3
 8004310:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004312:	4413      	add	r3, r2
 8004314:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004318:	667b      	str	r3, [r7, #100]	@ 0x64
 800431a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004324:	b29a      	uxth	r2, r3
 8004326:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004328:	801a      	strh	r2, [r3, #0]
 800432a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800433a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800433e:	b29a      	uxth	r2, r3
 8004340:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004342:	801a      	strh	r2, [r3, #0]
 8004344:	e04e      	b.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004348:	2b3e      	cmp	r3, #62	@ 0x3e
 800434a:	d816      	bhi.n	800437a <HAL_PCD_EP_DB_Transmit+0x7a0>
 800434c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	663b      	str	r3, [r7, #96]	@ 0x60
 8004352:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_PCD_EP_DB_Transmit+0x788>
 800435c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800435e:	3301      	adds	r3, #1
 8004360:	663b      	str	r3, [r7, #96]	@ 0x60
 8004362:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29a      	uxth	r2, r3
 8004368:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800436a:	b29b      	uxth	r3, r3
 800436c:	029b      	lsls	r3, r3, #10
 800436e:	b29b      	uxth	r3, r3
 8004370:	4313      	orrs	r3, r2
 8004372:	b29a      	uxth	r2, r3
 8004374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	e034      	b.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x80a>
 800437a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004380:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800438a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800438c:	3b01      	subs	r3, #1
 800438e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29a      	uxth	r2, r3
 8004396:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004398:	b29b      	uxth	r3, r3
 800439a:	029b      	lsls	r3, r3, #10
 800439c:	b29b      	uxth	r3, r3
 800439e:	4313      	orrs	r3, r2
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	e018      	b.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x80a>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	785b      	ldrb	r3, [r3, #1]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d114      	bne.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x80a>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043c8:	4413      	add	r3, r2
 80043ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	00da      	lsls	r2, r3, #3
 80043d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043d4:	4413      	add	r3, r2
 80043d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043de:	b29a      	uxth	r2, r3
 80043e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	6959      	ldr	r1, [r3, #20]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	895a      	ldrh	r2, [r3, #10]
 80043f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f003 fcfd 	bl	8007df2 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800440e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004412:	82fb      	strh	r3, [r7, #22]
 8004414:	8afb      	ldrh	r3, [r7, #22]
 8004416:	f083 0310 	eor.w	r3, r3, #16
 800441a:	82fb      	strh	r3, [r7, #22]
 800441c:	8afb      	ldrh	r3, [r7, #22]
 800441e:	f083 0320 	eor.w	r3, r3, #32
 8004422:	82fb      	strh	r3, [r7, #22]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	8afb      	ldrh	r3, [r7, #22]
 8004434:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004438:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800443c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004444:	b29b      	uxth	r3, r3
 8004446:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3798      	adds	r7, #152	@ 0x98
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004452:	b480      	push	{r7}
 8004454:	b087      	sub	sp, #28
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	607b      	str	r3, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	817b      	strh	r3, [r7, #10]
 8004460:	4613      	mov	r3, r2
 8004462:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004464:	897b      	ldrh	r3, [r7, #10]
 8004466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004470:	897b      	ldrh	r3, [r7, #10]
 8004472:	f003 0207 	and.w	r2, r3, #7
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	3310      	adds	r3, #16
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e009      	b.n	800449c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004488:	897a      	ldrh	r2, [r7, #10]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4413      	add	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800449c:	893b      	ldrh	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d107      	bne.n	80044b2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2200      	movs	r2, #0
 80044a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	80da      	strh	r2, [r3, #6]
 80044b0:	e00b      	b.n	80044ca <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2201      	movs	r2, #1
 80044b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	0c1b      	lsrs	r3, r3, #16
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004510:	b29b      	uxth	r3, r3
 8004512:	f043 0302 	orr.w	r3, r3, #2
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d141      	bne.n	80045be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800453a:	4b4b      	ldr	r3, [pc, #300]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004546:	d131      	bne.n	80045ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004548:	4b47      	ldr	r3, [pc, #284]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800454e:	4a46      	ldr	r2, [pc, #280]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004554:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004558:	4b43      	ldr	r3, [pc, #268]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004560:	4a41      	ldr	r2, [pc, #260]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004566:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004568:	4b40      	ldr	r3, [pc, #256]	@ (800466c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2232      	movs	r2, #50	@ 0x32
 800456e:	fb02 f303 	mul.w	r3, r2, r3
 8004572:	4a3f      	ldr	r2, [pc, #252]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	0c9b      	lsrs	r3, r3, #18
 800457a:	3301      	adds	r3, #1
 800457c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800457e:	e002      	b.n	8004586 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3b01      	subs	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004586:	4b38      	ldr	r3, [pc, #224]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004592:	d102      	bne.n	800459a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f2      	bne.n	8004580 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800459a:	4b33      	ldr	r3, [pc, #204]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a6:	d158      	bne.n	800465a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e057      	b.n	800465c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045bc:	e04d      	b.n	800465a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c4:	d141      	bne.n	800464a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045c6:	4b28      	ldr	r3, [pc, #160]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d2:	d131      	bne.n	8004638 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045d4:	4b24      	ldr	r3, [pc, #144]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045da:	4a23      	ldr	r2, [pc, #140]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045e4:	4b20      	ldr	r3, [pc, #128]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045f4:	4b1d      	ldr	r3, [pc, #116]	@ (800466c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2232      	movs	r2, #50	@ 0x32
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004670 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	0c9b      	lsrs	r3, r3, #18
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800460a:	e002      	b.n	8004612 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3b01      	subs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004612:	4b15      	ldr	r3, [pc, #84]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800461e:	d102      	bne.n	8004626 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f2      	bne.n	800460c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004626:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004632:	d112      	bne.n	800465a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e011      	b.n	800465c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004638:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800463e:	4a0a      	ldr	r2, [pc, #40]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004644:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004648:	e007      	b.n	800465a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800464a:	4b07      	ldr	r3, [pc, #28]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004652:	4a05      	ldr	r2, [pc, #20]	@ (8004668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004654:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004658:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40007000 	.word	0x40007000
 800466c:	20000008 	.word	0x20000008
 8004670:	431bde83 	.word	0x431bde83

08004674 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004678:	4b05      	ldr	r3, [pc, #20]	@ (8004690 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4a04      	ldr	r2, [pc, #16]	@ (8004690 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800467e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004682:	6093      	str	r3, [r2, #8]
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40007000 	.word	0x40007000

08004694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e2fe      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d075      	beq.n	800479e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b2:	4b97      	ldr	r3, [pc, #604]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046bc:	4b94      	ldr	r3, [pc, #592]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	d102      	bne.n	80046d2 <HAL_RCC_OscConfig+0x3e>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d002      	beq.n	80046d8 <HAL_RCC_OscConfig+0x44>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d10b      	bne.n	80046f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	4b8d      	ldr	r3, [pc, #564]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05b      	beq.n	800479c <HAL_RCC_OscConfig+0x108>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d157      	bne.n	800479c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e2d9      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f8:	d106      	bne.n	8004708 <HAL_RCC_OscConfig+0x74>
 80046fa:	4b85      	ldr	r3, [pc, #532]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a84      	ldr	r2, [pc, #528]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e01d      	b.n	8004744 <HAL_RCC_OscConfig+0xb0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004710:	d10c      	bne.n	800472c <HAL_RCC_OscConfig+0x98>
 8004712:	4b7f      	ldr	r3, [pc, #508]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a7e      	ldr	r2, [pc, #504]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b7c      	ldr	r3, [pc, #496]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7b      	ldr	r2, [pc, #492]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e00b      	b.n	8004744 <HAL_RCC_OscConfig+0xb0>
 800472c:	4b78      	ldr	r3, [pc, #480]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a77      	ldr	r2, [pc, #476]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b75      	ldr	r3, [pc, #468]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a74      	ldr	r2, [pc, #464]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 800473e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d013      	beq.n	8004774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fc f9de 	bl	8000b0c <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004754:	f7fc f9da 	bl	8000b0c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	@ 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e29e      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004766:	4b6a      	ldr	r3, [pc, #424]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0xc0>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fc f9ca 	bl	8000b0c <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800477c:	f7fc f9c6 	bl	8000b0c <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	@ 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e28a      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800478e:	4b60      	ldr	r3, [pc, #384]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0xe8>
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d075      	beq.n	8004896 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047aa:	4b59      	ldr	r3, [pc, #356]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047b4:	4b56      	ldr	r3, [pc, #344]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b0c      	cmp	r3, #12
 80047c2:	d102      	bne.n	80047ca <HAL_RCC_OscConfig+0x136>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d002      	beq.n	80047d0 <HAL_RCC_OscConfig+0x13c>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d11f      	bne.n	8004810 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_OscConfig+0x154>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e25d      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b49      	ldr	r3, [pc, #292]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	4946      	ldr	r1, [pc, #280]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047fc:	4b45      	ldr	r3, [pc, #276]	@ (8004914 <HAL_RCC_OscConfig+0x280>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7fc f937 	bl	8000a74 <HAL_InitTick>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d043      	beq.n	8004894 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e249      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d023      	beq.n	8004860 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004818:	4b3d      	ldr	r3, [pc, #244]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3c      	ldr	r2, [pc, #240]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 800481e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fc f972 	bl	8000b0c <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482c:	f7fc f96e 	bl	8000b0c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e232      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800483e:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	4b31      	ldr	r3, [pc, #196]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	061b      	lsls	r3, r3, #24
 8004858:	492d      	ldr	r1, [pc, #180]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 800485a:	4313      	orrs	r3, r2
 800485c:	604b      	str	r3, [r1, #4]
 800485e:	e01a      	b.n	8004896 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004860:	4b2b      	ldr	r3, [pc, #172]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a2a      	ldr	r2, [pc, #168]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004866:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800486a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fc f94e 	bl	8000b0c <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004874:	f7fc f94a 	bl	8000b0c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e20e      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004886:	4b22      	ldr	r3, [pc, #136]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x1e0>
 8004892:	e000      	b.n	8004896 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004894:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d041      	beq.n	8004926 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d01c      	beq.n	80048e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048aa:	4b19      	ldr	r3, [pc, #100]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80048ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b0:	4a17      	ldr	r2, [pc, #92]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ba:	f7fc f927 	bl	8000b0c <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c2:	f7fc f923 	bl	8000b0c <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e1e7      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80048d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0ef      	beq.n	80048c2 <HAL_RCC_OscConfig+0x22e>
 80048e2:	e020      	b.n	8004926 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80048e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ea:	4a09      	ldr	r2, [pc, #36]	@ (8004910 <HAL_RCC_OscConfig+0x27c>)
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fc f90a 	bl	8000b0c <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048fa:	e00d      	b.n	8004918 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fc:	f7fc f906 	bl	8000b0c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d906      	bls.n	8004918 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e1ca      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
 800490e:	bf00      	nop
 8004910:	40021000 	.word	0x40021000
 8004914:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004918:	4b8c      	ldr	r3, [pc, #560]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 800491a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1ea      	bne.n	80048fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80a6 	beq.w	8004a80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004934:	2300      	movs	r3, #0
 8004936:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004938:	4b84      	ldr	r3, [pc, #528]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 800493a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_OscConfig+0x2b4>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <HAL_RCC_OscConfig+0x2b6>
 8004948:	2300      	movs	r3, #0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00d      	beq.n	800496a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800494e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004952:	4a7e      	ldr	r2, [pc, #504]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004958:	6593      	str	r3, [r2, #88]	@ 0x58
 800495a:	4b7c      	ldr	r3, [pc, #496]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004966:	2301      	movs	r3, #1
 8004968:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800496a:	4b79      	ldr	r3, [pc, #484]	@ (8004b50 <HAL_RCC_OscConfig+0x4bc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d118      	bne.n	80049a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004976:	4b76      	ldr	r3, [pc, #472]	@ (8004b50 <HAL_RCC_OscConfig+0x4bc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a75      	ldr	r2, [pc, #468]	@ (8004b50 <HAL_RCC_OscConfig+0x4bc>)
 800497c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004982:	f7fc f8c3 	bl	8000b0c <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498a:	f7fc f8bf 	bl	8000b0c <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e183      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800499c:	4b6c      	ldr	r3, [pc, #432]	@ (8004b50 <HAL_RCC_OscConfig+0x4bc>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d108      	bne.n	80049c2 <HAL_RCC_OscConfig+0x32e>
 80049b0:	4b66      	ldr	r3, [pc, #408]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b6:	4a65      	ldr	r2, [pc, #404]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049c0:	e024      	b.n	8004a0c <HAL_RCC_OscConfig+0x378>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b05      	cmp	r3, #5
 80049c8:	d110      	bne.n	80049ec <HAL_RCC_OscConfig+0x358>
 80049ca:	4b60      	ldr	r3, [pc, #384]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d0:	4a5e      	ldr	r2, [pc, #376]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 80049d2:	f043 0304 	orr.w	r3, r3, #4
 80049d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049da:	4b5c      	ldr	r3, [pc, #368]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e0:	4a5a      	ldr	r2, [pc, #360]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049ea:	e00f      	b.n	8004a0c <HAL_RCC_OscConfig+0x378>
 80049ec:	4b57      	ldr	r3, [pc, #348]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f2:	4a56      	ldr	r2, [pc, #344]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049fc:	4b53      	ldr	r3, [pc, #332]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	4a52      	ldr	r2, [pc, #328]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004a04:	f023 0304 	bic.w	r3, r3, #4
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d016      	beq.n	8004a42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fc f87a 	bl	8000b0c <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1c:	f7fc f876 	bl	8000b0c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e138      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a32:	4b46      	ldr	r3, [pc, #280]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0ed      	beq.n	8004a1c <HAL_RCC_OscConfig+0x388>
 8004a40:	e015      	b.n	8004a6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a42:	f7fc f863 	bl	8000b0c <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fc f85f 	bl	8000b0c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e121      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a60:	4b3a      	ldr	r3, [pc, #232]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ed      	bne.n	8004a4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a6e:	7ffb      	ldrb	r3, [r7, #31]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d105      	bne.n	8004a80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a74:	4b35      	ldr	r3, [pc, #212]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a78:	4a34      	ldr	r2, [pc, #208]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d03c      	beq.n	8004b06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01c      	beq.n	8004ace <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a94:	4b2d      	ldr	r3, [pc, #180]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fc f832 	bl	8000b0c <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aac:	f7fc f82e 	bl	8000b0c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e0f2      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004abe:	4b23      	ldr	r3, [pc, #140]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ef      	beq.n	8004aac <HAL_RCC_OscConfig+0x418>
 8004acc:	e01b      	b.n	8004b06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ace:	4b1f      	ldr	r3, [pc, #124]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004ad0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ade:	f7fc f815 	bl	8000b0c <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ae6:	f7fc f811 	bl	8000b0c <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e0d5      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004af8:	4b14      	ldr	r3, [pc, #80]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1ef      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80c9 	beq.w	8004ca2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b10:	4b0e      	ldr	r3, [pc, #56]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 030c 	and.w	r3, r3, #12
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	f000 8083 	beq.w	8004c24 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d15e      	bne.n	8004be4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b26:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a08      	ldr	r2, [pc, #32]	@ (8004b4c <HAL_RCC_OscConfig+0x4b8>)
 8004b2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b32:	f7fb ffeb 	bl	8000b0c <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b38:	e00c      	b.n	8004b54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fb ffe7 	bl	8000b0c <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d905      	bls.n	8004b54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0ab      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b54:	4b55      	ldr	r3, [pc, #340]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ec      	bne.n	8004b3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b60:	4b52      	ldr	r3, [pc, #328]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	4b52      	ldr	r3, [pc, #328]	@ (8004cb0 <HAL_RCC_OscConfig+0x61c>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6a11      	ldr	r1, [r2, #32]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b70:	3a01      	subs	r2, #1
 8004b72:	0112      	lsls	r2, r2, #4
 8004b74:	4311      	orrs	r1, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b7a:	0212      	lsls	r2, r2, #8
 8004b7c:	4311      	orrs	r1, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b82:	0852      	lsrs	r2, r2, #1
 8004b84:	3a01      	subs	r2, #1
 8004b86:	0552      	lsls	r2, r2, #21
 8004b88:	4311      	orrs	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b8e:	0852      	lsrs	r2, r2, #1
 8004b90:	3a01      	subs	r2, #1
 8004b92:	0652      	lsls	r2, r2, #25
 8004b94:	4311      	orrs	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b9a:	06d2      	lsls	r2, r2, #27
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	4943      	ldr	r1, [pc, #268]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba4:	4b41      	ldr	r3, [pc, #260]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a40      	ldr	r2, [pc, #256]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a3d      	ldr	r2, [pc, #244]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fb ffa6 	bl	8000b0c <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fb ffa2 	bl	8000b0c <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e066      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd6:	4b35      	ldr	r3, [pc, #212]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x530>
 8004be2:	e05e      	b.n	8004ca2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be4:	4b31      	ldr	r3, [pc, #196]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a30      	ldr	r2, [pc, #192]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004bea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fb ff8c 	bl	8000b0c <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fb ff88 	bl	8000b0c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e04c      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c0a:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c16:	4b25      	ldr	r3, [pc, #148]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	4924      	ldr	r1, [pc, #144]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004c1c:	4b25      	ldr	r3, [pc, #148]	@ (8004cb4 <HAL_RCC_OscConfig+0x620>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60cb      	str	r3, [r1, #12]
 8004c22:	e03e      	b.n	8004ca2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e039      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c30:	4b1e      	ldr	r3, [pc, #120]	@ (8004cac <HAL_RCC_OscConfig+0x618>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f003 0203 	and.w	r2, r3, #3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d12c      	bne.n	8004c9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d123      	bne.n	8004c9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d11b      	bne.n	8004c9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d113      	bne.n	8004c9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	3b01      	subs	r3, #1
 8004c84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d109      	bne.n	8004c9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c94:	085b      	lsrs	r3, r3, #1
 8004c96:	3b01      	subs	r3, #1
 8004c98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d001      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	019f800c 	.word	0x019f800c
 8004cb4:	feeefffc 	.word	0xfeeefffc

08004cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e11e      	b.n	8004f0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd0:	4b91      	ldr	r3, [pc, #580]	@ (8004f18 <HAL_RCC_ClockConfig+0x260>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d910      	bls.n	8004d00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cde:	4b8e      	ldr	r3, [pc, #568]	@ (8004f18 <HAL_RCC_ClockConfig+0x260>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 020f 	bic.w	r2, r3, #15
 8004ce6:	498c      	ldr	r1, [pc, #560]	@ (8004f18 <HAL_RCC_ClockConfig+0x260>)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cee:	4b8a      	ldr	r3, [pc, #552]	@ (8004f18 <HAL_RCC_ClockConfig+0x260>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e106      	b.n	8004f0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d073      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d129      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d14:	4b81      	ldr	r3, [pc, #516]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0f4      	b.n	8004f0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d24:	f000 f964 	bl	8004ff0 <RCC_GetSysClockFreqFromPLLSource>
 8004d28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4a7c      	ldr	r2, [pc, #496]	@ (8004f20 <HAL_RCC_ClockConfig+0x268>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d93f      	bls.n	8004db2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d32:	4b7a      	ldr	r3, [pc, #488]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d033      	beq.n	8004db2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d12f      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d52:	4b72      	ldr	r3, [pc, #456]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d5a:	4a70      	ldr	r2, [pc, #448]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d62:	2380      	movs	r3, #128	@ 0x80
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	e024      	b.n	8004db2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d107      	bne.n	8004d80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d70:	4b6a      	ldr	r3, [pc, #424]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0c6      	b.n	8004f0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d80:	4b66      	ldr	r3, [pc, #408]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0be      	b.n	8004f0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d90:	f000 f8ce 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8004d94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4a61      	ldr	r2, [pc, #388]	@ (8004f20 <HAL_RCC_ClockConfig+0x268>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d909      	bls.n	8004db2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d9e:	4b5f      	ldr	r3, [pc, #380]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004da6:	4a5d      	ldr	r2, [pc, #372]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004dae:	2380      	movs	r3, #128	@ 0x80
 8004db0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004db2:	4b5a      	ldr	r3, [pc, #360]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f023 0203 	bic.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4957      	ldr	r1, [pc, #348]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc4:	f7fb fea2 	bl	8000b0c <HAL_GetTick>
 8004dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	e00a      	b.n	8004de2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dcc:	f7fb fe9e 	bl	8000b0c <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e095      	b.n	8004f0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de2:	4b4e      	ldr	r3, [pc, #312]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 020c 	and.w	r2, r3, #12
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d1eb      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d023      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e0c:	4b43      	ldr	r3, [pc, #268]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a42      	ldr	r2, [pc, #264]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004e12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e24:	4b3d      	ldr	r3, [pc, #244]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e2c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004e2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e34:	4b39      	ldr	r3, [pc, #228]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4936      	ldr	r1, [pc, #216]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b80      	cmp	r3, #128	@ 0x80
 8004e4c:	d105      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e4e:	4b33      	ldr	r3, [pc, #204]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	4a32      	ldr	r2, [pc, #200]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004e54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f18 <HAL_RCC_ClockConfig+0x260>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d21d      	bcs.n	8004ea4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e68:	4b2b      	ldr	r3, [pc, #172]	@ (8004f18 <HAL_RCC_ClockConfig+0x260>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f023 020f 	bic.w	r2, r3, #15
 8004e70:	4929      	ldr	r1, [pc, #164]	@ (8004f18 <HAL_RCC_ClockConfig+0x260>)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e78:	f7fb fe48 	bl	8000b0c <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7e:	e00a      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e80:	f7fb fe44 	bl	8000b0c <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e03b      	b.n	8004f0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e96:	4b20      	ldr	r3, [pc, #128]	@ (8004f18 <HAL_RCC_ClockConfig+0x260>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d1ed      	bne.n	8004e80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4917      	ldr	r1, [pc, #92]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ece:	4b13      	ldr	r3, [pc, #76]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	490f      	ldr	r1, [pc, #60]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ee2:	f000 f825 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <HAL_RCC_ClockConfig+0x264>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	490c      	ldr	r1, [pc, #48]	@ (8004f24 <HAL_RCC_ClockConfig+0x26c>)
 8004ef4:	5ccb      	ldrb	r3, [r1, r3]
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	fa22 f303 	lsr.w	r3, r2, r3
 8004efe:	4a0a      	ldr	r2, [pc, #40]	@ (8004f28 <HAL_RCC_ClockConfig+0x270>)
 8004f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f02:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <HAL_RCC_ClockConfig+0x274>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fb fdb4 	bl	8000a74 <HAL_InitTick>
 8004f0c:	4603      	mov	r3, r0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40022000 	.word	0x40022000
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	04c4b400 	.word	0x04c4b400
 8004f24:	0800a828 	.word	0x0800a828
 8004f28:	20000008 	.word	0x20000008
 8004f2c:	2000000c 	.word	0x2000000c

08004f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f36:	4b2c      	ldr	r3, [pc, #176]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d102      	bne.n	8004f48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f42:	4b2a      	ldr	r3, [pc, #168]	@ (8004fec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	e047      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f48:	4b27      	ldr	r3, [pc, #156]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 030c 	and.w	r3, r3, #12
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d102      	bne.n	8004f5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f54:	4b25      	ldr	r3, [pc, #148]	@ (8004fec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	e03e      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f5a:	4b23      	ldr	r3, [pc, #140]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b0c      	cmp	r3, #12
 8004f64:	d136      	bne.n	8004fd4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f66:	4b20      	ldr	r3, [pc, #128]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f70:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	091b      	lsrs	r3, r3, #4
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d10c      	bne.n	8004f9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f84:	4a19      	ldr	r2, [pc, #100]	@ (8004fec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	4a16      	ldr	r2, [pc, #88]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f8e:	68d2      	ldr	r2, [r2, #12]
 8004f90:	0a12      	lsrs	r2, r2, #8
 8004f92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	617b      	str	r3, [r7, #20]
      break;
 8004f9c:	e00c      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f9e:	4a13      	ldr	r2, [pc, #76]	@ (8004fec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	4a10      	ldr	r2, [pc, #64]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fa8:	68d2      	ldr	r2, [r2, #12]
 8004faa:	0a12      	lsrs	r2, r2, #8
 8004fac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]
      break;
 8004fb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	0e5b      	lsrs	r3, r3, #25
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	e001      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fd8:	693b      	ldr	r3, [r7, #16]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	00f42400 	.word	0x00f42400

08004ff0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8005070 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005000:	4b1b      	ldr	r3, [pc, #108]	@ (8005070 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	091b      	lsrs	r3, r3, #4
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	3301      	adds	r3, #1
 800500c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b03      	cmp	r3, #3
 8005012:	d10c      	bne.n	800502e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005014:	4a17      	ldr	r2, [pc, #92]	@ (8005074 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	4a14      	ldr	r2, [pc, #80]	@ (8005070 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800501e:	68d2      	ldr	r2, [r2, #12]
 8005020:	0a12      	lsrs	r2, r2, #8
 8005022:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	617b      	str	r3, [r7, #20]
    break;
 800502c:	e00c      	b.n	8005048 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800502e:	4a11      	ldr	r2, [pc, #68]	@ (8005074 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	fbb2 f3f3 	udiv	r3, r2, r3
 8005036:	4a0e      	ldr	r2, [pc, #56]	@ (8005070 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005038:	68d2      	ldr	r2, [r2, #12]
 800503a:	0a12      	lsrs	r2, r2, #8
 800503c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005040:	fb02 f303 	mul.w	r3, r2, r3
 8005044:	617b      	str	r3, [r7, #20]
    break;
 8005046:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005048:	4b09      	ldr	r3, [pc, #36]	@ (8005070 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	0e5b      	lsrs	r3, r3, #25
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	3301      	adds	r3, #1
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005062:	687b      	ldr	r3, [r7, #4]
}
 8005064:	4618      	mov	r0, r3
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40021000 	.word	0x40021000
 8005074:	00f42400 	.word	0x00f42400

08005078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005080:	2300      	movs	r3, #0
 8005082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005084:	2300      	movs	r3, #0
 8005086:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8098 	beq.w	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005096:	2300      	movs	r3, #0
 8005098:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509a:	4b43      	ldr	r3, [pc, #268]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800509c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10d      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	4b40      	ldr	r3, [pc, #256]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050aa:	4a3f      	ldr	r2, [pc, #252]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80050b2:	4b3d      	ldr	r3, [pc, #244]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	60bb      	str	r3, [r7, #8]
 80050bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050be:	2301      	movs	r3, #1
 80050c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050c2:	4b3a      	ldr	r3, [pc, #232]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a39      	ldr	r2, [pc, #228]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050ce:	f7fb fd1d 	bl	8000b0c <HAL_GetTick>
 80050d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050d4:	e009      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d6:	f7fb fd19 	bl	8000b0c <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d902      	bls.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	74fb      	strb	r3, [r7, #19]
        break;
 80050e8:	e005      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ea:	4b30      	ldr	r3, [pc, #192]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0ef      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80050f6:	7cfb      	ldrb	r3, [r7, #19]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d159      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050fc:	4b2a      	ldr	r3, [pc, #168]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005106:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d01e      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	429a      	cmp	r2, r3
 8005116:	d019      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005118:	4b23      	ldr	r3, [pc, #140]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005122:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005124:	4b20      	ldr	r3, [pc, #128]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512a:	4a1f      	ldr	r2, [pc, #124]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800512c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005134:	4b1c      	ldr	r3, [pc, #112]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513a:	4a1b      	ldr	r2, [pc, #108]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800513c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005144:	4a18      	ldr	r2, [pc, #96]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d016      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005156:	f7fb fcd9 	bl	8000b0c <HAL_GetTick>
 800515a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800515c:	e00b      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800515e:	f7fb fcd5 	bl	8000b0c <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d902      	bls.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	74fb      	strb	r3, [r7, #19]
            break;
 8005174:	e006      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005176:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ec      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800518a:	4b07      	ldr	r3, [pc, #28]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	4903      	ldr	r1, [pc, #12]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051a0:	e008      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051a2:	7cfb      	ldrb	r3, [r7, #19]
 80051a4:	74bb      	strb	r3, [r7, #18]
 80051a6:	e005      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b0:	7cfb      	ldrb	r3, [r7, #19]
 80051b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b4:	7c7b      	ldrb	r3, [r7, #17]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d105      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ba:	4ba6      	ldr	r3, [pc, #664]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051be:	4aa5      	ldr	r2, [pc, #660]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051d2:	4ba0      	ldr	r3, [pc, #640]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d8:	f023 0203 	bic.w	r2, r3, #3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	499c      	ldr	r1, [pc, #624]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051f4:	4b97      	ldr	r3, [pc, #604]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	f023 020c 	bic.w	r2, r3, #12
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	4994      	ldr	r1, [pc, #592]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005216:	4b8f      	ldr	r3, [pc, #572]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	498b      	ldr	r1, [pc, #556]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005238:	4b86      	ldr	r3, [pc, #536]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	4983      	ldr	r1, [pc, #524]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800525a:	4b7e      	ldr	r3, [pc, #504]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005260:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	497a      	ldr	r1, [pc, #488]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800527c:	4b75      	ldr	r3, [pc, #468]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005282:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	4972      	ldr	r1, [pc, #456]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800529e:	4b6d      	ldr	r3, [pc, #436]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	4969      	ldr	r1, [pc, #420]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052c0:	4b64      	ldr	r3, [pc, #400]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	4961      	ldr	r1, [pc, #388]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052e2:	4b5c      	ldr	r3, [pc, #368]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	4958      	ldr	r1, [pc, #352]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005300:	2b00      	cmp	r3, #0
 8005302:	d015      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005304:	4b53      	ldr	r3, [pc, #332]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005312:	4950      	ldr	r1, [pc, #320]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005322:	d105      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005324:	4b4b      	ldr	r3, [pc, #300]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4a4a      	ldr	r2, [pc, #296]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800532a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800532e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005338:	2b00      	cmp	r3, #0
 800533a:	d015      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800533c:	4b45      	ldr	r3, [pc, #276]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005342:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534a:	4942      	ldr	r1, [pc, #264]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005356:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800535a:	d105      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800535c:	4b3d      	ldr	r3, [pc, #244]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4a3c      	ldr	r2, [pc, #240]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005366:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d015      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005374:	4b37      	ldr	r3, [pc, #220]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005382:	4934      	ldr	r1, [pc, #208]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005392:	d105      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005394:	4b2f      	ldr	r3, [pc, #188]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4a2e      	ldr	r2, [pc, #184]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800539a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800539e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d015      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053ac:	4b29      	ldr	r3, [pc, #164]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ba:	4926      	ldr	r1, [pc, #152]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ca:	d105      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053cc:	4b21      	ldr	r3, [pc, #132]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4a20      	ldr	r2, [pc, #128]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d015      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	4918      	ldr	r1, [pc, #96]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005402:	d105      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005404:	4b13      	ldr	r3, [pc, #76]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4a12      	ldr	r2, [pc, #72]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800540e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d015      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800541c:	4b0d      	ldr	r3, [pc, #52]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542a:	490a      	ldr	r1, [pc, #40]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005436:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800543a:	d105      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800543c:	4b05      	ldr	r3, [pc, #20]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	4a04      	ldr	r2, [pc, #16]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005446:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005448:	7cbb      	ldrb	r3, [r7, #18]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000

08005458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e049      	b.n	80054fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fb fa04 	bl	800088c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f000 fba4 	bl	8005be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e049      	b.n	80055ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f841 	bl	80055b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f000 fb4d 	bl	8005be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <HAL_TIM_PWM_Start+0x24>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	e03c      	b.n	8005666 <HAL_TIM_PWM_Start+0x9e>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d109      	bne.n	8005606 <HAL_TIM_PWM_Start+0x3e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	bf14      	ite	ne
 80055fe:	2301      	movne	r3, #1
 8005600:	2300      	moveq	r3, #0
 8005602:	b2db      	uxtb	r3, r3
 8005604:	e02f      	b.n	8005666 <HAL_TIM_PWM_Start+0x9e>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d109      	bne.n	8005620 <HAL_TIM_PWM_Start+0x58>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	e022      	b.n	8005666 <HAL_TIM_PWM_Start+0x9e>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b0c      	cmp	r3, #12
 8005624:	d109      	bne.n	800563a <HAL_TIM_PWM_Start+0x72>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b01      	cmp	r3, #1
 8005630:	bf14      	ite	ne
 8005632:	2301      	movne	r3, #1
 8005634:	2300      	moveq	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	e015      	b.n	8005666 <HAL_TIM_PWM_Start+0x9e>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b10      	cmp	r3, #16
 800563e:	d109      	bne.n	8005654 <HAL_TIM_PWM_Start+0x8c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	bf14      	ite	ne
 800564c:	2301      	movne	r3, #1
 800564e:	2300      	moveq	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	e008      	b.n	8005666 <HAL_TIM_PWM_Start+0x9e>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	bf14      	ite	ne
 8005660:	2301      	movne	r3, #1
 8005662:	2300      	moveq	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e097      	b.n	800579e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d104      	bne.n	800567e <HAL_TIM_PWM_Start+0xb6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800567c:	e023      	b.n	80056c6 <HAL_TIM_PWM_Start+0xfe>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b04      	cmp	r3, #4
 8005682:	d104      	bne.n	800568e <HAL_TIM_PWM_Start+0xc6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800568c:	e01b      	b.n	80056c6 <HAL_TIM_PWM_Start+0xfe>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b08      	cmp	r3, #8
 8005692:	d104      	bne.n	800569e <HAL_TIM_PWM_Start+0xd6>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800569c:	e013      	b.n	80056c6 <HAL_TIM_PWM_Start+0xfe>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	d104      	bne.n	80056ae <HAL_TIM_PWM_Start+0xe6>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056ac:	e00b      	b.n	80056c6 <HAL_TIM_PWM_Start+0xfe>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	d104      	bne.n	80056be <HAL_TIM_PWM_Start+0xf6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056bc:	e003      	b.n	80056c6 <HAL_TIM_PWM_Start+0xfe>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2201      	movs	r2, #1
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 feb6 	bl	8006440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a33      	ldr	r2, [pc, #204]	@ (80057a8 <HAL_TIM_PWM_Start+0x1e0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_TIM_PWM_Start+0x13e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a32      	ldr	r2, [pc, #200]	@ (80057ac <HAL_TIM_PWM_Start+0x1e4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00e      	beq.n	8005706 <HAL_TIM_PWM_Start+0x13e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a30      	ldr	r2, [pc, #192]	@ (80057b0 <HAL_TIM_PWM_Start+0x1e8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d009      	beq.n	8005706 <HAL_TIM_PWM_Start+0x13e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2f      	ldr	r2, [pc, #188]	@ (80057b4 <HAL_TIM_PWM_Start+0x1ec>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d004      	beq.n	8005706 <HAL_TIM_PWM_Start+0x13e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2d      	ldr	r2, [pc, #180]	@ (80057b8 <HAL_TIM_PWM_Start+0x1f0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d101      	bne.n	800570a <HAL_TIM_PWM_Start+0x142>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <HAL_TIM_PWM_Start+0x144>
 800570a:	2300      	movs	r3, #0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d007      	beq.n	8005720 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800571e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a20      	ldr	r2, [pc, #128]	@ (80057a8 <HAL_TIM_PWM_Start+0x1e0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_TIM_PWM_Start+0x194>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005732:	d013      	beq.n	800575c <HAL_TIM_PWM_Start+0x194>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a20      	ldr	r2, [pc, #128]	@ (80057bc <HAL_TIM_PWM_Start+0x1f4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_TIM_PWM_Start+0x194>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1f      	ldr	r2, [pc, #124]	@ (80057c0 <HAL_TIM_PWM_Start+0x1f8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_TIM_PWM_Start+0x194>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a17      	ldr	r2, [pc, #92]	@ (80057ac <HAL_TIM_PWM_Start+0x1e4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_TIM_PWM_Start+0x194>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a16      	ldr	r2, [pc, #88]	@ (80057b0 <HAL_TIM_PWM_Start+0x1e8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d115      	bne.n	8005788 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	4b18      	ldr	r3, [pc, #96]	@ (80057c4 <HAL_TIM_PWM_Start+0x1fc>)
 8005764:	4013      	ands	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b06      	cmp	r3, #6
 800576c:	d015      	beq.n	800579a <HAL_TIM_PWM_Start+0x1d2>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005774:	d011      	beq.n	800579a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005786:	e008      	b.n	800579a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	e000      	b.n	800579c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40013400 	.word	0x40013400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800
 80057c4:	00010007 	.word	0x00010007

080057c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e0ff      	b.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b14      	cmp	r3, #20
 80057f2:	f200 80f0 	bhi.w	80059d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057f6:	a201      	add	r2, pc, #4	@ (adr r2, 80057fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fc:	08005851 	.word	0x08005851
 8005800:	080059d7 	.word	0x080059d7
 8005804:	080059d7 	.word	0x080059d7
 8005808:	080059d7 	.word	0x080059d7
 800580c:	08005891 	.word	0x08005891
 8005810:	080059d7 	.word	0x080059d7
 8005814:	080059d7 	.word	0x080059d7
 8005818:	080059d7 	.word	0x080059d7
 800581c:	080058d3 	.word	0x080058d3
 8005820:	080059d7 	.word	0x080059d7
 8005824:	080059d7 	.word	0x080059d7
 8005828:	080059d7 	.word	0x080059d7
 800582c:	08005913 	.word	0x08005913
 8005830:	080059d7 	.word	0x080059d7
 8005834:	080059d7 	.word	0x080059d7
 8005838:	080059d7 	.word	0x080059d7
 800583c:	08005955 	.word	0x08005955
 8005840:	080059d7 	.word	0x080059d7
 8005844:	080059d7 	.word	0x080059d7
 8005848:	080059d7 	.word	0x080059d7
 800584c:	08005995 	.word	0x08005995
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fa60 	bl	8005d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0208 	orr.w	r2, r2, #8
 800586a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0204 	bic.w	r2, r2, #4
 800587a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6999      	ldr	r1, [r3, #24]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	619a      	str	r2, [r3, #24]
      break;
 800588e:	e0a5      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fad0 	bl	8005e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6999      	ldr	r1, [r3, #24]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	021a      	lsls	r2, r3, #8
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	619a      	str	r2, [r3, #24]
      break;
 80058d0:	e084      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fb39 	bl	8005f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0208 	orr.w	r2, r2, #8
 80058ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0204 	bic.w	r2, r2, #4
 80058fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69d9      	ldr	r1, [r3, #28]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	61da      	str	r2, [r3, #28]
      break;
 8005910:	e064      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fba1 	bl	8006060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800592c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800593c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69d9      	ldr	r1, [r3, #28]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	021a      	lsls	r2, r3, #8
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	61da      	str	r2, [r3, #28]
      break;
 8005952:	e043      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fc0a 	bl	8006174 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0208 	orr.w	r2, r2, #8
 800596e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0204 	bic.w	r2, r2, #4
 800597e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005992:	e023      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fc4e 	bl	800623c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	021a      	lsls	r2, r3, #8
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059d4:	e002      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	75fb      	strb	r3, [r7, #23]
      break;
 80059da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop

080059f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_TIM_ConfigClockSource+0x1c>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e0de      	b.n	8005bca <HAL_TIM_ConfigClockSource+0x1da>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005a2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a63      	ldr	r2, [pc, #396]	@ (8005bd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	f000 80a9 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005a4c:	4a61      	ldr	r2, [pc, #388]	@ (8005bd4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	f200 80ae 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a54:	4a60      	ldr	r2, [pc, #384]	@ (8005bd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	f000 80a1 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005a5c:	4a5e      	ldr	r2, [pc, #376]	@ (8005bd8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	f200 80a6 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a64:	4a5d      	ldr	r2, [pc, #372]	@ (8005bdc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	f000 8099 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005a6c:	4a5b      	ldr	r2, [pc, #364]	@ (8005bdc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	f200 809e 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a74:	4a5a      	ldr	r2, [pc, #360]	@ (8005be0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	f000 8091 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005a7c:	4a58      	ldr	r2, [pc, #352]	@ (8005be0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	f200 8096 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a88:	f000 8089 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005a8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a90:	f200 808e 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a98:	d03e      	beq.n	8005b18 <HAL_TIM_ConfigClockSource+0x128>
 8005a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a9e:	f200 8087 	bhi.w	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa6:	f000 8086 	beq.w	8005bb6 <HAL_TIM_ConfigClockSource+0x1c6>
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aae:	d87f      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ab0:	2b70      	cmp	r3, #112	@ 0x70
 8005ab2:	d01a      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0xfa>
 8005ab4:	2b70      	cmp	r3, #112	@ 0x70
 8005ab6:	d87b      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ab8:	2b60      	cmp	r3, #96	@ 0x60
 8005aba:	d050      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x16e>
 8005abc:	2b60      	cmp	r3, #96	@ 0x60
 8005abe:	d877      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ac0:	2b50      	cmp	r3, #80	@ 0x50
 8005ac2:	d03c      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x14e>
 8005ac4:	2b50      	cmp	r3, #80	@ 0x50
 8005ac6:	d873      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ac8:	2b40      	cmp	r3, #64	@ 0x40
 8005aca:	d058      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x18e>
 8005acc:	2b40      	cmp	r3, #64	@ 0x40
 8005ace:	d86f      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ad0:	2b30      	cmp	r3, #48	@ 0x30
 8005ad2:	d064      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005ad4:	2b30      	cmp	r3, #48	@ 0x30
 8005ad6:	d86b      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d060      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d867      	bhi.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d05c      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d05a      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x1ae>
 8005ae8:	e062      	b.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005afa:	f000 fc81 	bl	8006400 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	609a      	str	r2, [r3, #8]
      break;
 8005b16:	e04f      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b28:	f000 fc6a 	bl	8006400 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b3a:	609a      	str	r2, [r3, #8]
      break;
 8005b3c:	e03c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f000 fbdc 	bl	8006308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2150      	movs	r1, #80	@ 0x50
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fc35 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8005b5c:	e02c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f000 fbfb 	bl	8006366 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2160      	movs	r1, #96	@ 0x60
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fc25 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8005b7c:	e01c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f000 fbbc 	bl	8006308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2140      	movs	r1, #64	@ 0x40
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fc15 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8005b9c:	e00c      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4610      	mov	r0, r2
 8005baa:	f000 fc0c 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8005bae:	e003      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb4:	e000      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	00100070 	.word	0x00100070
 8005bd8:	00100040 	.word	0x00100040
 8005bdc:	00100030 	.word	0x00100030
 8005be0:	00100020 	.word	0x00100020

08005be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a42      	ldr	r2, [pc, #264]	@ (8005d00 <TIM_Base_SetConfig+0x11c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00f      	beq.n	8005c1c <TIM_Base_SetConfig+0x38>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c02:	d00b      	beq.n	8005c1c <TIM_Base_SetConfig+0x38>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a3f      	ldr	r2, [pc, #252]	@ (8005d04 <TIM_Base_SetConfig+0x120>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d007      	beq.n	8005c1c <TIM_Base_SetConfig+0x38>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8005d08 <TIM_Base_SetConfig+0x124>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_Base_SetConfig+0x38>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a3d      	ldr	r2, [pc, #244]	@ (8005d0c <TIM_Base_SetConfig+0x128>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d108      	bne.n	8005c2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a33      	ldr	r2, [pc, #204]	@ (8005d00 <TIM_Base_SetConfig+0x11c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01b      	beq.n	8005c6e <TIM_Base_SetConfig+0x8a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3c:	d017      	beq.n	8005c6e <TIM_Base_SetConfig+0x8a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a30      	ldr	r2, [pc, #192]	@ (8005d04 <TIM_Base_SetConfig+0x120>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <TIM_Base_SetConfig+0x8a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2f      	ldr	r2, [pc, #188]	@ (8005d08 <TIM_Base_SetConfig+0x124>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00f      	beq.n	8005c6e <TIM_Base_SetConfig+0x8a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a2e      	ldr	r2, [pc, #184]	@ (8005d0c <TIM_Base_SetConfig+0x128>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <TIM_Base_SetConfig+0x8a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a2d      	ldr	r2, [pc, #180]	@ (8005d10 <TIM_Base_SetConfig+0x12c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <TIM_Base_SetConfig+0x8a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a2c      	ldr	r2, [pc, #176]	@ (8005d14 <TIM_Base_SetConfig+0x130>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_Base_SetConfig+0x8a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2b      	ldr	r2, [pc, #172]	@ (8005d18 <TIM_Base_SetConfig+0x134>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d108      	bne.n	8005c80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a16      	ldr	r2, [pc, #88]	@ (8005d00 <TIM_Base_SetConfig+0x11c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00f      	beq.n	8005ccc <TIM_Base_SetConfig+0xe8>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a17      	ldr	r2, [pc, #92]	@ (8005d0c <TIM_Base_SetConfig+0x128>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00b      	beq.n	8005ccc <TIM_Base_SetConfig+0xe8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a16      	ldr	r2, [pc, #88]	@ (8005d10 <TIM_Base_SetConfig+0x12c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d007      	beq.n	8005ccc <TIM_Base_SetConfig+0xe8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a15      	ldr	r2, [pc, #84]	@ (8005d14 <TIM_Base_SetConfig+0x130>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_Base_SetConfig+0xe8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a14      	ldr	r2, [pc, #80]	@ (8005d18 <TIM_Base_SetConfig+0x134>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d103      	bne.n	8005cd4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d105      	bne.n	8005cf2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f023 0201 	bic.w	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	611a      	str	r2, [r3, #16]
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40012c00 	.word	0x40012c00
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40013400 	.word	0x40013400
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40014400 	.word	0x40014400
 8005d18:	40014800 	.word	0x40014800

08005d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f023 0201 	bic.w	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f023 0302 	bic.w	r3, r3, #2
 8005d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a2c      	ldr	r2, [pc, #176]	@ (8005e28 <TIM_OC1_SetConfig+0x10c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00f      	beq.n	8005d9c <TIM_OC1_SetConfig+0x80>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8005e2c <TIM_OC1_SetConfig+0x110>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00b      	beq.n	8005d9c <TIM_OC1_SetConfig+0x80>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a2a      	ldr	r2, [pc, #168]	@ (8005e30 <TIM_OC1_SetConfig+0x114>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d007      	beq.n	8005d9c <TIM_OC1_SetConfig+0x80>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a29      	ldr	r2, [pc, #164]	@ (8005e34 <TIM_OC1_SetConfig+0x118>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_OC1_SetConfig+0x80>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a28      	ldr	r2, [pc, #160]	@ (8005e38 <TIM_OC1_SetConfig+0x11c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d10c      	bne.n	8005db6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0308 	bic.w	r3, r3, #8
 8005da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f023 0304 	bic.w	r3, r3, #4
 8005db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e28 <TIM_OC1_SetConfig+0x10c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00f      	beq.n	8005dde <TIM_OC1_SetConfig+0xc2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e2c <TIM_OC1_SetConfig+0x110>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00b      	beq.n	8005dde <TIM_OC1_SetConfig+0xc2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a19      	ldr	r2, [pc, #100]	@ (8005e30 <TIM_OC1_SetConfig+0x114>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d007      	beq.n	8005dde <TIM_OC1_SetConfig+0xc2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a18      	ldr	r2, [pc, #96]	@ (8005e34 <TIM_OC1_SetConfig+0x118>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d003      	beq.n	8005dde <TIM_OC1_SetConfig+0xc2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a17      	ldr	r2, [pc, #92]	@ (8005e38 <TIM_OC1_SetConfig+0x11c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d111      	bne.n	8005e02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	621a      	str	r2, [r3, #32]
}
 8005e1c:	bf00      	nop
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40013400 	.word	0x40013400
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800

08005e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f023 0210 	bic.w	r2, r3, #16
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f023 0320 	bic.w	r3, r3, #32
 8005e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a28      	ldr	r2, [pc, #160]	@ (8005f3c <TIM_OC2_SetConfig+0x100>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_OC2_SetConfig+0x6c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a27      	ldr	r2, [pc, #156]	@ (8005f40 <TIM_OC2_SetConfig+0x104>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d10d      	bne.n	8005ec4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ec2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f3c <TIM_OC2_SetConfig+0x100>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00f      	beq.n	8005eec <TIM_OC2_SetConfig+0xb0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a1c      	ldr	r2, [pc, #112]	@ (8005f40 <TIM_OC2_SetConfig+0x104>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <TIM_OC2_SetConfig+0xb0>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f44 <TIM_OC2_SetConfig+0x108>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_OC2_SetConfig+0xb0>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a1a      	ldr	r2, [pc, #104]	@ (8005f48 <TIM_OC2_SetConfig+0x10c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_OC2_SetConfig+0xb0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a19      	ldr	r2, [pc, #100]	@ (8005f4c <TIM_OC2_SetConfig+0x110>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d113      	bne.n	8005f14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40013400 	.word	0x40013400
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40014400 	.word	0x40014400
 8005f4c:	40014800 	.word	0x40014800

08005f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a27      	ldr	r2, [pc, #156]	@ (800604c <TIM_OC3_SetConfig+0xfc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC3_SetConfig+0x6a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a26      	ldr	r2, [pc, #152]	@ (8006050 <TIM_OC3_SetConfig+0x100>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d10d      	bne.n	8005fd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800604c <TIM_OC3_SetConfig+0xfc>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00f      	beq.n	8005ffe <TIM_OC3_SetConfig+0xae>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8006050 <TIM_OC3_SetConfig+0x100>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00b      	beq.n	8005ffe <TIM_OC3_SetConfig+0xae>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8006054 <TIM_OC3_SetConfig+0x104>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d007      	beq.n	8005ffe <TIM_OC3_SetConfig+0xae>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a19      	ldr	r2, [pc, #100]	@ (8006058 <TIM_OC3_SetConfig+0x108>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d003      	beq.n	8005ffe <TIM_OC3_SetConfig+0xae>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a18      	ldr	r2, [pc, #96]	@ (800605c <TIM_OC3_SetConfig+0x10c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d113      	bne.n	8006026 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800600c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	621a      	str	r2, [r3, #32]
}
 8006040:	bf00      	nop
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	40012c00 	.word	0x40012c00
 8006050:	40013400 	.word	0x40013400
 8006054:	40014000 	.word	0x40014000
 8006058:	40014400 	.word	0x40014400
 800605c:	40014800 	.word	0x40014800

08006060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800609a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	031b      	lsls	r3, r3, #12
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a28      	ldr	r2, [pc, #160]	@ (8006160 <TIM_OC4_SetConfig+0x100>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_OC4_SetConfig+0x6c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a27      	ldr	r2, [pc, #156]	@ (8006164 <TIM_OC4_SetConfig+0x104>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d10d      	bne.n	80060e8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	031b      	lsls	r3, r3, #12
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006160 <TIM_OC4_SetConfig+0x100>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00f      	beq.n	8006110 <TIM_OC4_SetConfig+0xb0>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006164 <TIM_OC4_SetConfig+0x104>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00b      	beq.n	8006110 <TIM_OC4_SetConfig+0xb0>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006168 <TIM_OC4_SetConfig+0x108>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d007      	beq.n	8006110 <TIM_OC4_SetConfig+0xb0>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a1a      	ldr	r2, [pc, #104]	@ (800616c <TIM_OC4_SetConfig+0x10c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_OC4_SetConfig+0xb0>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a19      	ldr	r2, [pc, #100]	@ (8006170 <TIM_OC4_SetConfig+0x110>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d113      	bne.n	8006138 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006116:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800611e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	019b      	lsls	r3, r3, #6
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	019b      	lsls	r3, r3, #6
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40012c00 	.word	0x40012c00
 8006164:	40013400 	.word	0x40013400
 8006168:	40014000 	.word	0x40014000
 800616c:	40014400 	.word	0x40014400
 8006170:	40014800 	.word	0x40014800

08006174 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80061b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	041b      	lsls	r3, r3, #16
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a17      	ldr	r2, [pc, #92]	@ (8006228 <TIM_OC5_SetConfig+0xb4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00f      	beq.n	80061ee <TIM_OC5_SetConfig+0x7a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a16      	ldr	r2, [pc, #88]	@ (800622c <TIM_OC5_SetConfig+0xb8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d00b      	beq.n	80061ee <TIM_OC5_SetConfig+0x7a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a15      	ldr	r2, [pc, #84]	@ (8006230 <TIM_OC5_SetConfig+0xbc>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d007      	beq.n	80061ee <TIM_OC5_SetConfig+0x7a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a14      	ldr	r2, [pc, #80]	@ (8006234 <TIM_OC5_SetConfig+0xc0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d003      	beq.n	80061ee <TIM_OC5_SetConfig+0x7a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a13      	ldr	r2, [pc, #76]	@ (8006238 <TIM_OC5_SetConfig+0xc4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d109      	bne.n	8006202 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	621a      	str	r2, [r3, #32]
}
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	40012c00 	.word	0x40012c00
 800622c:	40013400 	.word	0x40013400
 8006230:	40014000 	.word	0x40014000
 8006234:	40014400 	.word	0x40014400
 8006238:	40014800 	.word	0x40014800

0800623c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800626e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	051b      	lsls	r3, r3, #20
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a18      	ldr	r2, [pc, #96]	@ (80062f4 <TIM_OC6_SetConfig+0xb8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00f      	beq.n	80062b8 <TIM_OC6_SetConfig+0x7c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a17      	ldr	r2, [pc, #92]	@ (80062f8 <TIM_OC6_SetConfig+0xbc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00b      	beq.n	80062b8 <TIM_OC6_SetConfig+0x7c>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a16      	ldr	r2, [pc, #88]	@ (80062fc <TIM_OC6_SetConfig+0xc0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d007      	beq.n	80062b8 <TIM_OC6_SetConfig+0x7c>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a15      	ldr	r2, [pc, #84]	@ (8006300 <TIM_OC6_SetConfig+0xc4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_OC6_SetConfig+0x7c>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a14      	ldr	r2, [pc, #80]	@ (8006304 <TIM_OC6_SetConfig+0xc8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d109      	bne.n	80062cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	029b      	lsls	r3, r3, #10
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40013400 	.word	0x40013400
 80062fc:	40014000 	.word	0x40014000
 8006300:	40014400 	.word	0x40014400
 8006304:	40014800 	.word	0x40014800

08006308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f023 030a 	bic.w	r3, r3, #10
 8006344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006366:	b480      	push	{r7}
 8006368:	b087      	sub	sp, #28
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	f023 0210 	bic.w	r2, r3, #16
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	031b      	lsls	r3, r3, #12
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80063dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f043 0307 	orr.w	r3, r3, #7
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	609a      	str	r2, [r3, #8]
}
 80063f4:	bf00      	nop
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800641a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	021a      	lsls	r2, r3, #8
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	431a      	orrs	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4313      	orrs	r3, r2
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	609a      	str	r2, [r3, #8]
}
 8006434:	bf00      	nop
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f003 031f 	and.w	r3, r3, #31
 8006452:	2201      	movs	r2, #1
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1a      	ldr	r2, [r3, #32]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	43db      	mvns	r3, r3
 8006462:	401a      	ands	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	fa01 f303 	lsl.w	r3, r1, r3
 8006478:	431a      	orrs	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e065      	b.n	8006570 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a2c      	ldr	r2, [pc, #176]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d108      	bne.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80064f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1b      	ldr	r2, [pc, #108]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d018      	beq.n	8006544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800651a:	d013      	beq.n	8006544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a18      	ldr	r2, [pc, #96]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00e      	beq.n	8006544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a17      	ldr	r2, [pc, #92]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d009      	beq.n	8006544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a12      	ldr	r2, [pc, #72]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a13      	ldr	r2, [pc, #76]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d10c      	bne.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800654a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	4313      	orrs	r3, r2
 8006554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40013400 	.word	0x40013400
 8006584:	40000400 	.word	0x40000400
 8006588:	40000800 	.word	0x40000800
 800658c:	40014000 	.word	0x40014000

08006590 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065a0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80065a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065c6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80065ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	43db      	mvns	r3, r3
 80065da:	b29b      	uxth	r3, r3
 80065dc:	4013      	ands	r3, r2
 80065de:	b29a      	uxth	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	1d3b      	adds	r3, r7, #4
 80065fe:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006630:	b480      	push	{r7}
 8006632:	b0a7      	sub	sp, #156	@ 0x9c
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006656:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	78db      	ldrb	r3, [r3, #3]
 800665e:	2b03      	cmp	r3, #3
 8006660:	d81f      	bhi.n	80066a2 <USB_ActivateEndpoint+0x72>
 8006662:	a201      	add	r2, pc, #4	@ (adr r2, 8006668 <USB_ActivateEndpoint+0x38>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	08006679 	.word	0x08006679
 800666c:	08006695 	.word	0x08006695
 8006670:	080066ab 	.word	0x080066ab
 8006674:	08006687 	.word	0x08006687
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006678:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800667c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006680:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006684:	e012      	b.n	80066ac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006686:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800668a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800668e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006692:	e00b      	b.n	80066ac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006694:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006698:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800669c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80066a0:	e004      	b.n	80066ac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80066a8:	e000      	b.n	80066ac <USB_ActivateEndpoint+0x7c>
      break;
 80066aa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	441a      	add	r2, r3
 80066b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80066ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	b21b      	sxth	r3, r3
 80066de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e6:	b21a      	sxth	r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b21b      	sxth	r3, r3
 80066ee:	4313      	orrs	r3, r2
 80066f0:	b21b      	sxth	r3, r3
 80066f2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	441a      	add	r2, r3
 8006700:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800670c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006714:	b29b      	uxth	r3, r3
 8006716:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	7b1b      	ldrb	r3, [r3, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f040 8180 	bne.w	8006a22 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	785b      	ldrb	r3, [r3, #1]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8084 	beq.w	8006834 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006736:	b29b      	uxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	4413      	add	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	00da      	lsls	r2, r3, #3
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	88db      	ldrh	r3, [r3, #6]
 8006754:	085b      	lsrs	r3, r3, #1
 8006756:	b29b      	uxth	r3, r3
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	827b      	strh	r3, [r7, #18]
 800676e:	8a7b      	ldrh	r3, [r7, #18]
 8006770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01b      	beq.n	80067b0 <USB_ActivateEndpoint+0x180>
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b29b      	uxth	r3, r3
 8006786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800678a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678e:	823b      	strh	r3, [r7, #16]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	441a      	add	r2, r3
 800679a:	8a3b      	ldrh	r3, [r7, #16]
 800679c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	78db      	ldrb	r3, [r3, #3]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d020      	beq.n	80067fa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ce:	81bb      	strh	r3, [r7, #12]
 80067d0:	89bb      	ldrh	r3, [r7, #12]
 80067d2:	f083 0320 	eor.w	r3, r3, #32
 80067d6:	81bb      	strh	r3, [r7, #12]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	441a      	add	r2, r3
 80067e2:	89bb      	ldrh	r3, [r7, #12]
 80067e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	8013      	strh	r3, [r2, #0]
 80067f8:	e3f9      	b.n	8006fee <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800680c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006810:	81fb      	strh	r3, [r7, #14]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	441a      	add	r2, r3
 800681c:	89fb      	ldrh	r3, [r7, #14]
 800681e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006822:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800682a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800682e:	b29b      	uxth	r3, r3
 8006830:	8013      	strh	r3, [r2, #0]
 8006832:	e3dc      	b.n	8006fee <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	633b      	str	r3, [r7, #48]	@ 0x30
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800683e:	b29b      	uxth	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	4413      	add	r3, r2
 8006846:	633b      	str	r3, [r7, #48]	@ 0x30
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	00da      	lsls	r2, r3, #3
 800684e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006850:	4413      	add	r3, r2
 8006852:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	88db      	ldrh	r3, [r3, #6]
 800685c:	085b      	lsrs	r3, r3, #1
 800685e:	b29b      	uxth	r3, r3
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006866:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006872:	b29b      	uxth	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006878:	4413      	add	r3, r2
 800687a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	00da      	lsls	r2, r3, #3
 8006882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006884:	4413      	add	r3, r2
 8006886:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800688a:	627b      	str	r3, [r7, #36]	@ 0x24
 800688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006896:	b29a      	uxth	r2, r3
 8006898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689a:	801a      	strh	r2, [r3, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <USB_ActivateEndpoint+0x28a>
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	801a      	strh	r2, [r3, #0]
 80068b8:	e041      	b.n	800693e <USB_ActivateEndpoint+0x30e>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b3e      	cmp	r3, #62	@ 0x3e
 80068c0:	d81c      	bhi.n	80068fc <USB_ActivateEndpoint+0x2cc>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <USB_ActivateEndpoint+0x2b2>
 80068d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068dc:	3301      	adds	r3, #1
 80068de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	029b      	lsls	r3, r3, #10
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	4313      	orrs	r3, r2
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	801a      	strh	r2, [r3, #0]
 80068fa:	e020      	b.n	800693e <USB_ActivateEndpoint+0x30e>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	095b      	lsrs	r3, r3, #5
 8006902:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f003 031f 	and.w	r3, r3, #31
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <USB_ActivateEndpoint+0x2ec>
 8006912:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006916:	3b01      	subs	r3, #1
 8006918:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29a      	uxth	r2, r3
 8006922:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006926:	b29b      	uxth	r3, r3
 8006928:	029b      	lsls	r3, r3, #10
 800692a:	b29b      	uxth	r3, r3
 800692c:	4313      	orrs	r3, r2
 800692e:	b29b      	uxth	r3, r3
 8006930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006938:	b29a      	uxth	r2, r3
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800694c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800694e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01b      	beq.n	800698e <USB_ActivateEndpoint+0x35e>
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800696c:	843b      	strh	r3, [r7, #32]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	441a      	add	r2, r3
 8006978:	8c3b      	ldrh	r3, [r7, #32]
 800697a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800697e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006982:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800698a:	b29b      	uxth	r3, r3
 800698c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d124      	bne.n	80069e0 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ac:	83bb      	strh	r3, [r7, #28]
 80069ae:	8bbb      	ldrh	r3, [r7, #28]
 80069b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069b4:	83bb      	strh	r3, [r7, #28]
 80069b6:	8bbb      	ldrh	r3, [r7, #28]
 80069b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069bc:	83bb      	strh	r3, [r7, #28]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	441a      	add	r2, r3
 80069c8:	8bbb      	ldrh	r3, [r7, #28]
 80069ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]
 80069de:	e306      	b.n	8006fee <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f6:	83fb      	strh	r3, [r7, #30]
 80069f8:	8bfb      	ldrh	r3, [r7, #30]
 80069fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069fe:	83fb      	strh	r3, [r7, #30]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	441a      	add	r2, r3
 8006a0a:	8bfb      	ldrh	r3, [r7, #30]
 8006a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	8013      	strh	r3, [r2, #0]
 8006a20:	e2e5      	b.n	8006fee <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	78db      	ldrb	r3, [r3, #3]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d11e      	bne.n	8006a68 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a40:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	441a      	add	r2, r3
 8006a4e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006a52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a5a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	8013      	strh	r3, [r2, #0]
 8006a66:	e01d      	b.n	8006aa4 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	441a      	add	r2, r3
 8006a8c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ab4:	4413      	add	r3, r2
 8006ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	00da      	lsls	r2, r3, #3
 8006abe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ac6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	891b      	ldrh	r3, [r3, #8]
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	677b      	str	r3, [r7, #116]	@ 0x74
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ae8:	4413      	add	r3, r2
 8006aea:	677b      	str	r3, [r7, #116]	@ 0x74
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	00da      	lsls	r2, r3, #3
 8006af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006af4:	4413      	add	r3, r2
 8006af6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006afa:	673b      	str	r3, [r7, #112]	@ 0x70
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	895b      	ldrh	r3, [r3, #10]
 8006b00:	085b      	lsrs	r3, r3, #1
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b0a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f040 81af 	bne.w	8006e74 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006b26:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d01d      	beq.n	8006b6e <USB_ActivateEndpoint+0x53e>
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b48:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	441a      	add	r2, r3
 8006b56:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006b7e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d01d      	beq.n	8006bc6 <USB_ActivateEndpoint+0x596>
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	441a      	add	r2, r3
 8006bae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006bb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	785b      	ldrb	r3, [r3, #1]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d16b      	bne.n	8006ca6 <USB_ActivateEndpoint+0x676>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bde:	4413      	add	r3, r2
 8006be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	00da      	lsls	r2, r3, #3
 8006be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bea:	4413      	add	r3, r2
 8006bec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <USB_ActivateEndpoint+0x5f0>
 8006c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c1c:	801a      	strh	r2, [r3, #0]
 8006c1e:	e05d      	b.n	8006cdc <USB_ActivateEndpoint+0x6ac>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c26:	d81c      	bhi.n	8006c62 <USB_ActivateEndpoint+0x632>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	085b      	lsrs	r3, r3, #1
 8006c2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d004      	beq.n	8006c48 <USB_ActivateEndpoint+0x618>
 8006c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c42:	3301      	adds	r3, #1
 8006c44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	029b      	lsls	r3, r3, #10
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	e03c      	b.n	8006cdc <USB_ActivateEndpoint+0x6ac>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <USB_ActivateEndpoint+0x652>
 8006c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	029b      	lsls	r3, r3, #10
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	4313      	orrs	r3, r2
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	e01a      	b.n	8006cdc <USB_ActivateEndpoint+0x6ac>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	785b      	ldrb	r3, [r3, #1]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d116      	bne.n	8006cdc <USB_ActivateEndpoint+0x6ac>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cbe:	4413      	add	r3, r2
 8006cc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	00da      	lsls	r2, r3, #3
 8006cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cca:	4413      	add	r3, r2
 8006ccc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cda:	801a      	strh	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d16b      	bne.n	8006dc0 <USB_ActivateEndpoint+0x790>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf8:	4413      	add	r3, r2
 8006cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	00da      	lsls	r2, r3, #3
 8006d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d04:	4413      	add	r3, r2
 8006d06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <USB_ActivateEndpoint+0x70a>
 8006d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	e05b      	b.n	8006df2 <USB_ActivateEndpoint+0x7c2>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d40:	d81c      	bhi.n	8006d7c <USB_ActivateEndpoint+0x74c>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <USB_ActivateEndpoint+0x732>
 8006d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	029b      	lsls	r3, r3, #10
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	4313      	orrs	r3, r2
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e03a      	b.n	8006df2 <USB_ActivateEndpoint+0x7c2>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 031f 	and.w	r3, r3, #31
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d104      	bne.n	8006d9c <USB_ActivateEndpoint+0x76c>
 8006d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d96:	3b01      	subs	r3, #1
 8006d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	029b      	lsls	r3, r3, #10
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	e018      	b.n	8006df2 <USB_ActivateEndpoint+0x7c2>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	785b      	ldrb	r3, [r3, #1]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d114      	bne.n	8006df2 <USB_ActivateEndpoint+0x7c2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd4:	4413      	add	r3, r2
 8006dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	00da      	lsls	r2, r3, #3
 8006dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de0:	4413      	add	r3, r2
 8006de2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006de6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006df0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e08:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e10:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e14:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e18:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e50:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	441a      	add	r2, r3
 8006e5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8013      	strh	r3, [r2, #0]
 8006e72:	e0bc      	b.n	8006fee <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8006e84:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01d      	beq.n	8006ecc <USB_ActivateEndpoint+0x89c>
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	441a      	add	r2, r3
 8006eb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006eb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ebc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ec0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006edc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01d      	beq.n	8006f24 <USB_ActivateEndpoint+0x8f4>
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006efe:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	441a      	add	r2, r3
 8006f0c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006f10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	78db      	ldrb	r3, [r3, #3]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d024      	beq.n	8006f76 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f42:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006f46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006f4a:	f083 0320 	eor.w	r3, r3, #32
 8006f4e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	441a      	add	r2, r3
 8006f5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	8013      	strh	r3, [r2, #0]
 8006f74:	e01d      	b.n	8006fb2 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f8c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	441a      	add	r2, r3
 8006f9a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006f9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fc8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	441a      	add	r2, r3
 8006fd6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006fda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006fee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	379c      	adds	r7, #156	@ 0x9c
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b0ac      	sub	sp, #176	@ 0xb0
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	2b01      	cmp	r3, #1
 8007010:	f040 84ca 	bne.w	80079a8 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	699a      	ldr	r2, [r3, #24]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	429a      	cmp	r2, r3
 800701e:	d904      	bls.n	800702a <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007028:	e003      	b.n	8007032 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	7b1b      	ldrb	r3, [r3, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d122      	bne.n	8007080 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6959      	ldr	r1, [r3, #20]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	88da      	ldrh	r2, [r3, #6]
 8007042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007046:	b29b      	uxth	r3, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fed2 	bl	8007df2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007058:	b29b      	uxth	r3, r3
 800705a:	461a      	mov	r2, r3
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	00da      	lsls	r2, r3, #3
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	4413      	add	r3, r2
 800706c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	f000 bc6f 	b.w	800795e <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	78db      	ldrb	r3, [r3, #3]
 8007084:	2b02      	cmp	r3, #2
 8007086:	f040 831e 	bne.w	80076c6 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6a1a      	ldr	r2, [r3, #32]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	429a      	cmp	r2, r3
 8007094:	f240 82cf 	bls.w	8007636 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ae:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	441a      	add	r2, r3
 80070bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80070c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80070cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	6a1a      	ldr	r2, [r3, #32]
 80070d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070dc:	1ad2      	subs	r2, r2, r3
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 814f 	beq.w	8007398 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d16b      	bne.n	80071de <USB_EPStartXfer+0x1de>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007110:	b29b      	uxth	r3, r3
 8007112:	461a      	mov	r2, r3
 8007114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007116:	4413      	add	r3, r2
 8007118:	62bb      	str	r3, [r7, #40]	@ 0x28
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	00da      	lsls	r2, r3, #3
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	4413      	add	r3, r2
 8007124:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	b29b      	uxth	r3, r3
 8007130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007134:	b29a      	uxth	r2, r3
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	801a      	strh	r2, [r3, #0]
 800713a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10a      	bne.n	8007158 <USB_EPStartXfer+0x158>
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	b29b      	uxth	r3, r3
 8007148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007150:	b29a      	uxth	r2, r3
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	801a      	strh	r2, [r3, #0]
 8007156:	e05b      	b.n	8007210 <USB_EPStartXfer+0x210>
 8007158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800715c:	2b3e      	cmp	r3, #62	@ 0x3e
 800715e:	d81c      	bhi.n	800719a <USB_EPStartXfer+0x19a>
 8007160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007164:	085b      	lsrs	r3, r3, #1
 8007166:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800716a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d004      	beq.n	8007180 <USB_EPStartXfer+0x180>
 8007176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800717a:	3301      	adds	r3, #1
 800717c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29a      	uxth	r2, r3
 8007186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800718a:	b29b      	uxth	r3, r3
 800718c:	029b      	lsls	r3, r3, #10
 800718e:	b29b      	uxth	r3, r3
 8007190:	4313      	orrs	r3, r2
 8007192:	b29a      	uxth	r2, r3
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	801a      	strh	r2, [r3, #0]
 8007198:	e03a      	b.n	8007210 <USB_EPStartXfer+0x210>
 800719a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <USB_EPStartXfer+0x1ba>
 80071b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071b4:	3b01      	subs	r3, #1
 80071b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	029b      	lsls	r3, r3, #10
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	4313      	orrs	r3, r2
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071da:	801a      	strh	r2, [r3, #0]
 80071dc:	e018      	b.n	8007210 <USB_EPStartXfer+0x210>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d114      	bne.n	8007210 <USB_EPStartXfer+0x210>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	461a      	mov	r2, r3
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	4413      	add	r3, r2
 80071f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	00da      	lsls	r2, r3, #3
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	4413      	add	r3, r2
 8007200:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800720a:	b29a      	uxth	r2, r3
 800720c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	895b      	ldrh	r3, [r3, #10]
 8007214:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	6959      	ldr	r1, [r3, #20]
 800721c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007220:	b29b      	uxth	r3, r3
 8007222:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fde3 	bl	8007df2 <USB_WritePMA>
            ep->xfer_buff += len;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	695a      	ldr	r2, [r3, #20]
 8007230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007234:	441a      	add	r2, r3
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	6a1a      	ldr	r2, [r3, #32]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	429a      	cmp	r2, r3
 8007244:	d907      	bls.n	8007256 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	6a1a      	ldr	r2, [r3, #32]
 800724a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800724e:	1ad2      	subs	r2, r2, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	621a      	str	r2, [r3, #32]
 8007254:	e006      	b.n	8007264 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2200      	movs	r2, #0
 8007262:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d16b      	bne.n	8007344 <USB_EPStartXfer+0x344>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	61bb      	str	r3, [r7, #24]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007276:	b29b      	uxth	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	4413      	add	r3, r2
 800727e:	61bb      	str	r3, [r7, #24]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	00da      	lsls	r2, r3, #3
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	4413      	add	r3, r2
 800728a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29b      	uxth	r3, r3
 8007296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800729a:	b29a      	uxth	r2, r3
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	801a      	strh	r2, [r3, #0]
 80072a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <USB_EPStartXfer+0x2be>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	801a      	strh	r2, [r3, #0]
 80072bc:	e05d      	b.n	800737a <USB_EPStartXfer+0x37a>
 80072be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80072c4:	d81c      	bhi.n	8007300 <USB_EPStartXfer+0x300>
 80072c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <USB_EPStartXfer+0x2e6>
 80072dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072e0:	3301      	adds	r3, #1
 80072e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	029b      	lsls	r3, r3, #10
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	4313      	orrs	r3, r2
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	801a      	strh	r2, [r3, #0]
 80072fe:	e03c      	b.n	800737a <USB_EPStartXfer+0x37a>
 8007300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800730a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800730e:	f003 031f 	and.w	r3, r3, #31
 8007312:	2b00      	cmp	r3, #0
 8007314:	d104      	bne.n	8007320 <USB_EPStartXfer+0x320>
 8007316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800731a:	3b01      	subs	r3, #1
 800731c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	b29a      	uxth	r2, r3
 8007326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800732a:	b29b      	uxth	r3, r3
 800732c:	029b      	lsls	r3, r3, #10
 800732e:	b29b      	uxth	r3, r3
 8007330:	4313      	orrs	r3, r2
 8007332:	b29b      	uxth	r3, r3
 8007334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800733c:	b29a      	uxth	r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	e01a      	b.n	800737a <USB_EPStartXfer+0x37a>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d116      	bne.n	800737a <USB_EPStartXfer+0x37a>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	623b      	str	r3, [r7, #32]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007356:	b29b      	uxth	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	4413      	add	r3, r2
 800735e:	623b      	str	r3, [r7, #32]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	00da      	lsls	r2, r3, #3
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	4413      	add	r3, r2
 800736a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800736e:	61fb      	str	r3, [r7, #28]
 8007370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007374:	b29a      	uxth	r2, r3
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	891b      	ldrh	r3, [r3, #8]
 800737e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6959      	ldr	r1, [r3, #20]
 8007386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800738a:	b29b      	uxth	r3, r3
 800738c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fd2e 	bl	8007df2 <USB_WritePMA>
 8007396:	e2e2      	b.n	800795e <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	785b      	ldrb	r3, [r3, #1]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d16b      	bne.n	8007478 <USB_EPStartXfer+0x478>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073b0:	4413      	add	r3, r2
 80073b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	00da      	lsls	r2, r3, #3
 80073ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073bc:	4413      	add	r3, r2
 80073be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80073c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <USB_EPStartXfer+0x3f2>
 80073dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e05d      	b.n	80074ae <USB_EPStartXfer+0x4ae>
 80073f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80073f8:	d81c      	bhi.n	8007434 <USB_EPStartXfer+0x434>
 80073fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <USB_EPStartXfer+0x41a>
 8007410:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007414:	3301      	adds	r3, #1
 8007416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800741a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29a      	uxth	r2, r3
 8007420:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007424:	b29b      	uxth	r3, r3
 8007426:	029b      	lsls	r3, r3, #10
 8007428:	b29b      	uxth	r3, r3
 800742a:	4313      	orrs	r3, r2
 800742c:	b29a      	uxth	r2, r3
 800742e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007430:	801a      	strh	r2, [r3, #0]
 8007432:	e03c      	b.n	80074ae <USB_EPStartXfer+0x4ae>
 8007434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800743e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007442:	f003 031f 	and.w	r3, r3, #31
 8007446:	2b00      	cmp	r3, #0
 8007448:	d104      	bne.n	8007454 <USB_EPStartXfer+0x454>
 800744a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800744e:	3b01      	subs	r3, #1
 8007450:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29a      	uxth	r2, r3
 800745a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800745e:	b29b      	uxth	r3, r3
 8007460:	029b      	lsls	r3, r3, #10
 8007462:	b29b      	uxth	r3, r3
 8007464:	4313      	orrs	r3, r2
 8007466:	b29b      	uxth	r3, r3
 8007468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007470:	b29a      	uxth	r2, r3
 8007472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	e01a      	b.n	80074ae <USB_EPStartXfer+0x4ae>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	785b      	ldrb	r3, [r3, #1]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d116      	bne.n	80074ae <USB_EPStartXfer+0x4ae>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	653b      	str	r3, [r7, #80]	@ 0x50
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800748a:	b29b      	uxth	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007490:	4413      	add	r3, r2
 8007492:	653b      	str	r3, [r7, #80]	@ 0x50
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	00da      	lsls	r2, r3, #3
 800749a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800749c:	4413      	add	r3, r2
 800749e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	891b      	ldrh	r3, [r3, #8]
 80074b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	6959      	ldr	r1, [r3, #20]
 80074ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074be:	b29b      	uxth	r3, r3
 80074c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fc94 	bl	8007df2 <USB_WritePMA>
            ep->xfer_buff += len;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	695a      	ldr	r2, [r3, #20]
 80074ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074d2:	441a      	add	r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	6a1a      	ldr	r2, [r3, #32]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d907      	bls.n	80074f4 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	6a1a      	ldr	r2, [r3, #32]
 80074e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074ec:	1ad2      	subs	r2, r2, r3
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	621a      	str	r2, [r3, #32]
 80074f2:	e006      	b.n	8007502 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2200      	movs	r2, #0
 8007500:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	643b      	str	r3, [r7, #64]	@ 0x40
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d16b      	bne.n	80075e6 <USB_EPStartXfer+0x5e6>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007518:	b29b      	uxth	r3, r3
 800751a:	461a      	mov	r2, r3
 800751c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751e:	4413      	add	r3, r2
 8007520:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	00da      	lsls	r2, r3, #3
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	4413      	add	r3, r2
 800752c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007530:	637b      	str	r3, [r7, #52]	@ 0x34
 8007532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800753c:	b29a      	uxth	r2, r3
 800753e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10a      	bne.n	8007560 <USB_EPStartXfer+0x560>
 800754a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29b      	uxth	r3, r3
 8007550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007558:	b29a      	uxth	r2, r3
 800755a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755c:	801a      	strh	r2, [r3, #0]
 800755e:	e05b      	b.n	8007618 <USB_EPStartXfer+0x618>
 8007560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007564:	2b3e      	cmp	r3, #62	@ 0x3e
 8007566:	d81c      	bhi.n	80075a2 <USB_EPStartXfer+0x5a2>
 8007568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d004      	beq.n	8007588 <USB_EPStartXfer+0x588>
 800757e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007582:	3301      	adds	r3, #1
 8007584:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29a      	uxth	r2, r3
 800758e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007592:	b29b      	uxth	r3, r3
 8007594:	029b      	lsls	r3, r3, #10
 8007596:	b29b      	uxth	r3, r3
 8007598:	4313      	orrs	r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	e03a      	b.n	8007618 <USB_EPStartXfer+0x618>
 80075a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075b0:	f003 031f 	and.w	r3, r3, #31
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <USB_EPStartXfer+0x5c2>
 80075b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075bc:	3b01      	subs	r3, #1
 80075be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	029b      	lsls	r3, r3, #10
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	4313      	orrs	r3, r2
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075de:	b29a      	uxth	r2, r3
 80075e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	e018      	b.n	8007618 <USB_EPStartXfer+0x618>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d114      	bne.n	8007618 <USB_EPStartXfer+0x618>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075fa:	4413      	add	r3, r2
 80075fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	00da      	lsls	r2, r3, #3
 8007604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007606:	4413      	add	r3, r2
 8007608:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800760c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800760e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007612:	b29a      	uxth	r2, r3
 8007614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007616:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	895b      	ldrh	r3, [r3, #10]
 800761c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	6959      	ldr	r1, [r3, #20]
 8007624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007628:	b29b      	uxth	r3, r3
 800762a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fbdf 	bl	8007df2 <USB_WritePMA>
 8007634:	e193      	b.n	800795e <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007654:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	441a      	add	r2, r3
 8007662:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800766a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800766e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007676:	b29b      	uxth	r3, r3
 8007678:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007684:	b29b      	uxth	r3, r3
 8007686:	461a      	mov	r2, r3
 8007688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800768a:	4413      	add	r3, r2
 800768c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	00da      	lsls	r2, r3, #3
 8007694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007696:	4413      	add	r3, r2
 8007698:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800769c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800769e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	891b      	ldrh	r3, [r3, #8]
 80076ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	6959      	ldr	r1, [r3, #20]
 80076b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fb97 	bl	8007df2 <USB_WritePMA>
 80076c4:	e14b      	b.n	800795e <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	6a1a      	ldr	r2, [r3, #32]
 80076ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ce:	1ad2      	subs	r2, r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 809a 	beq.w	8007820 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d16b      	bne.n	80077d0 <USB_EPStartXfer+0x7d0>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007702:	b29b      	uxth	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007708:	4413      	add	r3, r2
 800770a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	00da      	lsls	r2, r3, #3
 8007712:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007714:	4413      	add	r3, r2
 8007716:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800771a:	667b      	str	r3, [r7, #100]	@ 0x64
 800771c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007726:	b29a      	uxth	r2, r3
 8007728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <USB_EPStartXfer+0x74a>
 8007734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800773e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007742:	b29a      	uxth	r2, r3
 8007744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	e05b      	b.n	8007802 <USB_EPStartXfer+0x802>
 800774a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800774e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007750:	d81c      	bhi.n	800778c <USB_EPStartXfer+0x78c>
 8007752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800775c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d004      	beq.n	8007772 <USB_EPStartXfer+0x772>
 8007768:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800776c:	3301      	adds	r3, #1
 800776e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007772:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29a      	uxth	r2, r3
 8007778:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800777c:	b29b      	uxth	r3, r3
 800777e:	029b      	lsls	r3, r3, #10
 8007780:	b29b      	uxth	r3, r3
 8007782:	4313      	orrs	r3, r2
 8007784:	b29a      	uxth	r2, r3
 8007786:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007788:	801a      	strh	r2, [r3, #0]
 800778a:	e03a      	b.n	8007802 <USB_EPStartXfer+0x802>
 800778c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007790:	095b      	lsrs	r3, r3, #5
 8007792:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <USB_EPStartXfer+0x7ac>
 80077a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077a6:	3b01      	subs	r3, #1
 80077a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	029b      	lsls	r3, r3, #10
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	4313      	orrs	r3, r2
 80077be:	b29b      	uxth	r3, r3
 80077c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e018      	b.n	8007802 <USB_EPStartXfer+0x802>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	785b      	ldrb	r3, [r3, #1]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d114      	bne.n	8007802 <USB_EPStartXfer+0x802>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077de:	b29b      	uxth	r3, r3
 80077e0:	461a      	mov	r2, r3
 80077e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077e4:	4413      	add	r3, r2
 80077e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	00da      	lsls	r2, r3, #3
 80077ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077f0:	4413      	add	r3, r2
 80077f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007800:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	895b      	ldrh	r3, [r3, #10]
 8007806:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	6959      	ldr	r1, [r3, #20]
 800780e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007812:	b29b      	uxth	r3, r3
 8007814:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 faea 	bl	8007df2 <USB_WritePMA>
 800781e:	e09e      	b.n	800795e <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d16b      	bne.n	8007900 <USB_EPStartXfer+0x900>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007832:	b29b      	uxth	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007838:	4413      	add	r3, r2
 800783a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	00da      	lsls	r2, r3, #3
 8007842:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007844:	4413      	add	r3, r2
 8007846:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800784a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800784c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007856:	b29a      	uxth	r2, r3
 8007858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800785a:	801a      	strh	r2, [r3, #0]
 800785c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10a      	bne.n	800787a <USB_EPStartXfer+0x87a>
 8007864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800786e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007872:	b29a      	uxth	r2, r3
 8007874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007876:	801a      	strh	r2, [r3, #0]
 8007878:	e063      	b.n	8007942 <USB_EPStartXfer+0x942>
 800787a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800787e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007880:	d81c      	bhi.n	80078bc <USB_EPStartXfer+0x8bc>
 8007882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007886:	085b      	lsrs	r3, r3, #1
 8007888:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800788c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d004      	beq.n	80078a2 <USB_EPStartXfer+0x8a2>
 8007898:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800789c:	3301      	adds	r3, #1
 800789e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	029b      	lsls	r3, r3, #10
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	4313      	orrs	r3, r2
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078b8:	801a      	strh	r2, [r3, #0]
 80078ba:	e042      	b.n	8007942 <USB_EPStartXfer+0x942>
 80078bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078c0:	095b      	lsrs	r3, r3, #5
 80078c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ca:	f003 031f 	and.w	r3, r3, #31
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d104      	bne.n	80078dc <USB_EPStartXfer+0x8dc>
 80078d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078d6:	3b01      	subs	r3, #1
 80078d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	029b      	lsls	r3, r3, #10
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	4313      	orrs	r3, r2
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078fc:	801a      	strh	r2, [r3, #0]
 80078fe:	e020      	b.n	8007942 <USB_EPStartXfer+0x942>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	785b      	ldrb	r3, [r3, #1]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d11c      	bne.n	8007942 <USB_EPStartXfer+0x942>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007914:	b29b      	uxth	r3, r3
 8007916:	461a      	mov	r2, r3
 8007918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800791c:	4413      	add	r3, r2
 800791e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	00da      	lsls	r2, r3, #3
 8007928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800792c:	4413      	add	r3, r2
 800792e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007932:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800793a:	b29a      	uxth	r2, r3
 800793c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007940:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	891b      	ldrh	r3, [r3, #8]
 8007946:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6959      	ldr	r1, [r3, #20]
 800794e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007952:	b29b      	uxth	r3, r3
 8007954:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fa4a 	bl	8007df2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29b      	uxth	r3, r3
 800796c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007974:	817b      	strh	r3, [r7, #10]
 8007976:	897b      	ldrh	r3, [r7, #10]
 8007978:	f083 0310 	eor.w	r3, r3, #16
 800797c:	817b      	strh	r3, [r7, #10]
 800797e:	897b      	ldrh	r3, [r7, #10]
 8007980:	f083 0320 	eor.w	r3, r3, #32
 8007984:	817b      	strh	r3, [r7, #10]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	441a      	add	r2, r3
 8007990:	897b      	ldrh	r3, [r7, #10]
 8007992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800799a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800799e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	8013      	strh	r3, [r2, #0]
 80079a6:	e0d5      	b.n	8007b54 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	7b1b      	ldrb	r3, [r3, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d156      	bne.n	8007a5e <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d122      	bne.n	80079fe <USB_EPStartXfer+0x9fe>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	78db      	ldrb	r3, [r3, #3]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d11e      	bne.n	80079fe <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079d6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	441a      	add	r2, r3
 80079e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80079e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079f0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80079f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	8013      	strh	r3, [r2, #0]
 80079fc:	e01d      	b.n	8007a3a <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a14:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	441a      	add	r2, r3
 8007a22:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d907      	bls.n	8007a56 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	699a      	ldr	r2, [r3, #24]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	619a      	str	r2, [r3, #24]
 8007a54:	e054      	b.n	8007b00 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	619a      	str	r2, [r3, #24]
 8007a5c:	e050      	b.n	8007b00 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	78db      	ldrb	r3, [r3, #3]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d142      	bne.n	8007aec <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d048      	beq.n	8007b00 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a7e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d005      	beq.n	8007a96 <USB_EPStartXfer+0xa96>
 8007a8a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10b      	bne.n	8007aae <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a96:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d12e      	bne.n	8007b00 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007aa2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d128      	bne.n	8007b00 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ac4:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	441a      	add	r2, r3
 8007ad2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007ad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ae2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	8013      	strh	r3, [r2, #0]
 8007aea:	e009      	b.n	8007b00 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	78db      	ldrb	r3, [r3, #3]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d103      	bne.n	8007afc <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2200      	movs	r2, #0
 8007af8:	619a      	str	r2, [r3, #24]
 8007afa:	e001      	b.n	8007b00 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e02a      	b.n	8007b56 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b16:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b1e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b22:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b2e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	441a      	add	r2, r3
 8007b3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	37b0      	adds	r7, #176	@ 0xb0
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	785b      	ldrb	r3, [r3, #1]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d020      	beq.n	8007bb2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b86:	81bb      	strh	r3, [r7, #12]
 8007b88:	89bb      	ldrh	r3, [r7, #12]
 8007b8a:	f083 0310 	eor.w	r3, r3, #16
 8007b8e:	81bb      	strh	r3, [r7, #12]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	441a      	add	r2, r3
 8007b9a:	89bb      	ldrh	r3, [r7, #12]
 8007b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8013      	strh	r3, [r2, #0]
 8007bb0:	e01f      	b.n	8007bf2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc8:	81fb      	strh	r3, [r7, #14]
 8007bca:	89fb      	ldrh	r3, [r7, #14]
 8007bcc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007bd0:	81fb      	strh	r3, [r7, #14]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	441a      	add	r2, r3
 8007bdc:	89fb      	ldrh	r3, [r7, #14]
 8007bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	785b      	ldrb	r3, [r3, #1]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d04c      	beq.n	8007cac <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	823b      	strh	r3, [r7, #16]
 8007c20:	8a3b      	ldrh	r3, [r7, #16]
 8007c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01b      	beq.n	8007c62 <USB_EPClearStall+0x62>
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c40:	81fb      	strh	r3, [r7, #14]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	441a      	add	r2, r3
 8007c4c:	89fb      	ldrh	r3, [r7, #14]
 8007c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	78db      	ldrb	r3, [r3, #3]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d06c      	beq.n	8007d44 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c80:	81bb      	strh	r3, [r7, #12]
 8007c82:	89bb      	ldrh	r3, [r7, #12]
 8007c84:	f083 0320 	eor.w	r3, r3, #32
 8007c88:	81bb      	strh	r3, [r7, #12]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	441a      	add	r2, r3
 8007c94:	89bb      	ldrh	r3, [r7, #12]
 8007c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	8013      	strh	r3, [r2, #0]
 8007caa:	e04b      	b.n	8007d44 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	82fb      	strh	r3, [r7, #22]
 8007cba:	8afb      	ldrh	r3, [r7, #22]
 8007cbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01b      	beq.n	8007cfc <USB_EPClearStall+0xfc>
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cda:	82bb      	strh	r3, [r7, #20]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	441a      	add	r2, r3
 8007ce6:	8abb      	ldrh	r3, [r7, #20]
 8007ce8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d12:	827b      	strh	r3, [r7, #18]
 8007d14:	8a7b      	ldrh	r3, [r7, #18]
 8007d16:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d1a:	827b      	strh	r3, [r7, #18]
 8007d1c:	8a7b      	ldrh	r3, [r7, #18]
 8007d1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d22:	827b      	strh	r3, [r7, #18]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	441a      	add	r2, r3
 8007d2e:	8a7b      	ldrh	r3, [r7, #18]
 8007d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2280      	movs	r2, #128	@ 0x80
 8007d68:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007de4:	68fb      	ldr	r3, [r7, #12]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b08b      	sub	sp, #44	@ 0x2c
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	60b9      	str	r1, [r7, #8]
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	461a      	mov	r2, r3
 8007e00:	460b      	mov	r3, r1
 8007e02:	80fb      	strh	r3, [r7, #6]
 8007e04:	4613      	mov	r3, r2
 8007e06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e08:	88bb      	ldrh	r3, [r7, #4]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	085b      	lsrs	r3, r3, #1
 8007e0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e18:	88fa      	ldrh	r2, [r7, #6]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e22:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e28:	e01c      	b.n	8007e64 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	3301      	adds	r3, #1
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	b21b      	sxth	r3, r3
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	b21a      	sxth	r2, r3
 8007e3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	b21b      	sxth	r3, r3
 8007e44:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	8a7a      	ldrh	r2, [r7, #18]
 8007e4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	3302      	adds	r3, #2
 8007e50:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	3301      	adds	r3, #1
 8007e56:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	3b01      	subs	r3, #1
 8007e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1df      	bne.n	8007e2a <USB_WritePMA+0x38>
  }
}
 8007e6a:	bf00      	nop
 8007e6c:	bf00      	nop
 8007e6e:	372c      	adds	r7, #44	@ 0x2c
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b08b      	sub	sp, #44	@ 0x2c
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4611      	mov	r1, r2
 8007e84:	461a      	mov	r2, r3
 8007e86:	460b      	mov	r3, r1
 8007e88:	80fb      	strh	r3, [r7, #6]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e8e:	88bb      	ldrh	r3, [r7, #4]
 8007e90:	085b      	lsrs	r3, r3, #1
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e9e:	88fa      	ldrh	r2, [r7, #6]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ea8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eae:	e018      	b.n	8007ee2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	3302      	adds	r3, #2
 8007ebc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	0a1b      	lsrs	r3, r3, #8
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e3      	bne.n	8007eb0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ee8:	88bb      	ldrh	r3, [r7, #4]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d007      	beq.n	8007f04 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	701a      	strb	r2, [r3, #0]
  }
}
 8007f04:	bf00      	nop
 8007f06:	372c      	adds	r7, #44	@ 0x2c
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <__NVIC_SystemReset>:
{
 8007f10:	b480      	push	{r7}
 8007f12:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007f14:	f3bf 8f4f 	dsb	sy
}
 8007f18:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007f1a:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <__NVIC_SystemReset+0x24>)
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007f22:	4904      	ldr	r1, [pc, #16]	@ (8007f34 <__NVIC_SystemReset+0x24>)
 8007f24:	4b04      	ldr	r3, [pc, #16]	@ (8007f38 <__NVIC_SystemReset+0x28>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007f2a:	f3bf 8f4f 	dsb	sy
}
 8007f2e:	bf00      	nop
    __NOP();
 8007f30:	bf00      	nop
 8007f32:	e7fd      	b.n	8007f30 <__NVIC_SystemReset+0x20>
 8007f34:	e000ed00 	.word	0xe000ed00
 8007f38:	05fa0004 	.word	0x05fa0004

08007f3c <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8007f48:	f240 401c 	movw	r0, #1052	@ 0x41c
 8007f4c:	f002 fb92 	bl	800a674 <USBD_static_malloc>
 8007f50:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d105      	bne.n	8007f64 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f60:	2302      	movs	r3, #2
 8007f62:	e03f      	b.n	8007fe4 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007f7a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	4798      	blx	r3
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e000      	b.n	8007fe4 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8008002:	2302      	movs	r3, #2
 8008004:	e027      	b.n	8008056 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800800c:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2202      	movs	r2, #2
 8008032:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008046:	4618      	mov	r0, r3
 8008048:	f002 fb22 	bl	800a690 <USBD_static_free>
  pdev->pClassData = NULL;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b088      	sub	sp, #32
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008070:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008088:	2303      	movs	r3, #3
 800808a:	e0d5      	b.n	8008238 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008094:	2b00      	cmp	r3, #0
 8008096:	d03e      	beq.n	8008116 <USBD_DFU_Setup+0xb6>
 8008098:	2b20      	cmp	r3, #32
 800809a:	f040 80c5 	bne.w	8008228 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	785b      	ldrb	r3, [r3, #1]
 80080a2:	2b06      	cmp	r3, #6
 80080a4:	d82f      	bhi.n	8008106 <USBD_DFU_Setup+0xa6>
 80080a6:	a201      	add	r2, pc, #4	@ (adr r2, 80080ac <USBD_DFU_Setup+0x4c>)
 80080a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ac:	080080fd 	.word	0x080080fd
 80080b0:	080080c9 	.word	0x080080c9
 80080b4:	080080d3 	.word	0x080080d3
 80080b8:	080080dd 	.word	0x080080dd
 80080bc:	080080e5 	.word	0x080080e5
 80080c0:	080080ed 	.word	0x080080ed
 80080c4:	080080f5 	.word	0x080080f5
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa6c 	bl	80085a8 <DFU_Download>
          break;
 80080d0:	e020      	b.n	8008114 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fad3 	bl	8008680 <DFU_Upload>
          break;
 80080da:	e01b      	b.n	8008114 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fba9 	bl	8008834 <DFU_GetStatus>
          break;
 80080e2:	e017      	b.n	8008114 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fc5b 	bl	80089a0 <DFU_ClearStatus>
          break;
 80080ea:	e013      	b.n	8008114 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fcab 	bl	8008a48 <DFU_GetState>
          break;
 80080f2:	e00f      	b.n	8008114 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fcbf 	bl	8008a78 <DFU_Abort>
          break;
 80080fa:	e00b      	b.n	8008114 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f9ee 	bl	80084e0 <DFU_Detach>
          break;
 8008104:	e006      	b.n	8008114 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 fdb1 	bl	8009c70 <USBD_CtlError>
          ret = USBD_FAIL;
 800810e:	2303      	movs	r3, #3
 8008110:	77fb      	strb	r3, [r7, #31]
          break;
 8008112:	bf00      	nop
      }
      break;
 8008114:	e08f      	b.n	8008236 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	2b0b      	cmp	r3, #11
 800811c:	d87b      	bhi.n	8008216 <USBD_DFU_Setup+0x1b6>
 800811e:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <USBD_DFU_Setup+0xc4>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	08008155 	.word	0x08008155
 8008128:	08008225 	.word	0x08008225
 800812c:	08008217 	.word	0x08008217
 8008130:	08008217 	.word	0x08008217
 8008134:	08008217 	.word	0x08008217
 8008138:	08008217 	.word	0x08008217
 800813c:	0800817f 	.word	0x0800817f
 8008140:	08008217 	.word	0x08008217
 8008144:	08008217 	.word	0x08008217
 8008148:	08008217 	.word	0x08008217
 800814c:	080081a9 	.word	0x080081a9
 8008150:	080081d5 	.word	0x080081d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b03      	cmp	r3, #3
 800815e:	d107      	bne.n	8008170 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008160:	f107 030e 	add.w	r3, r7, #14
 8008164:	2202      	movs	r2, #2
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 fdf2 	bl	8009d52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800816e:	e05a      	b.n	8008226 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 fd7c 	bl	8009c70 <USBD_CtlError>
            ret = USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	77fb      	strb	r3, [r7, #31]
          break;
 800817c:	e053      	b.n	8008226 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	885b      	ldrh	r3, [r3, #2]
 8008182:	0a1b      	lsrs	r3, r3, #8
 8008184:	b29b      	uxth	r3, r3
 8008186:	2b21      	cmp	r3, #33	@ 0x21
 8008188:	d107      	bne.n	800819a <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800818a:	4b2d      	ldr	r3, [pc, #180]	@ (8008240 <USBD_DFU_Setup+0x1e0>)
 800818c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	88db      	ldrh	r3, [r3, #6]
 8008192:	2b09      	cmp	r3, #9
 8008194:	bf28      	it	cs
 8008196:	2309      	movcs	r3, #9
 8008198:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800819a:	8afb      	ldrh	r3, [r7, #22]
 800819c:	461a      	mov	r2, r3
 800819e:	69b9      	ldr	r1, [r7, #24]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fdd6 	bl	8009d52 <USBD_CtlSendData>
          break;
 80081a6:	e03e      	b.n	8008226 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d108      	bne.n	80081c6 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081ba:	2201      	movs	r2, #1
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f001 fdc7 	bl	8009d52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081c4:	e02f      	b.n	8008226 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 fd51 	bl	8009c70 <USBD_CtlError>
            ret = USBD_FAIL;
 80081ce:	2303      	movs	r3, #3
 80081d0:	77fb      	strb	r3, [r7, #31]
          break;
 80081d2:	e028      	b.n	8008226 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	885b      	ldrh	r3, [r3, #2]
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d114      	bne.n	8008208 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d107      	bne.n	80081fa <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	885b      	ldrh	r3, [r3, #2]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	461a      	mov	r2, r3
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081f8:	e015      	b.n	8008226 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 fd37 	bl	8009c70 <USBD_CtlError>
              ret = USBD_FAIL;
 8008202:	2303      	movs	r3, #3
 8008204:	77fb      	strb	r3, [r7, #31]
          break;
 8008206:	e00e      	b.n	8008226 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 fd30 	bl	8009c70 <USBD_CtlError>
            ret = USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	77fb      	strb	r3, [r7, #31]
          break;
 8008214:	e007      	b.n	8008226 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 fd29 	bl	8009c70 <USBD_CtlError>
          ret = USBD_FAIL;
 800821e:	2303      	movs	r3, #3
 8008220:	77fb      	strb	r3, [r7, #31]
          break;
 8008222:	e000      	b.n	8008226 <USBD_DFU_Setup+0x1c6>
          break;
 8008224:	bf00      	nop
      }
      break;
 8008226:	e006      	b.n	8008236 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 fd20 	bl	8009c70 <USBD_CtlError>
      ret = USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	77fb      	strb	r3, [r7, #31]
      break;
 8008234:	bf00      	nop
  }

  return (uint8_t)ret;
 8008236:	7ffb      	ldrb	r3, [r7, #31]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20000062 	.word	0x20000062

08008244 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	221b      	movs	r2, #27
 8008250:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8008252:	4b03      	ldr	r3, [pc, #12]	@ (8008260 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	20000050 	.word	0x20000050

08008264 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b088      	sub	sp, #32
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008288:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008290:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008298:	2303      	movs	r3, #3
 800829a:	e0ce      	b.n	800843a <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	f040 80bd 	bne.w	8008422 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d17c      	bne.n	80083ac <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	f000 8093 	beq.w	80083e4 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80082c4:	2b05      	cmp	r3, #5
 80082c6:	d15e      	bne.n	8008386 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b21      	cmp	r3, #33	@ 0x21
 80082ce:	d124      	bne.n	800831a <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	785b      	ldrb	r3, [r3, #1]
 80082d4:	461a      	mov	r2, r3
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	789b      	ldrb	r3, [r3, #2]
 80082e6:	021b      	lsls	r3, r3, #8
 80082e8:	441a      	add	r2, r3
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	78db      	ldrb	r3, [r3, #3]
 80082fa:	041b      	lsls	r3, r3, #16
 80082fc:	441a      	add	r2, r3
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	791b      	ldrb	r3, [r3, #4]
 800830e:	061b      	lsls	r3, r3, #24
 8008310:	441a      	add	r2, r3
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8008318:	e064      	b.n	80083e4 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	2b41      	cmp	r3, #65	@ 0x41
 8008320:	d12f      	bne.n	8008382 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	785b      	ldrb	r3, [r3, #1]
 8008326:	461a      	mov	r2, r3
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	789b      	ldrb	r3, [r3, #2]
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	441a      	add	r2, r3
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	78db      	ldrb	r3, [r3, #3]
 800834c:	041b      	lsls	r3, r3, #16
 800834e:	441a      	add	r2, r3
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	791b      	ldrb	r3, [r3, #4]
 8008360:	061b      	lsls	r3, r3, #24
 8008362:	441a      	add	r2, r3
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d032      	beq.n	80083e4 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 800837e:	2303      	movs	r3, #3
 8008380:	e05b      	b.n	800843a <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8008382:	2303      	movs	r3, #3
 8008384:	e059      	b.n	800843a <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2200      	movs	r2, #0
 800838a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	2200      	movs	r2, #0
 8008392:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800839a:	2301      	movs	r3, #1
 800839c:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800839e:	f107 030c 	add.w	r3, r7, #12
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 fc63 	bl	8009c70 <USBD_CtlError>
 80083aa:	e01b      	b.n	80083e4 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d916      	bls.n	80083e4 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80083bc:	3b02      	subs	r3, #2
 80083be:	029a      	lsls	r2, r3, #10
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80083c6:	4413      	add	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	69f8      	ldr	r0, [r7, #28]
 80083d0:	6979      	ldr	r1, [r7, #20]
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e02a      	b.n	800843a <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	2203      	movs	r2, #3
 80083f8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008420:	e00a      	b.n	8008438 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008428:	2b07      	cmp	r3, #7
 800842a:	d103      	bne.n	8008434 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fb75 	bl	8008b1c <DFU_Leave>
 8008432:	e001      	b.n	8008438 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8008434:	2303      	movs	r3, #3
 8008436:	e000      	b.n	800843a <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	220a      	movs	r2, #10
 8008464:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8008466:	4b03      	ldr	r3, [pc, #12]	@ (8008474 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	2000006c 	.word	0x2000006c

08008478 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	460b      	mov	r3, r1
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800848c:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800848e:	7afb      	ldrb	r3, [r7, #11]
 8008490:	2b06      	cmp	r3, #6
 8008492:	d808      	bhi.n	80084a6 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	4905      	ldr	r1, [pc, #20]	@ (80084b0 <USBD_DFU_GetUsrStringDesc+0x38>)
 800849c:	4618      	mov	r0, r3
 800849e:	f001 fbf8 	bl	8009c92 <USBD_GetString>
    return USBD_StrDesc;
 80084a2:	4b03      	ldr	r3, [pc, #12]	@ (80084b0 <USBD_DFU_GetUsrStringDesc+0x38>)
 80084a4:	e000      	b.n	80084a8 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80084a6:	2300      	movs	r3, #0
  }
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	200001d4 	.word	0x200001d4

080084b4 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e004      	b.n	80084d2 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
	...

080084e0 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084f0:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d051      	beq.n	800859c <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d013      	beq.n	800852a <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008508:	2b03      	cmp	r3, #3
 800850a:	d00e      	beq.n	800852a <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008512:	2b05      	cmp	r3, #5
 8008514:	d009      	beq.n	800852a <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800851c:	2b06      	cmp	r3, #6
 800851e:	d004      	beq.n	800852a <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008526:	2b09      	cmp	r3, #9
 8008528:	d125      	bne.n	8008576 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2202      	movs	r2, #2
 800852e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8008576:	4b0b      	ldr	r3, [pc, #44]	@ (80085a4 <DFU_Detach+0xc4>)
 8008578:	7d5b      	ldrb	r3, [r3, #21]
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b00      	cmp	r3, #0
 8008580:	d006      	beq.n	8008590 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fb7b 	bl	8008c7e <USBD_Stop>
    (void)USBD_Start(pdev);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fb6c 	bl	8008c66 <USBD_Start>
 800858e:	e006      	b.n	800859e <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	885b      	ldrh	r3, [r3, #2]
 8008594:	4618      	mov	r0, r3
 8008596:	f7f8 fac5 	bl	8000b24 <HAL_Delay>
 800859a:	e000      	b.n	800859e <DFU_Detach+0xbe>
    return;
 800859c:	bf00      	nop
  }
}
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	20000050 	.word	0x20000050

080085a8 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085b8:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d05b      	beq.n	8008678 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	88db      	ldrh	r3, [r3, #6]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d02d      	beq.n	8008624 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d004      	beq.n	80085dc <DFU_Download+0x34>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80085d8:	2b05      	cmp	r3, #5
 80085da:	d11e      	bne.n	800861a <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	885b      	ldrh	r3, [r3, #2]
 80085e0:	461a      	mov	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	88db      	ldrh	r3, [r3, #6]
 80085ec:	461a      	mov	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2203      	movs	r2, #3
 80085f8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008608:	68f9      	ldr	r1, [r7, #12]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008610:	461a      	mov	r2, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f001 fbc9 	bl	8009daa <USBD_CtlPrepareRx>
 8008618:	e02f      	b.n	800867a <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 fb27 	bl	8009c70 <USBD_CtlError>
 8008622:	e02a      	b.n	800867a <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800862a:	2b05      	cmp	r3, #5
 800862c:	d004      	beq.n	8008638 <DFU_Download+0x90>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008634:	2b02      	cmp	r3, #2
 8008636:	d11a      	bne.n	800866e <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2206      	movs	r2, #6
 8008644:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800866c:	e005      	b.n	800867a <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 fafd 	bl	8009c70 <USBD_CtlError>
 8008676:	e000      	b.n	800867a <DFU_Download+0xd2>
    return;
 8008678:	bf00      	nop
    }
  }
}
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008690:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008698:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80c4 	beq.w	800882a <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	88db      	ldrh	r3, [r3, #6]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 80a8 	beq.w	80087fc <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d005      	beq.n	80086c2 <DFU_Upload+0x42>
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80086bc:	2b09      	cmp	r3, #9
 80086be:	f040 8090 	bne.w	80087e2 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	885b      	ldrh	r3, [r3, #2]
 80086c6:	461a      	mov	r2, r3
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	88db      	ldrh	r3, [r3, #6]
 80086d2:	461a      	mov	r2, r3
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d12c      	bne.n	800873e <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d901      	bls.n	80086f2 <DFU_Upload+0x72>
 80086ee:	2202      	movs	r2, #2
 80086f0:	e000      	b.n	80086f4 <DFU_Upload+0x74>
 80086f2:	2209      	movs	r2, #9
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2200      	movs	r2, #0
 8008722:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2221      	movs	r2, #33	@ 0x21
 8008728:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2241      	movs	r2, #65	@ 0x41
 800872e:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	2203      	movs	r2, #3
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fb0b 	bl	8009d52 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800873c:	e076      	b.n	800882c <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008744:	2b01      	cmp	r3, #1
 8008746:	d931      	bls.n	80087ac <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2209      	movs	r2, #9
 800874c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800877a:	3b02      	subs	r3, #2
 800877c:	029a      	lsls	r2, r3, #10
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8008784:	4413      	add	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	6979      	ldr	r1, [r7, #20]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8008796:	4798      	blx	r3
 8008798:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80087a0:	461a      	mov	r2, r3
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 fad4 	bl	8009d52 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80087aa:	e03f      	b.n	800882c <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	220f      	movs	r2, #15
 80087b0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 fa48 	bl	8009c70 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80087e0:	e024      	b.n	800882c <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 fa3b 	bl	8009c70 <USBD_CtlError>
 80087fa:	e017      	b.n	800882c <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008828:	e000      	b.n	800882c <DFU_Upload+0x1ac>
    return;
 800882a:	bf00      	nop
  }
}
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008842:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800884a:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 80a0 	beq.w	8008994 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800885a:	2b03      	cmp	r3, #3
 800885c:	d002      	beq.n	8008864 <DFU_GetStatus+0x30>
 800885e:	2b06      	cmp	r3, #6
 8008860:	d051      	beq.n	8008906 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 8008862:	e08e      	b.n	8008982 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800886a:	2b00      	cmp	r3, #0
 800886c:	d034      	beq.n	80088d8 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2204      	movs	r2, #4
 8008872:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10e      	bne.n	80088c2 <DFU_GetStatus+0x8e>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b41      	cmp	r3, #65	@ 0x41
 80088aa:	d10a      	bne.n	80088c2 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80088bc:	2100      	movs	r1, #0
 80088be:	4798      	blx	r3
      break;
 80088c0:	e05f      	b.n	8008982 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80088d2:	2101      	movs	r1, #1
 80088d4:	4798      	blx	r3
      break;
 80088d6:	e054      	b.n	8008982 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2205      	movs	r2, #5
 80088dc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008904:	e03d      	b.n	8008982 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800890c:	2b01      	cmp	r3, #1
 800890e:	d116      	bne.n	800893e <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2207      	movs	r2, #7
 8008914:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800893c:	e020      	b.n	8008980 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8008944:	2b00      	cmp	r3, #0
 8008946:	d11b      	bne.n	8008980 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8008948:	4b14      	ldr	r3, [pc, #80]	@ (800899c <DFU_GetStatus+0x168>)
 800894a:	7d1b      	ldrb	r3, [r3, #20]
 800894c:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008950:	2b00      	cmp	r3, #0
 8008952:	d015      	beq.n	8008980 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008980:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8008988:	2206      	movs	r2, #6
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 f9e0 	bl	8009d52 <USBD_CtlSendData>
 8008992:	e000      	b.n	8008996 <DFU_GetStatus+0x162>
    return;
 8008994:	bf00      	nop
}
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	20000050 	.word	0x20000050

080089a0 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089ae:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d042      	beq.n	8008a3c <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80089bc:	2b0a      	cmp	r3, #10
 80089be:	d11e      	bne.n	80089fe <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 80089fc:	e01f      	b.n	8008a3e <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	220a      	movs	r2, #10
 8008a02:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	220e      	movs	r2, #14
 8008a0a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8008a3a:	e000      	b.n	8008a3e <DFU_ClearStatus+0x9e>
    return;
 8008a3c:	bf00      	nop
  }
}
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a56:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d008      	beq.n	8008a70 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8008a64:	2201      	movs	r2, #1
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f001 f972 	bl	8009d52 <USBD_CtlSendData>
 8008a6e:	e000      	b.n	8008a72 <DFU_GetState+0x2a>
    return;
 8008a70:	bf00      	nop
}
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a86:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d03f      	beq.n	8008b0e <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d013      	beq.n	8008ac0 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d00e      	beq.n	8008ac0 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008aa8:	2b05      	cmp	r3, #5
 8008aaa:	d009      	beq.n	8008ac0 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008ab2:	2b06      	cmp	r3, #6
 8008ab4:	d004      	beq.n	8008ac0 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008abc:	2b09      	cmp	r3, #9
 8008abe:	d127      	bne.n	8008b10 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8008b0c:	e000      	b.n	8008b10 <DFU_Abort+0x98>
    return;
 8008b0e:	bf00      	nop
  }
}
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
	...

08008b1c <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b2a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d03b      	beq.n	8008baa <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8008b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8008bb4 <DFU_Leave+0x98>)
 8008b3c:	7d1b      	ldrb	r3, [r3, #20]
 8008b3e:	f003 0304 	and.w	r3, r3, #4
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d016      	beq.n	8008b74 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2206      	movs	r2, #6
 8008b4a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 8008b72:	e01b      	b.n	8008bac <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2208      	movs	r2, #8
 8008b78:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f86c 	bl	8008c7e <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8008ba6:	f7ff f9b3 	bl	8007f10 <__NVIC_SystemReset>
    return;
 8008baa:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000050 	.word	0x20000050

08008bb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e01f      	b.n	8008c10 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	79fa      	ldrb	r2, [r7, #7]
 8008c02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f001 fb91 	bl	800a32c <USBD_LL_Init>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3718      	adds	r7, #24
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e016      	b.n	8008c5e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00b      	beq.n	8008c5c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4c:	f107 020e 	add.w	r2, r7, #14
 8008c50:	4610      	mov	r0, r2
 8008c52:	4798      	blx	r3
 8008c54:	4602      	mov	r2, r0
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f001 fba2 	bl	800a3b8 <USBD_LL_Start>
 8008c74:	4603      	mov	r3, r0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f001 fbb1 	bl	800a3ee <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6852      	ldr	r2, [r2, #4]
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	4798      	blx	r3
  }

  return USBD_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d009      	beq.n	8008cf8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	4611      	mov	r1, r2
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	4798      	blx	r3
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d007      	beq.n	8008d28 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	78fa      	ldrb	r2, [r7, #3]
 8008d22:	4611      	mov	r1, r2
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	4798      	blx	r3
  }

  return USBD_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 ff59 	bl	8009bfc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008d58:	461a      	mov	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d66:	f003 031f 	and.w	r3, r3, #31
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d01a      	beq.n	8008da4 <USBD_LL_SetupStage+0x72>
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d822      	bhi.n	8008db8 <USBD_LL_SetupStage+0x86>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <USBD_LL_SetupStage+0x4a>
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d00a      	beq.n	8008d90 <USBD_LL_SetupStage+0x5e>
 8008d7a:	e01d      	b.n	8008db8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f9ef 	bl	8009168 <USBD_StdDevReq>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8e:	e020      	b.n	8008dd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fa53 	bl	8009244 <USBD_StdItfReq>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73fb      	strb	r3, [r7, #15]
      break;
 8008da2:	e016      	b.n	8008dd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fa92 	bl	80092d6 <USBD_StdEPReq>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]
      break;
 8008db6:	e00c      	b.n	8008dd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fb52 	bl	800a470 <USBD_LL_StallEP>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd0:	bf00      	nop
  }

  return ret;
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	460b      	mov	r3, r1
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d138      	bne.n	8008e62 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008df6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d14a      	bne.n	8008e98 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d913      	bls.n	8008e36 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	1ad2      	subs	r2, r2, r3
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	4293      	cmp	r3, r2
 8008e26:	bf28      	it	cs
 8008e28:	4613      	movcs	r3, r2
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 ffd8 	bl	8009de4 <USBD_CtlContinueRx>
 8008e34:	e030      	b.n	8008e98 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d10b      	bne.n	8008e5a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d005      	beq.n	8008e5a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 ffd3 	bl	8009e06 <USBD_CtlSendStatus>
 8008e60:	e01a      	b.n	8008e98 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d114      	bne.n	8008e98 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00e      	beq.n	8008e98 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	7afa      	ldrb	r2, [r7, #11]
 8008e84:	4611      	mov	r1, r2
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	4798      	blx	r3
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	e000      	b.n	8008e9a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	607a      	str	r2, [r7, #4]
 8008eae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008eb0:	7afb      	ldrb	r3, [r7, #11]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d16b      	bne.n	8008f8e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3314      	adds	r3, #20
 8008eba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d156      	bne.n	8008f74 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d914      	bls.n	8008efc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	1ad2      	subs	r2, r2, r3
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f000 ff4d 	bl	8009d88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f001 fb65 	bl	800a5c4 <USBD_LL_PrepareReceive>
 8008efa:	e03b      	b.n	8008f74 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d11c      	bne.n	8008f42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d316      	bcc.n	8008f42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d20f      	bcs.n	8008f42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f22:	2200      	movs	r2, #0
 8008f24:	2100      	movs	r1, #0
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 ff2e 	bl	8009d88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f34:	2300      	movs	r3, #0
 8008f36:	2200      	movs	r2, #0
 8008f38:	2100      	movs	r1, #0
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f001 fb42 	bl	800a5c4 <USBD_LL_PrepareReceive>
 8008f40:	e018      	b.n	8008f74 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b03      	cmp	r3, #3
 8008f4c:	d10b      	bne.n	8008f66 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d005      	beq.n	8008f66 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f66:	2180      	movs	r1, #128	@ 0x80
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f001 fa81 	bl	800a470 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f000 ff5c 	bl	8009e2c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d122      	bne.n	8008fc4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f7ff fe98 	bl	8008cb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008f8c:	e01a      	b.n	8008fc4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d114      	bne.n	8008fc4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00e      	beq.n	8008fc4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	7afa      	ldrb	r2, [r7, #11]
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	4798      	blx	r3
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
 8008fc2:	e000      	b.n	8008fc6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e02f      	b.n	8009062 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00f      	beq.n	800902c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d009      	beq.n	800902c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	6852      	ldr	r2, [r2, #4]
 8009024:	b2d2      	uxtb	r2, r2
 8009026:	4611      	mov	r1, r2
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800902c:	2340      	movs	r3, #64	@ 0x40
 800902e:	2200      	movs	r2, #0
 8009030:	2100      	movs	r1, #0
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 f9f6 	bl	800a424 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2240      	movs	r2, #64	@ 0x40
 8009044:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009048:	2340      	movs	r3, #64	@ 0x40
 800904a:	2200      	movs	r2, #0
 800904c:	2180      	movs	r1, #128	@ 0x80
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 f9e8 	bl	800a424 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2240      	movs	r2, #64	@ 0x40
 800905e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	78fa      	ldrb	r2, [r7, #3]
 800907a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800908a:	b480      	push	{r7}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009098:	b2da      	uxtb	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2204      	movs	r2, #4
 80090a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d106      	bne.n	80090d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e012      	b.n	8009122 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b03      	cmp	r3, #3
 8009106:	d10b      	bne.n	8009120 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800912a:	b480      	push	{r7}
 800912c:	b087      	sub	sp, #28
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	3301      	adds	r3, #1
 8009140:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009148:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	b21a      	sxth	r2, r3
 8009150:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009154:	4313      	orrs	r3, r2
 8009156:	b21b      	sxth	r3, r3
 8009158:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800915a:	89fb      	ldrh	r3, [r7, #14]
}
 800915c:	4618      	mov	r0, r3
 800915e:	371c      	adds	r7, #28
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800917e:	2b40      	cmp	r3, #64	@ 0x40
 8009180:	d005      	beq.n	800918e <USBD_StdDevReq+0x26>
 8009182:	2b40      	cmp	r3, #64	@ 0x40
 8009184:	d853      	bhi.n	800922e <USBD_StdDevReq+0xc6>
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00b      	beq.n	80091a2 <USBD_StdDevReq+0x3a>
 800918a:	2b20      	cmp	r3, #32
 800918c:	d14f      	bne.n	800922e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	4798      	blx	r3
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]
      break;
 80091a0:	e04a      	b.n	8009238 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	785b      	ldrb	r3, [r3, #1]
 80091a6:	2b09      	cmp	r3, #9
 80091a8:	d83b      	bhi.n	8009222 <USBD_StdDevReq+0xba>
 80091aa:	a201      	add	r2, pc, #4	@ (adr r2, 80091b0 <USBD_StdDevReq+0x48>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	08009205 	.word	0x08009205
 80091b4:	08009219 	.word	0x08009219
 80091b8:	08009223 	.word	0x08009223
 80091bc:	0800920f 	.word	0x0800920f
 80091c0:	08009223 	.word	0x08009223
 80091c4:	080091e3 	.word	0x080091e3
 80091c8:	080091d9 	.word	0x080091d9
 80091cc:	08009223 	.word	0x08009223
 80091d0:	080091fb 	.word	0x080091fb
 80091d4:	080091ed 	.word	0x080091ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f9de 	bl	800959c <USBD_GetDescriptor>
          break;
 80091e0:	e024      	b.n	800922c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fb7f 	bl	80098e8 <USBD_SetAddress>
          break;
 80091ea:	e01f      	b.n	800922c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fbbe 	bl	8009970 <USBD_SetConfig>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]
          break;
 80091f8:	e018      	b.n	800922c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fc5d 	bl	8009abc <USBD_GetConfig>
          break;
 8009202:	e013      	b.n	800922c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fc8e 	bl	8009b28 <USBD_GetStatus>
          break;
 800920c:	e00e      	b.n	800922c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fcbd 	bl	8009b90 <USBD_SetFeature>
          break;
 8009216:	e009      	b.n	800922c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fccc 	bl	8009bb8 <USBD_ClrFeature>
          break;
 8009220:	e004      	b.n	800922c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fd23 	bl	8009c70 <USBD_CtlError>
          break;
 800922a:	bf00      	nop
      }
      break;
 800922c:	e004      	b.n	8009238 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fd1d 	bl	8009c70 <USBD_CtlError>
      break;
 8009236:	bf00      	nop
  }

  return ret;
 8009238:	7bfb      	ldrb	r3, [r7, #15]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop

08009244 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800925a:	2b40      	cmp	r3, #64	@ 0x40
 800925c:	d005      	beq.n	800926a <USBD_StdItfReq+0x26>
 800925e:	2b40      	cmp	r3, #64	@ 0x40
 8009260:	d82f      	bhi.n	80092c2 <USBD_StdItfReq+0x7e>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <USBD_StdItfReq+0x26>
 8009266:	2b20      	cmp	r3, #32
 8009268:	d12b      	bne.n	80092c2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009270:	b2db      	uxtb	r3, r3
 8009272:	3b01      	subs	r3, #1
 8009274:	2b02      	cmp	r3, #2
 8009276:	d81d      	bhi.n	80092b4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	889b      	ldrh	r3, [r3, #4]
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b01      	cmp	r3, #1
 8009280:	d813      	bhi.n	80092aa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	4798      	blx	r3
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	88db      	ldrh	r3, [r3, #6]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d110      	bne.n	80092be <USBD_StdItfReq+0x7a>
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10d      	bne.n	80092be <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fdaf 	bl	8009e06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092a8:	e009      	b.n	80092be <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fcdf 	bl	8009c70 <USBD_CtlError>
          break;
 80092b2:	e004      	b.n	80092be <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fcda 	bl	8009c70 <USBD_CtlError>
          break;
 80092bc:	e000      	b.n	80092c0 <USBD_StdItfReq+0x7c>
          break;
 80092be:	bf00      	nop
      }
      break;
 80092c0:	e004      	b.n	80092cc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fcd3 	bl	8009c70 <USBD_CtlError>
      break;
 80092ca:	bf00      	nop
  }

  return ret;
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	889b      	ldrh	r3, [r3, #4]
 80092e8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092f2:	2b40      	cmp	r3, #64	@ 0x40
 80092f4:	d007      	beq.n	8009306 <USBD_StdEPReq+0x30>
 80092f6:	2b40      	cmp	r3, #64	@ 0x40
 80092f8:	f200 8145 	bhi.w	8009586 <USBD_StdEPReq+0x2b0>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00c      	beq.n	800931a <USBD_StdEPReq+0x44>
 8009300:	2b20      	cmp	r3, #32
 8009302:	f040 8140 	bne.w	8009586 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	4798      	blx	r3
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]
      break;
 8009318:	e13a      	b.n	8009590 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	785b      	ldrb	r3, [r3, #1]
 800931e:	2b03      	cmp	r3, #3
 8009320:	d007      	beq.n	8009332 <USBD_StdEPReq+0x5c>
 8009322:	2b03      	cmp	r3, #3
 8009324:	f300 8129 	bgt.w	800957a <USBD_StdEPReq+0x2a4>
 8009328:	2b00      	cmp	r3, #0
 800932a:	d07f      	beq.n	800942c <USBD_StdEPReq+0x156>
 800932c:	2b01      	cmp	r3, #1
 800932e:	d03c      	beq.n	80093aa <USBD_StdEPReq+0xd4>
 8009330:	e123      	b.n	800957a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d002      	beq.n	8009344 <USBD_StdEPReq+0x6e>
 800933e:	2b03      	cmp	r3, #3
 8009340:	d016      	beq.n	8009370 <USBD_StdEPReq+0x9a>
 8009342:	e02c      	b.n	800939e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00d      	beq.n	8009366 <USBD_StdEPReq+0x90>
 800934a:	7bbb      	ldrb	r3, [r7, #14]
 800934c:	2b80      	cmp	r3, #128	@ 0x80
 800934e:	d00a      	beq.n	8009366 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009350:	7bbb      	ldrb	r3, [r7, #14]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 f88b 	bl	800a470 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800935a:	2180      	movs	r1, #128	@ 0x80
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 f887 	bl	800a470 <USBD_LL_StallEP>
 8009362:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009364:	e020      	b.n	80093a8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fc81 	bl	8009c70 <USBD_CtlError>
              break;
 800936e:	e01b      	b.n	80093a8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	885b      	ldrh	r3, [r3, #2]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10e      	bne.n	8009396 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00b      	beq.n	8009396 <USBD_StdEPReq+0xc0>
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	2b80      	cmp	r3, #128	@ 0x80
 8009382:	d008      	beq.n	8009396 <USBD_StdEPReq+0xc0>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	88db      	ldrh	r3, [r3, #6]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d104      	bne.n	8009396 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f001 f86d 	bl	800a470 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fd35 	bl	8009e06 <USBD_CtlSendStatus>

              break;
 800939c:	e004      	b.n	80093a8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fc65 	bl	8009c70 <USBD_CtlError>
              break;
 80093a6:	bf00      	nop
          }
          break;
 80093a8:	e0ec      	b.n	8009584 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d002      	beq.n	80093bc <USBD_StdEPReq+0xe6>
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d016      	beq.n	80093e8 <USBD_StdEPReq+0x112>
 80093ba:	e030      	b.n	800941e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00d      	beq.n	80093de <USBD_StdEPReq+0x108>
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
 80093c4:	2b80      	cmp	r3, #128	@ 0x80
 80093c6:	d00a      	beq.n	80093de <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	4619      	mov	r1, r3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 f84f 	bl	800a470 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093d2:	2180      	movs	r1, #128	@ 0x80
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 f84b 	bl	800a470 <USBD_LL_StallEP>
 80093da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093dc:	e025      	b.n	800942a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fc45 	bl	8009c70 <USBD_CtlError>
              break;
 80093e6:	e020      	b.n	800942a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	885b      	ldrh	r3, [r3, #2]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d11b      	bne.n	8009428 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d004      	beq.n	8009404 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 f855 	bl	800a4ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fcfe 	bl	8009e06 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	4798      	blx	r3
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800941c:	e004      	b.n	8009428 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fc25 	bl	8009c70 <USBD_CtlError>
              break;
 8009426:	e000      	b.n	800942a <USBD_StdEPReq+0x154>
              break;
 8009428:	bf00      	nop
          }
          break;
 800942a:	e0ab      	b.n	8009584 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b02      	cmp	r3, #2
 8009436:	d002      	beq.n	800943e <USBD_StdEPReq+0x168>
 8009438:	2b03      	cmp	r3, #3
 800943a:	d032      	beq.n	80094a2 <USBD_StdEPReq+0x1cc>
 800943c:	e097      	b.n	800956e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d007      	beq.n	8009454 <USBD_StdEPReq+0x17e>
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	2b80      	cmp	r3, #128	@ 0x80
 8009448:	d004      	beq.n	8009454 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fc0f 	bl	8009c70 <USBD_CtlError>
                break;
 8009452:	e091      	b.n	8009578 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009458:	2b00      	cmp	r3, #0
 800945a:	da0b      	bge.n	8009474 <USBD_StdEPReq+0x19e>
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009462:	4613      	mov	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	3310      	adds	r3, #16
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	4413      	add	r3, r2
 8009470:	3304      	adds	r3, #4
 8009472:	e00b      	b.n	800948c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	4413      	add	r3, r2
 800948a:	3304      	adds	r3, #4
 800948c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2200      	movs	r2, #0
 8009492:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2202      	movs	r2, #2
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fc59 	bl	8009d52 <USBD_CtlSendData>
              break;
 80094a0:	e06a      	b.n	8009578 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	da11      	bge.n	80094ce <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	f003 020f 	and.w	r2, r3, #15
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	4613      	mov	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	440b      	add	r3, r1
 80094bc:	3324      	adds	r3, #36	@ 0x24
 80094be:	881b      	ldrh	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d117      	bne.n	80094f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fbd2 	bl	8009c70 <USBD_CtlError>
                  break;
 80094cc:	e054      	b.n	8009578 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	f003 020f 	and.w	r2, r3, #15
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	4613      	mov	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	440b      	add	r3, r1
 80094e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d104      	bne.n	80094f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fbbf 	bl	8009c70 <USBD_CtlError>
                  break;
 80094f2:	e041      	b.n	8009578 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	da0b      	bge.n	8009514 <USBD_StdEPReq+0x23e>
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	3310      	adds	r3, #16
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	4413      	add	r3, r2
 8009510:	3304      	adds	r3, #4
 8009512:	e00b      	b.n	800952c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800951a:	4613      	mov	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	4413      	add	r3, r2
 800952a:	3304      	adds	r3, #4
 800952c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800952e:	7bbb      	ldrb	r3, [r7, #14]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <USBD_StdEPReq+0x264>
 8009534:	7bbb      	ldrb	r3, [r7, #14]
 8009536:	2b80      	cmp	r3, #128	@ 0x80
 8009538:	d103      	bne.n	8009542 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	e00e      	b.n	8009560 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 ffd0 	bl	800a4ec <USBD_LL_IsStallEP>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	2201      	movs	r2, #1
 8009556:	601a      	str	r2, [r3, #0]
 8009558:	e002      	b.n	8009560 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	2200      	movs	r2, #0
 800955e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2202      	movs	r2, #2
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fbf3 	bl	8009d52 <USBD_CtlSendData>
              break;
 800956c:	e004      	b.n	8009578 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fb7d 	bl	8009c70 <USBD_CtlError>
              break;
 8009576:	bf00      	nop
          }
          break;
 8009578:	e004      	b.n	8009584 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fb77 	bl	8009c70 <USBD_CtlError>
          break;
 8009582:	bf00      	nop
      }
      break;
 8009584:	e004      	b.n	8009590 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fb71 	bl	8009c70 <USBD_CtlError>
      break;
 800958e:	bf00      	nop
  }

  return ret;
 8009590:	7bfb      	ldrb	r3, [r7, #15]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	885b      	ldrh	r3, [r3, #2]
 80095b6:	0a1b      	lsrs	r3, r3, #8
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	3b01      	subs	r3, #1
 80095bc:	2b0e      	cmp	r3, #14
 80095be:	f200 8165 	bhi.w	800988c <USBD_GetDescriptor+0x2f0>
 80095c2:	a201      	add	r2, pc, #4	@ (adr r2, 80095c8 <USBD_GetDescriptor+0x2c>)
 80095c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c8:	08009639 	.word	0x08009639
 80095cc:	08009651 	.word	0x08009651
 80095d0:	08009691 	.word	0x08009691
 80095d4:	0800988d 	.word	0x0800988d
 80095d8:	0800988d 	.word	0x0800988d
 80095dc:	0800982d 	.word	0x0800982d
 80095e0:	08009859 	.word	0x08009859
 80095e4:	0800988d 	.word	0x0800988d
 80095e8:	0800988d 	.word	0x0800988d
 80095ec:	0800988d 	.word	0x0800988d
 80095f0:	0800988d 	.word	0x0800988d
 80095f4:	0800988d 	.word	0x0800988d
 80095f8:	0800988d 	.word	0x0800988d
 80095fc:	0800988d 	.word	0x0800988d
 8009600:	08009605 	.word	0x08009605
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00b      	beq.n	8009628 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009616:	69db      	ldr	r3, [r3, #28]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	7c12      	ldrb	r2, [r2, #16]
 800961c:	f107 0108 	add.w	r1, r7, #8
 8009620:	4610      	mov	r0, r2
 8009622:	4798      	blx	r3
 8009624:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009626:	e139      	b.n	800989c <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fb20 	bl	8009c70 <USBD_CtlError>
        err++;
 8009630:	7afb      	ldrb	r3, [r7, #11]
 8009632:	3301      	adds	r3, #1
 8009634:	72fb      	strb	r3, [r7, #11]
      break;
 8009636:	e131      	b.n	800989c <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	7c12      	ldrb	r2, [r2, #16]
 8009644:	f107 0108 	add.w	r1, r7, #8
 8009648:	4610      	mov	r0, r2
 800964a:	4798      	blx	r3
 800964c:	60f8      	str	r0, [r7, #12]
      break;
 800964e:	e125      	b.n	800989c <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	7c1b      	ldrb	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10d      	bne.n	8009674 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800965e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009660:	f107 0208 	add.w	r2, r7, #8
 8009664:	4610      	mov	r0, r2
 8009666:	4798      	blx	r3
 8009668:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3301      	adds	r3, #1
 800966e:	2202      	movs	r2, #2
 8009670:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009672:	e113      	b.n	800989c <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800967a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967c:	f107 0208 	add.w	r2, r7, #8
 8009680:	4610      	mov	r0, r2
 8009682:	4798      	blx	r3
 8009684:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3301      	adds	r3, #1
 800968a:	2202      	movs	r2, #2
 800968c:	701a      	strb	r2, [r3, #0]
      break;
 800968e:	e105      	b.n	800989c <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	885b      	ldrh	r3, [r3, #2]
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b05      	cmp	r3, #5
 8009698:	f200 80ac 	bhi.w	80097f4 <USBD_GetDescriptor+0x258>
 800969c:	a201      	add	r2, pc, #4	@ (adr r2, 80096a4 <USBD_GetDescriptor+0x108>)
 800969e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a2:	bf00      	nop
 80096a4:	080096bd 	.word	0x080096bd
 80096a8:	080096f1 	.word	0x080096f1
 80096ac:	08009725 	.word	0x08009725
 80096b0:	08009759 	.word	0x08009759
 80096b4:	0800978d 	.word	0x0800978d
 80096b8:	080097c1 	.word	0x080097c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7c12      	ldrb	r2, [r2, #16]
 80096d4:	f107 0108 	add.w	r1, r7, #8
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096de:	e0a4      	b.n	800982a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fac4 	bl	8009c70 <USBD_CtlError>
            err++;
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	3301      	adds	r3, #1
 80096ec:	72fb      	strb	r3, [r7, #11]
          break;
 80096ee:	e09c      	b.n	800982a <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	7c12      	ldrb	r2, [r2, #16]
 8009708:	f107 0108 	add.w	r1, r7, #8
 800970c:	4610      	mov	r0, r2
 800970e:	4798      	blx	r3
 8009710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009712:	e08a      	b.n	800982a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 faaa 	bl	8009c70 <USBD_CtlError>
            err++;
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	3301      	adds	r3, #1
 8009720:	72fb      	strb	r3, [r7, #11]
          break;
 8009722:	e082      	b.n	800982a <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	7c12      	ldrb	r2, [r2, #16]
 800973c:	f107 0108 	add.w	r1, r7, #8
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
 8009744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009746:	e070      	b.n	800982a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa90 	bl	8009c70 <USBD_CtlError>
            err++;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	3301      	adds	r3, #1
 8009754:	72fb      	strb	r3, [r7, #11]
          break;
 8009756:	e068      	b.n	800982a <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	7c12      	ldrb	r2, [r2, #16]
 8009770:	f107 0108 	add.w	r1, r7, #8
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
 8009778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800977a:	e056      	b.n	800982a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa76 	bl	8009c70 <USBD_CtlError>
            err++;
 8009784:	7afb      	ldrb	r3, [r7, #11]
 8009786:	3301      	adds	r3, #1
 8009788:	72fb      	strb	r3, [r7, #11]
          break;
 800978a:	e04e      	b.n	800982a <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7c12      	ldrb	r2, [r2, #16]
 80097a4:	f107 0108 	add.w	r1, r7, #8
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ae:	e03c      	b.n	800982a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa5c 	bl	8009c70 <USBD_CtlError>
            err++;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	3301      	adds	r3, #1
 80097bc:	72fb      	strb	r3, [r7, #11]
          break;
 80097be:	e034      	b.n	800982a <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00b      	beq.n	80097e4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	7c12      	ldrb	r2, [r2, #16]
 80097d8:	f107 0108 	add.w	r1, r7, #8
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
 80097e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097e2:	e022      	b.n	800982a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa42 	bl	8009c70 <USBD_CtlError>
            err++;
 80097ec:	7afb      	ldrb	r3, [r7, #11]
 80097ee:	3301      	adds	r3, #1
 80097f0:	72fb      	strb	r3, [r7, #11]
          break;
 80097f2:	e01a      	b.n	800982a <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00c      	beq.n	800981a <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	8852      	ldrh	r2, [r2, #2]
 800980c:	b2d1      	uxtb	r1, r2
 800980e:	f107 0208 	add.w	r2, r7, #8
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
 8009816:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8009818:	e006      	b.n	8009828 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fa27 	bl	8009c70 <USBD_CtlError>
            err++;
 8009822:	7afb      	ldrb	r3, [r7, #11]
 8009824:	3301      	adds	r3, #1
 8009826:	72fb      	strb	r3, [r7, #11]
          break;
 8009828:	bf00      	nop
      }
      break;
 800982a:	e037      	b.n	800989c <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	7c1b      	ldrb	r3, [r3, #16]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d109      	bne.n	8009848 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800983a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800983c:	f107 0208 	add.w	r2, r7, #8
 8009840:	4610      	mov	r0, r2
 8009842:	4798      	blx	r3
 8009844:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009846:	e029      	b.n	800989c <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fa10 	bl	8009c70 <USBD_CtlError>
        err++;
 8009850:	7afb      	ldrb	r3, [r7, #11]
 8009852:	3301      	adds	r3, #1
 8009854:	72fb      	strb	r3, [r7, #11]
      break;
 8009856:	e021      	b.n	800989c <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	7c1b      	ldrb	r3, [r3, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10d      	bne.n	800987c <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009868:	f107 0208 	add.w	r2, r7, #8
 800986c:	4610      	mov	r0, r2
 800986e:	4798      	blx	r3
 8009870:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3301      	adds	r3, #1
 8009876:	2207      	movs	r2, #7
 8009878:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800987a:	e00f      	b.n	800989c <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f9f6 	bl	8009c70 <USBD_CtlError>
        err++;
 8009884:	7afb      	ldrb	r3, [r7, #11]
 8009886:	3301      	adds	r3, #1
 8009888:	72fb      	strb	r3, [r7, #11]
      break;
 800988a:	e007      	b.n	800989c <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f9ee 	bl	8009c70 <USBD_CtlError>
      err++;
 8009894:	7afb      	ldrb	r3, [r7, #11]
 8009896:	3301      	adds	r3, #1
 8009898:	72fb      	strb	r3, [r7, #11]
      break;
 800989a:	bf00      	nop
  }

  if (err != 0U)
 800989c:	7afb      	ldrb	r3, [r7, #11]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d11e      	bne.n	80098e0 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	88db      	ldrh	r3, [r3, #6]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d016      	beq.n	80098d8 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 80098aa:	893b      	ldrh	r3, [r7, #8]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00e      	beq.n	80098ce <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	88da      	ldrh	r2, [r3, #6]
 80098b4:	893b      	ldrh	r3, [r7, #8]
 80098b6:	4293      	cmp	r3, r2
 80098b8:	bf28      	it	cs
 80098ba:	4613      	movcs	r3, r2
 80098bc:	b29b      	uxth	r3, r3
 80098be:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098c0:	893b      	ldrh	r3, [r7, #8]
 80098c2:	461a      	mov	r2, r3
 80098c4:	68f9      	ldr	r1, [r7, #12]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fa43 	bl	8009d52 <USBD_CtlSendData>
 80098cc:	e009      	b.n	80098e2 <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f9cd 	bl	8009c70 <USBD_CtlError>
 80098d6:	e004      	b.n	80098e2 <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fa94 	bl	8009e06 <USBD_CtlSendStatus>
 80098de:	e000      	b.n	80098e2 <USBD_GetDescriptor+0x346>
    return;
 80098e0:	bf00      	nop
  }
}
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	889b      	ldrh	r3, [r3, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d131      	bne.n	800995e <USBD_SetAddress+0x76>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	88db      	ldrh	r3, [r3, #6]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d12d      	bne.n	800995e <USBD_SetAddress+0x76>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	885b      	ldrh	r3, [r3, #2]
 8009906:	2b7f      	cmp	r3, #127	@ 0x7f
 8009908:	d829      	bhi.n	800995e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	885b      	ldrh	r3, [r3, #2]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009914:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b03      	cmp	r3, #3
 8009920:	d104      	bne.n	800992c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f9a3 	bl	8009c70 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992a:	e01d      	b.n	8009968 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	7bfa      	ldrb	r2, [r7, #15]
 8009930:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fe03 	bl	800a544 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fa61 	bl	8009e06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d004      	beq.n	8009954 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2202      	movs	r2, #2
 800994e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009952:	e009      	b.n	8009968 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800995c:	e004      	b.n	8009968 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f985 	bl	8009c70 <USBD_CtlError>
  }
}
 8009966:	bf00      	nop
 8009968:	bf00      	nop
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	885b      	ldrh	r3, [r3, #2]
 8009982:	b2da      	uxtb	r2, r3
 8009984:	4b4c      	ldr	r3, [pc, #304]	@ (8009ab8 <USBD_SetConfig+0x148>)
 8009986:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009988:	4b4b      	ldr	r3, [pc, #300]	@ (8009ab8 <USBD_SetConfig+0x148>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d905      	bls.n	800999c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f96c 	bl	8009c70 <USBD_CtlError>
    return USBD_FAIL;
 8009998:	2303      	movs	r3, #3
 800999a:	e088      	b.n	8009aae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d002      	beq.n	80099ae <USBD_SetConfig+0x3e>
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	d025      	beq.n	80099f8 <USBD_SetConfig+0x88>
 80099ac:	e071      	b.n	8009a92 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099ae:	4b42      	ldr	r3, [pc, #264]	@ (8009ab8 <USBD_SetConfig+0x148>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d01c      	beq.n	80099f0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80099b6:	4b40      	ldr	r3, [pc, #256]	@ (8009ab8 <USBD_SetConfig+0x148>)
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	461a      	mov	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099c0:	4b3d      	ldr	r3, [pc, #244]	@ (8009ab8 <USBD_SetConfig+0x148>)
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7ff f97f 	bl	8008cca <USBD_SetClassConfig>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d004      	beq.n	80099e0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f949 	bl	8009c70 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099de:	e065      	b.n	8009aac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fa10 	bl	8009e06 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2203      	movs	r2, #3
 80099ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80099ee:	e05d      	b.n	8009aac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fa08 	bl	8009e06 <USBD_CtlSendStatus>
      break;
 80099f6:	e059      	b.n	8009aac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80099f8:	4b2f      	ldr	r3, [pc, #188]	@ (8009ab8 <USBD_SetConfig+0x148>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d112      	bne.n	8009a26 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2202      	movs	r2, #2
 8009a04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009a08:	4b2b      	ldr	r3, [pc, #172]	@ (8009ab8 <USBD_SetConfig+0x148>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a12:	4b29      	ldr	r3, [pc, #164]	@ (8009ab8 <USBD_SetConfig+0x148>)
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7ff f972 	bl	8008d02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f9f1 	bl	8009e06 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a24:	e042      	b.n	8009aac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009a26:	4b24      	ldr	r3, [pc, #144]	@ (8009ab8 <USBD_SetConfig+0x148>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d02a      	beq.n	8009a8a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7ff f960 	bl	8008d02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a42:	4b1d      	ldr	r3, [pc, #116]	@ (8009ab8 <USBD_SetConfig+0x148>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab8 <USBD_SetConfig+0x148>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff f939 	bl	8008cca <USBD_SetClassConfig>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00f      	beq.n	8009a82 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f903 	bl	8009c70 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff f945 	bl	8008d02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a80:	e014      	b.n	8009aac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f9bf 	bl	8009e06 <USBD_CtlSendStatus>
      break;
 8009a88:	e010      	b.n	8009aac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f9bb 	bl	8009e06 <USBD_CtlSendStatus>
      break;
 8009a90:	e00c      	b.n	8009aac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f8eb 	bl	8009c70 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a9a:	4b07      	ldr	r3, [pc, #28]	@ (8009ab8 <USBD_SetConfig+0x148>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7ff f92e 	bl	8008d02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8009aaa:	bf00      	nop
  }

  return ret;
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	200002d3 	.word	0x200002d3

08009abc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	88db      	ldrh	r3, [r3, #6]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d004      	beq.n	8009ad8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f8cd 	bl	8009c70 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ad6:	e023      	b.n	8009b20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	dc02      	bgt.n	8009aea <USBD_GetConfig+0x2e>
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dc03      	bgt.n	8009af0 <USBD_GetConfig+0x34>
 8009ae8:	e015      	b.n	8009b16 <USBD_GetConfig+0x5a>
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d00b      	beq.n	8009b06 <USBD_GetConfig+0x4a>
 8009aee:	e012      	b.n	8009b16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3308      	adds	r3, #8
 8009afa:	2201      	movs	r2, #1
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f927 	bl	8009d52 <USBD_CtlSendData>
        break;
 8009b04:	e00c      	b.n	8009b20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3304      	adds	r3, #4
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f91f 	bl	8009d52 <USBD_CtlSendData>
        break;
 8009b14:	e004      	b.n	8009b20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f8a9 	bl	8009c70 <USBD_CtlError>
        break;
 8009b1e:	bf00      	nop
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d81e      	bhi.n	8009b7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	88db      	ldrh	r3, [r3, #6]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d004      	beq.n	8009b52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f890 	bl	8009c70 <USBD_CtlError>
        break;
 8009b50:	e01a      	b.n	8009b88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d005      	beq.n	8009b6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f043 0202 	orr.w	r2, r3, #2
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	330c      	adds	r3, #12
 8009b72:	2202      	movs	r2, #2
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f8eb 	bl	8009d52 <USBD_CtlSendData>
      break;
 8009b7c:	e004      	b.n	8009b88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f875 	bl	8009c70 <USBD_CtlError>
      break;
 8009b86:	bf00      	nop
  }
}
 8009b88:	bf00      	nop
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	885b      	ldrh	r3, [r3, #2]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d106      	bne.n	8009bb0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f92b 	bl	8009e06 <USBD_CtlSendStatus>
  }
}
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d80b      	bhi.n	8009be8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	885b      	ldrh	r3, [r3, #2]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d10c      	bne.n	8009bf2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f910 	bl	8009e06 <USBD_CtlSendStatus>
      }
      break;
 8009be6:	e004      	b.n	8009bf2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f840 	bl	8009c70 <USBD_CtlError>
      break;
 8009bf0:	e000      	b.n	8009bf4 <USBD_ClrFeature+0x3c>
      break;
 8009bf2:	bf00      	nop
  }
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	781a      	ldrb	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	781a      	ldrb	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	3301      	adds	r3, #1
 8009c24:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f7ff fa7f 	bl	800912a <SWAPBYTE>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f7ff fa72 	bl	800912a <SWAPBYTE>
 8009c46:	4603      	mov	r3, r0
 8009c48:	461a      	mov	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3301      	adds	r3, #1
 8009c52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3301      	adds	r3, #1
 8009c58:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f7ff fa65 	bl	800912a <SWAPBYTE>
 8009c60:	4603      	mov	r3, r0
 8009c62:	461a      	mov	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	80da      	strh	r2, [r3, #6]
}
 8009c68:	bf00      	nop
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c7a:	2180      	movs	r1, #128	@ 0x80
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fbf7 	bl	800a470 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c82:	2100      	movs	r1, #0
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fbf3 	bl	800a470 <USBD_LL_StallEP>
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b086      	sub	sp, #24
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	60f8      	str	r0, [r7, #12]
 8009c9a:	60b9      	str	r1, [r7, #8]
 8009c9c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d036      	beq.n	8009d16 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009cac:	6938      	ldr	r0, [r7, #16]
 8009cae:	f000 f836 	bl	8009d1e <USBD_GetLen>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009cc0:	7dfb      	ldrb	r3, [r7, #23]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	7812      	ldrb	r2, [r2, #0]
 8009cca:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	2203      	movs	r2, #3
 8009cda:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ce2:	e013      	b.n	8009d0c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	4413      	add	r3, r2
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	7812      	ldrb	r2, [r2, #0]
 8009cee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	613b      	str	r3, [r7, #16]
    idx++;
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	4413      	add	r3, r2
 8009d02:	2200      	movs	r2, #0
 8009d04:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e7      	bne.n	8009ce4 <USBD_GetString+0x52>
 8009d14:	e000      	b.n	8009d18 <USBD_GetString+0x86>
    return;
 8009d16:	bf00      	nop
  }
}
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b085      	sub	sp, #20
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d2e:	e005      	b.n	8009d3c <USBD_GetLen+0x1e>
  {
    len++;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	3301      	adds	r3, #1
 8009d34:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1f5      	bne.n	8009d30 <USBD_GetLen+0x12>
  }

  return len;
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2202      	movs	r2, #2
 8009d62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	2100      	movs	r1, #0
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 fc02 	bl	800a582 <USBD_LL_Transmit>

  return USBD_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	2100      	movs	r1, #0
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 fbf1 	bl	800a582 <USBD_LL_Transmit>

  return USBD_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2203      	movs	r2, #3
 8009dba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f000 fbf5 	bl	800a5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	2100      	movs	r1, #0
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f000 fbe4 	bl	800a5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2204      	movs	r2, #4
 8009e12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e16:	2300      	movs	r3, #0
 8009e18:	2200      	movs	r2, #0
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fbb0 	bl	800a582 <USBD_LL_Transmit>

  return USBD_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2205      	movs	r2, #5
 8009e38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2100      	movs	r1, #0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fbbe 	bl	800a5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
	...

08009e54 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 8009e58:	2200      	movs	r2, #0
 8009e5a:	4912      	ldr	r1, [pc, #72]	@ (8009ea4 <MX_USB_Device_Init+0x50>)
 8009e5c:	4812      	ldr	r0, [pc, #72]	@ (8009ea8 <MX_USB_Device_Init+0x54>)
 8009e5e:	f7fe feab 	bl	8008bb8 <USBD_Init>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009e68:	f7f6 fc7e 	bl	8000768 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 8009e6c:	490f      	ldr	r1, [pc, #60]	@ (8009eac <MX_USB_Device_Init+0x58>)
 8009e6e:	480e      	ldr	r0, [pc, #56]	@ (8009ea8 <MX_USB_Device_Init+0x54>)
 8009e70:	f7fe fed2 	bl	8008c18 <USBD_RegisterClass>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009e7a:	f7f6 fc75 	bl	8000768 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 8009e7e:	490c      	ldr	r1, [pc, #48]	@ (8009eb0 <MX_USB_Device_Init+0x5c>)
 8009e80:	4809      	ldr	r0, [pc, #36]	@ (8009ea8 <MX_USB_Device_Init+0x54>)
 8009e82:	f7fe fb17 	bl	80084b4 <USBD_DFU_RegisterMedia>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009e8c:	f7f6 fc6c 	bl	8000768 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009e90:	4805      	ldr	r0, [pc, #20]	@ (8009ea8 <MX_USB_Device_Init+0x54>)
 8009e92:	f7fe fee8 	bl	8008c66 <USBD_Start>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009e9c:	f7f6 fc64 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009ea0:	bf00      	nop
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	20000078 	.word	0x20000078
 8009ea8:	200002d4 	.word	0x200002d4
 8009eac:	20000014 	.word	0x20000014
 8009eb0:	200000cc 	.word	0x200000cc

08009eb4 <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	4603      	mov	r3, r0
 8009ebc:	6039      	str	r1, [r7, #0]
 8009ebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	2212      	movs	r2, #18
 8009ec4:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 8009ec6:	4b03      	ldr	r3, [pc, #12]	@ (8009ed4 <USBD_DFU_DeviceDescriptor+0x20>)
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	20000098 	.word	0x20000098

08009ed8 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	6039      	str	r1, [r7, #0]
 8009ee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	2204      	movs	r2, #4
 8009ee8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009eea:	4b03      	ldr	r3, [pc, #12]	@ (8009ef8 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	200000ac 	.word	0x200000ac

08009efc <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4603      	mov	r3, r0
 8009f04:	6039      	str	r1, [r7, #0]
 8009f06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f08:	79fb      	ldrb	r3, [r7, #7]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d105      	bne.n	8009f1a <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	4907      	ldr	r1, [pc, #28]	@ (8009f30 <USBD_DFU_ProductStrDescriptor+0x34>)
 8009f12:	4808      	ldr	r0, [pc, #32]	@ (8009f34 <USBD_DFU_ProductStrDescriptor+0x38>)
 8009f14:	f7ff febd 	bl	8009c92 <USBD_GetString>
 8009f18:	e004      	b.n	8009f24 <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	4904      	ldr	r1, [pc, #16]	@ (8009f30 <USBD_DFU_ProductStrDescriptor+0x34>)
 8009f1e:	4805      	ldr	r0, [pc, #20]	@ (8009f34 <USBD_DFU_ProductStrDescriptor+0x38>)
 8009f20:	f7ff feb7 	bl	8009c92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f24:	4b02      	ldr	r3, [pc, #8]	@ (8009f30 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	200005a4 	.word	0x200005a4
 8009f34:	0800a778 	.word	0x0800a778

08009f38 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	6039      	str	r1, [r7, #0]
 8009f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	4904      	ldr	r1, [pc, #16]	@ (8009f58 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 8009f48:	4804      	ldr	r0, [pc, #16]	@ (8009f5c <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 8009f4a:	f7ff fea2 	bl	8009c92 <USBD_GetString>
  return USBD_StrDesc;
 8009f4e:	4b02      	ldr	r3, [pc, #8]	@ (8009f58 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	200005a4 	.word	0x200005a4
 8009f5c:	0800a798 	.word	0x0800a798

08009f60 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	6039      	str	r1, [r7, #0]
 8009f6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	221a      	movs	r2, #26
 8009f70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f72:	f000 f843 	bl	8009ffc <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009f76:	4b02      	ldr	r3, [pc, #8]	@ (8009f80 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	200000b0 	.word	0x200000b0

08009f84 <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	6039      	str	r1, [r7, #0]
 8009f8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f90:	79fb      	ldrb	r3, [r7, #7]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d105      	bne.n	8009fa2 <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	4907      	ldr	r1, [pc, #28]	@ (8009fb8 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8009f9a:	4808      	ldr	r0, [pc, #32]	@ (8009fbc <USBD_DFU_ConfigStrDescriptor+0x38>)
 8009f9c:	f7ff fe79 	bl	8009c92 <USBD_GetString>
 8009fa0:	e004      	b.n	8009fac <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	4904      	ldr	r1, [pc, #16]	@ (8009fb8 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8009fa6:	4805      	ldr	r0, [pc, #20]	@ (8009fbc <USBD_DFU_ConfigStrDescriptor+0x38>)
 8009fa8:	f7ff fe73 	bl	8009c92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fac:	4b02      	ldr	r3, [pc, #8]	@ (8009fb8 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	200005a4 	.word	0x200005a4
 8009fbc:	0800a7ac 	.word	0x0800a7ac

08009fc0 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	6039      	str	r1, [r7, #0]
 8009fca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fcc:	79fb      	ldrb	r3, [r7, #7]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d105      	bne.n	8009fde <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	4907      	ldr	r1, [pc, #28]	@ (8009ff4 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8009fd6:	4808      	ldr	r0, [pc, #32]	@ (8009ff8 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8009fd8:	f7ff fe5b 	bl	8009c92 <USBD_GetString>
 8009fdc:	e004      	b.n	8009fe8 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	4904      	ldr	r1, [pc, #16]	@ (8009ff4 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8009fe2:	4805      	ldr	r0, [pc, #20]	@ (8009ff8 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8009fe4:	f7ff fe55 	bl	8009c92 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fe8:	4b02      	ldr	r3, [pc, #8]	@ (8009ff4 <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200005a4 	.word	0x200005a4
 8009ff8:	0800a7b8 	.word	0x0800a7b8

08009ffc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a002:	4b0f      	ldr	r3, [pc, #60]	@ (800a040 <Get_SerialNum+0x44>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a008:	4b0e      	ldr	r3, [pc, #56]	@ (800a044 <Get_SerialNum+0x48>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a00e:	4b0e      	ldr	r3, [pc, #56]	@ (800a048 <Get_SerialNum+0x4c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4413      	add	r3, r2
 800a01a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d009      	beq.n	800a036 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a022:	2208      	movs	r2, #8
 800a024:	4909      	ldr	r1, [pc, #36]	@ (800a04c <Get_SerialNum+0x50>)
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f000 f814 	bl	800a054 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a02c:	2204      	movs	r2, #4
 800a02e:	4908      	ldr	r1, [pc, #32]	@ (800a050 <Get_SerialNum+0x54>)
 800a030:	68b8      	ldr	r0, [r7, #8]
 800a032:	f000 f80f 	bl	800a054 <IntToUnicode>
  }
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	1fff7590 	.word	0x1fff7590
 800a044:	1fff7594 	.word	0x1fff7594
 800a048:	1fff7598 	.word	0x1fff7598
 800a04c:	200000b2 	.word	0x200000b2
 800a050:	200000c2 	.word	0x200000c2

0800a054 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	4613      	mov	r3, r2
 800a060:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a062:	2300      	movs	r3, #0
 800a064:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a066:	2300      	movs	r3, #0
 800a068:	75fb      	strb	r3, [r7, #23]
 800a06a:	e027      	b.n	800a0bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	0f1b      	lsrs	r3, r3, #28
 800a070:	2b09      	cmp	r3, #9
 800a072:	d80b      	bhi.n	800a08c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	0f1b      	lsrs	r3, r3, #28
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
 800a07c:	005b      	lsls	r3, r3, #1
 800a07e:	4619      	mov	r1, r3
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	440b      	add	r3, r1
 800a084:	3230      	adds	r2, #48	@ 0x30
 800a086:	b2d2      	uxtb	r2, r2
 800a088:	701a      	strb	r2, [r3, #0]
 800a08a:	e00a      	b.n	800a0a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	0f1b      	lsrs	r3, r3, #28
 800a090:	b2da      	uxtb	r2, r3
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	4619      	mov	r1, r3
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	440b      	add	r3, r1
 800a09c:	3237      	adds	r2, #55	@ 0x37
 800a09e:	b2d2      	uxtb	r2, r2
 800a0a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	011b      	lsls	r3, r3, #4
 800a0a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
 800a0aa:	005b      	lsls	r3, r3, #1
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	75fb      	strb	r3, [r7, #23]
 800a0bc:	7dfa      	ldrb	r2, [r7, #23]
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d3d3      	bcc.n	800a06c <IntToUnicode+0x18>
  }
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	371c      	adds	r7, #28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800a0d6:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800a0e6:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800a0fa:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800a114:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a116:	4618      	mov	r0, r3
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a122:	b480      	push	{r7}
 800a124:	b085      	sub	sp, #20
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 800a12e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 800a132:	4618      	mov	r0, r3
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800a13e:	b480      	push	{r7}
 800a140:	b085      	sub	sp, #20
 800a142:	af00      	add	r7, sp, #0
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	460b      	mov	r3, r1
 800a148:	607a      	str	r2, [r7, #4]
 800a14a:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800a14c:	7afb      	ldrb	r3, [r7, #11]
 800a14e:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800a150:	bf00      	nop
  }
  return (USBD_OK);
 800a152:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b094      	sub	sp, #80	@ 0x50
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a168:	f107 030c 	add.w	r3, r7, #12
 800a16c:	2244      	movs	r2, #68	@ 0x44
 800a16e:	2100      	movs	r1, #0
 800a170:	4618      	mov	r0, r3
 800a172:	f000 fac9 	bl	800a708 <memset>
  if(pcdHandle->Instance==USB)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a15      	ldr	r2, [pc, #84]	@ (800a1d0 <HAL_PCD_MspInit+0x70>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d122      	bne.n	800a1c6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a180:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a184:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a186:	2300      	movs	r3, #0
 800a188:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a18a:	f107 030c 	add.w	r3, r7, #12
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fa ff72 	bl	8005078 <HAL_RCCEx_PeriphCLKConfig>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800a19a:	f7f6 fae5 	bl	8000768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a19e:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d4 <HAL_PCD_MspInit+0x74>)
 800a1a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a1d4 <HAL_PCD_MspInit+0x74>)
 800a1a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a1a8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d4 <HAL_PCD_MspInit+0x74>)
 800a1ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1b2:	60bb      	str	r3, [r7, #8]
 800a1b4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	2014      	movs	r0, #20
 800a1bc:	f7f6 fdaf 	bl	8000d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a1c0:	2014      	movs	r0, #20
 800a1c2:	f7f6 fdc6 	bl	8000d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a1c6:	bf00      	nop
 800a1c8:	3750      	adds	r7, #80	@ 0x50
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	40005c00 	.word	0x40005c00
 800a1d4:	40021000 	.word	0x40021000

0800a1d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	f7fe fd9f 	bl	8008d32 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a20e:	78fa      	ldrb	r2, [r7, #3]
 800a210:	6879      	ldr	r1, [r7, #4]
 800a212:	4613      	mov	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	440b      	add	r3, r1
 800a21c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	78fb      	ldrb	r3, [r7, #3]
 800a224:	4619      	mov	r1, r3
 800a226:	f7fe fdd9 	bl	8008ddc <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a22a:	bf00      	nop
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	460b      	mov	r3, r1
 800a23c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a244:	78fa      	ldrb	r2, [r7, #3]
 800a246:	6879      	ldr	r1, [r7, #4]
 800a248:	4613      	mov	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	00db      	lsls	r3, r3, #3
 800a250:	440b      	add	r3, r1
 800a252:	3324      	adds	r3, #36	@ 0x24
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	78fb      	ldrb	r3, [r7, #3]
 800a258:	4619      	mov	r1, r3
 800a25a:	f7fe fe22 	bl	8008ea2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a25e:	bf00      	nop
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a274:	4618      	mov	r0, r3
 800a276:	f7fe ff36 	bl	80090e6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a27a:	bf00      	nop
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a28a:	2301      	movs	r3, #1
 800a28c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	795b      	ldrb	r3, [r3, #5]
 800a292:	2b02      	cmp	r3, #2
 800a294:	d001      	beq.n	800a29a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a296:	f7f6 fa67 	bl	8000768 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a2a0:	7bfa      	ldrb	r2, [r7, #15]
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fe fee0 	bl	800906a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fe fe8c 	bl	8008fce <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a2b6:	bf00      	nop
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fedb 	bl	800908a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	7a5b      	ldrb	r3, [r3, #9]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d005      	beq.n	800a2e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2dc:	4b04      	ldr	r3, [pc, #16]	@ (800a2f0 <HAL_PCD_SuspendCallback+0x30>)
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	4a03      	ldr	r2, [pc, #12]	@ (800a2f0 <HAL_PCD_SuspendCallback+0x30>)
 800a2e2:	f043 0306 	orr.w	r3, r3, #6
 800a2e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a2e8:	bf00      	nop
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	e000ed00 	.word	0xe000ed00

0800a2f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	7a5b      	ldrb	r3, [r3, #9]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d007      	beq.n	800a314 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a304:	4b08      	ldr	r3, [pc, #32]	@ (800a328 <HAL_PCD_ResumeCallback+0x34>)
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	4a07      	ldr	r2, [pc, #28]	@ (800a328 <HAL_PCD_ResumeCallback+0x34>)
 800a30a:	f023 0306 	bic.w	r3, r3, #6
 800a30e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a310:	f000 f9c8 	bl	800a6a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fe fecb 	bl	80090b6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a320:	bf00      	nop
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	e000ed00 	.word	0xe000ed00

0800a32c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a334:	4a1e      	ldr	r2, [pc, #120]	@ (800a3b0 <USBD_LL_Init+0x84>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a1c      	ldr	r2, [pc, #112]	@ (800a3b0 <USBD_LL_Init+0x84>)
 800a340:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a344:	4b1a      	ldr	r3, [pc, #104]	@ (800a3b0 <USBD_LL_Init+0x84>)
 800a346:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b4 <USBD_LL_Init+0x88>)
 800a348:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a34a:	4b19      	ldr	r3, [pc, #100]	@ (800a3b0 <USBD_LL_Init+0x84>)
 800a34c:	2208      	movs	r2, #8
 800a34e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a350:	4b17      	ldr	r3, [pc, #92]	@ (800a3b0 <USBD_LL_Init+0x84>)
 800a352:	2202      	movs	r2, #2
 800a354:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a356:	4b16      	ldr	r3, [pc, #88]	@ (800a3b0 <USBD_LL_Init+0x84>)
 800a358:	2202      	movs	r2, #2
 800a35a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a35c:	4b14      	ldr	r3, [pc, #80]	@ (800a3b0 <USBD_LL_Init+0x84>)
 800a35e:	2200      	movs	r2, #0
 800a360:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a362:	4b13      	ldr	r3, [pc, #76]	@ (800a3b0 <USBD_LL_Init+0x84>)
 800a364:	2200      	movs	r2, #0
 800a366:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a368:	4b11      	ldr	r3, [pc, #68]	@ (800a3b0 <USBD_LL_Init+0x84>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a36e:	4b10      	ldr	r3, [pc, #64]	@ (800a3b0 <USBD_LL_Init+0x84>)
 800a370:	2200      	movs	r2, #0
 800a372:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a374:	480e      	ldr	r0, [pc, #56]	@ (800a3b0 <USBD_LL_Init+0x84>)
 800a376:	f7f8 fc16 	bl	8002ba6 <HAL_PCD_Init>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a380:	f7f6 f9f2 	bl	8000768 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a38a:	2318      	movs	r3, #24
 800a38c:	2200      	movs	r2, #0
 800a38e:	2100      	movs	r1, #0
 800a390:	f7fa f85f 	bl	8004452 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a39a:	2358      	movs	r3, #88	@ 0x58
 800a39c:	2200      	movs	r2, #0
 800a39e:	2180      	movs	r1, #128	@ 0x80
 800a3a0:	f7fa f857 	bl	8004452 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	200007a4 	.word	0x200007a4
 800a3b4:	40005c00 	.word	0x40005c00

0800a3b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f8 fcb7 	bl	8002d42 <HAL_PCD_Start>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 f968 	bl	800a6b0 <USBD_Get_USB_Status>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a404:	4618      	mov	r0, r3
 800a406:	f7f8 fcbe 	bl	8002d86 <HAL_PCD_Stop>
 800a40a:	4603      	mov	r3, r0
 800a40c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
 800a410:	4618      	mov	r0, r3
 800a412:	f000 f94d 	bl	800a6b0 <USBD_Get_USB_Status>
 800a416:	4603      	mov	r3, r0
 800a418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a41a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	4608      	mov	r0, r1
 800a42e:	4611      	mov	r1, r2
 800a430:	461a      	mov	r2, r3
 800a432:	4603      	mov	r3, r0
 800a434:	70fb      	strb	r3, [r7, #3]
 800a436:	460b      	mov	r3, r1
 800a438:	70bb      	strb	r3, [r7, #2]
 800a43a:	4613      	mov	r3, r2
 800a43c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a44c:	78bb      	ldrb	r3, [r7, #2]
 800a44e:	883a      	ldrh	r2, [r7, #0]
 800a450:	78f9      	ldrb	r1, [r7, #3]
 800a452:	f7f8 fe05 	bl	8003060 <HAL_PCD_EP_Open>
 800a456:	4603      	mov	r3, r0
 800a458:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 f927 	bl	800a6b0 <USBD_Get_USB_Status>
 800a462:	4603      	mov	r3, r0
 800a464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a466:	7bbb      	ldrb	r3, [r7, #14]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a47c:	2300      	movs	r3, #0
 800a47e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a48a:	78fa      	ldrb	r2, [r7, #3]
 800a48c:	4611      	mov	r1, r2
 800a48e:	4618      	mov	r0, r3
 800a490:	f7f8 fead 	bl	80031ee <HAL_PCD_EP_SetStall>
 800a494:	4603      	mov	r3, r0
 800a496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 f908 	bl	800a6b0 <USBD_Get_USB_Status>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4c8:	78fa      	ldrb	r2, [r7, #3]
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7f8 fee0 	bl	8003292 <HAL_PCD_EP_ClrStall>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 f8e9 	bl	800a6b0 <USBD_Get_USB_Status>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a504:	2b00      	cmp	r3, #0
 800a506:	da0b      	bge.n	800a520 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a508:	78fb      	ldrb	r3, [r7, #3]
 800a50a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a50e:	68f9      	ldr	r1, [r7, #12]
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	440b      	add	r3, r1
 800a51a:	3312      	adds	r3, #18
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	e00b      	b.n	800a538 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a520:	78fb      	ldrb	r3, [r7, #3]
 800a522:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a526:	68f9      	ldr	r1, [r7, #12]
 800a528:	4613      	mov	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	00db      	lsls	r3, r3, #3
 800a530:	440b      	add	r3, r1
 800a532:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a536:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a55e:	78fa      	ldrb	r2, [r7, #3]
 800a560:	4611      	mov	r1, r2
 800a562:	4618      	mov	r0, r3
 800a564:	f7f8 fd58 	bl	8003018 <HAL_PCD_SetAddress>
 800a568:	4603      	mov	r3, r0
 800a56a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 f89e 	bl	800a6b0 <USBD_Get_USB_Status>
 800a574:	4603      	mov	r3, r0
 800a576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a578:	7bbb      	ldrb	r3, [r7, #14]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b086      	sub	sp, #24
 800a586:	af00      	add	r7, sp, #0
 800a588:	60f8      	str	r0, [r7, #12]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]
 800a58e:	460b      	mov	r3, r1
 800a590:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a5a0:	7af9      	ldrb	r1, [r7, #11]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	f7f8 fdeb 	bl	8003180 <HAL_PCD_EP_Transmit>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 f87d 	bl	800a6b0 <USBD_Get_USB_Status>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	607a      	str	r2, [r7, #4]
 800a5ce:	603b      	str	r3, [r7, #0]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a5e2:	7af9      	ldrb	r1, [r7, #11]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	f7f8 fd99 	bl	800311e <HAL_PCD_EP_Receive>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 f85c 	bl	800a6b0 <USBD_Get_USB_Status>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3718      	adds	r7, #24
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	460b      	mov	r3, r1
 800a612:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <HAL_PCDEx_LPM_Callback+0x18>
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d013      	beq.n	800a646 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a61e:	e023      	b.n	800a668 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	7a5b      	ldrb	r3, [r3, #9]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d007      	beq.n	800a638 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a628:	f000 f83c 	bl	800a6a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a62c:	4b10      	ldr	r3, [pc, #64]	@ (800a670 <HAL_PCDEx_LPM_Callback+0x68>)
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	4a0f      	ldr	r2, [pc, #60]	@ (800a670 <HAL_PCDEx_LPM_Callback+0x68>)
 800a632:	f023 0306 	bic.w	r3, r3, #6
 800a636:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe fd39 	bl	80090b6 <USBD_LL_Resume>
    break;
 800a644:	e010      	b.n	800a668 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe fd1c 	bl	800908a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	7a5b      	ldrb	r3, [r3, #9]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d005      	beq.n	800a666 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a65a:	4b05      	ldr	r3, [pc, #20]	@ (800a670 <HAL_PCDEx_LPM_Callback+0x68>)
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	4a04      	ldr	r2, [pc, #16]	@ (800a670 <HAL_PCDEx_LPM_Callback+0x68>)
 800a660:	f043 0306 	orr.w	r3, r3, #6
 800a664:	6113      	str	r3, [r2, #16]
    break;
 800a666:	bf00      	nop
}
 800a668:	bf00      	nop
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	e000ed00 	.word	0xe000ed00

0800a674 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a67c:	4b03      	ldr	r3, [pc, #12]	@ (800a68c <USBD_static_malloc+0x18>)
}
 800a67e:	4618      	mov	r0, r3
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	20000a80 	.word	0x20000a80

0800a690 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]

}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a6a8:	f7f5 ff06 	bl	80004b8 <SystemClock_Config>
}
 800a6ac:	bf00      	nop
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a6be:	79fb      	ldrb	r3, [r7, #7]
 800a6c0:	2b03      	cmp	r3, #3
 800a6c2:	d817      	bhi.n	800a6f4 <USBD_Get_USB_Status+0x44>
 800a6c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6cc <USBD_Get_USB_Status+0x1c>)
 800a6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ca:	bf00      	nop
 800a6cc:	0800a6dd 	.word	0x0800a6dd
 800a6d0:	0800a6e3 	.word	0x0800a6e3
 800a6d4:	0800a6e9 	.word	0x0800a6e9
 800a6d8:	0800a6ef 	.word	0x0800a6ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73fb      	strb	r3, [r7, #15]
    break;
 800a6e0:	e00b      	b.n	800a6fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a6e6:	e008      	b.n	800a6fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a6ec:	e005      	b.n	800a6fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a6f2:	e002      	b.n	800a6fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a6f8:	bf00      	nop
  }
  return usb_status;
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <memset>:
 800a708:	4402      	add	r2, r0
 800a70a:	4603      	mov	r3, r0
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d100      	bne.n	800a712 <memset+0xa>
 800a710:	4770      	bx	lr
 800a712:	f803 1b01 	strb.w	r1, [r3], #1
 800a716:	e7f9      	b.n	800a70c <memset+0x4>

0800a718 <__libc_init_array>:
 800a718:	b570      	push	{r4, r5, r6, lr}
 800a71a:	4d0d      	ldr	r5, [pc, #52]	@ (800a750 <__libc_init_array+0x38>)
 800a71c:	4c0d      	ldr	r4, [pc, #52]	@ (800a754 <__libc_init_array+0x3c>)
 800a71e:	1b64      	subs	r4, r4, r5
 800a720:	10a4      	asrs	r4, r4, #2
 800a722:	2600      	movs	r6, #0
 800a724:	42a6      	cmp	r6, r4
 800a726:	d109      	bne.n	800a73c <__libc_init_array+0x24>
 800a728:	4d0b      	ldr	r5, [pc, #44]	@ (800a758 <__libc_init_array+0x40>)
 800a72a:	4c0c      	ldr	r4, [pc, #48]	@ (800a75c <__libc_init_array+0x44>)
 800a72c:	f000 f818 	bl	800a760 <_init>
 800a730:	1b64      	subs	r4, r4, r5
 800a732:	10a4      	asrs	r4, r4, #2
 800a734:	2600      	movs	r6, #0
 800a736:	42a6      	cmp	r6, r4
 800a738:	d105      	bne.n	800a746 <__libc_init_array+0x2e>
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
 800a73c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a740:	4798      	blx	r3
 800a742:	3601      	adds	r6, #1
 800a744:	e7ee      	b.n	800a724 <__libc_init_array+0xc>
 800a746:	f855 3b04 	ldr.w	r3, [r5], #4
 800a74a:	4798      	blx	r3
 800a74c:	3601      	adds	r6, #1
 800a74e:	e7f2      	b.n	800a736 <__libc_init_array+0x1e>
 800a750:	0800a838 	.word	0x0800a838
 800a754:	0800a838 	.word	0x0800a838
 800a758:	0800a838 	.word	0x0800a838
 800a75c:	0800a83c 	.word	0x0800a83c

0800a760 <_init>:
 800a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a762:	bf00      	nop
 800a764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a766:	bc08      	pop	{r3}
 800a768:	469e      	mov	lr, r3
 800a76a:	4770      	bx	lr

0800a76c <_fini>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	bf00      	nop
 800a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a772:	bc08      	pop	{r3}
 800a774:	469e      	mov	lr, r3
 800a776:	4770      	bx	lr
