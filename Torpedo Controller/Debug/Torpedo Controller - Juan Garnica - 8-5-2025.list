
Torpedo Controller - Juan Garnica - 8-5-2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800a7b0  0800a7b0  0000b7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a870  0800a870  0000c0e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a870  0800a870  0000c0e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a870  0800a870  0000c0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a870  0800a870  0000b870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a874  0800a874  0000b874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0800a878  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc0  200000e0  0800a958  0000c0e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ea0  0800a958  0000cea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019411  00000000  00000000  0000c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de7  00000000  00000000  00025521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  00029308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b8  00000000  00000000  0002aa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021113  00000000  00000000  0002bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9f5  00000000  00000000  0004cceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7d5d  00000000  00000000  000696e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013143d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006084  00000000  00000000  00131480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00137504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a798 	.word	0x0800a798

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e4 	.word	0x200000e4
 8000214:	0800a798 	.word	0x0800a798

08000218 <i2c_listen>:
int countAddr = 0;
int countrxcplt = 0;
int counterror = 0;

static inline void i2c_listen(I2C_HandleTypeDef *hi2c)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(hi2c);
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f001 f93f 	bl	80014a4 <HAL_I2C_EnableListen_IT>
}
 8000226:	bf00      	nop
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <HAL_I2C_AddrCallback>:
		    process_data();
		}
}

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	70fb      	strb	r3, [r7, #3]
 800023c:	4613      	mov	r3, r2
 800023e:	803b      	strh	r3, [r7, #0]
    (void)AddrMatchCode;

    if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8000240:	78fb      	ldrb	r3, [r7, #3]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d10a      	bne.n	800025c <HAL_I2C_AddrCallback+0x2c>
        // Master will WRITE to us: first byte is register/len etc. Receive header (1 byte)
        rx_len = 0;
 8000246:	4b14      	ldr	r3, [pc, #80]	@ (8000298 <HAL_I2C_AddrCallback+0x68>)
 8000248:	2200      	movs	r2, #0
 800024a:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Slave_Seq_Receive_IT(hi2c, &i2c_rx[0], 1, I2C_FIRST_AND_NEXT_FRAME);
 800024c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000250:	2201      	movs	r2, #1
 8000252:	4912      	ldr	r1, [pc, #72]	@ (800029c <HAL_I2C_AddrCallback+0x6c>)
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f001 f873 	bl	8001340 <HAL_I2C_Slave_Seq_Receive_IT>
        i2c_tx[2] = I2C_REGISTERS[2];
        tx_len = 3;

        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, i2c_tx, tx_len, I2C_LAST_FRAME);
    }
}
 800025a:	e018      	b.n	800028e <HAL_I2C_AddrCallback+0x5e>
        i2c_tx[0] = I2C_REGISTERS[0];
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <HAL_I2C_AddrCallback+0x70>)
 800025e:	781a      	ldrb	r2, [r3, #0]
 8000260:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <HAL_I2C_AddrCallback+0x74>)
 8000262:	701a      	strb	r2, [r3, #0]
        i2c_tx[1] = I2C_REGISTERS[1];
 8000264:	4b0e      	ldr	r3, [pc, #56]	@ (80002a0 <HAL_I2C_AddrCallback+0x70>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <HAL_I2C_AddrCallback+0x74>)
 800026a:	705a      	strb	r2, [r3, #1]
        i2c_tx[2] = I2C_REGISTERS[2];
 800026c:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <HAL_I2C_AddrCallback+0x70>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <HAL_I2C_AddrCallback+0x74>)
 8000272:	709a      	strb	r2, [r3, #2]
        tx_len = 3;
 8000274:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <HAL_I2C_AddrCallback+0x78>)
 8000276:	2203      	movs	r2, #3
 8000278:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, i2c_tx, tx_len, I2C_LAST_FRAME);
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <HAL_I2C_AddrCallback+0x78>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	461a      	mov	r2, r3
 8000282:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000286:	4907      	ldr	r1, [pc, #28]	@ (80002a4 <HAL_I2C_AddrCallback+0x74>)
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 ffa7 	bl	80011dc <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000112 	.word	0x20000112
 800029c:	200000fc 	.word	0x200000fc
 80002a0:	20000124 	.word	0x20000124
 80002a4:	20000108 	.word	0x20000108
 80002a8:	20000113 	.word	0x20000113

080002ac <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
    if (rx_len == 0)
 80002b4:	4b17      	ldr	r3, [pc, #92]	@ (8000314 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d115      	bne.n	80002ea <HAL_I2C_SlaveRxCpltCallback+0x3e>
    {
        // We just received the header/length at i2c_rx[0]; now receive the payload
        uint8_t payload = i2c_rx[0];
 80002be:	4b16      	ldr	r3, [pc, #88]	@ (8000318 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	73fb      	strb	r3, [r7, #15]
        if (payload > sizeof(i2c_rx)-1) payload = sizeof(i2c_rx)-1; // bound
 80002c4:	7bfb      	ldrb	r3, [r7, #15]
 80002c6:	2b09      	cmp	r3, #9
 80002c8:	d901      	bls.n	80002ce <HAL_I2C_SlaveRxCpltCallback+0x22>
 80002ca:	2309      	movs	r3, #9
 80002cc:	73fb      	strb	r3, [r7, #15]
        rx_len = 1 + payload;
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	3301      	adds	r3, #1
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000314 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002d6:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Slave_Seq_Receive_IT(hi2c, &i2c_rx[1], payload, I2C_LAST_FRAME);
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	b29a      	uxth	r2, r3
 80002dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80002e0:	490e      	ldr	r1, [pc, #56]	@ (800031c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f001 f82c 	bl	8001340 <HAL_I2C_Slave_Seq_Receive_IT>
        memcpy(RxData, i2c_rx, rx_len);
        rxcount = rx_len;
    	// Full message received: set a flag for main loop to process
        have_new_cmd = 1;
    }
}
 80002e8:	e00f      	b.n	800030a <HAL_I2C_SlaveRxCpltCallback+0x5e>
        memcpy(RxData, i2c_rx, rx_len);
 80002ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	4909      	ldr	r1, [pc, #36]	@ (8000318 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80002f4:	480a      	ldr	r0, [pc, #40]	@ (8000320 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80002f6:	f00a fa41 	bl	800a77c <memcpy>
        rxcount = rx_len;
 80002fa:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000302:	701a      	strb	r2, [r3, #0]
        have_new_cmd = 1;
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000112 	.word	0x20000112
 8000318:	200000fc 	.word	0x200000fc
 800031c:	200000fd 	.word	0x200000fd
 8000320:	20000118 	.word	0x20000118
 8000324:	20000122 	.word	0x20000122
 8000328:	20000114 	.word	0x20000114

0800032c <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
    // Done responding; go back to listening
    i2c_listen(hi2c);
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f7ff ff6f 	bl	8000218 <i2c_listen>
}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}

08000342 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000342:	b580      	push	{r7, lr}
 8000344:	b082      	sub	sp, #8
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
    // Re-enter listen mode right away
    i2c_listen(hi2c);
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f7ff ff64 	bl	8000218 <i2c_listen>
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
    // DO NOT heavy-handle in IRQ; just recover listen
    (void)HAL_I2C_GetError(hi2c);
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f001 f96c 	bl	800163e <HAL_I2C_GetError>
    i2c_listen(hi2c);
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f7ff ff56 	bl	8000218 <i2c_listen>
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000378:	f000 fae3 	bl	8000942 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037c:	f000 f81c 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000380:	f000 f928 	bl	80005d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000384:	f000 f8a4 	bl	80004d0 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000388:	f000 f862 	bl	8000450 <MX_I2C2_Init>
  MX_USB_Device_Init();
 800038c:	f009 fd70 	bl	8009e70 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000390:	2100      	movs	r1, #0
 8000392:	4807      	ldr	r0, [pc, #28]	@ (80003b0 <main+0x3c>)
 8000394:	f005 f926 	bl	80055e4 <HAL_TIM_PWM_Start>

	//uint32_t position = 0;

	if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK) //Enters slave to listen for master requests
 8000398:	4806      	ldr	r0, [pc, #24]	@ (80003b4 <main+0x40>)
 800039a:	f001 f883 	bl	80014a4 <HAL_I2C_EnableListen_IT>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d002      	beq.n	80003aa <main+0x36>
	{
		Error_Handler();
 80003a4:	f000 f960 	bl	8000668 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	e7fd      	b.n	80003aa <main+0x36>
 80003ae:	bf00      	nop
 80003b0:	20000184 	.word	0x20000184
 80003b4:	20000130 	.word	0x20000130

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b094      	sub	sp, #80	@ 0x50
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	2238      	movs	r2, #56	@ 0x38
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f00a f9ac 	bl	800a724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003de:	f004 f8b3 	bl	8004548 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003e2:	2321      	movs	r3, #33	@ 0x21
 80003e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003ec:	2301      	movs	r3, #1
 80003ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f0:	2302      	movs	r3, #2
 80003f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f4:	2303      	movs	r3, #3
 80003f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80003f8:	2302      	movs	r3, #2
 80003fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80003fc:	230c      	movs	r3, #12
 80003fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000400:	2302      	movs	r3, #2
 8000402:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000404:	2304      	movs	r3, #4
 8000406:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000408:	2302      	movs	r3, #2
 800040a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040c:	f107 0318 	add.w	r3, r7, #24
 8000410:	4618      	mov	r0, r3
 8000412:	f004 f94d 	bl	80046b0 <HAL_RCC_OscConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800041c:	f000 f924 	bl	8000668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000420:	230f      	movs	r3, #15
 8000422:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000424:	2303      	movs	r3, #3
 8000426:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2101      	movs	r1, #1
 8000438:	4618      	mov	r0, r3
 800043a:	f004 fc4b 	bl	8004cd4 <HAL_RCC_ClockConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000444:	f000 f910 	bl	8000668 <Error_Handler>
  }
}
 8000448:	bf00      	nop
 800044a:	3750      	adds	r7, #80	@ 0x50
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000454:	4b1b      	ldr	r3, [pc, #108]	@ (80004c4 <MX_I2C2_Init+0x74>)
 8000456:	4a1c      	ldr	r2, [pc, #112]	@ (80004c8 <MX_I2C2_Init+0x78>)
 8000458:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 800045a:	4b1a      	ldr	r3, [pc, #104]	@ (80004c4 <MX_I2C2_Init+0x74>)
 800045c:	4a1b      	ldr	r2, [pc, #108]	@ (80004cc <MX_I2C2_Init+0x7c>)
 800045e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = (0x4f << 1);
 8000460:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <MX_I2C2_Init+0x74>)
 8000462:	229e      	movs	r2, #158	@ 0x9e
 8000464:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000466:	4b17      	ldr	r3, [pc, #92]	@ (80004c4 <MX_I2C2_Init+0x74>)
 8000468:	2201      	movs	r2, #1
 800046a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800046c:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <MX_I2C2_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000472:	4b14      	ldr	r3, [pc, #80]	@ (80004c4 <MX_I2C2_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000478:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <MX_I2C2_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800047e:	4b11      	ldr	r3, [pc, #68]	@ (80004c4 <MX_I2C2_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000484:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <MX_I2C2_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800048a:	480e      	ldr	r0, [pc, #56]	@ (80004c4 <MX_I2C2_Init+0x74>)
 800048c:	f000 fe0a 	bl	80010a4 <HAL_I2C_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000496:	f000 f8e7 	bl	8000668 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800049a:	2100      	movs	r1, #0
 800049c:	4809      	ldr	r0, [pc, #36]	@ (80004c4 <MX_I2C2_Init+0x74>)
 800049e:	f002 faf9 	bl	8002a94 <HAL_I2CEx_ConfigAnalogFilter>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004a8:	f000 f8de 	bl	8000668 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004ac:	2100      	movs	r1, #0
 80004ae:	4805      	ldr	r0, [pc, #20]	@ (80004c4 <MX_I2C2_Init+0x74>)
 80004b0:	f002 fb3b 	bl	8002b2a <HAL_I2CEx_ConfigDigitalFilter>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004ba:	f000 f8d5 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000130 	.word	0x20000130
 80004c8:	40005800 	.word	0x40005800
 80004cc:	10805d88 	.word	0x10805d88

080004d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08e      	sub	sp, #56	@ 0x38
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e4:	f107 031c 	add.w	r3, r7, #28
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f0:	463b      	mov	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
 80004fe:	615a      	str	r2, [r3, #20]
 8000500:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000502:	4b33      	ldr	r3, [pc, #204]	@ (80005d0 <MX_TIM2_Init+0x100>)
 8000504:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000508:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 800050a:	4b31      	ldr	r3, [pc, #196]	@ (80005d0 <MX_TIM2_Init+0x100>)
 800050c:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000510:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000512:	4b2f      	ldr	r3, [pc, #188]	@ (80005d0 <MX_TIM2_Init+0x100>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000518:	4b2d      	ldr	r3, [pc, #180]	@ (80005d0 <MX_TIM2_Init+0x100>)
 800051a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800051e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000520:	4b2b      	ldr	r3, [pc, #172]	@ (80005d0 <MX_TIM2_Init+0x100>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000526:	4b2a      	ldr	r3, [pc, #168]	@ (80005d0 <MX_TIM2_Init+0x100>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800052c:	4828      	ldr	r0, [pc, #160]	@ (80005d0 <MX_TIM2_Init+0x100>)
 800052e:	f004 ffa1 	bl	8005474 <HAL_TIM_Base_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000538:	f000 f896 	bl	8000668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800053c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000540:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000542:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000546:	4619      	mov	r1, r3
 8000548:	4821      	ldr	r0, [pc, #132]	@ (80005d0 <MX_TIM2_Init+0x100>)
 800054a:	f005 fa5f 	bl	8005a0c <HAL_TIM_ConfigClockSource>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000554:	f000 f888 	bl	8000668 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000558:	481d      	ldr	r0, [pc, #116]	@ (80005d0 <MX_TIM2_Init+0x100>)
 800055a:	f004 ffe2 	bl	8005522 <HAL_TIM_PWM_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000564:	f000 f880 	bl	8000668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000570:	f107 031c 	add.w	r3, r7, #28
 8000574:	4619      	mov	r1, r3
 8000576:	4816      	ldr	r0, [pc, #88]	@ (80005d0 <MX_TIM2_Init+0x100>)
 8000578:	f005 ff96 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000582:	f000 f871 	bl	8000668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000586:	2360      	movs	r3, #96	@ 0x60
 8000588:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000596:	463b      	mov	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	4619      	mov	r1, r3
 800059c:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <MX_TIM2_Init+0x100>)
 800059e:	f005 f921 	bl	80057e4 <HAL_TIM_PWM_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80005a8:	f000 f85e 	bl	8000668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	2204      	movs	r2, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	4807      	ldr	r0, [pc, #28]	@ (80005d0 <MX_TIM2_Init+0x100>)
 80005b4:	f005 f916 	bl	80057e4 <HAL_TIM_PWM_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80005be:	f000 f853 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005c2:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <MX_TIM2_Init+0x100>)
 80005c4:	f000 f900 	bl	80007c8 <HAL_TIM_MspPostInit>

}
 80005c8:	bf00      	nop
 80005ca:	3738      	adds	r7, #56	@ 0x38
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000184 	.word	0x20000184

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <MX_GPIO_Init+0x90>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000664 <MX_GPIO_Init+0x90>)
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <MX_GPIO_Init+0x90>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	f003 0320 	and.w	r3, r3, #32
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <MX_GPIO_Init+0x90>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	4a17      	ldr	r2, [pc, #92]	@ (8000664 <MX_GPIO_Init+0x90>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <MX_GPIO_Init+0x90>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_GPIO_Init+0x90>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_GPIO_Init+0x90>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_GPIO_Init+0x90>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2101      	movs	r1, #1
 8000636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063a:	f000 fd1b 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800063e:	2301      	movs	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000658:	f000 fb8a 	bl	8000d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800065c:	bf00      	nop
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <Error_Handler+0x8>

08000674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <HAL_MspInit+0x44>)
 800067c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800067e:	4a0e      	ldr	r2, [pc, #56]	@ (80006b8 <HAL_MspInit+0x44>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6613      	str	r3, [r2, #96]	@ 0x60
 8000686:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <HAL_MspInit+0x44>)
 8000688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <HAL_MspInit+0x44>)
 8000694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000696:	4a08      	ldr	r2, [pc, #32]	@ (80006b8 <HAL_MspInit+0x44>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069c:	6593      	str	r3, [r2, #88]	@ 0x58
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <HAL_MspInit+0x44>)
 80006a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006aa:	f003 fff1 	bl	8004690 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b09a      	sub	sp, #104	@ 0x68
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2244      	movs	r2, #68	@ 0x44
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f00a f821 	bl	800a724 <memset>
  if(hi2c->Instance==I2C2)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a27      	ldr	r2, [pc, #156]	@ (8000784 <HAL_I2C_MspInit+0xc8>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d147      	bne.n	800077c <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006ec:	2380      	movs	r3, #128	@ 0x80
 80006ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 fccb 	bl	8005094 <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000704:	f7ff ffb0 	bl	8000668 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <HAL_I2C_MspInit+0xcc>)
 800070a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070c:	4a1e      	ldr	r2, [pc, #120]	@ (8000788 <HAL_I2C_MspInit+0xcc>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000714:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <HAL_I2C_MspInit+0xcc>)
 8000716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000720:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000724:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000726:	2312      	movs	r3, #18
 8000728:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000732:	2304      	movs	r3, #4
 8000734:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800073a:	4619      	mov	r1, r3
 800073c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000740:	f000 fb16 	bl	8000d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000744:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <HAL_I2C_MspInit+0xcc>)
 8000746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000748:	4a0f      	ldr	r2, [pc, #60]	@ (8000788 <HAL_I2C_MspInit+0xcc>)
 800074a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800074e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000750:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <HAL_I2C_MspInit+0xcc>)
 8000752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	2021      	movs	r0, #33	@ 0x21
 8000762:	f000 fa5c 	bl	8000c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000766:	2021      	movs	r0, #33	@ 0x21
 8000768:	f000 fa73 	bl	8000c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2100      	movs	r1, #0
 8000770:	2022      	movs	r0, #34	@ 0x22
 8000772:	f000 fa54 	bl	8000c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000776:	2022      	movs	r0, #34	@ 0x22
 8000778:	f000 fa6b 	bl	8000c52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800077c:	bf00      	nop
 800077e:	3768      	adds	r7, #104	@ 0x68
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40005800 	.word	0x40005800
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800079c:	d10b      	bne.n	80007b6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <HAL_TIM_Base_MspInit+0x38>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a2:	4a08      	ldr	r2, [pc, #32]	@ (80007c4 <HAL_TIM_Base_MspInit+0x38>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <HAL_TIM_Base_MspInit+0x38>)
 80007ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007e8:	d11c      	bne.n	8000824 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <HAL_TIM_MspPostInit+0x64>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <HAL_TIM_MspPostInit+0x64>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <HAL_TIM_MspPostInit+0x64>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000802:	2322      	movs	r3, #34	@ 0x22
 8000804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000820:	f000 faa6 	bl	8000d70 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <NMI_Handler+0x4>

08000838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <MemManage_Handler+0x4>

08000848 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <UsageFault_Handler+0x4>

08000858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000886:	f000 f8af 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000894:	4802      	ldr	r0, [pc, #8]	@ (80008a0 <USB_LP_IRQHandler+0x10>)
 8000896:	f002 faa6 	bl	8002de6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200007a4 	.word	0x200007a4

080008a4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80008a8:	4802      	ldr	r0, [pc, #8]	@ (80008b4 <I2C2_EV_IRQHandler+0x10>)
 80008aa:	f000 fe1b 	bl	80014e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000130 	.word	0x20000130

080008b8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80008bc:	4802      	ldr	r0, [pc, #8]	@ (80008c8 <I2C2_ER_IRQHandler+0x10>)
 80008be:	f000 fe2b 	bl	8001518 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000130 	.word	0x20000130

080008cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f0:	480d      	ldr	r0, [pc, #52]	@ (8000928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f4:	f7ff ffea 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	@ (800092c <LoopForever+0x6>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	@ (8000930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <LoopForever+0xe>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	@ (800093c <LoopForever+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800091e:	f009 ff09 	bl	800a734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000922:	f7ff fd27 	bl	8000374 <main>

08000926 <LoopForever>:

LoopForever:
    b LoopForever
 8000926:	e7fe      	b.n	8000926 <LoopForever>
  ldr   r0, =_estack
 8000928:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8000934:	0800a878 	.word	0x0800a878
  ldr r2, =_sbss
 8000938:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 800093c:	20000ea0 	.word	0x20000ea0

08000940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_2_IRQHandler>

08000942 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000948:	2300      	movs	r3, #0
 800094a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f95b 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f80e 	bl	8000974 <HAL_InitTick>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	e001      	b.n	8000968 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000964:	f7ff fe86 	bl	8000674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000968:	79fb      	ldrb	r3, [r7, #7]

}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <HAL_InitTick+0x68>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d022      	beq.n	80009ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <HAL_InitTick+0x6c>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <HAL_InitTick+0x68>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000994:	fbb1 f3f3 	udiv	r3, r1, r3
 8000998:	fbb2 f3f3 	udiv	r3, r2, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f966 	bl	8000c6e <HAL_SYSTICK_Config>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10f      	bne.n	80009c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b0f      	cmp	r3, #15
 80009ac:	d809      	bhi.n	80009c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ae:	2200      	movs	r2, #0
 80009b0:	6879      	ldr	r1, [r7, #4]
 80009b2:	f04f 30ff 	mov.w	r0, #4294967295
 80009b6:	f000 f932 	bl	8000c1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <HAL_InitTick+0x70>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	e007      	b.n	80009d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	73fb      	strb	r3, [r7, #15]
 80009c6:	e004      	b.n	80009d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	e001      	b.n	80009d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <HAL_IncTick+0x1c>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <HAL_IncTick+0x20>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a03      	ldr	r2, [pc, #12]	@ (8000a04 <HAL_IncTick+0x1c>)
 80009f8:	6013      	str	r3, [r2, #0]
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200001d0 	.word	0x200001d0
 8000a08:	20000008 	.word	0x20000008

08000a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a10:	4b03      	ldr	r3, [pc, #12]	@ (8000a20 <HAL_GetTick+0x14>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200001d0 	.word	0x200001d0

08000a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff ffee 	bl	8000a0c <HAL_GetTick>
 8000a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3c:	d004      	beq.n	8000a48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_Delay+0x40>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4413      	add	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a48:	bf00      	nop
 8000a4a:	f7ff ffdf 	bl	8000a0c <HAL_GetTick>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d8f7      	bhi.n	8000a4a <HAL_Delay+0x26>
  {
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000008 	.word	0x20000008

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db0b      	blt.n	8000af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	4907      	ldr	r1, [pc, #28]	@ (8000b04 <__NVIC_EnableIRQ+0x38>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2001      	movs	r0, #1
 8000aee:	fa00 f202 	lsl.w	r2, r0, r2
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	@ (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	@ (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	@ 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	@ 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bd4:	d301      	bcc.n	8000bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00f      	b.n	8000bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <SysTick_Config+0x40>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be2:	210f      	movs	r1, #15
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f7ff ff8e 	bl	8000b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <SysTick_Config+0x40>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf2:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <SysTick_Config+0x40>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff29 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2c:	f7ff ff40 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000c30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f7ff ff90 	bl	8000b5c <NVIC_EncodePriority>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff5f 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff33 	bl	8000acc <__NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffa4 	bl	8000bc4 <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d00d      	beq.n	8000cba <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e047      	b.n	8000d4a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f022 020e 	bic.w	r2, r2, #14
 8000cc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 0201 	bic.w	r2, r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	f003 021f 	and.w	r2, r3, #31
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000d06:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00c      	beq.n	8000d2a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000d1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000d28:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	4798      	blx	r3
    }
  }
  return status;
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d62:	b2db      	uxtb	r3, r3
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d7e:	e15a      	b.n	8001036 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	2101      	movs	r1, #1
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 814c 	beq.w	8001030 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d005      	beq.n	8000db0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d130      	bne.n	8000e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000de6:	2201      	movs	r2, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	091b      	lsrs	r3, r3, #4
 8000dfc:	f003 0201 	and.w	r2, r3, #1
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d017      	beq.n	8000e4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d123      	bne.n	8000ea2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	08da      	lsrs	r2, r3, #3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	6939      	ldr	r1, [r7, #16]
 8000e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0203 	and.w	r2, r3, #3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 80a6 	beq.w	8001030 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee4:	4b5b      	ldr	r3, [pc, #364]	@ (8001054 <HAL_GPIO_Init+0x2e4>)
 8000ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee8:	4a5a      	ldr	r2, [pc, #360]	@ (8001054 <HAL_GPIO_Init+0x2e4>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef0:	4b58      	ldr	r3, [pc, #352]	@ (8001054 <HAL_GPIO_Init+0x2e4>)
 8000ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efc:	4a56      	ldr	r2, [pc, #344]	@ (8001058 <HAL_GPIO_Init+0x2e8>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f26:	d01f      	beq.n	8000f68 <HAL_GPIO_Init+0x1f8>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a4c      	ldr	r2, [pc, #304]	@ (800105c <HAL_GPIO_Init+0x2ec>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d019      	beq.n	8000f64 <HAL_GPIO_Init+0x1f4>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a4b      	ldr	r2, [pc, #300]	@ (8001060 <HAL_GPIO_Init+0x2f0>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d013      	beq.n	8000f60 <HAL_GPIO_Init+0x1f0>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8001064 <HAL_GPIO_Init+0x2f4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d00d      	beq.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a49      	ldr	r2, [pc, #292]	@ (8001068 <HAL_GPIO_Init+0x2f8>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d007      	beq.n	8000f58 <HAL_GPIO_Init+0x1e8>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a48      	ldr	r2, [pc, #288]	@ (800106c <HAL_GPIO_Init+0x2fc>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d101      	bne.n	8000f54 <HAL_GPIO_Init+0x1e4>
 8000f50:	2305      	movs	r3, #5
 8000f52:	e00a      	b.n	8000f6a <HAL_GPIO_Init+0x1fa>
 8000f54:	2306      	movs	r3, #6
 8000f56:	e008      	b.n	8000f6a <HAL_GPIO_Init+0x1fa>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	e006      	b.n	8000f6a <HAL_GPIO_Init+0x1fa>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e004      	b.n	8000f6a <HAL_GPIO_Init+0x1fa>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e002      	b.n	8000f6a <HAL_GPIO_Init+0x1fa>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <HAL_GPIO_Init+0x1fa>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	f002 0203 	and.w	r2, r2, #3
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	4093      	lsls	r3, r2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f7a:	4937      	ldr	r1, [pc, #220]	@ (8001058 <HAL_GPIO_Init+0x2e8>)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f88:	4b39      	ldr	r3, [pc, #228]	@ (8001070 <HAL_GPIO_Init+0x300>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fac:	4a30      	ldr	r2, [pc, #192]	@ (8001070 <HAL_GPIO_Init+0x300>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001070 <HAL_GPIO_Init+0x300>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fd6:	4a26      	ldr	r2, [pc, #152]	@ (8001070 <HAL_GPIO_Init+0x300>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000fdc:	4b24      	ldr	r3, [pc, #144]	@ (8001070 <HAL_GPIO_Init+0x300>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001000:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <HAL_GPIO_Init+0x300>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <HAL_GPIO_Init+0x300>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800102a:	4a11      	ldr	r2, [pc, #68]	@ (8001070 <HAL_GPIO_Init+0x300>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	f47f ae9d 	bne.w	8000d80 <HAL_GPIO_Init+0x10>
  }
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000
 800105c:	48000400 	.word	0x48000400
 8001060:	48000800 	.word	0x48000800
 8001064:	48000c00 	.word	0x48000c00
 8001068:	48001000 	.word	0x48001000
 800106c:	48001400 	.word	0x48001400
 8001070:	40010400 	.word	0x40010400

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001090:	e002      	b.n	8001098 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e08d      	b.n	80011d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff faf6 	bl	80006bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2224      	movs	r2, #36	@ 0x24
 80010d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001104:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d107      	bne.n	800111e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	e006      	b.n	800112c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800112a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d108      	bne.n	8001146 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	e007      	b.n	8001156 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001154:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001168:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001178:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691a      	ldr	r2, [r3, #16]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69d9      	ldr	r1, [r3, #28]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1a      	ldr	r2, [r3, #32]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2220      	movs	r2, #32
 80011be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	4613      	mov	r3, r2
 80011ea:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80011f8:	2b28      	cmp	r3, #40	@ 0x28
 80011fa:	f040 8098 	bne.w	800132e <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001210:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e08c      	b.n	8001330 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001216:	f248 0101 	movw	r1, #32769	@ 0x8001
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f001 fbdc 	bl	80029d8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 800122a:	2302      	movs	r3, #2
 800122c:	e080      	b.n	8001330 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001240:	d12a      	bne.n	8001298 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001242:	2102      	movs	r1, #2
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f001 fbc7 	bl	80029d8 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001258:	d11e      	bne.n	8001298 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001268:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800126e:	2b00      	cmp	r3, #0
 8001270:	d012      	beq.n	8001298 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001276:	4a30      	ldr	r2, [pc, #192]	@ (8001338 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8001278:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fd01 	bl	8000c86 <HAL_DMA_Abort_IT>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800128e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001294:	4610      	mov	r0, r2
 8001296:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2229      	movs	r2, #41	@ 0x29
 800129c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2220      	movs	r2, #32
 80012a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012bc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	88fa      	ldrh	r2, [r7, #6]
 80012c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4a17      	ldr	r2, [pc, #92]	@ (800133c <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 80012de:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	0c1b      	lsrs	r3, r3, #16
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d106      	bne.n	8001318 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 800130a:	7dfb      	ldrb	r3, [r7, #23]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2208      	movs	r2, #8
 8001316:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001320:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f001 fad3 	bl	80028d0 <I2C_Enable_IRQ>

    return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
  }
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	0800282f 	.word	0x0800282f
 800133c:	08001657 	.word	0x08001657

08001340 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	4613      	mov	r3, r2
 800134e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800135c:	2b28      	cmp	r3, #40	@ 0x28
 800135e:	f040 8098 	bne.w	8001492 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d105      	bne.n	800137a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001374:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e08c      	b.n	8001494 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800137a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f001 fb2a 	bl	80029d8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 800138e:	2302      	movs	r3, #2
 8001390:	e080      	b.n	8001494 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b29      	cmp	r3, #41	@ 0x29
 80013a4:	d12a      	bne.n	80013fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80013a6:	2101      	movs	r1, #1
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f001 fb15 	bl	80029d8 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80013bc:	d11e      	bne.n	80013fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80013cc:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d012      	beq.n	80013fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013da:	4a30      	ldr	r2, [pc, #192]	@ (800149c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 80013dc:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fc4f 	bl	8000c86 <HAL_DMA_Abort_IT>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013f8:	4610      	mov	r0, r2
 80013fa:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	222a      	movs	r2, #42	@ 0x2a
 8001400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2220      	movs	r2, #32
 8001408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001420:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	88fa      	ldrh	r2, [r7, #6]
 800142c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001432:	b29a      	uxth	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8001442:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b08      	cmp	r3, #8
 8001450:	bf0c      	ite	eq
 8001452:	2301      	moveq	r3, #1
 8001454:	2300      	movne	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	0c1b      	lsrs	r3, r3, #16
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2208      	movs	r2, #8
 800147a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001484:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f001 fa21 	bl	80028d0 <I2C_Enable_IRQ>

    return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
  }
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	0800282f 	.word	0x0800282f
 80014a0:	08001657 	.word	0x08001657

080014a4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d10d      	bne.n	80014d4 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2228      	movs	r2, #40	@ 0x28
 80014bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a07      	ldr	r2, [pc, #28]	@ (80014e0 <HAL_I2C_EnableListen_IT+0x3c>)
 80014c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80014c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f001 fa00 	bl	80028d0 <I2C_Enable_IRQ>

    return HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e000      	b.n	80014d6 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80014d4:	2302      	movs	r3, #2
  }
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	08001657 	.word	0x08001657

080014e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	68f9      	ldr	r1, [r7, #12]
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	4798      	blx	r3
  }
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d010      	beq.n	800155e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	09db      	lsrs	r3, r3, #7
 8001540:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00a      	beq.n	800155e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800155c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	0a9b      	lsrs	r3, r3, #10
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d010      	beq.n	800158c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	09db      	lsrs	r3, r3, #7
 800156e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00a      	beq.n	800158c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	f043 0208 	orr.w	r2, r3, #8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800158a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	0a5b      	lsrs	r3, r3, #9
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d010      	beq.n	80015ba <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	09db      	lsrs	r3, r3, #7
 800159c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00a      	beq.n	80015ba <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a8:	f043 0202 	orr.w	r2, r3, #2
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 030b 	and.w	r3, r3, #11
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80015ca:	68f9      	ldr	r1, [r7, #12]
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fff3 	bl	80025b8 <I2C_ITError>
  }
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001666:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <I2C_Slave_ISR_IT+0x24>
 8001676:	2302      	movs	r3, #2
 8001678:	e0ed      	b.n	8001856 <I2C_Slave_ISR_IT+0x200>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	095b      	lsrs	r3, r3, #5
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00a      	beq.n	80016a4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	095b      	lsrs	r3, r3, #5
 8001692:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800169a:	6939      	ldr	r1, [r7, #16]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 fdcb 	bl	8002238 <I2C_ITSlaveCplt>
 80016a2:	e0d3      	b.n	800184c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d04d      	beq.n	800174c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d047      	beq.n	800174c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d128      	bne.n	8001718 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b28      	cmp	r3, #40	@ 0x28
 80016d0:	d108      	bne.n	80016e4 <I2C_Slave_ISR_IT+0x8e>
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80016d8:	d104      	bne.n	80016e4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80016da:	6939      	ldr	r1, [r7, #16]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 ff15 	bl	800250c <I2C_ITListenCplt>
 80016e2:	e032      	b.n	800174a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b29      	cmp	r3, #41	@ 0x29
 80016ee:	d10e      	bne.n	800170e <I2C_Slave_ISR_IT+0xb8>
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80016f6:	d00a      	beq.n	800170e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2210      	movs	r2, #16
 80016fe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f001 f870 	bl	80027e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 fc6e 	bl	8001fe8 <I2C_ITSlaveSeqCplt>
 800170c:	e01d      	b.n	800174a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2210      	movs	r2, #16
 8001714:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001716:	e096      	b.n	8001846 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2210      	movs	r2, #16
 800171e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001724:	f043 0204 	orr.w	r2, r3, #4
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <I2C_Slave_ISR_IT+0xe6>
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001738:	f040 8085 	bne.w	8001846 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001740:	4619      	mov	r1, r3
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 ff38 	bl	80025b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001748:	e07d      	b.n	8001846 <I2C_Slave_ISR_IT+0x1f0>
 800174a:	e07c      	b.n	8001846 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d030      	beq.n	80017ba <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001760:	2b00      	cmp	r3, #0
 8001762:	d02a      	beq.n	80017ba <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001768:	b29b      	uxth	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d018      	beq.n	80017a0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800178a:	3b01      	subs	r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001796:	b29b      	uxth	r3, r3
 8001798:	3b01      	subs	r3, #1
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d14f      	bne.n	800184a <I2C_Slave_ISR_IT+0x1f4>
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80017b0:	d04b      	beq.n	800184a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 fc18 	bl	8001fe8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80017b8:	e047      	b.n	800184a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	08db      	lsrs	r3, r3, #3
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80017d2:	6939      	ldr	r1, [r7, #16]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fb46 	bl	8001e66 <I2C_ITAddrCplt>
 80017da:	e037      	b.n	800184c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d031      	beq.n	800184c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	085b      	lsrs	r3, r3, #1
 80017ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d02b      	beq.n	800184c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d018      	beq.n	8001830 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001818:	b29b      	uxth	r3, r3
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001826:	3b01      	subs	r3, #1
 8001828:	b29a      	uxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800182e:	e00d      	b.n	800184c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001836:	d002      	beq.n	800183e <I2C_Slave_ISR_IT+0x1e8>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d106      	bne.n	800184c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 fbd2 	bl	8001fe8 <I2C_ITSlaveSeqCplt>
 8001844:	e002      	b.n	800184c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8001846:	bf00      	nop
 8001848:	e000      	b.n	800184c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800184a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b088      	sub	sp, #32
 8001862:	af02      	add	r7, sp, #8
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <I2C_Master_ISR_DMA+0x1a>
 8001874:	2302      	movs	r3, #2
 8001876:	e0e1      	b.n	8001a3c <I2C_Master_ISR_DMA+0x1de>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d017      	beq.n	80018bc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001894:	2b00      	cmp	r3, #0
 8001896:	d011      	beq.n	80018bc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2210      	movs	r2, #16
 800189e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a4:	f043 0204 	orr.w	r2, r3, #4
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80018ac:	2120      	movs	r1, #32
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f001 f80e 	bl	80028d0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 ff96 	bl	80027e6 <I2C_Flush_TXDR>
 80018ba:	e0ba      	b.n	8001a32 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	09db      	lsrs	r3, r3, #7
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d072      	beq.n	80019ae <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	099b      	lsrs	r3, r3, #6
 80018cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d06c      	beq.n	80019ae <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018e2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d04e      	beq.n	800198c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018fa:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001900:	b29b      	uxth	r3, r3
 8001902:	2bff      	cmp	r3, #255	@ 0xff
 8001904:	d906      	bls.n	8001914 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	22ff      	movs	r2, #255	@ 0xff
 800190a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800190c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e010      	b.n	8001936 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001922:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001926:	d003      	beq.n	8001930 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e002      	b.n	8001936 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001930:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001934:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800193a:	b2da      	uxtb	r2, r3
 800193c:	8a79      	ldrh	r1, [r7, #18]
 800193e:	2300      	movs	r3, #0
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 ff91 	bl	800286c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b22      	cmp	r3, #34	@ 0x22
 8001966:	d108      	bne.n	800197a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001976:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001978:	e05b      	b.n	8001a32 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001988:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800198a:	e052      	b.n	8001a32 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800199a:	d003      	beq.n	80019a4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 fae6 	bl	8001f6e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80019a2:	e046      	b.n	8001a32 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80019a4:	2140      	movs	r1, #64	@ 0x40
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 fe06 	bl	80025b8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80019ac:	e041      	b.n	8001a32 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	099b      	lsrs	r3, r3, #6
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d029      	beq.n	8001a0e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	099b      	lsrs	r3, r3, #6
 80019be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d023      	beq.n	8001a0e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d119      	bne.n	8001a04 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019de:	d027      	beq.n	8001a30 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80019e8:	d108      	bne.n	80019fc <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019f8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80019fa:	e019      	b.n	8001a30 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 fab6 	bl	8001f6e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001a02:	e015      	b.n	8001a30 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a04:	2140      	movs	r1, #64	@ 0x40
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fdd6 	bl	80025b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a0c:	e010      	b.n	8001a30 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 fb3b 	bl	80020a4 <I2C_ITMasterCplt>
 8001a2e:	e000      	b.n	8001a32 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001a30:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001a50:	4b92      	ldr	r3, [pc, #584]	@ (8001c9c <I2C_Mem_ISR_DMA+0x258>)
 8001a52:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <I2C_Mem_ISR_DMA+0x1e>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e118      	b.n	8001c94 <I2C_Mem_ISR_DMA+0x250>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d017      	beq.n	8001aa6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d011      	beq.n	8001aa6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2210      	movs	r2, #16
 8001a88:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f043 0204 	orr.w	r2, r3, #4
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001a96:	2120      	movs	r1, #32
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 ff19 	bl	80028d0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fea1 	bl	80027e6 <I2C_Flush_TXDR>
 8001aa4:	e0f1      	b.n	8001c8a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	085b      	lsrs	r3, r3, #1
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00f      	beq.n	8001ad2 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ac6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f04f 32ff 	mov.w	r2, #4294967295
 8001ace:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ad0:	e0db      	b.n	8001c8a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	09db      	lsrs	r3, r3, #7
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d060      	beq.n	8001ba0 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d05a      	beq.n	8001ba0 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001aea:	2101      	movs	r1, #1
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 ff73 	bl	80029d8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001af2:	2110      	movs	r1, #16
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 feeb 	bl	80028d0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d048      	beq.n	8001b96 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2bff      	cmp	r3, #255	@ 0xff
 8001b0c:	d910      	bls.n	8001b30 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	22ff      	movs	r2, #255	@ 0xff
 8001b12:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	2300      	movs	r3, #0
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fe9f 	bl	800286c <I2C_TransferConfig>
 8001b2e:	e011      	b.n	8001b54 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	b299      	uxth	r1, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fe8c 	bl	800286c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b22      	cmp	r3, #34	@ 0x22
 8001b70:	d108      	bne.n	8001b84 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b80:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001b82:	e082      	b.n	8001c8a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b92:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001b94:	e079      	b.n	8001c8a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001b96:	2140      	movs	r1, #64	@ 0x40
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 fd0d 	bl	80025b8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001b9e:	e074      	b.n	8001c8a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	099b      	lsrs	r3, r3, #6
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d05e      	beq.n	8001c6a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d058      	beq.n	8001c6a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 ff0c 	bl	80029d8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 fe84 	bl	80028d0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b22      	cmp	r3, #34	@ 0x22
 8001bd2:	d101      	bne.n	8001bd8 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8001bd4:	4b32      	ldr	r3, [pc, #200]	@ (8001ca0 <I2C_Mem_ISR_DMA+0x25c>)
 8001bd6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2bff      	cmp	r3, #255	@ 0xff
 8001be0:	d910      	bls.n	8001c04 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	22ff      	movs	r2, #255	@ 0xff
 8001be6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bec:	b299      	uxth	r1, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fe35 	bl	800286c <I2C_TransferConfig>
 8001c02:	e011      	b.n	8001c28 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	b299      	uxth	r1, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fe22 	bl	800286c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b22      	cmp	r3, #34	@ 0x22
 8001c44:	d108      	bne.n	8001c58 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c54:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c56:	e018      	b.n	8001c8a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c66:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c68:	e00f      	b.n	8001c8a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	095b      	lsrs	r3, r3, #5
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001c82:	68b9      	ldr	r1, [r7, #8]
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 fa0d 	bl	80020a4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	80002000 	.word	0x80002000
 8001ca0:	80002400 	.word	0x80002400

08001ca4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <I2C_Slave_ISR_DMA+0x24>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e0ca      	b.n	8001e5e <I2C_Slave_ISR_DMA+0x1ba>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00a      	beq.n	8001cf2 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d004      	beq.n	8001cf2 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 faa4 	bl	8002238 <I2C_ITSlaveCplt>
 8001cf0:	e0b0      	b.n	8001e54 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 809a 	beq.w	8001e34 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8093 	beq.w	8001e34 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	0b9b      	lsrs	r3, r3, #14
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	0bdb      	lsrs	r3, r3, #15
 8001d1e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d07f      	beq.n	8001e26 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0bdb      	lsrs	r3, r3, #15
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	0b9b      	lsrs	r3, r3, #14
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d128      	bne.n	8001dc6 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b28      	cmp	r3, #40	@ 0x28
 8001d7e:	d108      	bne.n	8001d92 <I2C_Slave_ISR_DMA+0xee>
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d86:	d104      	bne.n	8001d92 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 fbbe 	bl	800250c <I2C_ITListenCplt>
 8001d90:	e048      	b.n	8001e24 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b29      	cmp	r3, #41	@ 0x29
 8001d9c:	d10e      	bne.n	8001dbc <I2C_Slave_ISR_DMA+0x118>
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001da4:	d00a      	beq.n	8001dbc <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2210      	movs	r2, #16
 8001dac:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 fd19 	bl	80027e6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f917 	bl	8001fe8 <I2C_ITSlaveSeqCplt>
 8001dba:	e033      	b.n	8001e24 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001dc4:	e034      	b.n	8001e30 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2210      	movs	r2, #16
 8001dcc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f043 0204 	orr.w	r2, r3, #4
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <I2C_Slave_ISR_DMA+0x14c>
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dee:	d11f      	bne.n	8001e30 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001df0:	7dfb      	ldrb	r3, [r7, #23]
 8001df2:	2b21      	cmp	r3, #33	@ 0x21
 8001df4:	d002      	beq.n	8001dfc <I2C_Slave_ISR_DMA+0x158>
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b29      	cmp	r3, #41	@ 0x29
 8001dfa:	d103      	bne.n	8001e04 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2221      	movs	r2, #33	@ 0x21
 8001e00:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e02:	e008      	b.n	8001e16 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b22      	cmp	r3, #34	@ 0x22
 8001e08:	d002      	beq.n	8001e10 <I2C_Slave_ISR_DMA+0x16c>
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e0e:	d102      	bne.n	8001e16 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2222      	movs	r2, #34	@ 0x22
 8001e14:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fbcb 	bl	80025b8 <I2C_ITError>
      if (treatdmanack == 1U)
 8001e22:	e005      	b.n	8001e30 <I2C_Slave_ISR_DMA+0x18c>
 8001e24:	e004      	b.n	8001e30 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e2e:	e011      	b.n	8001e54 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8001e30:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e32:	e00f      	b.n	8001e54 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	08db      	lsrs	r3, r3, #3
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	08db      	lsrs	r3, r3, #3
 8001e44:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f809 	bl	8001e66 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001e7c:	2b28      	cmp	r3, #40	@ 0x28
 8001e7e:	d16a      	bne.n	8001f56 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001e9e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eac:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001eba:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d138      	bne.n	8001f36 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001ec4:	897b      	ldrh	r3, [r7, #10]
 8001ec6:	09db      	lsrs	r3, r3, #7
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	89bb      	ldrh	r3, [r7, #12]
 8001ecc:	4053      	eors	r3, r2
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	f003 0306 	and.w	r3, r3, #6
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d11c      	bne.n	8001f12 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001ed8:	897b      	ldrh	r3, [r7, #10]
 8001eda:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d13b      	bne.n	8001f66 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2208      	movs	r2, #8
 8001efa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f04:	89ba      	ldrh	r2, [r7, #12]
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe f990 	bl	8000230 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001f10:	e029      	b.n	8001f66 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001f12:	893b      	ldrh	r3, [r7, #8]
 8001f14:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001f16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fd5c 	bl	80029d8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f28:	89ba      	ldrh	r2, [r7, #12]
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe f97e 	bl	8000230 <HAL_I2C_AddrCallback>
}
 8001f34:	e017      	b.n	8001f66 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001f36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fd4c 	bl	80029d8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f48:	89ba      	ldrh	r2, [r7, #12]
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe f96e 	bl	8000230 <HAL_I2C_AddrCallback>
}
 8001f54:	e007      	b.n	8001f66 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b21      	cmp	r3, #33	@ 0x21
 8001f88:	d115      	bne.n	8001fb6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2211      	movs	r2, #17
 8001f96:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fd19 	bl	80029d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fb13 	bl	80015da <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001fb4:	e014      	b.n	8001fe0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2212      	movs	r2, #18
 8001fc2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001fca:	2102      	movs	r1, #2
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fd03 	bl	80029d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fb07 	bl	80015ee <HAL_I2C_MasterRxCpltCallback>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	0b9b      	lsrs	r3, r3, #14
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e00d      	b.n	800203a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	0bdb      	lsrs	r3, r3, #15
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002038:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b29      	cmp	r3, #41	@ 0x29
 8002044:	d112      	bne.n	800206c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2228      	movs	r2, #40	@ 0x28
 800204a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2221      	movs	r2, #33	@ 0x21
 8002052:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002054:	2101      	movs	r1, #1
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fcbe 	bl	80029d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe f961 	bl	800032c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800206a:	e017      	b.n	800209c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b2a      	cmp	r3, #42	@ 0x2a
 8002076:	d111      	bne.n	800209c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2228      	movs	r2, #40	@ 0x28
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2222      	movs	r2, #34	@ 0x22
 8002084:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002086:	2102      	movs	r1, #2
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fca5 	bl	80029d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe f908 	bl	80002ac <HAL_I2C_SlaveRxCpltCallback>
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2220      	movs	r2, #32
 80020b8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b21      	cmp	r3, #33	@ 0x21
 80020c4:	d107      	bne.n	80020d6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020c6:	2101      	movs	r1, #1
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fc85 	bl	80029d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2211      	movs	r2, #17
 80020d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80020d4:	e00c      	b.n	80020f0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b22      	cmp	r3, #34	@ 0x22
 80020e0:	d106      	bne.n	80020f0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80020e2:	2102      	movs	r1, #2
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 fc77 	bl	80029d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2212      	movs	r2, #18
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6859      	ldr	r1, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002230 <I2C_ITMasterCplt+0x18c>)
 80020fc:	400b      	ands	r3, r1
 80020fe:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4a      	ldr	r2, [pc, #296]	@ (8002234 <I2C_ITMasterCplt+0x190>)
 800210a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2210      	movs	r2, #16
 800211e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b60      	cmp	r3, #96	@ 0x60
 8002136:	d10b      	bne.n	8002150 <I2C_ITMasterCplt+0xac>
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	b2db      	uxtb	r3, r3
 800214c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800214e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fb48 	bl	80027e6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b60      	cmp	r3, #96	@ 0x60
 8002166:	d002      	beq.n	800216e <I2C_ITMasterCplt+0xca>
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fa1f 	bl	80025b8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800217a:	e054      	b.n	8002226 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b21      	cmp	r3, #33	@ 0x21
 8002186:	d124      	bne.n	80021d2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b40      	cmp	r3, #64	@ 0x40
 80021a0:	d10b      	bne.n	80021ba <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fa25 	bl	8001602 <HAL_I2C_MemTxCpltCallback>
}
 80021b8:	e035      	b.n	8002226 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fa05 	bl	80015da <HAL_I2C_MasterTxCpltCallback>
}
 80021d0:	e029      	b.n	8002226 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b22      	cmp	r3, #34	@ 0x22
 80021dc:	d123      	bne.n	8002226 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b40      	cmp	r3, #64	@ 0x40
 80021f6:	d10b      	bne.n	8002210 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff fa04 	bl	8001616 <HAL_I2C_MemRxCpltCallback>
}
 800220e:	e00a      	b.n	8002226 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff f9e4 	bl	80015ee <HAL_I2C_MasterRxCpltCallback>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	fe00e800 	.word	0xfe00e800
 8002234:	ffff0000 	.word	0xffff0000

08002238 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002252:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800225a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2220      	movs	r2, #32
 8002262:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002264:	7afb      	ldrb	r3, [r7, #11]
 8002266:	2b21      	cmp	r3, #33	@ 0x21
 8002268:	d002      	beq.n	8002270 <I2C_ITSlaveCplt+0x38>
 800226a:	7afb      	ldrb	r3, [r7, #11]
 800226c:	2b29      	cmp	r3, #41	@ 0x29
 800226e:	d108      	bne.n	8002282 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002270:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fbaf 	bl	80029d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2221      	movs	r2, #33	@ 0x21
 800227e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002280:	e019      	b.n	80022b6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002282:	7afb      	ldrb	r3, [r7, #11]
 8002284:	2b22      	cmp	r3, #34	@ 0x22
 8002286:	d002      	beq.n	800228e <I2C_ITSlaveCplt+0x56>
 8002288:	7afb      	ldrb	r3, [r7, #11]
 800228a:	2b2a      	cmp	r3, #42	@ 0x2a
 800228c:	d108      	bne.n	80022a0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800228e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fba0 	bl	80029d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2222      	movs	r2, #34	@ 0x22
 800229c:	631a      	str	r2, [r3, #48]	@ 0x30
 800229e:	e00a      	b.n	80022b6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	2b28      	cmp	r3, #40	@ 0x28
 80022a4:	d107      	bne.n	80022b6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80022a6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fb94 	bl	80029d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002504 <I2C_ITSlaveCplt+0x2cc>)
 80022d2:	400b      	ands	r3, r1
 80022d4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa85 	bl	80027e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	0b9b      	lsrs	r3, r3, #14
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800230e:	e018      	b.n	8002342 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	0bdb      	lsrs	r3, r3, #15
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d012      	beq.n	8002342 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800232a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d020      	beq.n	8002390 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00c      	beq.n	8002390 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	f043 0204 	orr.w	r2, r3, #4
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d04a      	beq.n	8002448 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d044      	beq.n	8002448 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d128      	bne.n	800241a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b28      	cmp	r3, #40	@ 0x28
 80023d2:	d108      	bne.n	80023e6 <I2C_ITSlaveCplt+0x1ae>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023da:	d104      	bne.n	80023e6 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80023dc:	6979      	ldr	r1, [r7, #20]
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f894 	bl	800250c <I2C_ITListenCplt>
 80023e4:	e030      	b.n	8002448 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b29      	cmp	r3, #41	@ 0x29
 80023f0:	d10e      	bne.n	8002410 <I2C_ITSlaveCplt+0x1d8>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023f8:	d00a      	beq.n	8002410 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2210      	movs	r2, #16
 8002400:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f9ef 	bl	80027e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff fded 	bl	8001fe8 <I2C_ITSlaveSeqCplt>
 800240e:	e01b      	b.n	8002448 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2210      	movs	r2, #16
 8002416:	61da      	str	r2, [r3, #28]
 8002418:	e016      	b.n	8002448 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2210      	movs	r2, #16
 8002420:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f043 0204 	orr.w	r2, r3, #4
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <I2C_ITSlaveCplt+0x204>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800243a:	d105      	bne.n	8002448 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8b8 	bl	80025b8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	2b00      	cmp	r3, #0
 800245c:	d010      	beq.n	8002480 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f8a7 	bl	80025b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b28      	cmp	r3, #40	@ 0x28
 8002474:	d141      	bne.n	80024fa <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002476:	6979      	ldr	r1, [r7, #20]
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f847 	bl	800250c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800247e:	e03c      	b.n	80024fa <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002488:	d014      	beq.n	80024b4 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fdac 	bl	8001fe8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <I2C_ITSlaveCplt+0x2d0>)
 8002494:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7fd ff48 	bl	8000342 <HAL_I2C_ListenCpltCallback>
}
 80024b2:	e022      	b.n	80024fa <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b22      	cmp	r3, #34	@ 0x22
 80024be:	d10e      	bne.n	80024de <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fd fee8 	bl	80002ac <HAL_I2C_SlaveRxCpltCallback>
}
 80024dc:	e00d      	b.n	80024fa <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7fd ff19 	bl	800032c <HAL_I2C_SlaveTxCpltCallback>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	fe00e800 	.word	0xfe00e800
 8002508:	ffff0000 	.word	0xffff0000

0800250c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a26      	ldr	r2, [pc, #152]	@ (80025b4 <I2C_ITListenCplt+0xa8>)
 800251a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d022      	beq.n	800258a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	d012      	beq.n	800258a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f043 0204 	orr.w	r2, r3, #4
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800258a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fa22 	bl	80029d8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2210      	movs	r2, #16
 800259a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7fd fecc 	bl	8000342 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	ffff0000 	.word	0xffff0000

080025b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a6d      	ldr	r2, [pc, #436]	@ (800278c <I2C_ITError+0x1d4>)
 80025d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b28      	cmp	r3, #40	@ 0x28
 80025ee:	d005      	beq.n	80025fc <I2C_ITError+0x44>
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b29      	cmp	r3, #41	@ 0x29
 80025f4:	d002      	beq.n	80025fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80025fa:	d10b      	bne.n	8002614 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025fc:	2103      	movs	r1, #3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f9ea 	bl	80029d8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2228      	movs	r2, #40	@ 0x28
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a60      	ldr	r2, [pc, #384]	@ (8002790 <I2C_ITError+0x1d8>)
 8002610:	635a      	str	r2, [r3, #52]	@ 0x34
 8002612:	e030      	b.n	8002676 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002614:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f9dd 	bl	80029d8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8e1 	bl	80027e6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b60      	cmp	r3, #96	@ 0x60
 800262e:	d01f      	beq.n	8002670 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b20      	cmp	r3, #32
 8002644:	d114      	bne.n	8002670 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b10      	cmp	r3, #16
 8002652:	d109      	bne.n	8002668 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002660:	f043 0204 	orr.w	r2, r3, #4
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2220      	movs	r2, #32
 800266e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002680:	2b00      	cmp	r3, #0
 8002682:	d039      	beq.n	80026f8 <I2C_ITError+0x140>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b11      	cmp	r3, #17
 8002688:	d002      	beq.n	8002690 <I2C_ITError+0xd8>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b21      	cmp	r3, #33	@ 0x21
 800268e:	d133      	bne.n	80026f8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800269a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800269e:	d107      	bne.n	80026b0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fb4d 	bl	8000d54 <HAL_DMA_GetState>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d017      	beq.n	80026f0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c4:	4a33      	ldr	r2, [pc, #204]	@ (8002794 <I2C_ITError+0x1dc>)
 80026c6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fad6 	bl	8000c86 <HAL_DMA_Abort_IT>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d04d      	beq.n	800277c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026ea:	4610      	mov	r0, r2
 80026ec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026ee:	e045      	b.n	800277c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f851 	bl	8002798 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026f6:	e041      	b.n	800277c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d039      	beq.n	8002774 <I2C_ITError+0x1bc>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b12      	cmp	r3, #18
 8002704:	d002      	beq.n	800270c <I2C_ITError+0x154>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b22      	cmp	r3, #34	@ 0x22
 800270a:	d133      	bne.n	8002774 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800271a:	d107      	bne.n	800272c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800272a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fb0f 	bl	8000d54 <HAL_DMA_GetState>
 8002736:	4603      	mov	r3, r0
 8002738:	2b01      	cmp	r3, #1
 800273a:	d017      	beq.n	800276c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002740:	4a14      	ldr	r2, [pc, #80]	@ (8002794 <I2C_ITError+0x1dc>)
 8002742:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fa98 	bl	8000c86 <HAL_DMA_Abort_IT>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d011      	beq.n	8002780 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002766:	4610      	mov	r0, r2
 8002768:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800276a:	e009      	b.n	8002780 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f813 	bl	8002798 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002772:	e005      	b.n	8002780 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f80f 	bl	8002798 <I2C_TreatErrorCallback>
  }
}
 800277a:	e002      	b.n	8002782 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800277c:	bf00      	nop
 800277e:	e000      	b.n	8002782 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002780:	bf00      	nop
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	ffff0000 	.word	0xffff0000
 8002790:	08001657 	.word	0x08001657
 8002794:	0800282f 	.word	0x0800282f

08002798 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b60      	cmp	r3, #96	@ 0x60
 80027aa:	d10e      	bne.n	80027ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe ff31 	bl	800162a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80027c8:	e009      	b.n	80027de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7fd fdbd 	bl	8000358 <HAL_I2C_ErrorCallback>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d103      	bne.n	8002804 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2200      	movs	r2, #0
 8002802:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d007      	beq.n	8002822 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	619a      	str	r2, [r3, #24]
  }
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002848:	2200      	movs	r2, #0
 800284a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002858:	2200      	movs	r2, #0
 800285a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7ff ff9b 	bl	8002798 <I2C_TreatErrorCallback>
}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	817b      	strh	r3, [r7, #10]
 800287a:	4613      	mov	r3, r2
 800287c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002884:	7a7b      	ldrb	r3, [r7, #9]
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800288c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	4313      	orrs	r3, r2
 8002896:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800289a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	0d5b      	lsrs	r3, r3, #21
 80028a6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028aa:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <I2C_TransferConfig+0x60>)
 80028ac:	430b      	orrs	r3, r1
 80028ae:	43db      	mvns	r3, r3
 80028b0:	ea02 0103 	and.w	r1, r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	03ff63ff 	.word	0x03ff63ff

080028d0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e4:	4a39      	ldr	r2, [pc, #228]	@ (80029cc <I2C_Enable_IRQ+0xfc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d032      	beq.n	8002950 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80028ee:	4a38      	ldr	r2, [pc, #224]	@ (80029d0 <I2C_Enable_IRQ+0x100>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d02d      	beq.n	8002950 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80028f8:	4a36      	ldr	r2, [pc, #216]	@ (80029d4 <I2C_Enable_IRQ+0x104>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d028      	beq.n	8002950 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80028fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002902:	2b00      	cmp	r3, #0
 8002904:	da03      	bge.n	800290e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800290c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800291e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002930:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	2b10      	cmp	r3, #16
 8002936:	d103      	bne.n	8002940 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800293e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	2b20      	cmp	r3, #32
 8002944:	d133      	bne.n	80029ae <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f043 0320 	orr.w	r3, r3, #32
 800294c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800294e:	e02e      	b.n	80029ae <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002950:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002954:	2b00      	cmp	r3, #0
 8002956:	da03      	bge.n	8002960 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800295e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002960:	887b      	ldrh	r3, [r7, #2]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002970:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002982:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	2b10      	cmp	r3, #16
 8002988:	d103      	bne.n	8002992 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002990:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	2b20      	cmp	r3, #32
 8002996:	d103      	bne.n	80029a0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800299e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	2b40      	cmp	r3, #64	@ 0x40
 80029a4:	d103      	bne.n	80029ae <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	0800185f 	.word	0x0800185f
 80029d0:	08001ca5 	.word	0x08001ca5
 80029d4:	08001a45 	.word	0x08001a45

080029d8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00f      	beq.n	8002a12 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80029f8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a06:	2b28      	cmp	r3, #40	@ 0x28
 8002a08:	d003      	beq.n	8002a12 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002a10:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00f      	beq.n	8002a3c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002a22:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a30:	2b28      	cmp	r3, #40	@ 0x28
 8002a32:	d003      	beq.n	8002a3c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002a3a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	da03      	bge.n	8002a4c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002a4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a4c:	887b      	ldrh	r3, [r7, #2]
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d103      	bne.n	8002a5a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002a58:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d103      	bne.n	8002a68 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f043 0320 	orr.w	r3, r3, #32
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002a68:	887b      	ldrh	r3, [r7, #2]
 8002a6a:	2b40      	cmp	r3, #64	@ 0x40
 8002a6c:	d103      	bne.n	8002a76 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6819      	ldr	r1, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	400a      	ands	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d138      	bne.n	8002b1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e032      	b.n	8002b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	@ 0x24
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d139      	bne.n	8002bb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e033      	b.n	8002bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2224      	movs	r2, #36	@ 0x24
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0c0      	b.n	8002d56 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f007 fac7 	bl	800a17c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 fced 	bl	80065da <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	e03e      	b.n	8002c84 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	440b      	add	r3, r1
 8002c14:	3311      	adds	r3, #17
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	3310      	adds	r3, #16
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3313      	adds	r3, #19
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	3320      	adds	r3, #32
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	3324      	adds	r3, #36	@ 0x24
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	3301      	adds	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	791b      	ldrb	r3, [r3, #4]
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d3bb      	bcc.n	8002c06 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
 8002c92:	e044      	b.n	8002d1e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	440b      	add	r3, r1
 8002cce:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	791b      	ldrb	r3, [r3, #4]
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d3b5      	bcc.n	8002c94 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d34:	f003 fc6c 	bl	8006610 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7a9b      	ldrb	r3, [r3, #10]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f001 fbd0 	bl	80044f4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_PCD_Start+0x16>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e012      	b.n	8002d9a <HAL_PCD_Start+0x3c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 fc13 	bl	80065ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f005 f803 	bl	8007d96 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_PCD_Stop+0x16>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e012      	b.n	8002dde <HAL_PCD_Stop+0x3c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 fc08 	bl	80065da <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fff8 	bl	8007dc4 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f004 fffb 	bl	8007dee <USB_ReadInterrupts>
 8002df8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 faa6 	bl	8003356 <PCD_EP_ISR_Handler>

    return;
 8002e0a:	e110      	b.n	800302e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d013      	beq.n	8002e3e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f007 fa35 	bl	800a29e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e34:	2100      	movs	r1, #0
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8fc 	bl	8003034 <HAL_PCD_SetAddress>

    return;
 8002e3c:	e0f7      	b.n	800302e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00c      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e60:	e0e5      	b.n	800302e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00c      	beq.n	8002e86 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e7e:	b292      	uxth	r2, r2
 8002e80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e84:	e0d3      	b.n	800302e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d034      	beq.n	8002efa <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0204 	bic.w	r2, r2, #4
 8002ea2:	b292      	uxth	r2, r2
 8002ea4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0208 	bic.w	r2, r2, #8
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d107      	bne.n	8002eda <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f007 fba5 	bl	800a624 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f007 fa18 	bl	800a310 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ef2:	b292      	uxth	r2, r2
 8002ef4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ef8:	e099      	b.n	800302e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d027      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0208 	orr.w	r2, r2, #8
 8002f16:	b292      	uxth	r2, r2
 8002f18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0204 	orr.w	r2, r2, #4
 8002f46:	b292      	uxth	r2, r2
 8002f48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f007 f9c5 	bl	800a2dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f52:	e06c      	b.n	800302e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d040      	beq.n	8002fe0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f70:	b292      	uxth	r2, r2
 8002f72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d12b      	bne.n	8002fd8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0204 	orr.w	r2, r2, #4
 8002f92:	b292      	uxth	r2, r2
 8002f94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0208 	orr.w	r2, r2, #8
 8002faa:	b292      	uxth	r2, r2
 8002fac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	089b      	lsrs	r3, r3, #2
 8002fc4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002fce:	2101      	movs	r1, #1
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f007 fb27 	bl	800a624 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002fd6:	e02a      	b.n	800302e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f007 f97f 	bl	800a2dc <HAL_PCD_SuspendCallback>
    return;
 8002fde:	e026      	b.n	800302e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00f      	beq.n	800300a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ffc:	b292      	uxth	r2, r2
 8002ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f007 f93d 	bl	800a282 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003008:	e011      	b.n	800302e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00c      	beq.n	800302e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800301c:	b29a      	uxth	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003026:	b292      	uxth	r2, r2
 8003028:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800302c:	bf00      	nop
  }
}
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_PCD_SetAddress+0x1a>
 800304a:	2302      	movs	r3, #2
 800304c:	e012      	b.n	8003074 <HAL_PCD_SetAddress+0x40>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f004 fe82 	bl	8007d6e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	4608      	mov	r0, r1
 8003086:	4611      	mov	r1, r2
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	70fb      	strb	r3, [r7, #3]
 800308e:	460b      	mov	r3, r1
 8003090:	803b      	strh	r3, [r7, #0]
 8003092:	4613      	mov	r3, r2
 8003094:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800309a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	da0e      	bge.n	80030c0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	f003 0207 	and.w	r2, r3, #7
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	3310      	adds	r3, #16
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	705a      	strb	r2, [r3, #1]
 80030be:	e00e      	b.n	80030de <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 0207 	and.w	r2, r3, #7
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030ea:	883b      	ldrh	r3, [r7, #0]
 80030ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	78ba      	ldrb	r2, [r7, #2]
 80030f8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030fa:	78bb      	ldrb	r3, [r7, #2]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d102      	bne.n	8003106 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_PCD_EP_Open+0x98>
 8003110:	2302      	movs	r3, #2
 8003112:	e00e      	b.n	8003132 <HAL_PCD_EP_Open+0xb6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68f9      	ldr	r1, [r7, #12]
 8003122:	4618      	mov	r0, r3
 8003124:	f003 fa92 	bl	800664c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003130:	7afb      	ldrb	r3, [r7, #11]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	460b      	mov	r3, r1
 8003148:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800314a:	7afb      	ldrb	r3, [r7, #11]
 800314c:	f003 0207 	and.w	r2, r3, #7
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2200      	movs	r2, #0
 8003172:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2200      	movs	r2, #0
 8003178:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	b2da      	uxtb	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6979      	ldr	r1, [r7, #20]
 800318c:	4618      	mov	r0, r3
 800318e:	f003 ff45 	bl	800701c <USB_EPStartXfer>

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	460b      	mov	r3, r1
 80031aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ac:	7afb      	ldrb	r3, [r7, #11]
 80031ae:	f003 0207 	and.w	r2, r3, #7
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	3310      	adds	r3, #16
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2201      	movs	r2, #1
 80031e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e8:	7afb      	ldrb	r3, [r7, #11]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6979      	ldr	r1, [r7, #20]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 ff0e 	bl	800701c <USB_EPStartXfer>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	7912      	ldrb	r2, [r2, #4]
 8003220:	4293      	cmp	r3, r2
 8003222:	d901      	bls.n	8003228 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e03e      	b.n	80032a6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800322c:	2b00      	cmp	r3, #0
 800322e:	da0e      	bge.n	800324e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 0207 	and.w	r2, r3, #7
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	3310      	adds	r3, #16
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	705a      	strb	r2, [r3, #1]
 800324c:	e00c      	b.n	8003268 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_PCD_EP_SetStall+0x7e>
 8003284:	2302      	movs	r3, #2
 8003286:	e00e      	b.n	80032a6 <HAL_PCD_EP_SetStall+0x9c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68f9      	ldr	r1, [r7, #12]
 8003296:	4618      	mov	r0, r3
 8003298:	f004 fc6f 	bl	8007b7a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	7912      	ldrb	r2, [r2, #4]
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e040      	b.n	800334e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	da0e      	bge.n	80032f2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	f003 0207 	and.w	r2, r3, #7
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	3310      	adds	r3, #16
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	705a      	strb	r2, [r3, #1]
 80032f0:	e00e      	b.n	8003310 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	f003 0207 	and.w	r2, r3, #7
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	b2da      	uxtb	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_PCD_EP_ClrStall+0x82>
 800332c:	2302      	movs	r3, #2
 800332e:	e00e      	b.n	800334e <HAL_PCD_EP_ClrStall+0xa0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68f9      	ldr	r1, [r7, #12]
 800333e:	4618      	mov	r0, r3
 8003340:	f004 fc6c 	bl	8007c1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b092      	sub	sp, #72	@ 0x48
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800335e:	e333      	b.n	80039c8 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003368:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800336a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003376:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800337a:	2b00      	cmp	r3, #0
 800337c:	f040 8108 	bne.w	8003590 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003380:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d14c      	bne.n	8003424 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339a:	813b      	strh	r3, [r7, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	893b      	ldrh	r3, [r7, #8]
 80033a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3310      	adds	r3, #16
 80033b2:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033bc:	b29b      	uxth	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	4413      	add	r3, r2
 80033ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	441a      	add	r2, r3
 80033e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033ea:	2100      	movs	r1, #0
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f006 ff2e 	bl	800a24e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	7b1b      	ldrb	r3, [r3, #12]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 82e5 	beq.w	80039c8 <PCD_EP_ISR_Handler+0x672>
 80033fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 82e0 	bne.w	80039c8 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7b1b      	ldrb	r3, [r3, #12]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003412:	b2da      	uxtb	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	731a      	strb	r2, [r3, #12]
 8003422:	e2d1      	b.n	80039c8 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800342a:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003434:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800343a:	2b00      	cmp	r3, #0
 800343c:	d032      	beq.n	80034a4 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003446:	b29b      	uxth	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	4413      	add	r3, r2
 8003458:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003464:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003472:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003476:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003478:	b29b      	uxth	r3, r3
 800347a:	f004 fd0b 	bl	8007e94 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	b29a      	uxth	r2, r3
 8003486:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800348a:	4013      	ands	r3, r2
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	897a      	ldrh	r2, [r7, #10]
 8003494:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003498:	b292      	uxth	r2, r2
 800349a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f006 fea9 	bl	800a1f4 <HAL_PCD_SetupStageCallback>
 80034a2:	e291      	b.n	80039c8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034a4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f280 828d 	bge.w	80039c8 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80034ba:	4013      	ands	r3, r2
 80034bc:	81fb      	strh	r3, [r7, #14]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	89fa      	ldrh	r2, [r7, #14]
 80034c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034c8:	b292      	uxth	r2, r2
 80034ca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80034f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d019      	beq.n	8003530 <PCD_EP_ISR_Handler+0x1da>
 80034fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d015      	beq.n	8003530 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350a:	6959      	ldr	r1, [r3, #20]
 800350c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003512:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003514:	b29b      	uxth	r3, r3
 8003516:	f004 fcbd 	bl	8007e94 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800351a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	441a      	add	r2, r3
 8003524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003526:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003528:	2100      	movs	r1, #0
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f006 fe74 	bl	800a218 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003538:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800353a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800353e:	2b00      	cmp	r3, #0
 8003540:	f040 8242 	bne.w	80039c8 <PCD_EP_ISR_Handler+0x672>
 8003544:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003546:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800354a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800354e:	f000 823b 	beq.w	80039c8 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800355e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003562:	81bb      	strh	r3, [r7, #12]
 8003564:	89bb      	ldrh	r3, [r7, #12]
 8003566:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800356a:	81bb      	strh	r3, [r7, #12]
 800356c:	89bb      	ldrh	r3, [r7, #12]
 800356e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003572:	81bb      	strh	r3, [r7, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	89bb      	ldrh	r3, [r7, #12]
 800357a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800357e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800358a:	b29b      	uxth	r3, r3
 800358c:	8013      	strh	r3, [r2, #0]
 800358e:	e21b      	b.n	80039c8 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035a2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f280 80f1 	bge.w	800378e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	b29a      	uxth	r2, r3
 80035be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035c2:	4013      	ands	r3, r2
 80035c4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035da:	b292      	uxth	r2, r2
 80035dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035de:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f6:	7b1b      	ldrb	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d123      	bne.n	8003644 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003604:	b29b      	uxth	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	4413      	add	r3, r2
 8003616:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003620:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003624:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 808b 	beq.w	8003744 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003634:	6959      	ldr	r1, [r3, #20]
 8003636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003638:	88da      	ldrh	r2, [r3, #6]
 800363a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800363e:	f004 fc29 	bl	8007e94 <USB_ReadPMA>
 8003642:	e07f      	b.n	8003744 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003646:	78db      	ldrb	r3, [r3, #3]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d109      	bne.n	8003660 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800364c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800364e:	461a      	mov	r2, r3
 8003650:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f9c6 	bl	80039e4 <HAL_PCD_EP_DB_Receive>
 8003658:	4603      	mov	r3, r0
 800365a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800365e:	e071      	b.n	8003744 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800367a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800368c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003698:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800369c:	b29b      	uxth	r3, r3
 800369e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d022      	beq.n	8003700 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80036e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d02c      	beq.n	8003744 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f0:	6959      	ldr	r1, [r3, #20]
 80036f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f4:	891a      	ldrh	r2, [r3, #8]
 80036f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036fa:	f004 fbcb 	bl	8007e94 <USB_ReadPMA>
 80036fe:	e021      	b.n	8003744 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003708:	b29b      	uxth	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	4413      	add	r3, r2
 800371a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003724:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003728:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800372c:	2b00      	cmp	r3, #0
 800372e:	d009      	beq.n	8003744 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003736:	6959      	ldr	r1, [r3, #20]
 8003738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800373a:	895a      	ldrh	r2, [r3, #10]
 800373c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003740:	f004 fba8 	bl	8007e94 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800374c:	441a      	add	r2, r3
 800374e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003750:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800375a:	441a      	add	r2, r3
 800375c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <PCD_EP_ISR_Handler+0x41e>
 8003768:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800376c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	429a      	cmp	r2, r3
 8003772:	d206      	bcs.n	8003782 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	4619      	mov	r1, r3
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f006 fd4c 	bl	800a218 <HAL_PCD_DataOutStageCallback>
 8003780:	e005      	b.n	800378e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003788:	4618      	mov	r0, r3
 800378a:	f003 fc47 	bl	800701c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800378e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8117 	beq.w	80039c8 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800379a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	3310      	adds	r3, #16
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80037c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	441a      	add	r2, r3
 80037d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80037da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80037e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e8:	78db      	ldrb	r3, [r3, #3]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	f040 80a1 	bne.w	8003932 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80037f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f2:	2200      	movs	r2, #0
 80037f4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80037f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f8:	7b1b      	ldrb	r3, [r3, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8092 	beq.w	8003924 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003800:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d046      	beq.n	8003898 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800380a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d126      	bne.n	8003860 <PCD_EP_ISR_Handler+0x50a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003820:	b29b      	uxth	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	4413      	add	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	00da      	lsls	r2, r3, #3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	4413      	add	r3, r2
 8003834:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003844:	b29a      	uxth	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	801a      	strh	r2, [r3, #0]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003858:	b29a      	uxth	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	e061      	b.n	8003924 <PCD_EP_ISR_Handler+0x5ce>
 8003860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d15d      	bne.n	8003924 <PCD_EP_ISR_Handler+0x5ce>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003876:	b29b      	uxth	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	4413      	add	r3, r2
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	00da      	lsls	r2, r3, #3
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2200      	movs	r2, #0
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	e045      	b.n	8003924 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800389e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038a0:	785b      	ldrb	r3, [r3, #1]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d126      	bne.n	80038f4 <PCD_EP_ISR_Handler+0x59e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	4413      	add	r3, r2
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	00da      	lsls	r2, r3, #3
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	4413      	add	r3, r2
 80038c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038cc:	623b      	str	r3, [r7, #32]
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d8:	b29a      	uxth	r2, r3
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	801a      	strh	r2, [r3, #0]
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	801a      	strh	r2, [r3, #0]
 80038f2:	e017      	b.n	8003924 <PCD_EP_ISR_Handler+0x5ce>
 80038f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d113      	bne.n	8003924 <PCD_EP_ISR_Handler+0x5ce>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390a:	4413      	add	r3, r2
 800390c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800390e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00da      	lsls	r2, r3, #3
 8003914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003916:	4413      	add	r3, r2
 8003918:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	2200      	movs	r2, #0
 8003922:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f006 fc8f 	bl	800a24e <HAL_PCD_DataInStageCallback>
 8003930:	e04a      	b.n	80039c8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003932:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d13f      	bne.n	80039bc <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003944:	b29b      	uxth	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	4413      	add	r3, r2
 8003956:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003960:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003968:	429a      	cmp	r2, r3
 800396a:	d906      	bls.n	800397a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800396c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003972:	1ad2      	subs	r2, r2, r3
 8003974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003976:	619a      	str	r2, [r3, #24]
 8003978:	e002      	b.n	8003980 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800397a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d106      	bne.n	8003996 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	4619      	mov	r1, r3
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f006 fc5d 	bl	800a24e <HAL_PCD_DataInStageCallback>
 8003994:	e018      	b.n	80039c8 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800399c:	441a      	add	r2, r3
 800399e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80039a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a4:	69da      	ldr	r2, [r3, #28]
 80039a6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039a8:	441a      	add	r2, r3
 80039aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ac:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039b4:	4618      	mov	r0, r3
 80039b6:	f003 fb31 	bl	800701c <USB_EPStartXfer>
 80039ba:	e005      	b.n	80039c8 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039be:	461a      	mov	r2, r3
 80039c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f917 	bl	8003bf6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b21b      	sxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f6ff acc3 	blt.w	8003360 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3748      	adds	r7, #72	@ 0x48
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d07c      	beq.n	8003af6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	4413      	add	r3, r2
 8003a16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	8b7b      	ldrh	r3, [r7, #26]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d306      	bcc.n	8003a3a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	8b7b      	ldrh	r3, [r7, #26]
 8003a32:	1ad2      	subs	r2, r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	619a      	str	r2, [r3, #24]
 8003a38:	e002      	b.n	8003a40 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d123      	bne.n	8003a90 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a62:	833b      	strh	r3, [r7, #24]
 8003a64:	8b3b      	ldrh	r3, [r7, #24]
 8003a66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a6a:	833b      	strh	r3, [r7, #24]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	441a      	add	r2, r3
 8003a7a:	8b3b      	ldrh	r3, [r7, #24]
 8003a7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d01f      	beq.n	8003ada <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab4:	82fb      	strh	r3, [r7, #22]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	441a      	add	r2, r3
 8003ac4:	8afb      	ldrh	r3, [r7, #22]
 8003ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ad2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ada:	8b7b      	ldrh	r3, [r7, #26]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8085 	beq.w	8003bec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6959      	ldr	r1, [r3, #20]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	891a      	ldrh	r2, [r3, #8]
 8003aee:	8b7b      	ldrh	r3, [r7, #26]
 8003af0:	f004 f9d0 	bl	8007e94 <USB_ReadPMA>
 8003af4:	e07a      	b.n	8003bec <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	8b7b      	ldrh	r3, [r7, #26]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d306      	bcc.n	8003b34 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	8b7b      	ldrh	r3, [r7, #26]
 8003b2c:	1ad2      	subs	r2, r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	619a      	str	r2, [r3, #24]
 8003b32:	e002      	b.n	8003b3a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2200      	movs	r2, #0
 8003b38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d123      	bne.n	8003b8a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5c:	83fb      	strh	r3, [r7, #30]
 8003b5e:	8bfb      	ldrh	r3, [r7, #30]
 8003b60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b64:	83fb      	strh	r3, [r7, #30]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	441a      	add	r2, r3
 8003b74:	8bfb      	ldrh	r3, [r7, #30]
 8003b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d11f      	bne.n	8003bd4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bae:	83bb      	strh	r3, [r7, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	8bbb      	ldrh	r3, [r7, #28]
 8003bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bd4:	8b7b      	ldrh	r3, [r7, #26]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	6959      	ldr	r1, [r3, #20]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	895a      	ldrh	r2, [r3, #10]
 8003be6:	8b7b      	ldrh	r3, [r7, #26]
 8003be8:	f004 f954 	bl	8007e94 <USB_ReadPMA>
    }
  }

  return count;
 8003bec:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b0a6      	sub	sp, #152	@ 0x98
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	4613      	mov	r3, r2
 8003c02:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 81f7 	beq.w	8003ffe <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c34:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d907      	bls.n	8003c54 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c4c:	1ad2      	subs	r2, r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	619a      	str	r2, [r3, #24]
 8003c52:	e002      	b.n	8003c5a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2200      	movs	r2, #0
 8003c58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f040 80e1 	bne.w	8003e26 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d126      	bne.n	8003cba <HAL_PCD_EP_DB_Transmit+0xc4>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	4413      	add	r3, r2
 8003c82:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	00da      	lsls	r2, r3, #3
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca2:	801a      	strh	r2, [r3, #0]
 8003ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb6:	801a      	strh	r2, [r3, #0]
 8003cb8:	e01a      	b.n	8003cf0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d116      	bne.n	8003cf0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd6:	4413      	add	r3, r2
 8003cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	00da      	lsls	r2, r3, #3
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cec:	2200      	movs	r2, #0
 8003cee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	785b      	ldrb	r3, [r3, #1]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d126      	bne.n	8003d4c <HAL_PCD_EP_DB_Transmit+0x156>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	4413      	add	r3, r2
 8003d14:	623b      	str	r3, [r7, #32]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	00da      	lsls	r2, r3, #3
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	e017      	b.n	8003d7c <HAL_PCD_EP_DB_Transmit+0x186>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d113      	bne.n	8003d7c <HAL_PCD_EP_DB_Transmit+0x186>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d62:	4413      	add	r3, r2
 8003d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	00da      	lsls	r2, r3, #3
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	4413      	add	r3, r2
 8003d70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	2200      	movs	r2, #0
 8003d7a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	78db      	ldrb	r3, [r3, #3]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d123      	bne.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d9e:	837b      	strh	r3, [r7, #26]
 8003da0:	8b7b      	ldrh	r3, [r7, #26]
 8003da2:	f083 0320 	eor.w	r3, r3, #32
 8003da6:	837b      	strh	r3, [r7, #26]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	441a      	add	r2, r3
 8003db6:	8b7b      	ldrh	r3, [r7, #26]
 8003db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f006 fa3b 	bl	800a24e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01f      	beq.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfc:	833b      	strh	r3, [r7, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	441a      	add	r2, r3
 8003e0c:	8b3b      	ldrh	r3, [r7, #24]
 8003e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e31f      	b.n	8004466 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d021      	beq.n	8003e74 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	441a      	add	r2, r3
 8003e5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f040 82ca 	bne.w	8004414 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e88:	441a      	add	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e96:	441a      	add	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	6a1a      	ldr	r2, [r3, #32]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d309      	bcc.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6a1a      	ldr	r2, [r3, #32]
 8003eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eb4:	1ad2      	subs	r2, r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	621a      	str	r2, [r3, #32]
 8003eba:	e015      	b.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003ec4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ed2:	e009      	b.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d15f      	bne.n	8003fb0 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f04:	4413      	add	r3, r2
 8003f06:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	00da      	lsls	r2, r3, #3
 8003f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f10:	4413      	add	r3, r2
 8003f12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f40:	801a      	strh	r2, [r3, #0]
 8003f42:	e051      	b.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f46:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f48:	d816      	bhi.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x382>
 8003f4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	029b      	lsls	r3, r3, #10
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f74:	801a      	strh	r2, [r3, #0]
 8003f76:	e037      	b.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x398>
 8003f88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	029b      	lsls	r3, r3, #10
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	e01b      	b.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d117      	bne.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fcc:	4413      	add	r3, r2
 8003fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	00da      	lsls	r2, r3, #3
 8003fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fd8:	4413      	add	r3, r2
 8003fda:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6959      	ldr	r1, [r3, #20]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	891a      	ldrh	r2, [r3, #8]
 8003ff4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f003 ff09 	bl	8007e0e <USB_WritePMA>
 8003ffc:	e20a      	b.n	8004414 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004006:	b29b      	uxth	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4413      	add	r3, r2
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	4413      	add	r3, r2
 8004018:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004022:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800402e:	429a      	cmp	r2, r3
 8004030:	d307      	bcc.n	8004042 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800403a:	1ad2      	subs	r2, r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	619a      	str	r2, [r3, #24]
 8004040:	e002      	b.n	8004048 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2200      	movs	r2, #0
 8004046:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f040 80f6 	bne.w	800423e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	785b      	ldrb	r3, [r3, #1]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d126      	bne.n	80040a8 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004068:	b29b      	uxth	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800406e:	4413      	add	r3, r2
 8004070:	677b      	str	r3, [r7, #116]	@ 0x74
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	00da      	lsls	r2, r3, #3
 8004078:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800407a:	4413      	add	r3, r2
 800407c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004080:	673b      	str	r3, [r7, #112]	@ 0x70
 8004082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800408c:	b29a      	uxth	r2, r3
 800408e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800409c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040a4:	801a      	strh	r2, [r3, #0]
 80040a6:	e01a      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	785b      	ldrb	r3, [r3, #1]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d116      	bne.n	80040de <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040be:	b29b      	uxth	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040c4:	4413      	add	r3, r2
 80040c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	00da      	lsls	r2, r3, #3
 80040ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040d0:	4413      	add	r3, r2
 80040d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040da:	2200      	movs	r2, #0
 80040dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	785b      	ldrb	r3, [r3, #1]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d12f      	bne.n	800414e <HAL_PCD_EP_DB_Transmit+0x558>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040fe:	b29b      	uxth	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004106:	4413      	add	r3, r2
 8004108:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	00da      	lsls	r2, r3, #3
 8004112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004116:	4413      	add	r3, r2
 8004118:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800411c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004120:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800412c:	b29a      	uxth	r2, r3
 800412e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004132:	801a      	strh	r2, [r3, #0]
 8004134:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004144:	b29a      	uxth	r2, r3
 8004146:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800414a:	801a      	strh	r2, [r3, #0]
 800414c:	e01c      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x592>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	785b      	ldrb	r3, [r3, #1]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d118      	bne.n	8004188 <HAL_PCD_EP_DB_Transmit+0x592>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800415e:	b29b      	uxth	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004166:	4413      	add	r3, r2
 8004168:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	00da      	lsls	r2, r3, #3
 8004172:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004176:	4413      	add	r3, r2
 8004178:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800417c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004180:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004184:	2200      	movs	r2, #0
 8004186:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	78db      	ldrb	r3, [r3, #3]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d127      	bne.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041aa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80041ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80041b2:	f083 0320 	eor.w	r3, r3, #32
 80041b6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	441a      	add	r2, r3
 80041c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80041cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041dc:	b29b      	uxth	r3, r3
 80041de:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	4619      	mov	r1, r3
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f006 f831 	bl	800a24e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d121      	bne.n	800423a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800420c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004210:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	441a      	add	r2, r3
 8004222:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004226:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800422a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800422e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004236:	b29b      	uxth	r3, r3
 8004238:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e113      	b.n	8004466 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d121      	bne.n	800428c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b29b      	uxth	r3, r3
 800425a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800425e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004262:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	441a      	add	r2, r3
 8004274:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800427c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004280:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004288:	b29b      	uxth	r3, r3
 800428a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004292:	2b01      	cmp	r3, #1
 8004294:	f040 80be 	bne.w	8004414 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042a0:	441a      	add	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042ae:	441a      	add	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6a1a      	ldr	r2, [r3, #32]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d309      	bcc.n	80042d4 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	6a1a      	ldr	r2, [r3, #32]
 80042ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042cc:	1ad2      	subs	r2, r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	621a      	str	r2, [r3, #32]
 80042d2:	e015      	b.n	8004300 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d107      	bne.n	80042ec <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80042dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042e0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042ea:	e009      	b.n	8004300 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2200      	movs	r2, #0
 80042f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	785b      	ldrb	r3, [r3, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d15f      	bne.n	80043ce <HAL_PCD_EP_DB_Transmit+0x7d8>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800431c:	b29b      	uxth	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004322:	4413      	add	r3, r2
 8004324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	00da      	lsls	r2, r3, #3
 800432c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800432e:	4413      	add	r3, r2
 8004330:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004334:	667b      	str	r3, [r7, #100]	@ 0x64
 8004336:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004340:	b29a      	uxth	r2, r3
 8004342:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <HAL_PCD_EP_DB_Transmit+0x76c>
 800434c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800435a:	b29a      	uxth	r2, r3
 800435c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	e04e      	b.n	8004400 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004362:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004364:	2b3e      	cmp	r3, #62	@ 0x3e
 8004366:	d816      	bhi.n	8004396 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800436a:	085b      	lsrs	r3, r3, #1
 800436c:	663b      	str	r3, [r7, #96]	@ 0x60
 800436e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_PCD_EP_DB_Transmit+0x788>
 8004378:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800437a:	3301      	adds	r3, #1
 800437c:	663b      	str	r3, [r7, #96]	@ 0x60
 800437e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29a      	uxth	r2, r3
 8004384:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004386:	b29b      	uxth	r3, r3
 8004388:	029b      	lsls	r3, r3, #10
 800438a:	b29b      	uxth	r3, r3
 800438c:	4313      	orrs	r3, r2
 800438e:	b29a      	uxth	r2, r3
 8004390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	e034      	b.n	8004400 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004396:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	663b      	str	r3, [r7, #96]	@ 0x60
 800439c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <HAL_PCD_EP_DB_Transmit+0x7b6>
 80043a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043a8:	3b01      	subs	r3, #1
 80043aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80043ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	029b      	lsls	r3, r3, #10
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	4313      	orrs	r3, r2
 80043bc:	b29b      	uxth	r3, r3
 80043be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	e018      	b.n	8004400 <HAL_PCD_EP_DB_Transmit+0x80a>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	785b      	ldrb	r3, [r3, #1]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d114      	bne.n	8004400 <HAL_PCD_EP_DB_Transmit+0x80a>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043de:	b29b      	uxth	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043e4:	4413      	add	r3, r2
 80043e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	00da      	lsls	r2, r3, #3
 80043ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043f0:	4413      	add	r3, r2
 80043f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6959      	ldr	r1, [r3, #20]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	895a      	ldrh	r2, [r3, #10]
 800440c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800440e:	b29b      	uxth	r3, r3
 8004410:	f003 fcfd 	bl	8007e0e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800442a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800442e:	82fb      	strh	r3, [r7, #22]
 8004430:	8afb      	ldrh	r3, [r7, #22]
 8004432:	f083 0310 	eor.w	r3, r3, #16
 8004436:	82fb      	strh	r3, [r7, #22]
 8004438:	8afb      	ldrh	r3, [r7, #22]
 800443a:	f083 0320 	eor.w	r3, r3, #32
 800443e:	82fb      	strh	r3, [r7, #22]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	8afb      	ldrh	r3, [r7, #22]
 8004450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800445c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004460:	b29b      	uxth	r3, r3
 8004462:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3798      	adds	r7, #152	@ 0x98
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	607b      	str	r3, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	817b      	strh	r3, [r7, #10]
 800447c:	4613      	mov	r3, r2
 800447e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004480:	897b      	ldrh	r3, [r7, #10]
 8004482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00b      	beq.n	80044a4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800448c:	897b      	ldrh	r3, [r7, #10]
 800448e:	f003 0207 	and.w	r2, r3, #7
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	3310      	adds	r3, #16
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	e009      	b.n	80044b8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044a4:	897a      	ldrh	r2, [r7, #10]
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044b8:	893b      	ldrh	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d107      	bne.n	80044ce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2200      	movs	r2, #0
 80044c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	80da      	strh	r2, [r3, #6]
 80044cc:	e00b      	b.n	80044e6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2201      	movs	r2, #1
 80044d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	0c1b      	lsrs	r3, r3, #16
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004518:	b29b      	uxth	r3, r3
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800452c:	b29b      	uxth	r3, r3
 800452e:	f043 0302 	orr.w	r3, r3, #2
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d141      	bne.n	80045da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004556:	4b4b      	ldr	r3, [pc, #300]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800455e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004562:	d131      	bne.n	80045c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004564:	4b47      	ldr	r3, [pc, #284]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800456a:	4a46      	ldr	r2, [pc, #280]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004570:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004574:	4b43      	ldr	r3, [pc, #268]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800457c:	4a41      	ldr	r2, [pc, #260]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004582:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004584:	4b40      	ldr	r3, [pc, #256]	@ (8004688 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2232      	movs	r2, #50	@ 0x32
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	4a3f      	ldr	r2, [pc, #252]	@ (800468c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	0c9b      	lsrs	r3, r3, #18
 8004596:	3301      	adds	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800459a:	e002      	b.n	80045a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3b01      	subs	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045a2:	4b38      	ldr	r3, [pc, #224]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ae:	d102      	bne.n	80045b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f2      	bne.n	800459c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045b6:	4b33      	ldr	r3, [pc, #204]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c2:	d158      	bne.n	8004676 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e057      	b.n	8004678 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045d8:	e04d      	b.n	8004676 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e0:	d141      	bne.n	8004666 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045e2:	4b28      	ldr	r3, [pc, #160]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ee:	d131      	bne.n	8004654 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045f0:	4b24      	ldr	r3, [pc, #144]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045f6:	4a23      	ldr	r2, [pc, #140]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004600:	4b20      	ldr	r3, [pc, #128]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004608:	4a1e      	ldr	r2, [pc, #120]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800460a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800460e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004610:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2232      	movs	r2, #50	@ 0x32
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	4a1c      	ldr	r2, [pc, #112]	@ (800468c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	0c9b      	lsrs	r3, r3, #18
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004626:	e002      	b.n	800462e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3b01      	subs	r3, #1
 800462c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800462e:	4b15      	ldr	r3, [pc, #84]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463a:	d102      	bne.n	8004642 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f2      	bne.n	8004628 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004642:	4b10      	ldr	r3, [pc, #64]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464e:	d112      	bne.n	8004676 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e011      	b.n	8004678 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004654:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800465a:	4a0a      	ldr	r2, [pc, #40]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004660:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004664:	e007      	b.n	8004676 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004666:	4b07      	ldr	r3, [pc, #28]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800466e:	4a05      	ldr	r2, [pc, #20]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004670:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004674:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	40007000 	.word	0x40007000
 8004688:	20000000 	.word	0x20000000
 800468c:	431bde83 	.word	0x431bde83

08004690 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004694:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	4a04      	ldr	r2, [pc, #16]	@ (80046ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800469a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800469e:	6093      	str	r3, [r2, #8]
}
 80046a0:	bf00      	nop
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40007000 	.word	0x40007000

080046b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e2fe      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d075      	beq.n	80047ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ce:	4b97      	ldr	r3, [pc, #604]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d8:	4b94      	ldr	r3, [pc, #592]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b0c      	cmp	r3, #12
 80046e6:	d102      	bne.n	80046ee <HAL_RCC_OscConfig+0x3e>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d002      	beq.n	80046f4 <HAL_RCC_OscConfig+0x44>
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d10b      	bne.n	800470c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f4:	4b8d      	ldr	r3, [pc, #564]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d05b      	beq.n	80047b8 <HAL_RCC_OscConfig+0x108>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d157      	bne.n	80047b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e2d9      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004714:	d106      	bne.n	8004724 <HAL_RCC_OscConfig+0x74>
 8004716:	4b85      	ldr	r3, [pc, #532]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a84      	ldr	r2, [pc, #528]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e01d      	b.n	8004760 <HAL_RCC_OscConfig+0xb0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0x98>
 800472e:	4b7f      	ldr	r3, [pc, #508]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a7e      	ldr	r2, [pc, #504]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	4b7c      	ldr	r3, [pc, #496]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a7b      	ldr	r2, [pc, #492]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e00b      	b.n	8004760 <HAL_RCC_OscConfig+0xb0>
 8004748:	4b78      	ldr	r3, [pc, #480]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a77      	ldr	r2, [pc, #476]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 800474e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	4b75      	ldr	r3, [pc, #468]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a74      	ldr	r2, [pc, #464]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 800475a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800475e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d013      	beq.n	8004790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fc f950 	bl	8000a0c <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004770:	f7fc f94c 	bl	8000a0c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b64      	cmp	r3, #100	@ 0x64
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e29e      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004782:	4b6a      	ldr	r3, [pc, #424]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f0      	beq.n	8004770 <HAL_RCC_OscConfig+0xc0>
 800478e:	e014      	b.n	80047ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fc f93c 	bl	8000a0c <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004798:	f7fc f938 	bl	8000a0c <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	@ 0x64
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e28a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047aa:	4b60      	ldr	r3, [pc, #384]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0xe8>
 80047b6:	e000      	b.n	80047ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d075      	beq.n	80048b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047c6:	4b59      	ldr	r3, [pc, #356]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047d0:	4b56      	ldr	r3, [pc, #344]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b0c      	cmp	r3, #12
 80047de:	d102      	bne.n	80047e6 <HAL_RCC_OscConfig+0x136>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d002      	beq.n	80047ec <HAL_RCC_OscConfig+0x13c>
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d11f      	bne.n	800482c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ec:	4b4f      	ldr	r3, [pc, #316]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_OscConfig+0x154>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e25d      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004804:	4b49      	ldr	r3, [pc, #292]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	4946      	ldr	r1, [pc, #280]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004818:	4b45      	ldr	r3, [pc, #276]	@ (8004930 <HAL_RCC_OscConfig+0x280>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7fc f8a9 	bl	8000974 <HAL_InitTick>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d043      	beq.n	80048b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e249      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d023      	beq.n	800487c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004834:	4b3d      	ldr	r3, [pc, #244]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a3c      	ldr	r2, [pc, #240]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 800483a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800483e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004840:	f7fc f8e4 	bl	8000a0c <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004848:	f7fc f8e0 	bl	8000a0c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e232      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800485a:	4b34      	ldr	r3, [pc, #208]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004866:	4b31      	ldr	r3, [pc, #196]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	061b      	lsls	r3, r3, #24
 8004874:	492d      	ldr	r1, [pc, #180]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	604b      	str	r3, [r1, #4]
 800487a:	e01a      	b.n	80048b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487c:	4b2b      	ldr	r3, [pc, #172]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a2a      	ldr	r2, [pc, #168]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004882:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fc f8c0 	bl	8000a0c <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004890:	f7fc f8bc 	bl	8000a0c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e20e      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a2:	4b22      	ldr	r3, [pc, #136]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x1e0>
 80048ae:	e000      	b.n	80048b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d041      	beq.n	8004942 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01c      	beq.n	8004900 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c6:	4b19      	ldr	r3, [pc, #100]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 80048c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048cc:	4a17      	ldr	r2, [pc, #92]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d6:	f7fc f899 	bl	8000a0c <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048de:	f7fc f895 	bl	8000a0c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e1e7      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048f0:	4b0e      	ldr	r3, [pc, #56]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 80048f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0ef      	beq.n	80048de <HAL_RCC_OscConfig+0x22e>
 80048fe:	e020      	b.n	8004942 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004900:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004906:	4a09      	ldr	r2, [pc, #36]	@ (800492c <HAL_RCC_OscConfig+0x27c>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fc f87c 	bl	8000a0c <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004916:	e00d      	b.n	8004934 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004918:	f7fc f878 	bl	8000a0c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d906      	bls.n	8004934 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e1ca      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
 800492a:	bf00      	nop
 800492c:	40021000 	.word	0x40021000
 8004930:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004934:	4b8c      	ldr	r3, [pc, #560]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ea      	bne.n	8004918 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 80a6 	beq.w	8004a9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004950:	2300      	movs	r3, #0
 8004952:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004954:	4b84      	ldr	r3, [pc, #528]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_OscConfig+0x2b4>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x2b6>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00d      	beq.n	8004986 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004974:	6593      	str	r3, [r2, #88]	@ 0x58
 8004976:	4b7c      	ldr	r3, [pc, #496]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004982:	2301      	movs	r3, #1
 8004984:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004986:	4b79      	ldr	r3, [pc, #484]	@ (8004b6c <HAL_RCC_OscConfig+0x4bc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d118      	bne.n	80049c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004992:	4b76      	ldr	r3, [pc, #472]	@ (8004b6c <HAL_RCC_OscConfig+0x4bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a75      	ldr	r2, [pc, #468]	@ (8004b6c <HAL_RCC_OscConfig+0x4bc>)
 8004998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800499c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499e:	f7fc f835 	bl	8000a0c <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a6:	f7fc f831 	bl	8000a0c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e183      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b8:	4b6c      	ldr	r3, [pc, #432]	@ (8004b6c <HAL_RCC_OscConfig+0x4bc>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d108      	bne.n	80049de <HAL_RCC_OscConfig+0x32e>
 80049cc:	4b66      	ldr	r3, [pc, #408]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	4a65      	ldr	r2, [pc, #404]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049dc:	e024      	b.n	8004a28 <HAL_RCC_OscConfig+0x378>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d110      	bne.n	8004a08 <HAL_RCC_OscConfig+0x358>
 80049e6:	4b60      	ldr	r3, [pc, #384]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a06:	e00f      	b.n	8004a28 <HAL_RCC_OscConfig+0x378>
 8004a08:	4b57      	ldr	r3, [pc, #348]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0e:	4a56      	ldr	r2, [pc, #344]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a18:	4b53      	ldr	r3, [pc, #332]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1e:	4a52      	ldr	r2, [pc, #328]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004a20:	f023 0304 	bic.w	r3, r3, #4
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d016      	beq.n	8004a5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a30:	f7fb ffec 	bl	8000a0c <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a38:	f7fb ffe8 	bl	8000a0c <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e138      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4e:	4b46      	ldr	r3, [pc, #280]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ed      	beq.n	8004a38 <HAL_RCC_OscConfig+0x388>
 8004a5c:	e015      	b.n	8004a8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5e:	f7fb ffd5 	bl	8000a0c <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a64:	e00a      	b.n	8004a7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a66:	f7fb ffd1 	bl	8000a0c <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e121      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1ed      	bne.n	8004a66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a8a:	7ffb      	ldrb	r3, [r7, #31]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a90:	4b35      	ldr	r3, [pc, #212]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a94:	4a34      	ldr	r2, [pc, #208]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d03c      	beq.n	8004b22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01c      	beq.n	8004aea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fb ffa4 	bl	8000a0c <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac8:	f7fb ffa0 	bl	8000a0c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e0f2      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ada:	4b23      	ldr	r3, [pc, #140]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ef      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x418>
 8004ae8:	e01b      	b.n	8004b22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004aea:	4b1f      	ldr	r3, [pc, #124]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004af0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fb ff87 	bl	8000a0c <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b02:	f7fb ff83 	bl	8000a0c <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e0d5      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b14:	4b14      	ldr	r3, [pc, #80]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1ef      	bne.n	8004b02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80c9 	beq.w	8004cbe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 030c 	and.w	r3, r3, #12
 8004b34:	2b0c      	cmp	r3, #12
 8004b36:	f000 8083 	beq.w	8004c40 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d15e      	bne.n	8004c00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b42:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a08      	ldr	r2, [pc, #32]	@ (8004b68 <HAL_RCC_OscConfig+0x4b8>)
 8004b48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4e:	f7fb ff5d 	bl	8000a0c <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b54:	e00c      	b.n	8004b70 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b56:	f7fb ff59 	bl	8000a0c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d905      	bls.n	8004b70 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e0ab      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b70:	4b55      	ldr	r3, [pc, #340]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ec      	bne.n	8004b56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b7c:	4b52      	ldr	r3, [pc, #328]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	4b52      	ldr	r3, [pc, #328]	@ (8004ccc <HAL_RCC_OscConfig+0x61c>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6a11      	ldr	r1, [r2, #32]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b8c:	3a01      	subs	r2, #1
 8004b8e:	0112      	lsls	r2, r2, #4
 8004b90:	4311      	orrs	r1, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b96:	0212      	lsls	r2, r2, #8
 8004b98:	4311      	orrs	r1, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b9e:	0852      	lsrs	r2, r2, #1
 8004ba0:	3a01      	subs	r2, #1
 8004ba2:	0552      	lsls	r2, r2, #21
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004baa:	0852      	lsrs	r2, r2, #1
 8004bac:	3a01      	subs	r2, #1
 8004bae:	0652      	lsls	r2, r2, #25
 8004bb0:	4311      	orrs	r1, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004bb6:	06d2      	lsls	r2, r2, #27
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	4943      	ldr	r1, [pc, #268]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc0:	4b41      	ldr	r3, [pc, #260]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a40      	ldr	r2, [pc, #256]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fb ff18 	bl	8000a0c <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fb ff14 	bl	8000a0c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e066      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf2:	4b35      	ldr	r3, [pc, #212]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x530>
 8004bfe:	e05e      	b.n	8004cbe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c00:	4b31      	ldr	r3, [pc, #196]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a30      	ldr	r2, [pc, #192]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fb fefe 	bl	8000a0c <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c14:	f7fb fefa 	bl	8000a0c <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e04c      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c26:	4b28      	ldr	r3, [pc, #160]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c32:	4b25      	ldr	r3, [pc, #148]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	4924      	ldr	r1, [pc, #144]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004c38:	4b25      	ldr	r3, [pc, #148]	@ (8004cd0 <HAL_RCC_OscConfig+0x620>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	60cb      	str	r3, [r1, #12]
 8004c3e:	e03e      	b.n	8004cbe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e039      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc8 <HAL_RCC_OscConfig+0x618>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f003 0203 	and.w	r2, r3, #3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d12c      	bne.n	8004cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d123      	bne.n	8004cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d11b      	bne.n	8004cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d113      	bne.n	8004cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d109      	bne.n	8004cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	019f800c 	.word	0x019f800c
 8004cd0:	feeefffc 	.word	0xfeeefffc

08004cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e11e      	b.n	8004f2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cec:	4b91      	ldr	r3, [pc, #580]	@ (8004f34 <HAL_RCC_ClockConfig+0x260>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d910      	bls.n	8004d1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b8e      	ldr	r3, [pc, #568]	@ (8004f34 <HAL_RCC_ClockConfig+0x260>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 020f 	bic.w	r2, r3, #15
 8004d02:	498c      	ldr	r1, [pc, #560]	@ (8004f34 <HAL_RCC_ClockConfig+0x260>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b8a      	ldr	r3, [pc, #552]	@ (8004f34 <HAL_RCC_ClockConfig+0x260>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e106      	b.n	8004f2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d073      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d129      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d30:	4b81      	ldr	r3, [pc, #516]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0f4      	b.n	8004f2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d40:	f000 f964 	bl	800500c <RCC_GetSysClockFreqFromPLLSource>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4a7c      	ldr	r2, [pc, #496]	@ (8004f3c <HAL_RCC_ClockConfig+0x268>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d93f      	bls.n	8004dce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d033      	beq.n	8004dce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d12f      	bne.n	8004dce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d6e:	4b72      	ldr	r3, [pc, #456]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d76:	4a70      	ldr	r2, [pc, #448]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d7e:	2380      	movs	r3, #128	@ 0x80
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e024      	b.n	8004dce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d107      	bne.n	8004d9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0c6      	b.n	8004f2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d9c:	4b66      	ldr	r3, [pc, #408]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0be      	b.n	8004f2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004dac:	f000 f8ce 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8004db0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4a61      	ldr	r2, [pc, #388]	@ (8004f3c <HAL_RCC_ClockConfig+0x268>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d909      	bls.n	8004dce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dba:	4b5f      	ldr	r3, [pc, #380]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dc2:	4a5d      	ldr	r2, [pc, #372]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004dca:	2380      	movs	r3, #128	@ 0x80
 8004dcc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dce:	4b5a      	ldr	r3, [pc, #360]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f023 0203 	bic.w	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	4957      	ldr	r1, [pc, #348]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de0:	f7fb fe14 	bl	8000a0c <HAL_GetTick>
 8004de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de8:	f7fb fe10 	bl	8000a0c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e095      	b.n	8004f2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 020c 	and.w	r2, r3, #12
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d1eb      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d023      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e28:	4b43      	ldr	r3, [pc, #268]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4a42      	ldr	r2, [pc, #264]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004e2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e40:	4b3d      	ldr	r3, [pc, #244]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e48:	4a3b      	ldr	r2, [pc, #236]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004e4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e50:	4b39      	ldr	r3, [pc, #228]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4936      	ldr	r1, [pc, #216]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b80      	cmp	r3, #128	@ 0x80
 8004e68:	d105      	bne.n	8004e76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e6a:	4b33      	ldr	r3, [pc, #204]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	4a32      	ldr	r2, [pc, #200]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004e70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e76:	4b2f      	ldr	r3, [pc, #188]	@ (8004f34 <HAL_RCC_ClockConfig+0x260>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d21d      	bcs.n	8004ec0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e84:	4b2b      	ldr	r3, [pc, #172]	@ (8004f34 <HAL_RCC_ClockConfig+0x260>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f023 020f 	bic.w	r2, r3, #15
 8004e8c:	4929      	ldr	r1, [pc, #164]	@ (8004f34 <HAL_RCC_ClockConfig+0x260>)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e94:	f7fb fdba 	bl	8000a0c <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9c:	f7fb fdb6 	bl	8000a0c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e03b      	b.n	8004f2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b20      	ldr	r3, [pc, #128]	@ (8004f34 <HAL_RCC_ClockConfig+0x260>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1ed      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4917      	ldr	r1, [pc, #92]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eea:	4b13      	ldr	r3, [pc, #76]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	490f      	ldr	r1, [pc, #60]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004efe:	f000 f825 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8004f02:	4602      	mov	r2, r0
 8004f04:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <HAL_RCC_ClockConfig+0x264>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	490c      	ldr	r1, [pc, #48]	@ (8004f40 <HAL_RCC_ClockConfig+0x26c>)
 8004f10:	5ccb      	ldrb	r3, [r1, r3]
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f44 <HAL_RCC_ClockConfig+0x270>)
 8004f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <HAL_RCC_ClockConfig+0x274>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fb fd26 	bl	8000974 <HAL_InitTick>
 8004f28:	4603      	mov	r3, r0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40022000 	.word	0x40022000
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	04c4b400 	.word	0x04c4b400
 8004f40:	0800a860 	.word	0x0800a860
 8004f44:	20000000 	.word	0x20000000
 8004f48:	20000004 	.word	0x20000004

08004f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f52:	4b2c      	ldr	r3, [pc, #176]	@ (8005004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d102      	bne.n	8004f64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8005008 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	e047      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f64:	4b27      	ldr	r3, [pc, #156]	@ (8005004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 030c 	and.w	r3, r3, #12
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d102      	bne.n	8004f76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f70:	4b25      	ldr	r3, [pc, #148]	@ (8005008 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f72:	613b      	str	r3, [r7, #16]
 8004f74:	e03e      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f76:	4b23      	ldr	r3, [pc, #140]	@ (8005004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	d136      	bne.n	8004ff0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f82:	4b20      	ldr	r3, [pc, #128]	@ (8005004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	3301      	adds	r3, #1
 8004f98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d10c      	bne.n	8004fba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fa0:	4a19      	ldr	r2, [pc, #100]	@ (8005008 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	4a16      	ldr	r2, [pc, #88]	@ (8005004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004faa:	68d2      	ldr	r2, [r2, #12]
 8004fac:	0a12      	lsrs	r2, r2, #8
 8004fae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	617b      	str	r3, [r7, #20]
      break;
 8004fb8:	e00c      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fba:	4a13      	ldr	r2, [pc, #76]	@ (8005008 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	4a10      	ldr	r2, [pc, #64]	@ (8005004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fc4:	68d2      	ldr	r2, [r2, #12]
 8004fc6:	0a12      	lsrs	r2, r2, #8
 8004fc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fcc:	fb02 f303 	mul.w	r3, r2, r3
 8004fd0:	617b      	str	r3, [r7, #20]
      break;
 8004fd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	0e5b      	lsrs	r3, r3, #25
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	3301      	adds	r3, #1
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	e001      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ff4:	693b      	ldr	r3, [r7, #16]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000
 8005008:	00f42400 	.word	0x00f42400

0800500c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005012:	4b1e      	ldr	r3, [pc, #120]	@ (800508c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800501c:	4b1b      	ldr	r3, [pc, #108]	@ (800508c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	3301      	adds	r3, #1
 8005028:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d10c      	bne.n	800504a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005030:	4a17      	ldr	r2, [pc, #92]	@ (8005090 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	4a14      	ldr	r2, [pc, #80]	@ (800508c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800503a:	68d2      	ldr	r2, [r2, #12]
 800503c:	0a12      	lsrs	r2, r2, #8
 800503e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	617b      	str	r3, [r7, #20]
    break;
 8005048:	e00c      	b.n	8005064 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800504a:	4a11      	ldr	r2, [pc, #68]	@ (8005090 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005052:	4a0e      	ldr	r2, [pc, #56]	@ (800508c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005054:	68d2      	ldr	r2, [r2, #12]
 8005056:	0a12      	lsrs	r2, r2, #8
 8005058:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	617b      	str	r3, [r7, #20]
    break;
 8005062:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005064:	4b09      	ldr	r3, [pc, #36]	@ (800508c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	0e5b      	lsrs	r3, r3, #25
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	3301      	adds	r3, #1
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800507e:	687b      	ldr	r3, [r7, #4]
}
 8005080:	4618      	mov	r0, r3
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40021000 	.word	0x40021000
 8005090:	00f42400 	.word	0x00f42400

08005094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800509c:	2300      	movs	r3, #0
 800509e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050a0:	2300      	movs	r3, #0
 80050a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8098 	beq.w	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050b2:	2300      	movs	r3, #0
 80050b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b6:	4b43      	ldr	r3, [pc, #268]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10d      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c2:	4b40      	ldr	r3, [pc, #256]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c6:	4a3f      	ldr	r2, [pc, #252]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ce:	4b3d      	ldr	r3, [pc, #244]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050da:	2301      	movs	r3, #1
 80050dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050de:	4b3a      	ldr	r3, [pc, #232]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a39      	ldr	r2, [pc, #228]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050ea:	f7fb fc8f 	bl	8000a0c <HAL_GetTick>
 80050ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050f0:	e009      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f2:	f7fb fc8b 	bl	8000a0c <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d902      	bls.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	74fb      	strb	r3, [r7, #19]
        break;
 8005104:	e005      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005106:	4b30      	ldr	r3, [pc, #192]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0ef      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005112:	7cfb      	ldrb	r3, [r7, #19]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d159      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005118:	4b2a      	ldr	r3, [pc, #168]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005122:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01e      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	429a      	cmp	r2, r3
 8005132:	d019      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005134:	4b23      	ldr	r3, [pc, #140]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800513e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005140:	4b20      	ldr	r3, [pc, #128]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005146:	4a1f      	ldr	r2, [pc, #124]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800514c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005150:	4b1c      	ldr	r3, [pc, #112]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005156:	4a1b      	ldr	r2, [pc, #108]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800515c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005160:	4a18      	ldr	r2, [pc, #96]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fb fc4b 	bl	8000a0c <HAL_GetTick>
 8005176:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005178:	e00b      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517a:	f7fb fc47 	bl	8000a0c <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d902      	bls.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	74fb      	strb	r3, [r7, #19]
            break;
 8005190:	e006      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005192:	4b0c      	ldr	r3, [pc, #48]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0ec      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051a6:	4b07      	ldr	r3, [pc, #28]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b4:	4903      	ldr	r1, [pc, #12]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051bc:	e008      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	74bb      	strb	r3, [r7, #18]
 80051c2:	e005      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051d0:	7c7b      	ldrb	r3, [r7, #17]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d6:	4ba6      	ldr	r3, [pc, #664]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051da:	4aa5      	ldr	r2, [pc, #660]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ee:	4ba0      	ldr	r3, [pc, #640]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f4:	f023 0203 	bic.w	r2, r3, #3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	499c      	ldr	r1, [pc, #624]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005210:	4b97      	ldr	r3, [pc, #604]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005216:	f023 020c 	bic.w	r2, r3, #12
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	4994      	ldr	r1, [pc, #592]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005232:	4b8f      	ldr	r3, [pc, #572]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005238:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	498b      	ldr	r1, [pc, #556]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005254:	4b86      	ldr	r3, [pc, #536]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	4983      	ldr	r1, [pc, #524]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005276:	4b7e      	ldr	r3, [pc, #504]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800527c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	497a      	ldr	r1, [pc, #488]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005298:	4b75      	ldr	r3, [pc, #468]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	4972      	ldr	r1, [pc, #456]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	4969      	ldr	r1, [pc, #420]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052dc:	4b64      	ldr	r3, [pc, #400]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	4961      	ldr	r1, [pc, #388]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052fe:	4b5c      	ldr	r3, [pc, #368]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005304:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	4958      	ldr	r1, [pc, #352]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d015      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005320:	4b53      	ldr	r3, [pc, #332]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005326:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532e:	4950      	ldr	r1, [pc, #320]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800533e:	d105      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005340:	4b4b      	ldr	r3, [pc, #300]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4a4a      	ldr	r2, [pc, #296]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800534a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005354:	2b00      	cmp	r3, #0
 8005356:	d015      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005358:	4b45      	ldr	r3, [pc, #276]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	4942      	ldr	r1, [pc, #264]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005376:	d105      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005378:	4b3d      	ldr	r3, [pc, #244]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a3c      	ldr	r2, [pc, #240]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005382:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d015      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005390:	4b37      	ldr	r3, [pc, #220]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005396:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539e:	4934      	ldr	r1, [pc, #208]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053ae:	d105      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d015      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053c8:	4b29      	ldr	r3, [pc, #164]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d6:	4926      	ldr	r1, [pc, #152]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053e6:	d105      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053e8:	4b21      	ldr	r3, [pc, #132]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4a20      	ldr	r2, [pc, #128]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d015      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005400:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005406:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540e:	4918      	ldr	r1, [pc, #96]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800541e:	d105      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005420:	4b13      	ldr	r3, [pc, #76]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4a12      	ldr	r2, [pc, #72]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800542a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d015      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005438:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005446:	490a      	ldr	r1, [pc, #40]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005456:	d105      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005458:	4b05      	ldr	r3, [pc, #20]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a04      	ldr	r2, [pc, #16]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005462:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005464:	7cbb      	ldrb	r3, [r7, #18]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40021000 	.word	0x40021000

08005474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e049      	b.n	800551a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fb f976 	bl	800078c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f000 fba4 	bl	8005c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e049      	b.n	80055c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f841 	bl	80055d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f000 fb4d 	bl	8005c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d109      	bne.n	8005608 <HAL_TIM_PWM_Start+0x24>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	bf14      	ite	ne
 8005600:	2301      	movne	r3, #1
 8005602:	2300      	moveq	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e03c      	b.n	8005682 <HAL_TIM_PWM_Start+0x9e>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b04      	cmp	r3, #4
 800560c:	d109      	bne.n	8005622 <HAL_TIM_PWM_Start+0x3e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	bf14      	ite	ne
 800561a:	2301      	movne	r3, #1
 800561c:	2300      	moveq	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	e02f      	b.n	8005682 <HAL_TIM_PWM_Start+0x9e>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d109      	bne.n	800563c <HAL_TIM_PWM_Start+0x58>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e022      	b.n	8005682 <HAL_TIM_PWM_Start+0x9e>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b0c      	cmp	r3, #12
 8005640:	d109      	bne.n	8005656 <HAL_TIM_PWM_Start+0x72>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	bf14      	ite	ne
 800564e:	2301      	movne	r3, #1
 8005650:	2300      	moveq	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	e015      	b.n	8005682 <HAL_TIM_PWM_Start+0x9e>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b10      	cmp	r3, #16
 800565a:	d109      	bne.n	8005670 <HAL_TIM_PWM_Start+0x8c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	bf14      	ite	ne
 8005668:	2301      	movne	r3, #1
 800566a:	2300      	moveq	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	e008      	b.n	8005682 <HAL_TIM_PWM_Start+0x9e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	bf14      	ite	ne
 800567c:	2301      	movne	r3, #1
 800567e:	2300      	moveq	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e097      	b.n	80057ba <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d104      	bne.n	800569a <HAL_TIM_PWM_Start+0xb6>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005698:	e023      	b.n	80056e2 <HAL_TIM_PWM_Start+0xfe>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b04      	cmp	r3, #4
 800569e:	d104      	bne.n	80056aa <HAL_TIM_PWM_Start+0xc6>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056a8:	e01b      	b.n	80056e2 <HAL_TIM_PWM_Start+0xfe>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d104      	bne.n	80056ba <HAL_TIM_PWM_Start+0xd6>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056b8:	e013      	b.n	80056e2 <HAL_TIM_PWM_Start+0xfe>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b0c      	cmp	r3, #12
 80056be:	d104      	bne.n	80056ca <HAL_TIM_PWM_Start+0xe6>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056c8:	e00b      	b.n	80056e2 <HAL_TIM_PWM_Start+0xfe>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b10      	cmp	r3, #16
 80056ce:	d104      	bne.n	80056da <HAL_TIM_PWM_Start+0xf6>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056d8:	e003      	b.n	80056e2 <HAL_TIM_PWM_Start+0xfe>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2201      	movs	r2, #1
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 feb6 	bl	800645c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a33      	ldr	r2, [pc, #204]	@ (80057c4 <HAL_TIM_PWM_Start+0x1e0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_TIM_PWM_Start+0x13e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a32      	ldr	r2, [pc, #200]	@ (80057c8 <HAL_TIM_PWM_Start+0x1e4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_TIM_PWM_Start+0x13e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a30      	ldr	r2, [pc, #192]	@ (80057cc <HAL_TIM_PWM_Start+0x1e8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_TIM_PWM_Start+0x13e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a2f      	ldr	r2, [pc, #188]	@ (80057d0 <HAL_TIM_PWM_Start+0x1ec>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_TIM_PWM_Start+0x13e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a2d      	ldr	r2, [pc, #180]	@ (80057d4 <HAL_TIM_PWM_Start+0x1f0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d101      	bne.n	8005726 <HAL_TIM_PWM_Start+0x142>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <HAL_TIM_PWM_Start+0x144>
 8005726:	2300      	movs	r3, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800573a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a20      	ldr	r2, [pc, #128]	@ (80057c4 <HAL_TIM_PWM_Start+0x1e0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d018      	beq.n	8005778 <HAL_TIM_PWM_Start+0x194>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800574e:	d013      	beq.n	8005778 <HAL_TIM_PWM_Start+0x194>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a20      	ldr	r2, [pc, #128]	@ (80057d8 <HAL_TIM_PWM_Start+0x1f4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00e      	beq.n	8005778 <HAL_TIM_PWM_Start+0x194>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1f      	ldr	r2, [pc, #124]	@ (80057dc <HAL_TIM_PWM_Start+0x1f8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_TIM_PWM_Start+0x194>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a17      	ldr	r2, [pc, #92]	@ (80057c8 <HAL_TIM_PWM_Start+0x1e4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_TIM_PWM_Start+0x194>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a16      	ldr	r2, [pc, #88]	@ (80057cc <HAL_TIM_PWM_Start+0x1e8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d115      	bne.n	80057a4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	4b18      	ldr	r3, [pc, #96]	@ (80057e0 <HAL_TIM_PWM_Start+0x1fc>)
 8005780:	4013      	ands	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b06      	cmp	r3, #6
 8005788:	d015      	beq.n	80057b6 <HAL_TIM_PWM_Start+0x1d2>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005790:	d011      	beq.n	80057b6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0201 	orr.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a2:	e008      	b.n	80057b6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	e000      	b.n	80057b8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40013400 	.word	0x40013400
 80057cc:	40014000 	.word	0x40014000
 80057d0:	40014400 	.word	0x40014400
 80057d4:	40014800 	.word	0x40014800
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800
 80057e0:	00010007 	.word	0x00010007

080057e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0ff      	b.n	8005a02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b14      	cmp	r3, #20
 800580e:	f200 80f0 	bhi.w	80059f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005812:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	0800586d 	.word	0x0800586d
 800581c:	080059f3 	.word	0x080059f3
 8005820:	080059f3 	.word	0x080059f3
 8005824:	080059f3 	.word	0x080059f3
 8005828:	080058ad 	.word	0x080058ad
 800582c:	080059f3 	.word	0x080059f3
 8005830:	080059f3 	.word	0x080059f3
 8005834:	080059f3 	.word	0x080059f3
 8005838:	080058ef 	.word	0x080058ef
 800583c:	080059f3 	.word	0x080059f3
 8005840:	080059f3 	.word	0x080059f3
 8005844:	080059f3 	.word	0x080059f3
 8005848:	0800592f 	.word	0x0800592f
 800584c:	080059f3 	.word	0x080059f3
 8005850:	080059f3 	.word	0x080059f3
 8005854:	080059f3 	.word	0x080059f3
 8005858:	08005971 	.word	0x08005971
 800585c:	080059f3 	.word	0x080059f3
 8005860:	080059f3 	.word	0x080059f3
 8005864:	080059f3 	.word	0x080059f3
 8005868:	080059b1 	.word	0x080059b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fa60 	bl	8005d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0208 	orr.w	r2, r2, #8
 8005886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0204 	bic.w	r2, r2, #4
 8005896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6999      	ldr	r1, [r3, #24]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	619a      	str	r2, [r3, #24]
      break;
 80058aa:	e0a5      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fad0 	bl	8005e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6999      	ldr	r1, [r3, #24]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	021a      	lsls	r2, r3, #8
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	619a      	str	r2, [r3, #24]
      break;
 80058ec:	e084      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fb39 	bl	8005f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0208 	orr.w	r2, r2, #8
 8005908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0204 	bic.w	r2, r2, #4
 8005918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69d9      	ldr	r1, [r3, #28]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	61da      	str	r2, [r3, #28]
      break;
 800592c:	e064      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fba1 	bl	800607c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69d9      	ldr	r1, [r3, #28]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	021a      	lsls	r2, r3, #8
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	61da      	str	r2, [r3, #28]
      break;
 800596e:	e043      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fc0a 	bl	8006190 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0208 	orr.w	r2, r2, #8
 800598a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0204 	bic.w	r2, r2, #4
 800599a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059ae:	e023      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fc4e 	bl	8006258 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	021a      	lsls	r2, r3, #8
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059f0:	e002      	b.n	80059f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
      break;
 80059f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop

08005a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_TIM_ConfigClockSource+0x1c>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e0de      	b.n	8005be6 <HAL_TIM_ConfigClockSource+0x1da>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005a46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a63      	ldr	r2, [pc, #396]	@ (8005bf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	f000 80a9 	beq.w	8005bba <HAL_TIM_ConfigClockSource+0x1ae>
 8005a68:	4a61      	ldr	r2, [pc, #388]	@ (8005bf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	f200 80ae 	bhi.w	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005a70:	4a60      	ldr	r2, [pc, #384]	@ (8005bf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	f000 80a1 	beq.w	8005bba <HAL_TIM_ConfigClockSource+0x1ae>
 8005a78:	4a5e      	ldr	r2, [pc, #376]	@ (8005bf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	f200 80a6 	bhi.w	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005a80:	4a5d      	ldr	r2, [pc, #372]	@ (8005bf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	f000 8099 	beq.w	8005bba <HAL_TIM_ConfigClockSource+0x1ae>
 8005a88:	4a5b      	ldr	r2, [pc, #364]	@ (8005bf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	f200 809e 	bhi.w	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005a90:	4a5a      	ldr	r2, [pc, #360]	@ (8005bfc <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	f000 8091 	beq.w	8005bba <HAL_TIM_ConfigClockSource+0x1ae>
 8005a98:	4a58      	ldr	r2, [pc, #352]	@ (8005bfc <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	f200 8096 	bhi.w	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005aa0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005aa4:	f000 8089 	beq.w	8005bba <HAL_TIM_ConfigClockSource+0x1ae>
 8005aa8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005aac:	f200 808e 	bhi.w	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005ab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ab4:	d03e      	beq.n	8005b34 <HAL_TIM_ConfigClockSource+0x128>
 8005ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aba:	f200 8087 	bhi.w	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ac2:	f000 8086 	beq.w	8005bd2 <HAL_TIM_ConfigClockSource+0x1c6>
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aca:	d87f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005acc:	2b70      	cmp	r3, #112	@ 0x70
 8005ace:	d01a      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0xfa>
 8005ad0:	2b70      	cmp	r3, #112	@ 0x70
 8005ad2:	d87b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005ad4:	2b60      	cmp	r3, #96	@ 0x60
 8005ad6:	d050      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x16e>
 8005ad8:	2b60      	cmp	r3, #96	@ 0x60
 8005ada:	d877      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005adc:	2b50      	cmp	r3, #80	@ 0x50
 8005ade:	d03c      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x14e>
 8005ae0:	2b50      	cmp	r3, #80	@ 0x50
 8005ae2:	d873      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005ae4:	2b40      	cmp	r3, #64	@ 0x40
 8005ae6:	d058      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x18e>
 8005ae8:	2b40      	cmp	r3, #64	@ 0x40
 8005aea:	d86f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005aec:	2b30      	cmp	r3, #48	@ 0x30
 8005aee:	d064      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x1ae>
 8005af0:	2b30      	cmp	r3, #48	@ 0x30
 8005af2:	d86b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d060      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x1ae>
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d867      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d05c      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x1ae>
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d05a      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x1ae>
 8005b04:	e062      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b16:	f000 fc81 	bl	800641c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	609a      	str	r2, [r3, #8]
      break;
 8005b32:	e04f      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b44:	f000 fc6a 	bl	800641c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b56:	609a      	str	r2, [r3, #8]
      break;
 8005b58:	e03c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b66:	461a      	mov	r2, r3
 8005b68:	f000 fbdc 	bl	8006324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2150      	movs	r1, #80	@ 0x50
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fc35 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005b78:	e02c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b86:	461a      	mov	r2, r3
 8005b88:	f000 fbfb 	bl	8006382 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2160      	movs	r1, #96	@ 0x60
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fc25 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005b98:	e01c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 fbbc 	bl	8006324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2140      	movs	r1, #64	@ 0x40
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fc15 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e00c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f000 fc0c 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8005bca:	e003      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd0:	e000      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005bd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	00100070 	.word	0x00100070
 8005bf4:	00100040 	.word	0x00100040
 8005bf8:	00100030 	.word	0x00100030
 8005bfc:	00100020 	.word	0x00100020

08005c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a42      	ldr	r2, [pc, #264]	@ (8005d1c <TIM_Base_SetConfig+0x11c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00f      	beq.n	8005c38 <TIM_Base_SetConfig+0x38>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c1e:	d00b      	beq.n	8005c38 <TIM_Base_SetConfig+0x38>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a3f      	ldr	r2, [pc, #252]	@ (8005d20 <TIM_Base_SetConfig+0x120>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_Base_SetConfig+0x38>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d24 <TIM_Base_SetConfig+0x124>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_Base_SetConfig+0x38>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a3d      	ldr	r2, [pc, #244]	@ (8005d28 <TIM_Base_SetConfig+0x128>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d108      	bne.n	8005c4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a33      	ldr	r2, [pc, #204]	@ (8005d1c <TIM_Base_SetConfig+0x11c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d01b      	beq.n	8005c8a <TIM_Base_SetConfig+0x8a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c58:	d017      	beq.n	8005c8a <TIM_Base_SetConfig+0x8a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a30      	ldr	r2, [pc, #192]	@ (8005d20 <TIM_Base_SetConfig+0x120>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <TIM_Base_SetConfig+0x8a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a2f      	ldr	r2, [pc, #188]	@ (8005d24 <TIM_Base_SetConfig+0x124>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00f      	beq.n	8005c8a <TIM_Base_SetConfig+0x8a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005d28 <TIM_Base_SetConfig+0x128>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00b      	beq.n	8005c8a <TIM_Base_SetConfig+0x8a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a2d      	ldr	r2, [pc, #180]	@ (8005d2c <TIM_Base_SetConfig+0x12c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d007      	beq.n	8005c8a <TIM_Base_SetConfig+0x8a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005d30 <TIM_Base_SetConfig+0x130>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d003      	beq.n	8005c8a <TIM_Base_SetConfig+0x8a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a2b      	ldr	r2, [pc, #172]	@ (8005d34 <TIM_Base_SetConfig+0x134>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d108      	bne.n	8005c9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <TIM_Base_SetConfig+0x11c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00f      	beq.n	8005ce8 <TIM_Base_SetConfig+0xe8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <TIM_Base_SetConfig+0x128>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_Base_SetConfig+0xe8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a16      	ldr	r2, [pc, #88]	@ (8005d2c <TIM_Base_SetConfig+0x12c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_Base_SetConfig+0xe8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a15      	ldr	r2, [pc, #84]	@ (8005d30 <TIM_Base_SetConfig+0x130>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_Base_SetConfig+0xe8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a14      	ldr	r2, [pc, #80]	@ (8005d34 <TIM_Base_SetConfig+0x134>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d103      	bne.n	8005cf0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d105      	bne.n	8005d0e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	611a      	str	r2, [r3, #16]
  }
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	40013400 	.word	0x40013400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800

08005d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f023 0201 	bic.w	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f023 0302 	bic.w	r3, r3, #2
 8005d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a2c      	ldr	r2, [pc, #176]	@ (8005e44 <TIM_OC1_SetConfig+0x10c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00f      	beq.n	8005db8 <TIM_OC1_SetConfig+0x80>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005e48 <TIM_OC1_SetConfig+0x110>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00b      	beq.n	8005db8 <TIM_OC1_SetConfig+0x80>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a2a      	ldr	r2, [pc, #168]	@ (8005e4c <TIM_OC1_SetConfig+0x114>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d007      	beq.n	8005db8 <TIM_OC1_SetConfig+0x80>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a29      	ldr	r2, [pc, #164]	@ (8005e50 <TIM_OC1_SetConfig+0x118>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_OC1_SetConfig+0x80>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a28      	ldr	r2, [pc, #160]	@ (8005e54 <TIM_OC1_SetConfig+0x11c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d10c      	bne.n	8005dd2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f023 0308 	bic.w	r3, r3, #8
 8005dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f023 0304 	bic.w	r3, r3, #4
 8005dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e44 <TIM_OC1_SetConfig+0x10c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00f      	beq.n	8005dfa <TIM_OC1_SetConfig+0xc2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8005e48 <TIM_OC1_SetConfig+0x110>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00b      	beq.n	8005dfa <TIM_OC1_SetConfig+0xc2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a19      	ldr	r2, [pc, #100]	@ (8005e4c <TIM_OC1_SetConfig+0x114>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <TIM_OC1_SetConfig+0xc2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a18      	ldr	r2, [pc, #96]	@ (8005e50 <TIM_OC1_SetConfig+0x118>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_OC1_SetConfig+0xc2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a17      	ldr	r2, [pc, #92]	@ (8005e54 <TIM_OC1_SetConfig+0x11c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d111      	bne.n	8005e1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	621a      	str	r2, [r3, #32]
}
 8005e38:	bf00      	nop
 8005e3a:	371c      	adds	r7, #28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	40012c00 	.word	0x40012c00
 8005e48:	40013400 	.word	0x40013400
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40014400 	.word	0x40014400
 8005e54:	40014800 	.word	0x40014800

08005e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f023 0210 	bic.w	r2, r3, #16
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	021b      	lsls	r3, r3, #8
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f023 0320 	bic.w	r3, r3, #32
 8005ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a28      	ldr	r2, [pc, #160]	@ (8005f58 <TIM_OC2_SetConfig+0x100>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC2_SetConfig+0x6c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a27      	ldr	r2, [pc, #156]	@ (8005f5c <TIM_OC2_SetConfig+0x104>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d10d      	bne.n	8005ee0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ede:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f58 <TIM_OC2_SetConfig+0x100>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00f      	beq.n	8005f08 <TIM_OC2_SetConfig+0xb0>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a1c      	ldr	r2, [pc, #112]	@ (8005f5c <TIM_OC2_SetConfig+0x104>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <TIM_OC2_SetConfig+0xb0>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8005f60 <TIM_OC2_SetConfig+0x108>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d007      	beq.n	8005f08 <TIM_OC2_SetConfig+0xb0>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a1a      	ldr	r2, [pc, #104]	@ (8005f64 <TIM_OC2_SetConfig+0x10c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_OC2_SetConfig+0xb0>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a19      	ldr	r2, [pc, #100]	@ (8005f68 <TIM_OC2_SetConfig+0x110>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d113      	bne.n	8005f30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40013400 	.word	0x40013400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40014400 	.word	0x40014400
 8005f68:	40014800 	.word	0x40014800

08005f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0303 	bic.w	r3, r3, #3
 8005fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a27      	ldr	r2, [pc, #156]	@ (8006068 <TIM_OC3_SetConfig+0xfc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC3_SetConfig+0x6a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a26      	ldr	r2, [pc, #152]	@ (800606c <TIM_OC3_SetConfig+0x100>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d10d      	bne.n	8005ff2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8006068 <TIM_OC3_SetConfig+0xfc>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00f      	beq.n	800601a <TIM_OC3_SetConfig+0xae>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800606c <TIM_OC3_SetConfig+0x100>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00b      	beq.n	800601a <TIM_OC3_SetConfig+0xae>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1a      	ldr	r2, [pc, #104]	@ (8006070 <TIM_OC3_SetConfig+0x104>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d007      	beq.n	800601a <TIM_OC3_SetConfig+0xae>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a19      	ldr	r2, [pc, #100]	@ (8006074 <TIM_OC3_SetConfig+0x108>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d003      	beq.n	800601a <TIM_OC3_SetConfig+0xae>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a18      	ldr	r2, [pc, #96]	@ (8006078 <TIM_OC3_SetConfig+0x10c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d113      	bne.n	8006042 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	621a      	str	r2, [r3, #32]
}
 800605c:	bf00      	nop
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	40012c00 	.word	0x40012c00
 800606c:	40013400 	.word	0x40013400
 8006070:	40014000 	.word	0x40014000
 8006074:	40014400 	.word	0x40014400
 8006078:	40014800 	.word	0x40014800

0800607c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	031b      	lsls	r3, r3, #12
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a28      	ldr	r2, [pc, #160]	@ (800617c <TIM_OC4_SetConfig+0x100>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_OC4_SetConfig+0x6c>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a27      	ldr	r2, [pc, #156]	@ (8006180 <TIM_OC4_SetConfig+0x104>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d10d      	bne.n	8006104 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	031b      	lsls	r3, r3, #12
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006102:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a1d      	ldr	r2, [pc, #116]	@ (800617c <TIM_OC4_SetConfig+0x100>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00f      	beq.n	800612c <TIM_OC4_SetConfig+0xb0>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a1c      	ldr	r2, [pc, #112]	@ (8006180 <TIM_OC4_SetConfig+0x104>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_OC4_SetConfig+0xb0>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a1b      	ldr	r2, [pc, #108]	@ (8006184 <TIM_OC4_SetConfig+0x108>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_OC4_SetConfig+0xb0>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a1a      	ldr	r2, [pc, #104]	@ (8006188 <TIM_OC4_SetConfig+0x10c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_OC4_SetConfig+0xb0>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a19      	ldr	r2, [pc, #100]	@ (800618c <TIM_OC4_SetConfig+0x110>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d113      	bne.n	8006154 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006132:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800613a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	019b      	lsls	r3, r3, #6
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	019b      	lsls	r3, r3, #6
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	621a      	str	r2, [r3, #32]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40012c00 	.word	0x40012c00
 8006180:	40013400 	.word	0x40013400
 8006184:	40014000 	.word	0x40014000
 8006188:	40014400 	.word	0x40014400
 800618c:	40014800 	.word	0x40014800

08006190 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80061d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	041b      	lsls	r3, r3, #16
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a17      	ldr	r2, [pc, #92]	@ (8006244 <TIM_OC5_SetConfig+0xb4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_OC5_SetConfig+0x7a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a16      	ldr	r2, [pc, #88]	@ (8006248 <TIM_OC5_SetConfig+0xb8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_OC5_SetConfig+0x7a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a15      	ldr	r2, [pc, #84]	@ (800624c <TIM_OC5_SetConfig+0xbc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_OC5_SetConfig+0x7a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a14      	ldr	r2, [pc, #80]	@ (8006250 <TIM_OC5_SetConfig+0xc0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_OC5_SetConfig+0x7a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a13      	ldr	r2, [pc, #76]	@ (8006254 <TIM_OC5_SetConfig+0xc4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d109      	bne.n	800621e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006210:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	621a      	str	r2, [r3, #32]
}
 8006238:	bf00      	nop
 800623a:	371c      	adds	r7, #28
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40013400 	.word	0x40013400
 800624c:	40014000 	.word	0x40014000
 8006250:	40014400 	.word	0x40014400
 8006254:	40014800 	.word	0x40014800

08006258 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800628a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800629e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	051b      	lsls	r3, r3, #20
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a18      	ldr	r2, [pc, #96]	@ (8006310 <TIM_OC6_SetConfig+0xb8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00f      	beq.n	80062d4 <TIM_OC6_SetConfig+0x7c>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a17      	ldr	r2, [pc, #92]	@ (8006314 <TIM_OC6_SetConfig+0xbc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00b      	beq.n	80062d4 <TIM_OC6_SetConfig+0x7c>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a16      	ldr	r2, [pc, #88]	@ (8006318 <TIM_OC6_SetConfig+0xc0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d007      	beq.n	80062d4 <TIM_OC6_SetConfig+0x7c>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a15      	ldr	r2, [pc, #84]	@ (800631c <TIM_OC6_SetConfig+0xc4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_OC6_SetConfig+0x7c>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a14      	ldr	r2, [pc, #80]	@ (8006320 <TIM_OC6_SetConfig+0xc8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d109      	bne.n	80062e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	029b      	lsls	r3, r3, #10
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	621a      	str	r2, [r3, #32]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	40012c00 	.word	0x40012c00
 8006314:	40013400 	.word	0x40013400
 8006318:	40014000 	.word	0x40014000
 800631c:	40014400 	.word	0x40014400
 8006320:	40014800 	.word	0x40014800

08006324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f023 0201 	bic.w	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800634e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f023 030a 	bic.w	r3, r3, #10
 8006360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006382:	b480      	push	{r7}
 8006384:	b087      	sub	sp, #28
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f023 0210 	bic.w	r2, r3, #16
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	031b      	lsls	r3, r3, #12
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80063f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	f043 0307 	orr.w	r3, r3, #7
 8006408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	609a      	str	r2, [r3, #8]
}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	021a      	lsls	r2, r3, #8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	431a      	orrs	r2, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	4313      	orrs	r3, r2
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	609a      	str	r2, [r3, #8]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	2201      	movs	r2, #1
 8006470:	fa02 f303 	lsl.w	r3, r2, r3
 8006474:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a1a      	ldr	r2, [r3, #32]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	43db      	mvns	r3, r3
 800647e:	401a      	ands	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a1a      	ldr	r2, [r3, #32]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f003 031f 	and.w	r3, r3, #31
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	fa01 f303 	lsl.w	r3, r1, r3
 8006494:	431a      	orrs	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064bc:	2302      	movs	r3, #2
 80064be:	e065      	b.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d004      	beq.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2b      	ldr	r2, [pc, #172]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d108      	bne.n	8006506 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800650c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006510:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1b      	ldr	r2, [pc, #108]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d018      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006536:	d013      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a18      	ldr	r2, [pc, #96]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00e      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a17      	ldr	r2, [pc, #92]	@ (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d009      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a12      	ldr	r2, [pc, #72]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a13      	ldr	r2, [pc, #76]	@ (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10c      	bne.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006566:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	4313      	orrs	r3, r2
 8006570:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	40012c00 	.word	0x40012c00
 800659c:	40013400 	.word	0x40013400
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40014000 	.word	0x40014000

080065ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065bc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80065c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065da:	b480      	push	{r7}
 80065dc:	b085      	sub	sp, #20
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065e2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80065e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	43db      	mvns	r3, r3
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	4013      	ands	r3, r2
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	1d3b      	adds	r3, r7, #4
 800661a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800664c:	b480      	push	{r7}
 800664e:	b0a7      	sub	sp, #156	@ 0x9c
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29b      	uxth	r3, r3
 800666a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800666e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006672:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	78db      	ldrb	r3, [r3, #3]
 800667a:	2b03      	cmp	r3, #3
 800667c:	d81f      	bhi.n	80066be <USB_ActivateEndpoint+0x72>
 800667e:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <USB_ActivateEndpoint+0x38>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	08006695 	.word	0x08006695
 8006688:	080066b1 	.word	0x080066b1
 800668c:	080066c7 	.word	0x080066c7
 8006690:	080066a3 	.word	0x080066a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006694:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006698:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800669c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80066a0:	e012      	b.n	80066c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80066a2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80066a6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80066aa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80066ae:	e00b      	b.n	80066c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80066b0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80066b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066b8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80066bc:	e004      	b.n	80066c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80066c4:	e000      	b.n	80066c8 <USB_ActivateEndpoint+0x7c>
      break;
 80066c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80066d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	b21b      	sxth	r3, r3
 80066fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006702:	b21a      	sxth	r2, r3
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	b21b      	sxth	r3, r3
 800670a:	4313      	orrs	r3, r2
 800670c:	b21b      	sxth	r3, r3
 800670e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	441a      	add	r2, r3
 800671c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800672c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006730:	b29b      	uxth	r3, r3
 8006732:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	7b1b      	ldrb	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f040 8180 	bne.w	8006a3e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	785b      	ldrb	r3, [r3, #1]
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8084 	beq.w	8006850 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	61bb      	str	r3, [r7, #24]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006752:	b29b      	uxth	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	4413      	add	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	00da      	lsls	r2, r3, #3
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	88db      	ldrh	r3, [r3, #6]
 8006770:	085b      	lsrs	r3, r3, #1
 8006772:	b29b      	uxth	r3, r3
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	827b      	strh	r3, [r7, #18]
 800678a:	8a7b      	ldrh	r3, [r7, #18]
 800678c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01b      	beq.n	80067cc <USB_ActivateEndpoint+0x180>
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067aa:	823b      	strh	r3, [r7, #16]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	441a      	add	r2, r3
 80067b6:	8a3b      	ldrh	r3, [r7, #16]
 80067b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	78db      	ldrb	r3, [r3, #3]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d020      	beq.n	8006816 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ea:	81bb      	strh	r3, [r7, #12]
 80067ec:	89bb      	ldrh	r3, [r7, #12]
 80067ee:	f083 0320 	eor.w	r3, r3, #32
 80067f2:	81bb      	strh	r3, [r7, #12]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	89bb      	ldrh	r3, [r7, #12]
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800680c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]
 8006814:	e3f9      	b.n	800700a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800682c:	81fb      	strh	r3, [r7, #14]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	441a      	add	r2, r3
 8006838:	89fb      	ldrh	r3, [r7, #14]
 800683a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800683e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684a:	b29b      	uxth	r3, r3
 800684c:	8013      	strh	r3, [r2, #0]
 800684e:	e3dc      	b.n	800700a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	633b      	str	r3, [r7, #48]	@ 0x30
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800685a:	b29b      	uxth	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	4413      	add	r3, r2
 8006862:	633b      	str	r3, [r7, #48]	@ 0x30
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	00da      	lsls	r2, r3, #3
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	4413      	add	r3, r2
 800686e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	88db      	ldrh	r3, [r3, #6]
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	b29b      	uxth	r3, r3
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006882:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800688e:	b29b      	uxth	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006894:	4413      	add	r3, r2
 8006896:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	00da      	lsls	r2, r3, #3
 800689e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	801a      	strh	r2, [r3, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <USB_ActivateEndpoint+0x28a>
 80068c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e041      	b.n	800695a <USB_ActivateEndpoint+0x30e>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b3e      	cmp	r3, #62	@ 0x3e
 80068dc:	d81c      	bhi.n	8006918 <USB_ActivateEndpoint+0x2cc>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <USB_ActivateEndpoint+0x2b2>
 80068f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068f8:	3301      	adds	r3, #1
 80068fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29a      	uxth	r2, r3
 8006904:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006908:	b29b      	uxth	r3, r3
 800690a:	029b      	lsls	r3, r3, #10
 800690c:	b29b      	uxth	r3, r3
 800690e:	4313      	orrs	r3, r2
 8006910:	b29a      	uxth	r2, r3
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	801a      	strh	r2, [r3, #0]
 8006916:	e020      	b.n	800695a <USB_ActivateEndpoint+0x30e>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	095b      	lsrs	r3, r3, #5
 800691e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	2b00      	cmp	r3, #0
 800692c:	d104      	bne.n	8006938 <USB_ActivateEndpoint+0x2ec>
 800692e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006932:	3b01      	subs	r3, #1
 8006934:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29a      	uxth	r2, r3
 800693e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006942:	b29b      	uxth	r3, r3
 8006944:	029b      	lsls	r3, r3, #10
 8006946:	b29b      	uxth	r3, r3
 8006948:	4313      	orrs	r3, r2
 800694a:	b29b      	uxth	r3, r3
 800694c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006954:	b29a      	uxth	r2, r3
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006968:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800696a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01b      	beq.n	80069aa <USB_ActivateEndpoint+0x35e>
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006988:	843b      	strh	r3, [r7, #32]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	441a      	add	r2, r3
 8006994:	8c3b      	ldrh	r3, [r7, #32]
 8006996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800699a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800699e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d124      	bne.n	80069fc <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c8:	83bb      	strh	r3, [r7, #28]
 80069ca:	8bbb      	ldrh	r3, [r7, #28]
 80069cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069d0:	83bb      	strh	r3, [r7, #28]
 80069d2:	8bbb      	ldrh	r3, [r7, #28]
 80069d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069d8:	83bb      	strh	r3, [r7, #28]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	441a      	add	r2, r3
 80069e4:	8bbb      	ldrh	r3, [r7, #28]
 80069e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	8013      	strh	r3, [r2, #0]
 80069fa:	e306      	b.n	800700a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a12:	83fb      	strh	r3, [r7, #30]
 8006a14:	8bfb      	ldrh	r3, [r7, #30]
 8006a16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a1a:	83fb      	strh	r3, [r7, #30]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	441a      	add	r2, r3
 8006a26:	8bfb      	ldrh	r3, [r7, #30]
 8006a28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	8013      	strh	r3, [r2, #0]
 8006a3c:	e2e5      	b.n	800700a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	78db      	ldrb	r3, [r3, #3]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d11e      	bne.n	8006a84 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	441a      	add	r2, r3
 8006a6a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a76:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]
 8006a82:	e01d      	b.n	8006ac0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	441a      	add	r2, r3
 8006aa8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ad0:	4413      	add	r3, r2
 8006ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	00da      	lsls	r2, r3, #3
 8006ada:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	891b      	ldrh	r3, [r3, #8]
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	677b      	str	r3, [r7, #116]	@ 0x74
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b04:	4413      	add	r3, r2
 8006b06:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	00da      	lsls	r2, r3, #3
 8006b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b10:	4413      	add	r3, r2
 8006b12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b16:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	895b      	ldrh	r3, [r3, #10]
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b26:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	785b      	ldrb	r3, [r3, #1]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f040 81af 	bne.w	8006e90 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006b42:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d01d      	beq.n	8006b8a <USB_ActivateEndpoint+0x53e>
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b64:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	441a      	add	r2, r3
 8006b72:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006b9a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01d      	beq.n	8006be2 <USB_ActivateEndpoint+0x596>
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bbc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	785b      	ldrb	r3, [r3, #1]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d16b      	bne.n	8006cc2 <USB_ActivateEndpoint+0x676>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bfa:	4413      	add	r3, r2
 8006bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	00da      	lsls	r2, r3, #3
 8006c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c06:	4413      	add	r3, r2
 8006c08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c1c:	801a      	strh	r2, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <USB_ActivateEndpoint+0x5f0>
 8006c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c38:	801a      	strh	r2, [r3, #0]
 8006c3a:	e05d      	b.n	8006cf8 <USB_ActivateEndpoint+0x6ac>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c42:	d81c      	bhi.n	8006c7e <USB_ActivateEndpoint+0x632>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d004      	beq.n	8006c64 <USB_ActivateEndpoint+0x618>
 8006c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c5e:	3301      	adds	r3, #1
 8006c60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	029b      	lsls	r3, r3, #10
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	4313      	orrs	r3, r2
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c7a:	801a      	strh	r2, [r3, #0]
 8006c7c:	e03c      	b.n	8006cf8 <USB_ActivateEndpoint+0x6ac>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <USB_ActivateEndpoint+0x652>
 8006c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	029b      	lsls	r3, r3, #10
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cbe:	801a      	strh	r2, [r3, #0]
 8006cc0:	e01a      	b.n	8006cf8 <USB_ActivateEndpoint+0x6ac>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d116      	bne.n	8006cf8 <USB_ActivateEndpoint+0x6ac>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cda:	4413      	add	r3, r2
 8006cdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	00da      	lsls	r2, r3, #3
 8006ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cec:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d16b      	bne.n	8006ddc <USB_ActivateEndpoint+0x790>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d14:	4413      	add	r3, r2
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	00da      	lsls	r2, r3, #3
 8006d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d20:	4413      	add	r3, r2
 8006d22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <USB_ActivateEndpoint+0x70a>
 8006d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	e05b      	b.n	8006e0e <USB_ActivateEndpoint+0x7c2>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d5c:	d81c      	bhi.n	8006d98 <USB_ActivateEndpoint+0x74c>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	085b      	lsrs	r3, r3, #1
 8006d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <USB_ActivateEndpoint+0x732>
 8006d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d78:	3301      	adds	r3, #1
 8006d7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	029b      	lsls	r3, r3, #10
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d94:	801a      	strh	r2, [r3, #0]
 8006d96:	e03a      	b.n	8006e0e <USB_ActivateEndpoint+0x7c2>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <USB_ActivateEndpoint+0x76c>
 8006dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006db2:	3b01      	subs	r3, #1
 8006db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	029b      	lsls	r3, r3, #10
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	e018      	b.n	8006e0e <USB_ActivateEndpoint+0x7c2>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d114      	bne.n	8006e0e <USB_ActivateEndpoint+0x7c2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006df0:	4413      	add	r3, r2
 8006df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	00da      	lsls	r2, r3, #3
 8006dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e0c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e24:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e28:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e34:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	441a      	add	r2, r3
 8006e40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e6c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	441a      	add	r2, r3
 8006e78:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006e7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	8013      	strh	r3, [r2, #0]
 8006e8e:	e0bc      	b.n	800700a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8006ea0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01d      	beq.n	8006ee8 <USB_ActivateEndpoint+0x89c>
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	441a      	add	r2, r3
 8006ed0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006ed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006edc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006ef8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01d      	beq.n	8006f40 <USB_ActivateEndpoint+0x8f4>
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	441a      	add	r2, r3
 8006f28:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	78db      	ldrb	r3, [r3, #3]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d024      	beq.n	8006f92 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f5e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006f62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006f66:	f083 0320 	eor.w	r3, r3, #32
 8006f6a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006f7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]
 8006f90:	e01d      	b.n	8006fce <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fa8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	441a      	add	r2, r3
 8006fb6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	441a      	add	r2, r3
 8006ff2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006ff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007006:	b29b      	uxth	r3, r3
 8007008:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800700a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800700e:	4618      	mov	r0, r3
 8007010:	379c      	adds	r7, #156	@ 0x9c
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop

0800701c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b0ac      	sub	sp, #176	@ 0xb0
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	785b      	ldrb	r3, [r3, #1]
 800702a:	2b01      	cmp	r3, #1
 800702c:	f040 84ca 	bne.w	80079c4 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	429a      	cmp	r2, r3
 800703a:	d904      	bls.n	8007046 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007044:	e003      	b.n	800704e <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	7b1b      	ldrb	r3, [r3, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d122      	bne.n	800709c <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	6959      	ldr	r1, [r3, #20]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	88da      	ldrh	r2, [r3, #6]
 800705e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007062:	b29b      	uxth	r3, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fed2 	bl	8007e0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007074:	b29b      	uxth	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	4413      	add	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	00da      	lsls	r2, r3, #3
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	4413      	add	r3, r2
 8007088:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007092:	b29a      	uxth	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	801a      	strh	r2, [r3, #0]
 8007098:	f000 bc6f 	b.w	800797a <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	78db      	ldrb	r3, [r3, #3]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	f040 831e 	bne.w	80076e2 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	6a1a      	ldr	r2, [r3, #32]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	f240 82cf 	bls.w	8007652 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ca:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	441a      	add	r2, r3
 80070d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80070dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070e4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80070e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	6a1a      	ldr	r2, [r3, #32]
 80070f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 814f 	beq.w	80073b4 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	633b      	str	r3, [r7, #48]	@ 0x30
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d16b      	bne.n	80071fa <USB_EPStartXfer+0x1de>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800712c:	b29b      	uxth	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007132:	4413      	add	r3, r2
 8007134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	00da      	lsls	r2, r3, #3
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	4413      	add	r3, r2
 8007140:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	b29b      	uxth	r3, r3
 800714c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007150:	b29a      	uxth	r2, r3
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	801a      	strh	r2, [r3, #0]
 8007156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <USB_EPStartXfer+0x158>
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800716c:	b29a      	uxth	r2, r3
 800716e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007170:	801a      	strh	r2, [r3, #0]
 8007172:	e05b      	b.n	800722c <USB_EPStartXfer+0x210>
 8007174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007178:	2b3e      	cmp	r3, #62	@ 0x3e
 800717a:	d81c      	bhi.n	80071b6 <USB_EPStartXfer+0x19a>
 800717c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007180:	085b      	lsrs	r3, r3, #1
 8007182:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <USB_EPStartXfer+0x180>
 8007192:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007196:	3301      	adds	r3, #1
 8007198:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	029b      	lsls	r3, r3, #10
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	4313      	orrs	r3, r2
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	e03a      	b.n	800722c <USB_EPStartXfer+0x210>
 80071b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071c4:	f003 031f 	and.w	r3, r3, #31
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <USB_EPStartXfer+0x1ba>
 80071cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071d0:	3b01      	subs	r3, #1
 80071d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29a      	uxth	r2, r3
 80071dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	029b      	lsls	r3, r3, #10
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	4313      	orrs	r3, r2
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	801a      	strh	r2, [r3, #0]
 80071f8:	e018      	b.n	800722c <USB_EPStartXfer+0x210>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d114      	bne.n	800722c <USB_EPStartXfer+0x210>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007208:	b29b      	uxth	r3, r3
 800720a:	461a      	mov	r2, r3
 800720c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720e:	4413      	add	r3, r2
 8007210:	633b      	str	r3, [r7, #48]	@ 0x30
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	00da      	lsls	r2, r3, #3
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	4413      	add	r3, r2
 800721c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007226:	b29a      	uxth	r2, r3
 8007228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	895b      	ldrh	r3, [r3, #10]
 8007230:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	6959      	ldr	r1, [r3, #20]
 8007238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800723c:	b29b      	uxth	r3, r3
 800723e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fde3 	bl	8007e0e <USB_WritePMA>
            ep->xfer_buff += len;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	695a      	ldr	r2, [r3, #20]
 800724c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007250:	441a      	add	r2, r3
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	6a1a      	ldr	r2, [r3, #32]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	429a      	cmp	r2, r3
 8007260:	d907      	bls.n	8007272 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	6a1a      	ldr	r2, [r3, #32]
 8007266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	621a      	str	r2, [r3, #32]
 8007270:	e006      	b.n	8007280 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2200      	movs	r2, #0
 800727e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	785b      	ldrb	r3, [r3, #1]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d16b      	bne.n	8007360 <USB_EPStartXfer+0x344>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007292:	b29b      	uxth	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	4413      	add	r3, r2
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	00da      	lsls	r2, r3, #3
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	4413      	add	r3, r2
 80072a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	801a      	strh	r2, [r3, #0]
 80072bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <USB_EPStartXfer+0x2be>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	e05d      	b.n	8007396 <USB_EPStartXfer+0x37a>
 80072da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072de:	2b3e      	cmp	r3, #62	@ 0x3e
 80072e0:	d81c      	bhi.n	800731c <USB_EPStartXfer+0x300>
 80072e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d004      	beq.n	8007302 <USB_EPStartXfer+0x2e6>
 80072f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072fc:	3301      	adds	r3, #1
 80072fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29a      	uxth	r2, r3
 8007308:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800730c:	b29b      	uxth	r3, r3
 800730e:	029b      	lsls	r3, r3, #10
 8007310:	b29b      	uxth	r3, r3
 8007312:	4313      	orrs	r3, r2
 8007314:	b29a      	uxth	r2, r3
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	801a      	strh	r2, [r3, #0]
 800731a:	e03c      	b.n	8007396 <USB_EPStartXfer+0x37a>
 800731c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	2b00      	cmp	r3, #0
 8007330:	d104      	bne.n	800733c <USB_EPStartXfer+0x320>
 8007332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007336:	3b01      	subs	r3, #1
 8007338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	b29a      	uxth	r2, r3
 8007342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007346:	b29b      	uxth	r3, r3
 8007348:	029b      	lsls	r3, r3, #10
 800734a:	b29b      	uxth	r3, r3
 800734c:	4313      	orrs	r3, r2
 800734e:	b29b      	uxth	r3, r3
 8007350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007358:	b29a      	uxth	r2, r3
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	e01a      	b.n	8007396 <USB_EPStartXfer+0x37a>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d116      	bne.n	8007396 <USB_EPStartXfer+0x37a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	623b      	str	r3, [r7, #32]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007372:	b29b      	uxth	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	4413      	add	r3, r2
 800737a:	623b      	str	r3, [r7, #32]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	00da      	lsls	r2, r3, #3
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	4413      	add	r3, r2
 8007386:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007390:	b29a      	uxth	r2, r3
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	891b      	ldrh	r3, [r3, #8]
 800739a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6959      	ldr	r1, [r3, #20]
 80073a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fd2e 	bl	8007e0e <USB_WritePMA>
 80073b2:	e2e2      	b.n	800797a <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d16b      	bne.n	8007494 <USB_EPStartXfer+0x478>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073cc:	4413      	add	r3, r2
 80073ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	00da      	lsls	r2, r3, #3
 80073d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073d8:	4413      	add	r3, r2
 80073da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073de:	647b      	str	r3, [r7, #68]	@ 0x44
 80073e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <USB_EPStartXfer+0x3f2>
 80073f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007406:	b29a      	uxth	r2, r3
 8007408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	e05d      	b.n	80074ca <USB_EPStartXfer+0x4ae>
 800740e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007412:	2b3e      	cmp	r3, #62	@ 0x3e
 8007414:	d81c      	bhi.n	8007450 <USB_EPStartXfer+0x434>
 8007416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d004      	beq.n	8007436 <USB_EPStartXfer+0x41a>
 800742c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007430:	3301      	adds	r3, #1
 8007432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29a      	uxth	r2, r3
 800743c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007440:	b29b      	uxth	r3, r3
 8007442:	029b      	lsls	r3, r3, #10
 8007444:	b29b      	uxth	r3, r3
 8007446:	4313      	orrs	r3, r2
 8007448:	b29a      	uxth	r2, r3
 800744a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	e03c      	b.n	80074ca <USB_EPStartXfer+0x4ae>
 8007450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800745a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800745e:	f003 031f 	and.w	r3, r3, #31
 8007462:	2b00      	cmp	r3, #0
 8007464:	d104      	bne.n	8007470 <USB_EPStartXfer+0x454>
 8007466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800746a:	3b01      	subs	r3, #1
 800746c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	b29a      	uxth	r2, r3
 8007476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800747a:	b29b      	uxth	r3, r3
 800747c:	029b      	lsls	r3, r3, #10
 800747e:	b29b      	uxth	r3, r3
 8007480:	4313      	orrs	r3, r2
 8007482:	b29b      	uxth	r3, r3
 8007484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800748c:	b29a      	uxth	r2, r3
 800748e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007490:	801a      	strh	r2, [r3, #0]
 8007492:	e01a      	b.n	80074ca <USB_EPStartXfer+0x4ae>
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	785b      	ldrb	r3, [r3, #1]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d116      	bne.n	80074ca <USB_EPStartXfer+0x4ae>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	653b      	str	r3, [r7, #80]	@ 0x50
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ac:	4413      	add	r3, r2
 80074ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	00da      	lsls	r2, r3, #3
 80074b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074b8:	4413      	add	r3, r2
 80074ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	891b      	ldrh	r3, [r3, #8]
 80074ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6959      	ldr	r1, [r3, #20]
 80074d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074da:	b29b      	uxth	r3, r3
 80074dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fc94 	bl	8007e0e <USB_WritePMA>
            ep->xfer_buff += len;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	695a      	ldr	r2, [r3, #20]
 80074ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074ee:	441a      	add	r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	6a1a      	ldr	r2, [r3, #32]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d907      	bls.n	8007510 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007508:	1ad2      	subs	r2, r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	621a      	str	r2, [r3, #32]
 800750e:	e006      	b.n	800751e <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2200      	movs	r2, #0
 800751c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	643b      	str	r3, [r7, #64]	@ 0x40
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d16b      	bne.n	8007602 <USB_EPStartXfer+0x5e6>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007534:	b29b      	uxth	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753a:	4413      	add	r3, r2
 800753c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	00da      	lsls	r2, r3, #3
 8007544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007546:	4413      	add	r3, r2
 8007548:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800754c:	637b      	str	r3, [r7, #52]	@ 0x34
 800754e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007558:	b29a      	uxth	r2, r3
 800755a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755c:	801a      	strh	r2, [r3, #0]
 800755e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <USB_EPStartXfer+0x560>
 8007566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007574:	b29a      	uxth	r2, r3
 8007576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007578:	801a      	strh	r2, [r3, #0]
 800757a:	e05b      	b.n	8007634 <USB_EPStartXfer+0x618>
 800757c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007580:	2b3e      	cmp	r3, #62	@ 0x3e
 8007582:	d81c      	bhi.n	80075be <USB_EPStartXfer+0x5a2>
 8007584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007588:	085b      	lsrs	r3, r3, #1
 800758a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800758e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d004      	beq.n	80075a4 <USB_EPStartXfer+0x588>
 800759a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800759e:	3301      	adds	r3, #1
 80075a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	029b      	lsls	r3, r3, #10
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	4313      	orrs	r3, r2
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	e03a      	b.n	8007634 <USB_EPStartXfer+0x618>
 80075be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075cc:	f003 031f 	and.w	r3, r3, #31
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d104      	bne.n	80075de <USB_EPStartXfer+0x5c2>
 80075d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075d8:	3b01      	subs	r3, #1
 80075da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	029b      	lsls	r3, r3, #10
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	4313      	orrs	r3, r2
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fe:	801a      	strh	r2, [r3, #0]
 8007600:	e018      	b.n	8007634 <USB_EPStartXfer+0x618>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d114      	bne.n	8007634 <USB_EPStartXfer+0x618>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007610:	b29b      	uxth	r3, r3
 8007612:	461a      	mov	r2, r3
 8007614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007616:	4413      	add	r3, r2
 8007618:	643b      	str	r3, [r7, #64]	@ 0x40
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	00da      	lsls	r2, r3, #3
 8007620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007622:	4413      	add	r3, r2
 8007624:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007628:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800762a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800762e:	b29a      	uxth	r2, r3
 8007630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007632:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	895b      	ldrh	r3, [r3, #10]
 8007638:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	6959      	ldr	r1, [r3, #20]
 8007640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007644:	b29b      	uxth	r3, r3
 8007646:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fbdf 	bl	8007e0e <USB_WritePMA>
 8007650:	e193      	b.n	800797a <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800766c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007670:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	441a      	add	r2, r3
 800767e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007682:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007686:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800768a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800768e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007692:	b29b      	uxth	r3, r3
 8007694:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076a6:	4413      	add	r3, r2
 80076a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	00da      	lsls	r2, r3, #3
 80076b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076b2:	4413      	add	r3, r2
 80076b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076be:	b29a      	uxth	r2, r3
 80076c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	891b      	ldrh	r3, [r3, #8]
 80076c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	6959      	ldr	r1, [r3, #20]
 80076d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fb97 	bl	8007e0e <USB_WritePMA>
 80076e0:	e14b      	b.n	800797a <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	6a1a      	ldr	r2, [r3, #32]
 80076e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ea:	1ad2      	subs	r2, r2, r3
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 809a 	beq.w	800783c <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	673b      	str	r3, [r7, #112]	@ 0x70
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d16b      	bne.n	80077ec <USB_EPStartXfer+0x7d0>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800771e:	b29b      	uxth	r3, r3
 8007720:	461a      	mov	r2, r3
 8007722:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007724:	4413      	add	r3, r2
 8007726:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	00da      	lsls	r2, r3, #3
 800772e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007730:	4413      	add	r3, r2
 8007732:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007736:	667b      	str	r3, [r7, #100]	@ 0x64
 8007738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007742:	b29a      	uxth	r2, r3
 8007744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <USB_EPStartXfer+0x74a>
 8007750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800775a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775e:	b29a      	uxth	r2, r3
 8007760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007762:	801a      	strh	r2, [r3, #0]
 8007764:	e05b      	b.n	800781e <USB_EPStartXfer+0x802>
 8007766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800776a:	2b3e      	cmp	r3, #62	@ 0x3e
 800776c:	d81c      	bhi.n	80077a8 <USB_EPStartXfer+0x78c>
 800776e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d004      	beq.n	800778e <USB_EPStartXfer+0x772>
 8007784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007788:	3301      	adds	r3, #1
 800778a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800778e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29a      	uxth	r2, r3
 8007794:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007798:	b29b      	uxth	r3, r3
 800779a:	029b      	lsls	r3, r3, #10
 800779c:	b29b      	uxth	r3, r3
 800779e:	4313      	orrs	r3, r2
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077a4:	801a      	strh	r2, [r3, #0]
 80077a6:	e03a      	b.n	800781e <USB_EPStartXfer+0x802>
 80077a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d104      	bne.n	80077c8 <USB_EPStartXfer+0x7ac>
 80077be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077c2:	3b01      	subs	r3, #1
 80077c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	029b      	lsls	r3, r3, #10
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	4313      	orrs	r3, r2
 80077da:	b29b      	uxth	r3, r3
 80077dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e018      	b.n	800781e <USB_EPStartXfer+0x802>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	785b      	ldrb	r3, [r3, #1]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d114      	bne.n	800781e <USB_EPStartXfer+0x802>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007800:	4413      	add	r3, r2
 8007802:	673b      	str	r3, [r7, #112]	@ 0x70
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	00da      	lsls	r2, r3, #3
 800780a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800780c:	4413      	add	r3, r2
 800780e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007812:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007818:	b29a      	uxth	r2, r3
 800781a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800781c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	895b      	ldrh	r3, [r3, #10]
 8007822:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	6959      	ldr	r1, [r3, #20]
 800782a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800782e:	b29b      	uxth	r3, r3
 8007830:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 faea 	bl	8007e0e <USB_WritePMA>
 800783a:	e09e      	b.n	800797a <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	785b      	ldrb	r3, [r3, #1]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d16b      	bne.n	800791c <USB_EPStartXfer+0x900>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800784e:	b29b      	uxth	r3, r3
 8007850:	461a      	mov	r2, r3
 8007852:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007854:	4413      	add	r3, r2
 8007856:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	00da      	lsls	r2, r3, #3
 800785e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007860:	4413      	add	r3, r2
 8007862:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007866:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
 800786e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007872:	b29a      	uxth	r2, r3
 8007874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007876:	801a      	strh	r2, [r3, #0]
 8007878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10a      	bne.n	8007896 <USB_EPStartXfer+0x87a>
 8007880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788e:	b29a      	uxth	r2, r3
 8007890:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	e063      	b.n	800795e <USB_EPStartXfer+0x942>
 8007896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800789a:	2b3e      	cmp	r3, #62	@ 0x3e
 800789c:	d81c      	bhi.n	80078d8 <USB_EPStartXfer+0x8bc>
 800789e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <USB_EPStartXfer+0x8a2>
 80078b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078b8:	3301      	adds	r3, #1
 80078ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	029b      	lsls	r3, r3, #10
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	4313      	orrs	r3, r2
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	e042      	b.n	800795e <USB_EPStartXfer+0x942>
 80078d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078dc:	095b      	lsrs	r3, r3, #5
 80078de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d104      	bne.n	80078f8 <USB_EPStartXfer+0x8dc>
 80078ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078f2:	3b01      	subs	r3, #1
 80078f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007902:	b29b      	uxth	r3, r3
 8007904:	029b      	lsls	r3, r3, #10
 8007906:	b29b      	uxth	r3, r3
 8007908:	4313      	orrs	r3, r2
 800790a:	b29b      	uxth	r3, r3
 800790c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007914:	b29a      	uxth	r2, r3
 8007916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007918:	801a      	strh	r2, [r3, #0]
 800791a:	e020      	b.n	800795e <USB_EPStartXfer+0x942>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d11c      	bne.n	800795e <USB_EPStartXfer+0x942>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007930:	b29b      	uxth	r3, r3
 8007932:	461a      	mov	r2, r3
 8007934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007938:	4413      	add	r3, r2
 800793a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	00da      	lsls	r2, r3, #3
 8007944:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007948:	4413      	add	r3, r2
 800794a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800794e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007956:	b29a      	uxth	r2, r3
 8007958:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800795c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	891b      	ldrh	r3, [r3, #8]
 8007962:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	6959      	ldr	r1, [r3, #20]
 800796a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800796e:	b29b      	uxth	r3, r3
 8007970:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fa4a 	bl	8007e0e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	b29b      	uxth	r3, r3
 8007988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800798c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007990:	817b      	strh	r3, [r7, #10]
 8007992:	897b      	ldrh	r3, [r7, #10]
 8007994:	f083 0310 	eor.w	r3, r3, #16
 8007998:	817b      	strh	r3, [r7, #10]
 800799a:	897b      	ldrh	r3, [r7, #10]
 800799c:	f083 0320 	eor.w	r3, r3, #32
 80079a0:	817b      	strh	r3, [r7, #10]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	441a      	add	r2, r3
 80079ac:	897b      	ldrh	r3, [r7, #10]
 80079ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079be:	b29b      	uxth	r3, r3
 80079c0:	8013      	strh	r3, [r2, #0]
 80079c2:	e0d5      	b.n	8007b70 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	7b1b      	ldrb	r3, [r3, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d156      	bne.n	8007a7a <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d122      	bne.n	8007a1a <USB_EPStartXfer+0x9fe>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	78db      	ldrb	r3, [r3, #3]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d11e      	bne.n	8007a1a <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	441a      	add	r2, r3
 8007a00:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a0c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	8013      	strh	r3, [r2, #0]
 8007a18:	e01d      	b.n	8007a56 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a30:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	441a      	add	r2, r3
 8007a3e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	699a      	ldr	r2, [r3, #24]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d907      	bls.n	8007a72 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	1ad2      	subs	r2, r2, r3
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	619a      	str	r2, [r3, #24]
 8007a70:	e054      	b.n	8007b1c <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2200      	movs	r2, #0
 8007a76:	619a      	str	r2, [r3, #24]
 8007a78:	e050      	b.n	8007b1c <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	78db      	ldrb	r3, [r3, #3]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d142      	bne.n	8007b08 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d048      	beq.n	8007b1c <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a9a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <USB_EPStartXfer+0xa96>
 8007aa6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10b      	bne.n	8007aca <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ab2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d12e      	bne.n	8007b1c <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007abe:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d128      	bne.n	8007b1c <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae0:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	441a      	add	r2, r3
 8007aee:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007af2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007af6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007afe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	8013      	strh	r3, [r2, #0]
 8007b06:	e009      	b.n	8007b1c <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	78db      	ldrb	r3, [r3, #3]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d103      	bne.n	8007b18 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2200      	movs	r2, #0
 8007b14:	619a      	str	r2, [r3, #24]
 8007b16:	e001      	b.n	8007b1c <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e02a      	b.n	8007b72 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b32:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b3a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b3e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b46:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b4a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	441a      	add	r2, r3
 8007b58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	37b0      	adds	r7, #176	@ 0xb0
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b085      	sub	sp, #20
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	785b      	ldrb	r3, [r3, #1]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d020      	beq.n	8007bce <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ba2:	81bb      	strh	r3, [r7, #12]
 8007ba4:	89bb      	ldrh	r3, [r7, #12]
 8007ba6:	f083 0310 	eor.w	r3, r3, #16
 8007baa:	81bb      	strh	r3, [r7, #12]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	441a      	add	r2, r3
 8007bb6:	89bb      	ldrh	r3, [r7, #12]
 8007bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	8013      	strh	r3, [r2, #0]
 8007bcc:	e01f      	b.n	8007c0e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be4:	81fb      	strh	r3, [r7, #14]
 8007be6:	89fb      	ldrh	r3, [r7, #14]
 8007be8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007bec:	81fb      	strh	r3, [r7, #14]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	441a      	add	r2, r3
 8007bf8:	89fb      	ldrh	r3, [r7, #14]
 8007bfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	785b      	ldrb	r3, [r3, #1]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d04c      	beq.n	8007cc8 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	823b      	strh	r3, [r7, #16]
 8007c3c:	8a3b      	ldrh	r3, [r7, #16]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d01b      	beq.n	8007c7e <USB_EPClearStall+0x62>
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5c:	81fb      	strh	r3, [r7, #14]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	441a      	add	r2, r3
 8007c68:	89fb      	ldrh	r3, [r7, #14]
 8007c6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	78db      	ldrb	r3, [r3, #3]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d06c      	beq.n	8007d60 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c9c:	81bb      	strh	r3, [r7, #12]
 8007c9e:	89bb      	ldrh	r3, [r7, #12]
 8007ca0:	f083 0320 	eor.w	r3, r3, #32
 8007ca4:	81bb      	strh	r3, [r7, #12]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	441a      	add	r2, r3
 8007cb0:	89bb      	ldrh	r3, [r7, #12]
 8007cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	8013      	strh	r3, [r2, #0]
 8007cc6:	e04b      	b.n	8007d60 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	82fb      	strh	r3, [r7, #22]
 8007cd6:	8afb      	ldrh	r3, [r7, #22]
 8007cd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01b      	beq.n	8007d18 <USB_EPClearStall+0xfc>
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cf6:	82bb      	strh	r3, [r7, #20]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	441a      	add	r2, r3
 8007d02:	8abb      	ldrh	r3, [r7, #20]
 8007d04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d2e:	827b      	strh	r3, [r7, #18]
 8007d30:	8a7b      	ldrh	r3, [r7, #18]
 8007d32:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d36:	827b      	strh	r3, [r7, #18]
 8007d38:	8a7b      	ldrh	r3, [r7, #18]
 8007d3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d3e:	827b      	strh	r3, [r7, #18]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	441a      	add	r2, r3
 8007d4a:	8a7b      	ldrh	r3, [r7, #18]
 8007d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d103      	bne.n	8007d88 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2280      	movs	r2, #128	@ 0x80
 8007d84:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e00:	68fb      	ldr	r3, [r7, #12]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b08b      	sub	sp, #44	@ 0x2c
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	4611      	mov	r1, r2
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	80fb      	strh	r3, [r7, #6]
 8007e20:	4613      	mov	r3, r2
 8007e22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e24:	88bb      	ldrh	r3, [r7, #4]
 8007e26:	3301      	adds	r3, #1
 8007e28:	085b      	lsrs	r3, r3, #1
 8007e2a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e34:	88fa      	ldrh	r2, [r7, #6]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e3e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e44:	e01c      	b.n	8007e80 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	b21b      	sxth	r3, r3
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	b21a      	sxth	r2, r3
 8007e58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	b21b      	sxth	r3, r3
 8007e60:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	8a7a      	ldrh	r2, [r7, #18]
 8007e66:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	3302      	adds	r3, #2
 8007e6c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	3301      	adds	r3, #1
 8007e72:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	3301      	adds	r3, #1
 8007e78:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1df      	bne.n	8007e46 <USB_WritePMA+0x38>
  }
}
 8007e86:	bf00      	nop
 8007e88:	bf00      	nop
 8007e8a:	372c      	adds	r7, #44	@ 0x2c
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b08b      	sub	sp, #44	@ 0x2c
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	80fb      	strh	r3, [r7, #6]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007eaa:	88bb      	ldrh	r3, [r7, #4]
 8007eac:	085b      	lsrs	r3, r3, #1
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007eba:	88fa      	ldrh	r2, [r7, #6]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ec4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eca:	e018      	b.n	8007efe <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	3302      	adds	r3, #2
 8007ed8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	0a1b      	lsrs	r3, r3, #8
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	3b01      	subs	r3, #1
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e3      	bne.n	8007ecc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007f04:	88bb      	ldrh	r3, [r7, #4]
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d007      	beq.n	8007f20 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	701a      	strb	r2, [r3, #0]
  }
}
 8007f20:	bf00      	nop
 8007f22:	372c      	adds	r7, #44	@ 0x2c
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <__NVIC_SystemReset>:
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007f30:	f3bf 8f4f 	dsb	sy
}
 8007f34:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007f36:	4b06      	ldr	r3, [pc, #24]	@ (8007f50 <__NVIC_SystemReset+0x24>)
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007f3e:	4904      	ldr	r1, [pc, #16]	@ (8007f50 <__NVIC_SystemReset+0x24>)
 8007f40:	4b04      	ldr	r3, [pc, #16]	@ (8007f54 <__NVIC_SystemReset+0x28>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007f46:	f3bf 8f4f 	dsb	sy
}
 8007f4a:	bf00      	nop
    __NOP();
 8007f4c:	bf00      	nop
 8007f4e:	e7fd      	b.n	8007f4c <__NVIC_SystemReset+0x20>
 8007f50:	e000ed00 	.word	0xe000ed00
 8007f54:	05fa0004 	.word	0x05fa0004

08007f58 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8007f64:	f240 401c 	movw	r0, #1052	@ 0x41c
 8007f68:	f002 fb92 	bl	800a690 <USBD_static_malloc>
 8007f6c:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d105      	bne.n	8007f80 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e03f      	b.n	8008000 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007f96:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	4798      	blx	r3
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e000      	b.n	8008000 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800801e:	2302      	movs	r3, #2
 8008020:	e027      	b.n	8008072 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008028:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2202      	movs	r2, #2
 800803e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2202      	movs	r2, #2
 800804e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008062:	4618      	mov	r0, r3
 8008064:	f002 fb22 	bl	800a6ac <USBD_static_free>
  pdev->pClassData = NULL;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800808c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e0d5      	b.n	8008254 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d03e      	beq.n	8008132 <USBD_DFU_Setup+0xb6>
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	f040 80c5 	bne.w	8008244 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	785b      	ldrb	r3, [r3, #1]
 80080be:	2b06      	cmp	r3, #6
 80080c0:	d82f      	bhi.n	8008122 <USBD_DFU_Setup+0xa6>
 80080c2:	a201      	add	r2, pc, #4	@ (adr r2, 80080c8 <USBD_DFU_Setup+0x4c>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	08008119 	.word	0x08008119
 80080cc:	080080e5 	.word	0x080080e5
 80080d0:	080080ef 	.word	0x080080ef
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	08008101 	.word	0x08008101
 80080dc:	08008109 	.word	0x08008109
 80080e0:	08008111 	.word	0x08008111
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa6c 	bl	80085c4 <DFU_Download>
          break;
 80080ec:	e020      	b.n	8008130 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fad3 	bl	800869c <DFU_Upload>
          break;
 80080f6:	e01b      	b.n	8008130 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fba9 	bl	8008850 <DFU_GetStatus>
          break;
 80080fe:	e017      	b.n	8008130 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fc5b 	bl	80089bc <DFU_ClearStatus>
          break;
 8008106:	e013      	b.n	8008130 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fcab 	bl	8008a64 <DFU_GetState>
          break;
 800810e:	e00f      	b.n	8008130 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fcbf 	bl	8008a94 <DFU_Abort>
          break;
 8008116:	e00b      	b.n	8008130 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f9ee 	bl	80084fc <DFU_Detach>
          break;
 8008120:	e006      	b.n	8008130 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 fdb1 	bl	8009c8c <USBD_CtlError>
          ret = USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	77fb      	strb	r3, [r7, #31]
          break;
 800812e:	bf00      	nop
      }
      break;
 8008130:	e08f      	b.n	8008252 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	2b0b      	cmp	r3, #11
 8008138:	d87b      	bhi.n	8008232 <USBD_DFU_Setup+0x1b6>
 800813a:	a201      	add	r2, pc, #4	@ (adr r2, 8008140 <USBD_DFU_Setup+0xc4>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008171 	.word	0x08008171
 8008144:	08008241 	.word	0x08008241
 8008148:	08008233 	.word	0x08008233
 800814c:	08008233 	.word	0x08008233
 8008150:	08008233 	.word	0x08008233
 8008154:	08008233 	.word	0x08008233
 8008158:	0800819b 	.word	0x0800819b
 800815c:	08008233 	.word	0x08008233
 8008160:	08008233 	.word	0x08008233
 8008164:	08008233 	.word	0x08008233
 8008168:	080081c5 	.word	0x080081c5
 800816c:	080081f1 	.word	0x080081f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b03      	cmp	r3, #3
 800817a:	d107      	bne.n	800818c <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800817c:	f107 030e 	add.w	r3, r7, #14
 8008180:	2202      	movs	r2, #2
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 fdf2 	bl	8009d6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800818a:	e05a      	b.n	8008242 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 fd7c 	bl	8009c8c <USBD_CtlError>
            ret = USBD_FAIL;
 8008194:	2303      	movs	r3, #3
 8008196:	77fb      	strb	r3, [r7, #31]
          break;
 8008198:	e053      	b.n	8008242 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	885b      	ldrh	r3, [r3, #2]
 800819e:	0a1b      	lsrs	r3, r3, #8
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b21      	cmp	r3, #33	@ 0x21
 80081a4:	d107      	bne.n	80081b6 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 80081a6:	4b2d      	ldr	r3, [pc, #180]	@ (800825c <USBD_DFU_Setup+0x1e0>)
 80081a8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	88db      	ldrh	r3, [r3, #6]
 80081ae:	2b09      	cmp	r3, #9
 80081b0:	bf28      	it	cs
 80081b2:	2309      	movcs	r3, #9
 80081b4:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80081b6:	8afb      	ldrh	r3, [r7, #22]
 80081b8:	461a      	mov	r2, r3
 80081ba:	69b9      	ldr	r1, [r7, #24]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 fdd6 	bl	8009d6e <USBD_CtlSendData>
          break;
 80081c2:	e03e      	b.n	8008242 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d108      	bne.n	80081e2 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081d6:	2201      	movs	r2, #1
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 fdc7 	bl	8009d6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081e0:	e02f      	b.n	8008242 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 fd51 	bl	8009c8c <USBD_CtlError>
            ret = USBD_FAIL;
 80081ea:	2303      	movs	r3, #3
 80081ec:	77fb      	strb	r3, [r7, #31]
          break;
 80081ee:	e028      	b.n	8008242 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	885b      	ldrh	r3, [r3, #2]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d114      	bne.n	8008224 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b03      	cmp	r3, #3
 8008204:	d107      	bne.n	8008216 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	885b      	ldrh	r3, [r3, #2]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	461a      	mov	r2, r3
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008214:	e015      	b.n	8008242 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 fd37 	bl	8009c8c <USBD_CtlError>
              ret = USBD_FAIL;
 800821e:	2303      	movs	r3, #3
 8008220:	77fb      	strb	r3, [r7, #31]
          break;
 8008222:	e00e      	b.n	8008242 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 fd30 	bl	8009c8c <USBD_CtlError>
            ret = USBD_FAIL;
 800822c:	2303      	movs	r3, #3
 800822e:	77fb      	strb	r3, [r7, #31]
          break;
 8008230:	e007      	b.n	8008242 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 fd29 	bl	8009c8c <USBD_CtlError>
          ret = USBD_FAIL;
 800823a:	2303      	movs	r3, #3
 800823c:	77fb      	strb	r3, [r7, #31]
          break;
 800823e:	e000      	b.n	8008242 <USBD_DFU_Setup+0x1c6>
          break;
 8008240:	bf00      	nop
      }
      break;
 8008242:	e006      	b.n	8008252 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 fd20 	bl	8009c8c <USBD_CtlError>
      ret = USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	77fb      	strb	r3, [r7, #31]
      break;
 8008250:	bf00      	nop
  }

  return (uint8_t)ret;
 8008252:	7ffb      	ldrb	r3, [r7, #31]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	2000005a 	.word	0x2000005a

08008260 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	221b      	movs	r2, #27
 800826c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800826e:	4b03      	ldr	r3, [pc, #12]	@ (800827c <USBD_DFU_GetCfgDesc+0x1c>)
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000048 	.word	0x20000048

08008280 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b088      	sub	sp, #32
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082a4:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082ac:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e0ce      	b.n	8008456 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80082be:	2b04      	cmp	r3, #4
 80082c0:	f040 80bd 	bne.w	800843e <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d17c      	bne.n	80083c8 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	f000 8093 	beq.w	8008400 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80082e0:	2b05      	cmp	r3, #5
 80082e2:	d15e      	bne.n	80083a2 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b21      	cmp	r3, #33	@ 0x21
 80082ea:	d124      	bne.n	8008336 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	785b      	ldrb	r3, [r3, #1]
 80082f0:	461a      	mov	r2, r3
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	789b      	ldrb	r3, [r3, #2]
 8008302:	021b      	lsls	r3, r3, #8
 8008304:	441a      	add	r2, r3
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	78db      	ldrb	r3, [r3, #3]
 8008316:	041b      	lsls	r3, r3, #16
 8008318:	441a      	add	r2, r3
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	791b      	ldrb	r3, [r3, #4]
 800832a:	061b      	lsls	r3, r3, #24
 800832c:	441a      	add	r2, r3
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8008334:	e064      	b.n	8008400 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b41      	cmp	r3, #65	@ 0x41
 800833c:	d12f      	bne.n	800839e <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	785b      	ldrb	r3, [r3, #1]
 8008342:	461a      	mov	r2, r3
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	789b      	ldrb	r3, [r3, #2]
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	441a      	add	r2, r3
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	78db      	ldrb	r3, [r3, #3]
 8008368:	041b      	lsls	r3, r3, #16
 800836a:	441a      	add	r2, r3
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	791b      	ldrb	r3, [r3, #4]
 800837c:	061b      	lsls	r3, r3, #24
 800837e:	441a      	add	r2, r3
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	69fa      	ldr	r2, [r7, #28]
 800838c:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d032      	beq.n	8008400 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 800839a:	2303      	movs	r3, #3
 800839c:	e05b      	b.n	8008456 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800839e:	2303      	movs	r3, #3
 80083a0:	e059      	b.n	8008456 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 80083b6:	2301      	movs	r3, #1
 80083b8:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 80083ba:	f107 030c 	add.w	r3, r7, #12
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 fc63 	bl	8009c8c <USBD_CtlError>
 80083c6:	e01b      	b.n	8008400 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d916      	bls.n	8008400 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80083d8:	3b02      	subs	r3, #2
 80083da:	029a      	lsls	r2, r3, #10
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80083e2:	4413      	add	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	69f8      	ldr	r0, [r7, #28]
 80083ec:	6979      	ldr	r1, [r7, #20]
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80083f4:	4798      	blx	r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e02a      	b.n	8008456 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2200      	movs	r2, #0
 8008404:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	2203      	movs	r2, #3
 8008414:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800843c:	e00a      	b.n	8008454 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008444:	2b07      	cmp	r3, #7
 8008446:	d103      	bne.n	8008450 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fb75 	bl	8008b38 <DFU_Leave>
 800844e:	e001      	b.n	8008454 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8008450:	2303      	movs	r3, #3
 8008452:	e000      	b.n	8008456 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3720      	adds	r7, #32
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	220a      	movs	r2, #10
 8008480:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8008482:	4b03      	ldr	r3, [pc, #12]	@ (8008490 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	20000064 	.word	0x20000064

08008494 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	460b      	mov	r3, r1
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084a8:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	2b06      	cmp	r3, #6
 80084ae:	d808      	bhi.n	80084c2 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	4905      	ldr	r1, [pc, #20]	@ (80084cc <USBD_DFU_GetUsrStringDesc+0x38>)
 80084b8:	4618      	mov	r0, r3
 80084ba:	f001 fbf8 	bl	8009cae <USBD_GetString>
    return USBD_StrDesc;
 80084be:	4b03      	ldr	r3, [pc, #12]	@ (80084cc <USBD_DFU_GetUsrStringDesc+0x38>)
 80084c0:	e000      	b.n	80084c4 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80084c2:	2300      	movs	r3, #0
  }
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	200001d4 	.word	0x200001d4

080084d0 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e004      	b.n	80084ee <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
	...

080084fc <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800850c:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d051      	beq.n	80085b8 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800851a:	2b02      	cmp	r3, #2
 800851c:	d013      	beq.n	8008546 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008524:	2b03      	cmp	r3, #3
 8008526:	d00e      	beq.n	8008546 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800852e:	2b05      	cmp	r3, #5
 8008530:	d009      	beq.n	8008546 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008538:	2b06      	cmp	r3, #6
 800853a:	d004      	beq.n	8008546 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008542:	2b09      	cmp	r3, #9
 8008544:	d125      	bne.n	8008592 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2202      	movs	r2, #2
 800854a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8008592:	4b0b      	ldr	r3, [pc, #44]	@ (80085c0 <DFU_Detach+0xc4>)
 8008594:	7d5b      	ldrb	r3, [r3, #21]
 8008596:	f003 0310 	and.w	r3, r3, #16
 800859a:	2b00      	cmp	r3, #0
 800859c:	d006      	beq.n	80085ac <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fb7b 	bl	8008c9a <USBD_Stop>
    (void)USBD_Start(pdev);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fb6c 	bl	8008c82 <USBD_Start>
 80085aa:	e006      	b.n	80085ba <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	885b      	ldrh	r3, [r3, #2]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7f8 fa37 	bl	8000a24 <HAL_Delay>
 80085b6:	e000      	b.n	80085ba <DFU_Detach+0xbe>
    return;
 80085b8:	bf00      	nop
  }
}
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20000048 	.word	0x20000048

080085c4 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085d4:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d05b      	beq.n	8008694 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	88db      	ldrh	r3, [r3, #6]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d02d      	beq.n	8008640 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d004      	beq.n	80085f8 <DFU_Download+0x34>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80085f4:	2b05      	cmp	r3, #5
 80085f6:	d11e      	bne.n	8008636 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	461a      	mov	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	88db      	ldrh	r3, [r3, #6]
 8008608:	461a      	mov	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2203      	movs	r2, #3
 8008614:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008624:	68f9      	ldr	r1, [r7, #12]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800862c:	461a      	mov	r2, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 fbc9 	bl	8009dc6 <USBD_CtlPrepareRx>
 8008634:	e02f      	b.n	8008696 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fb27 	bl	8009c8c <USBD_CtlError>
 800863e:	e02a      	b.n	8008696 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008646:	2b05      	cmp	r3, #5
 8008648:	d004      	beq.n	8008654 <DFU_Download+0x90>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008650:	2b02      	cmp	r3, #2
 8008652:	d11a      	bne.n	800868a <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2206      	movs	r2, #6
 8008660:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008688:	e005      	b.n	8008696 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 fafd 	bl	8009c8c <USBD_CtlError>
 8008692:	e000      	b.n	8008696 <DFU_Download+0xd2>
    return;
 8008694:	bf00      	nop
    }
  }
}
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086ac:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086b4:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 80c4 	beq.w	8008846 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	88db      	ldrh	r3, [r3, #6]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 80a8 	beq.w	8008818 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d005      	beq.n	80086de <DFU_Upload+0x42>
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80086d8:	2b09      	cmp	r3, #9
 80086da:	f040 8090 	bne.w	80087fe <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	885b      	ldrh	r3, [r3, #2]
 80086e2:	461a      	mov	r2, r3
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	88db      	ldrh	r3, [r3, #6]
 80086ee:	461a      	mov	r2, r3
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d12c      	bne.n	800875a <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008706:	2b03      	cmp	r3, #3
 8008708:	d901      	bls.n	800870e <DFU_Upload+0x72>
 800870a:	2202      	movs	r2, #2
 800870c:	e000      	b.n	8008710 <DFU_Upload+0x74>
 800870e:	2209      	movs	r2, #9
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2200      	movs	r2, #0
 800873e:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2221      	movs	r2, #33	@ 0x21
 8008744:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2241      	movs	r2, #65	@ 0x41
 800874a:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2203      	movs	r2, #3
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fb0b 	bl	8009d6e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008758:	e076      	b.n	8008848 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008760:	2b01      	cmp	r3, #1
 8008762:	d931      	bls.n	80087c8 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2209      	movs	r2, #9
 8008768:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008796:	3b02      	subs	r3, #2
 8008798:	029a      	lsls	r2, r3, #10
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80087a0:	4413      	add	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	6979      	ldr	r1, [r7, #20]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80087b2:	4798      	blx	r3
 80087b4:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80087bc:	461a      	mov	r2, r3
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 fad4 	bl	8009d6e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80087c6:	e03f      	b.n	8008848 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	220f      	movs	r2, #15
 80087cc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 fa48 	bl	8009c8c <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80087fc:	e024      	b.n	8008848 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2200      	movs	r2, #0
 8008802:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2200      	movs	r2, #0
 800880a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 fa3b 	bl	8009c8c <USBD_CtlError>
 8008816:	e017      	b.n	8008848 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2202      	movs	r2, #2
 800881c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008844:	e000      	b.n	8008848 <DFU_Upload+0x1ac>
    return;
 8008846:	bf00      	nop
  }
}
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800885e:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008866:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 80a0 	beq.w	80089b0 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008876:	2b03      	cmp	r3, #3
 8008878:	d002      	beq.n	8008880 <DFU_GetStatus+0x30>
 800887a:	2b06      	cmp	r3, #6
 800887c:	d051      	beq.n	8008922 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800887e:	e08e      	b.n	800899e <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008886:	2b00      	cmp	r3, #0
 8008888:	d034      	beq.n	80088f4 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2204      	movs	r2, #4
 800888e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10e      	bne.n	80088de <DFU_GetStatus+0x8e>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b41      	cmp	r3, #65	@ 0x41
 80088c6:	d10a      	bne.n	80088de <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80088d8:	2100      	movs	r1, #0
 80088da:	4798      	blx	r3
      break;
 80088dc:	e05f      	b.n	800899e <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80088ee:	2101      	movs	r1, #1
 80088f0:	4798      	blx	r3
      break;
 80088f2:	e054      	b.n	800899e <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2205      	movs	r2, #5
 80088f8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008920:	e03d      	b.n	800899e <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8008928:	2b01      	cmp	r3, #1
 800892a:	d116      	bne.n	800895a <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2207      	movs	r2, #7
 8008930:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008958:	e020      	b.n	800899c <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8008960:	2b00      	cmp	r3, #0
 8008962:	d11b      	bne.n	800899c <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8008964:	4b14      	ldr	r3, [pc, #80]	@ (80089b8 <DFU_GetStatus+0x168>)
 8008966:	7d1b      	ldrb	r3, [r3, #20]
 8008968:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800896c:	2b00      	cmp	r3, #0
 800896e:	d015      	beq.n	800899c <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800899c:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 80089a4:	2206      	movs	r2, #6
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 f9e0 	bl	8009d6e <USBD_CtlSendData>
 80089ae:	e000      	b.n	80089b2 <DFU_GetStatus+0x162>
    return;
 80089b0:	bf00      	nop
}
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	20000048 	.word	0x20000048

080089bc <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089ca:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d042      	beq.n	8008a58 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80089d8:	2b0a      	cmp	r3, #10
 80089da:	d11e      	bne.n	8008a1a <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2202      	movs	r2, #2
 80089e0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8008a18:	e01f      	b.n	8008a5a <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	220a      	movs	r2, #10
 8008a1e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	220e      	movs	r2, #14
 8008a26:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8008a56:	e000      	b.n	8008a5a <DFU_ClearStatus+0x9e>
    return;
 8008a58:	bf00      	nop
  }
}
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a72:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d008      	beq.n	8008a8c <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8008a80:	2201      	movs	r2, #1
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f001 f972 	bl	8009d6e <USBD_CtlSendData>
 8008a8a:	e000      	b.n	8008a8e <DFU_GetState+0x2a>
    return;
 8008a8c:	bf00      	nop
}
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008aa2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d03f      	beq.n	8008b2a <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d013      	beq.n	8008adc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d00e      	beq.n	8008adc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008ac4:	2b05      	cmp	r3, #5
 8008ac6:	d009      	beq.n	8008adc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008ace:	2b06      	cmp	r3, #6
 8008ad0:	d004      	beq.n	8008adc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008ad8:	2b09      	cmp	r3, #9
 8008ada:	d127      	bne.n	8008b2c <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8008b28:	e000      	b.n	8008b2c <DFU_Abort+0x98>
    return;
 8008b2a:	bf00      	nop
  }
}
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
	...

08008b38 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b46:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d03b      	beq.n	8008bc6 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8008b56:	4b1e      	ldr	r3, [pc, #120]	@ (8008bd0 <DFU_Leave+0x98>)
 8008b58:	7d1b      	ldrb	r3, [r3, #20]
 8008b5a:	f003 0304 	and.w	r3, r3, #4
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d016      	beq.n	8008b90 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2206      	movs	r2, #6
 8008b66:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 8008b8e:	e01b      	b.n	8008bc8 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2208      	movs	r2, #8
 8008b94:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f86c 	bl	8008c9a <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8008bc2:	f7ff f9b3 	bl	8007f2c <__NVIC_SystemReset>
    return;
 8008bc6:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000048 	.word	0x20000048

08008bd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4613      	mov	r3, r2
 8008be0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e01f      	b.n	8008c2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	79fa      	ldrb	r2, [r7, #7]
 8008c1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f001 fb91 	bl	800a348 <USBD_LL_Init>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e016      	b.n	8008c7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00b      	beq.n	8008c78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c68:	f107 020e 	add.w	r2, r7, #14
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
 8008c70:	4602      	mov	r2, r0
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 fba2 	bl	800a3d4 <USBD_LL_Start>
 8008c90:	4603      	mov	r3, r0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 fbb1 	bl	800a40a <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d009      	beq.n	8008cc6 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	6852      	ldr	r2, [r2, #4]
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4798      	blx	r3
  }

  return USBD_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d009      	beq.n	8008d14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	4798      	blx	r3
 8008d10:	4603      	mov	r3, r0
 8008d12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	460b      	mov	r3, r1
 8008d28:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d007      	beq.n	8008d44 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	78fa      	ldrb	r2, [r7, #3]
 8008d3e:	4611      	mov	r1, r2
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	4798      	blx	r3
  }

  return USBD_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 ff59 	bl	8009c18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008d74:	461a      	mov	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d82:	f003 031f 	and.w	r3, r3, #31
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d01a      	beq.n	8008dc0 <USBD_LL_SetupStage+0x72>
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d822      	bhi.n	8008dd4 <USBD_LL_SetupStage+0x86>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <USBD_LL_SetupStage+0x4a>
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d00a      	beq.n	8008dac <USBD_LL_SetupStage+0x5e>
 8008d96:	e01d      	b.n	8008dd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f9ef 	bl	8009184 <USBD_StdDevReq>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
      break;
 8008daa:	e020      	b.n	8008dee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fa53 	bl	8009260 <USBD_StdItfReq>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008dbe:	e016      	b.n	8008dee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fa92 	bl	80092f2 <USBD_StdEPReq>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd2:	e00c      	b.n	8008dee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dda:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f001 fb52 	bl	800a48c <USBD_LL_StallEP>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73fb      	strb	r3, [r7, #15]
      break;
 8008dec:	bf00      	nop
  }

  return ret;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	460b      	mov	r3, r1
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e06:	7afb      	ldrb	r3, [r7, #11]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d138      	bne.n	8008e7e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008e12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d14a      	bne.n	8008eb4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	689a      	ldr	r2, [r3, #8]
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d913      	bls.n	8008e52 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	689a      	ldr	r2, [r3, #8]
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	1ad2      	subs	r2, r2, r3
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	68da      	ldr	r2, [r3, #12]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	4293      	cmp	r3, r2
 8008e42:	bf28      	it	cs
 8008e44:	4613      	movcs	r3, r2
 8008e46:	461a      	mov	r2, r3
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 ffd8 	bl	8009e00 <USBD_CtlContinueRx>
 8008e50:	e030      	b.n	8008eb4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d10b      	bne.n	8008e76 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d005      	beq.n	8008e76 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 ffd3 	bl	8009e22 <USBD_CtlSendStatus>
 8008e7c:	e01a      	b.n	8008eb4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d114      	bne.n	8008eb4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00e      	beq.n	8008eb4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	7afa      	ldrb	r2, [r7, #11]
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	4798      	blx	r3
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	e000      	b.n	8008eb6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b086      	sub	sp, #24
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	607a      	str	r2, [r7, #4]
 8008eca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ecc:	7afb      	ldrb	r3, [r7, #11]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d16b      	bne.n	8008faa <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3314      	adds	r3, #20
 8008ed6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d156      	bne.n	8008f90 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d914      	bls.n	8008f18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	1ad2      	subs	r2, r2, r3
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	461a      	mov	r2, r3
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f000 ff4d 	bl	8009da4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2100      	movs	r1, #0
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f001 fb65 	bl	800a5e0 <USBD_LL_PrepareReceive>
 8008f16:	e03b      	b.n	8008f90 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d11c      	bne.n	8008f5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d316      	bcc.n	8008f5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d20f      	bcs.n	8008f5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2100      	movs	r1, #0
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 ff2e 	bl	8009da4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f50:	2300      	movs	r3, #0
 8008f52:	2200      	movs	r2, #0
 8008f54:	2100      	movs	r1, #0
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f001 fb42 	bl	800a5e0 <USBD_LL_PrepareReceive>
 8008f5c:	e018      	b.n	8008f90 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d10b      	bne.n	8008f82 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f82:	2180      	movs	r1, #128	@ 0x80
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f001 fa81 	bl	800a48c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 ff5c 	bl	8009e48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d122      	bne.n	8008fe0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff fe98 	bl	8008cd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008fa8:	e01a      	b.n	8008fe0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d114      	bne.n	8008fe0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00e      	beq.n	8008fe0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	7afa      	ldrb	r2, [r7, #11]
 8008fcc:	4611      	mov	r1, r2
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	4798      	blx	r3
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	e000      	b.n	8008fe2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800901a:	2303      	movs	r3, #3
 800901c:	e02f      	b.n	800907e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00f      	beq.n	8009048 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d009      	beq.n	8009048 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	6852      	ldr	r2, [r2, #4]
 8009040:	b2d2      	uxtb	r2, r2
 8009042:	4611      	mov	r1, r2
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009048:	2340      	movs	r3, #64	@ 0x40
 800904a:	2200      	movs	r2, #0
 800904c:	2100      	movs	r1, #0
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 f9f6 	bl	800a440 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2240      	movs	r2, #64	@ 0x40
 8009060:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009064:	2340      	movs	r3, #64	@ 0x40
 8009066:	2200      	movs	r2, #0
 8009068:	2180      	movs	r1, #128	@ 0x80
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f001 f9e8 	bl	800a440 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2240      	movs	r2, #64	@ 0x40
 800907a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2204      	movs	r2, #4
 80090c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d106      	bne.n	80090f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009114:	2303      	movs	r3, #3
 8009116:	e012      	b.n	800913e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b03      	cmp	r3, #3
 8009122:	d10b      	bne.n	800913c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009146:	b480      	push	{r7}
 8009148:	b087      	sub	sp, #28
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	3301      	adds	r3, #1
 800915c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009164:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009168:	021b      	lsls	r3, r3, #8
 800916a:	b21a      	sxth	r2, r3
 800916c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009170:	4313      	orrs	r3, r2
 8009172:	b21b      	sxth	r3, r3
 8009174:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009176:	89fb      	ldrh	r3, [r7, #14]
}
 8009178:	4618      	mov	r0, r3
 800917a:	371c      	adds	r7, #28
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800919a:	2b40      	cmp	r3, #64	@ 0x40
 800919c:	d005      	beq.n	80091aa <USBD_StdDevReq+0x26>
 800919e:	2b40      	cmp	r3, #64	@ 0x40
 80091a0:	d853      	bhi.n	800924a <USBD_StdDevReq+0xc6>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00b      	beq.n	80091be <USBD_StdDevReq+0x3a>
 80091a6:	2b20      	cmp	r3, #32
 80091a8:	d14f      	bne.n	800924a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	4798      	blx	r3
 80091b8:	4603      	mov	r3, r0
 80091ba:	73fb      	strb	r3, [r7, #15]
      break;
 80091bc:	e04a      	b.n	8009254 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	785b      	ldrb	r3, [r3, #1]
 80091c2:	2b09      	cmp	r3, #9
 80091c4:	d83b      	bhi.n	800923e <USBD_StdDevReq+0xba>
 80091c6:	a201      	add	r2, pc, #4	@ (adr r2, 80091cc <USBD_StdDevReq+0x48>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	08009221 	.word	0x08009221
 80091d0:	08009235 	.word	0x08009235
 80091d4:	0800923f 	.word	0x0800923f
 80091d8:	0800922b 	.word	0x0800922b
 80091dc:	0800923f 	.word	0x0800923f
 80091e0:	080091ff 	.word	0x080091ff
 80091e4:	080091f5 	.word	0x080091f5
 80091e8:	0800923f 	.word	0x0800923f
 80091ec:	08009217 	.word	0x08009217
 80091f0:	08009209 	.word	0x08009209
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f9de 	bl	80095b8 <USBD_GetDescriptor>
          break;
 80091fc:	e024      	b.n	8009248 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fb7f 	bl	8009904 <USBD_SetAddress>
          break;
 8009206:	e01f      	b.n	8009248 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fbbe 	bl	800998c <USBD_SetConfig>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]
          break;
 8009214:	e018      	b.n	8009248 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fc5d 	bl	8009ad8 <USBD_GetConfig>
          break;
 800921e:	e013      	b.n	8009248 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fc8e 	bl	8009b44 <USBD_GetStatus>
          break;
 8009228:	e00e      	b.n	8009248 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fcbd 	bl	8009bac <USBD_SetFeature>
          break;
 8009232:	e009      	b.n	8009248 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fccc 	bl	8009bd4 <USBD_ClrFeature>
          break;
 800923c:	e004      	b.n	8009248 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fd23 	bl	8009c8c <USBD_CtlError>
          break;
 8009246:	bf00      	nop
      }
      break;
 8009248:	e004      	b.n	8009254 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fd1d 	bl	8009c8c <USBD_CtlError>
      break;
 8009252:	bf00      	nop
  }

  return ret;
 8009254:	7bfb      	ldrb	r3, [r7, #15]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop

08009260 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009276:	2b40      	cmp	r3, #64	@ 0x40
 8009278:	d005      	beq.n	8009286 <USBD_StdItfReq+0x26>
 800927a:	2b40      	cmp	r3, #64	@ 0x40
 800927c:	d82f      	bhi.n	80092de <USBD_StdItfReq+0x7e>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <USBD_StdItfReq+0x26>
 8009282:	2b20      	cmp	r3, #32
 8009284:	d12b      	bne.n	80092de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800928c:	b2db      	uxtb	r3, r3
 800928e:	3b01      	subs	r3, #1
 8009290:	2b02      	cmp	r3, #2
 8009292:	d81d      	bhi.n	80092d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	889b      	ldrh	r3, [r3, #4]
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b01      	cmp	r3, #1
 800929c:	d813      	bhi.n	80092c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	4798      	blx	r3
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	88db      	ldrh	r3, [r3, #6]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d110      	bne.n	80092da <USBD_StdItfReq+0x7a>
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10d      	bne.n	80092da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fdaf 	bl	8009e22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092c4:	e009      	b.n	80092da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fcdf 	bl	8009c8c <USBD_CtlError>
          break;
 80092ce:	e004      	b.n	80092da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fcda 	bl	8009c8c <USBD_CtlError>
          break;
 80092d8:	e000      	b.n	80092dc <USBD_StdItfReq+0x7c>
          break;
 80092da:	bf00      	nop
      }
      break;
 80092dc:	e004      	b.n	80092e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fcd3 	bl	8009c8c <USBD_CtlError>
      break;
 80092e6:	bf00      	nop
  }

  return ret;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	889b      	ldrh	r3, [r3, #4]
 8009304:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800930e:	2b40      	cmp	r3, #64	@ 0x40
 8009310:	d007      	beq.n	8009322 <USBD_StdEPReq+0x30>
 8009312:	2b40      	cmp	r3, #64	@ 0x40
 8009314:	f200 8145 	bhi.w	80095a2 <USBD_StdEPReq+0x2b0>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00c      	beq.n	8009336 <USBD_StdEPReq+0x44>
 800931c:	2b20      	cmp	r3, #32
 800931e:	f040 8140 	bne.w	80095a2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	4798      	blx	r3
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]
      break;
 8009334:	e13a      	b.n	80095ac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	785b      	ldrb	r3, [r3, #1]
 800933a:	2b03      	cmp	r3, #3
 800933c:	d007      	beq.n	800934e <USBD_StdEPReq+0x5c>
 800933e:	2b03      	cmp	r3, #3
 8009340:	f300 8129 	bgt.w	8009596 <USBD_StdEPReq+0x2a4>
 8009344:	2b00      	cmp	r3, #0
 8009346:	d07f      	beq.n	8009448 <USBD_StdEPReq+0x156>
 8009348:	2b01      	cmp	r3, #1
 800934a:	d03c      	beq.n	80093c6 <USBD_StdEPReq+0xd4>
 800934c:	e123      	b.n	8009596 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d002      	beq.n	8009360 <USBD_StdEPReq+0x6e>
 800935a:	2b03      	cmp	r3, #3
 800935c:	d016      	beq.n	800938c <USBD_StdEPReq+0x9a>
 800935e:	e02c      	b.n	80093ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00d      	beq.n	8009382 <USBD_StdEPReq+0x90>
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	2b80      	cmp	r3, #128	@ 0x80
 800936a:	d00a      	beq.n	8009382 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 f88b 	bl	800a48c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009376:	2180      	movs	r1, #128	@ 0x80
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 f887 	bl	800a48c <USBD_LL_StallEP>
 800937e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009380:	e020      	b.n	80093c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fc81 	bl	8009c8c <USBD_CtlError>
              break;
 800938a:	e01b      	b.n	80093c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	885b      	ldrh	r3, [r3, #2]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10e      	bne.n	80093b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009394:	7bbb      	ldrb	r3, [r7, #14]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00b      	beq.n	80093b2 <USBD_StdEPReq+0xc0>
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	2b80      	cmp	r3, #128	@ 0x80
 800939e:	d008      	beq.n	80093b2 <USBD_StdEPReq+0xc0>
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	88db      	ldrh	r3, [r3, #6]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d104      	bne.n	80093b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 f86d 	bl	800a48c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fd35 	bl	8009e22 <USBD_CtlSendStatus>

              break;
 80093b8:	e004      	b.n	80093c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fc65 	bl	8009c8c <USBD_CtlError>
              break;
 80093c2:	bf00      	nop
          }
          break;
 80093c4:	e0ec      	b.n	80095a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d002      	beq.n	80093d8 <USBD_StdEPReq+0xe6>
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d016      	beq.n	8009404 <USBD_StdEPReq+0x112>
 80093d6:	e030      	b.n	800943a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00d      	beq.n	80093fa <USBD_StdEPReq+0x108>
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	2b80      	cmp	r3, #128	@ 0x80
 80093e2:	d00a      	beq.n	80093fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 f84f 	bl	800a48c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093ee:	2180      	movs	r1, #128	@ 0x80
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 f84b 	bl	800a48c <USBD_LL_StallEP>
 80093f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093f8:	e025      	b.n	8009446 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fc45 	bl	8009c8c <USBD_CtlError>
              break;
 8009402:	e020      	b.n	8009446 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	885b      	ldrh	r3, [r3, #2]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d11b      	bne.n	8009444 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009412:	2b00      	cmp	r3, #0
 8009414:	d004      	beq.n	8009420 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 f855 	bl	800a4ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fcfe 	bl	8009e22 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	4798      	blx	r3
 8009434:	4603      	mov	r3, r0
 8009436:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009438:	e004      	b.n	8009444 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fc25 	bl	8009c8c <USBD_CtlError>
              break;
 8009442:	e000      	b.n	8009446 <USBD_StdEPReq+0x154>
              break;
 8009444:	bf00      	nop
          }
          break;
 8009446:	e0ab      	b.n	80095a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b02      	cmp	r3, #2
 8009452:	d002      	beq.n	800945a <USBD_StdEPReq+0x168>
 8009454:	2b03      	cmp	r3, #3
 8009456:	d032      	beq.n	80094be <USBD_StdEPReq+0x1cc>
 8009458:	e097      	b.n	800958a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800945a:	7bbb      	ldrb	r3, [r7, #14]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d007      	beq.n	8009470 <USBD_StdEPReq+0x17e>
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	2b80      	cmp	r3, #128	@ 0x80
 8009464:	d004      	beq.n	8009470 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fc0f 	bl	8009c8c <USBD_CtlError>
                break;
 800946e:	e091      	b.n	8009594 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009474:	2b00      	cmp	r3, #0
 8009476:	da0b      	bge.n	8009490 <USBD_StdEPReq+0x19e>
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800947e:	4613      	mov	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	3310      	adds	r3, #16
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	4413      	add	r3, r2
 800948c:	3304      	adds	r3, #4
 800948e:	e00b      	b.n	80094a8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	4413      	add	r3, r2
 80094a6:	3304      	adds	r3, #4
 80094a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2202      	movs	r2, #2
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fc59 	bl	8009d6e <USBD_CtlSendData>
              break;
 80094bc:	e06a      	b.n	8009594 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	da11      	bge.n	80094ea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	f003 020f 	and.w	r2, r3, #15
 80094cc:	6879      	ldr	r1, [r7, #4]
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	440b      	add	r3, r1
 80094d8:	3324      	adds	r3, #36	@ 0x24
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d117      	bne.n	8009510 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fbd2 	bl	8009c8c <USBD_CtlError>
                  break;
 80094e8:	e054      	b.n	8009594 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	f003 020f 	and.w	r2, r3, #15
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	4613      	mov	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	440b      	add	r3, r1
 80094fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d104      	bne.n	8009510 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fbbf 	bl	8009c8c <USBD_CtlError>
                  break;
 800950e:	e041      	b.n	8009594 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009514:	2b00      	cmp	r3, #0
 8009516:	da0b      	bge.n	8009530 <USBD_StdEPReq+0x23e>
 8009518:	7bbb      	ldrb	r3, [r7, #14]
 800951a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	3310      	adds	r3, #16
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	4413      	add	r3, r2
 800952c:	3304      	adds	r3, #4
 800952e:	e00b      	b.n	8009548 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009536:	4613      	mov	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	4413      	add	r3, r2
 8009546:	3304      	adds	r3, #4
 8009548:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <USBD_StdEPReq+0x264>
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	2b80      	cmp	r3, #128	@ 0x80
 8009554:	d103      	bne.n	800955e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	e00e      	b.n	800957c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 ffd0 	bl	800a508 <USBD_LL_IsStallEP>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2201      	movs	r2, #1
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	e002      	b.n	800957c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2202      	movs	r2, #2
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fbf3 	bl	8009d6e <USBD_CtlSendData>
              break;
 8009588:	e004      	b.n	8009594 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fb7d 	bl	8009c8c <USBD_CtlError>
              break;
 8009592:	bf00      	nop
          }
          break;
 8009594:	e004      	b.n	80095a0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fb77 	bl	8009c8c <USBD_CtlError>
          break;
 800959e:	bf00      	nop
      }
      break;
 80095a0:	e004      	b.n	80095ac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fb71 	bl	8009c8c <USBD_CtlError>
      break;
 80095aa:	bf00      	nop
  }

  return ret;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	885b      	ldrh	r3, [r3, #2]
 80095d2:	0a1b      	lsrs	r3, r3, #8
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	3b01      	subs	r3, #1
 80095d8:	2b0e      	cmp	r3, #14
 80095da:	f200 8165 	bhi.w	80098a8 <USBD_GetDescriptor+0x2f0>
 80095de:	a201      	add	r2, pc, #4	@ (adr r2, 80095e4 <USBD_GetDescriptor+0x2c>)
 80095e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e4:	08009655 	.word	0x08009655
 80095e8:	0800966d 	.word	0x0800966d
 80095ec:	080096ad 	.word	0x080096ad
 80095f0:	080098a9 	.word	0x080098a9
 80095f4:	080098a9 	.word	0x080098a9
 80095f8:	08009849 	.word	0x08009849
 80095fc:	08009875 	.word	0x08009875
 8009600:	080098a9 	.word	0x080098a9
 8009604:	080098a9 	.word	0x080098a9
 8009608:	080098a9 	.word	0x080098a9
 800960c:	080098a9 	.word	0x080098a9
 8009610:	080098a9 	.word	0x080098a9
 8009614:	080098a9 	.word	0x080098a9
 8009618:	080098a9 	.word	0x080098a9
 800961c:	08009621 	.word	0x08009621
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00b      	beq.n	8009644 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	7c12      	ldrb	r2, [r2, #16]
 8009638:	f107 0108 	add.w	r1, r7, #8
 800963c:	4610      	mov	r0, r2
 800963e:	4798      	blx	r3
 8009640:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009642:	e139      	b.n	80098b8 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fb20 	bl	8009c8c <USBD_CtlError>
        err++;
 800964c:	7afb      	ldrb	r3, [r7, #11]
 800964e:	3301      	adds	r3, #1
 8009650:	72fb      	strb	r3, [r7, #11]
      break;
 8009652:	e131      	b.n	80098b8 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	7c12      	ldrb	r2, [r2, #16]
 8009660:	f107 0108 	add.w	r1, r7, #8
 8009664:	4610      	mov	r0, r2
 8009666:	4798      	blx	r3
 8009668:	60f8      	str	r0, [r7, #12]
      break;
 800966a:	e125      	b.n	80098b8 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	7c1b      	ldrb	r3, [r3, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10d      	bne.n	8009690 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800967a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967c:	f107 0208 	add.w	r2, r7, #8
 8009680:	4610      	mov	r0, r2
 8009682:	4798      	blx	r3
 8009684:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3301      	adds	r3, #1
 800968a:	2202      	movs	r2, #2
 800968c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800968e:	e113      	b.n	80098b8 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009698:	f107 0208 	add.w	r2, r7, #8
 800969c:	4610      	mov	r0, r2
 800969e:	4798      	blx	r3
 80096a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3301      	adds	r3, #1
 80096a6:	2202      	movs	r2, #2
 80096a8:	701a      	strb	r2, [r3, #0]
      break;
 80096aa:	e105      	b.n	80098b8 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	885b      	ldrh	r3, [r3, #2]
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2b05      	cmp	r3, #5
 80096b4:	f200 80ac 	bhi.w	8009810 <USBD_GetDescriptor+0x258>
 80096b8:	a201      	add	r2, pc, #4	@ (adr r2, 80096c0 <USBD_GetDescriptor+0x108>)
 80096ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096be:	bf00      	nop
 80096c0:	080096d9 	.word	0x080096d9
 80096c4:	0800970d 	.word	0x0800970d
 80096c8:	08009741 	.word	0x08009741
 80096cc:	08009775 	.word	0x08009775
 80096d0:	080097a9 	.word	0x080097a9
 80096d4:	080097dd 	.word	0x080097dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	7c12      	ldrb	r2, [r2, #16]
 80096f0:	f107 0108 	add.w	r1, r7, #8
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
 80096f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096fa:	e0a4      	b.n	8009846 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fac4 	bl	8009c8c <USBD_CtlError>
            err++;
 8009704:	7afb      	ldrb	r3, [r7, #11]
 8009706:	3301      	adds	r3, #1
 8009708:	72fb      	strb	r3, [r7, #11]
          break;
 800970a:	e09c      	b.n	8009846 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	7c12      	ldrb	r2, [r2, #16]
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
 800972c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800972e:	e08a      	b.n	8009846 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 faaa 	bl	8009c8c <USBD_CtlError>
            err++;
 8009738:	7afb      	ldrb	r3, [r7, #11]
 800973a:	3301      	adds	r3, #1
 800973c:	72fb      	strb	r3, [r7, #11]
          break;
 800973e:	e082      	b.n	8009846 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	7c12      	ldrb	r2, [r2, #16]
 8009758:	f107 0108 	add.w	r1, r7, #8
 800975c:	4610      	mov	r0, r2
 800975e:	4798      	blx	r3
 8009760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009762:	e070      	b.n	8009846 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fa90 	bl	8009c8c <USBD_CtlError>
            err++;
 800976c:	7afb      	ldrb	r3, [r7, #11]
 800976e:	3301      	adds	r3, #1
 8009770:	72fb      	strb	r3, [r7, #11]
          break;
 8009772:	e068      	b.n	8009846 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	7c12      	ldrb	r2, [r2, #16]
 800978c:	f107 0108 	add.w	r1, r7, #8
 8009790:	4610      	mov	r0, r2
 8009792:	4798      	blx	r3
 8009794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009796:	e056      	b.n	8009846 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fa76 	bl	8009c8c <USBD_CtlError>
            err++;
 80097a0:	7afb      	ldrb	r3, [r7, #11]
 80097a2:	3301      	adds	r3, #1
 80097a4:	72fb      	strb	r3, [r7, #11]
          break;
 80097a6:	e04e      	b.n	8009846 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00b      	beq.n	80097cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	7c12      	ldrb	r2, [r2, #16]
 80097c0:	f107 0108 	add.w	r1, r7, #8
 80097c4:	4610      	mov	r0, r2
 80097c6:	4798      	blx	r3
 80097c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ca:	e03c      	b.n	8009846 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fa5c 	bl	8009c8c <USBD_CtlError>
            err++;
 80097d4:	7afb      	ldrb	r3, [r7, #11]
 80097d6:	3301      	adds	r3, #1
 80097d8:	72fb      	strb	r3, [r7, #11]
          break;
 80097da:	e034      	b.n	8009846 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00b      	beq.n	8009800 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	7c12      	ldrb	r2, [r2, #16]
 80097f4:	f107 0108 	add.w	r1, r7, #8
 80097f8:	4610      	mov	r0, r2
 80097fa:	4798      	blx	r3
 80097fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097fe:	e022      	b.n	8009846 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa42 	bl	8009c8c <USBD_CtlError>
            err++;
 8009808:	7afb      	ldrb	r3, [r7, #11]
 800980a:	3301      	adds	r3, #1
 800980c:	72fb      	strb	r3, [r7, #11]
          break;
 800980e:	e01a      	b.n	8009846 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00c      	beq.n	8009836 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	8852      	ldrh	r2, [r2, #2]
 8009828:	b2d1      	uxtb	r1, r2
 800982a:	f107 0208 	add.w	r2, r7, #8
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
 8009832:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8009834:	e006      	b.n	8009844 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fa27 	bl	8009c8c <USBD_CtlError>
            err++;
 800983e:	7afb      	ldrb	r3, [r7, #11]
 8009840:	3301      	adds	r3, #1
 8009842:	72fb      	strb	r3, [r7, #11]
          break;
 8009844:	bf00      	nop
      }
      break;
 8009846:	e037      	b.n	80098b8 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	7c1b      	ldrb	r3, [r3, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d109      	bne.n	8009864 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009858:	f107 0208 	add.w	r2, r7, #8
 800985c:	4610      	mov	r0, r2
 800985e:	4798      	blx	r3
 8009860:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009862:	e029      	b.n	80098b8 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fa10 	bl	8009c8c <USBD_CtlError>
        err++;
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	3301      	adds	r3, #1
 8009870:	72fb      	strb	r3, [r7, #11]
      break;
 8009872:	e021      	b.n	80098b8 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	7c1b      	ldrb	r3, [r3, #16]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10d      	bne.n	8009898 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009884:	f107 0208 	add.w	r2, r7, #8
 8009888:	4610      	mov	r0, r2
 800988a:	4798      	blx	r3
 800988c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3301      	adds	r3, #1
 8009892:	2207      	movs	r2, #7
 8009894:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009896:	e00f      	b.n	80098b8 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f9f6 	bl	8009c8c <USBD_CtlError>
        err++;
 80098a0:	7afb      	ldrb	r3, [r7, #11]
 80098a2:	3301      	adds	r3, #1
 80098a4:	72fb      	strb	r3, [r7, #11]
      break;
 80098a6:	e007      	b.n	80098b8 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f9ee 	bl	8009c8c <USBD_CtlError>
      err++;
 80098b0:	7afb      	ldrb	r3, [r7, #11]
 80098b2:	3301      	adds	r3, #1
 80098b4:	72fb      	strb	r3, [r7, #11]
      break;
 80098b6:	bf00      	nop
  }

  if (err != 0U)
 80098b8:	7afb      	ldrb	r3, [r7, #11]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d11e      	bne.n	80098fc <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	88db      	ldrh	r3, [r3, #6]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d016      	beq.n	80098f4 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 80098c6:	893b      	ldrh	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00e      	beq.n	80098ea <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	88da      	ldrh	r2, [r3, #6]
 80098d0:	893b      	ldrh	r3, [r7, #8]
 80098d2:	4293      	cmp	r3, r2
 80098d4:	bf28      	it	cs
 80098d6:	4613      	movcs	r3, r2
 80098d8:	b29b      	uxth	r3, r3
 80098da:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098dc:	893b      	ldrh	r3, [r7, #8]
 80098de:	461a      	mov	r2, r3
 80098e0:	68f9      	ldr	r1, [r7, #12]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa43 	bl	8009d6e <USBD_CtlSendData>
 80098e8:	e009      	b.n	80098fe <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f9cd 	bl	8009c8c <USBD_CtlError>
 80098f2:	e004      	b.n	80098fe <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fa94 	bl	8009e22 <USBD_CtlSendStatus>
 80098fa:	e000      	b.n	80098fe <USBD_GetDescriptor+0x346>
    return;
 80098fc:	bf00      	nop
  }
}
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	889b      	ldrh	r3, [r3, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d131      	bne.n	800997a <USBD_SetAddress+0x76>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	88db      	ldrh	r3, [r3, #6]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d12d      	bne.n	800997a <USBD_SetAddress+0x76>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	885b      	ldrh	r3, [r3, #2]
 8009922:	2b7f      	cmp	r3, #127	@ 0x7f
 8009924:	d829      	bhi.n	800997a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	885b      	ldrh	r3, [r3, #2]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009930:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b03      	cmp	r3, #3
 800993c:	d104      	bne.n	8009948 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f9a3 	bl	8009c8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009946:	e01d      	b.n	8009984 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	7bfa      	ldrb	r2, [r7, #15]
 800994c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fe03 	bl	800a560 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa61 	bl	8009e22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d004      	beq.n	8009970 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2202      	movs	r2, #2
 800996a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800996e:	e009      	b.n	8009984 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009978:	e004      	b.n	8009984 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f985 	bl	8009c8c <USBD_CtlError>
  }
}
 8009982:	bf00      	nop
 8009984:	bf00      	nop
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	885b      	ldrh	r3, [r3, #2]
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	4b4c      	ldr	r3, [pc, #304]	@ (8009ad4 <USBD_SetConfig+0x148>)
 80099a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099a4:	4b4b      	ldr	r3, [pc, #300]	@ (8009ad4 <USBD_SetConfig+0x148>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d905      	bls.n	80099b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f96c 	bl	8009c8c <USBD_CtlError>
    return USBD_FAIL;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e088      	b.n	8009aca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d002      	beq.n	80099ca <USBD_SetConfig+0x3e>
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d025      	beq.n	8009a14 <USBD_SetConfig+0x88>
 80099c8:	e071      	b.n	8009aae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099ca:	4b42      	ldr	r3, [pc, #264]	@ (8009ad4 <USBD_SetConfig+0x148>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d01c      	beq.n	8009a0c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80099d2:	4b40      	ldr	r3, [pc, #256]	@ (8009ad4 <USBD_SetConfig+0x148>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099dc:	4b3d      	ldr	r3, [pc, #244]	@ (8009ad4 <USBD_SetConfig+0x148>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff f97f 	bl	8008ce6 <USBD_SetClassConfig>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d004      	beq.n	80099fc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f949 	bl	8009c8c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099fa:	e065      	b.n	8009ac8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fa10 	bl	8009e22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2203      	movs	r2, #3
 8009a06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a0a:	e05d      	b.n	8009ac8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fa08 	bl	8009e22 <USBD_CtlSendStatus>
      break;
 8009a12:	e059      	b.n	8009ac8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a14:	4b2f      	ldr	r3, [pc, #188]	@ (8009ad4 <USBD_SetConfig+0x148>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d112      	bne.n	8009a42 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009a24:	4b2b      	ldr	r3, [pc, #172]	@ (8009ad4 <USBD_SetConfig+0x148>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a2e:	4b29      	ldr	r3, [pc, #164]	@ (8009ad4 <USBD_SetConfig+0x148>)
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff f972 	bl	8008d1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f9f1 	bl	8009e22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a40:	e042      	b.n	8009ac8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009a42:	4b24      	ldr	r3, [pc, #144]	@ (8009ad4 <USBD_SetConfig+0x148>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d02a      	beq.n	8009aa6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7ff f960 	bl	8008d1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ad4 <USBD_SetConfig+0x148>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a68:	4b1a      	ldr	r3, [pc, #104]	@ (8009ad4 <USBD_SetConfig+0x148>)
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7ff f939 	bl	8008ce6 <USBD_SetClassConfig>
 8009a74:	4603      	mov	r3, r0
 8009a76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00f      	beq.n	8009a9e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f903 	bl	8009c8c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff f945 	bl	8008d1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a9c:	e014      	b.n	8009ac8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f9bf 	bl	8009e22 <USBD_CtlSendStatus>
      break;
 8009aa4:	e010      	b.n	8009ac8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f9bb 	bl	8009e22 <USBD_CtlSendStatus>
      break;
 8009aac:	e00c      	b.n	8009ac8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f8eb 	bl	8009c8c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ab6:	4b07      	ldr	r3, [pc, #28]	@ (8009ad4 <USBD_SetConfig+0x148>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff f92e 	bl	8008d1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ac6:	bf00      	nop
  }

  return ret;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	200002d3 	.word	0x200002d3

08009ad8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	88db      	ldrh	r3, [r3, #6]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d004      	beq.n	8009af4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f8cd 	bl	8009c8c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009af2:	e023      	b.n	8009b3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	dc02      	bgt.n	8009b06 <USBD_GetConfig+0x2e>
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	dc03      	bgt.n	8009b0c <USBD_GetConfig+0x34>
 8009b04:	e015      	b.n	8009b32 <USBD_GetConfig+0x5a>
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d00b      	beq.n	8009b22 <USBD_GetConfig+0x4a>
 8009b0a:	e012      	b.n	8009b32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3308      	adds	r3, #8
 8009b16:	2201      	movs	r2, #1
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f927 	bl	8009d6e <USBD_CtlSendData>
        break;
 8009b20:	e00c      	b.n	8009b3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3304      	adds	r3, #4
 8009b26:	2201      	movs	r2, #1
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f91f 	bl	8009d6e <USBD_CtlSendData>
        break;
 8009b30:	e004      	b.n	8009b3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f8a9 	bl	8009c8c <USBD_CtlError>
        break;
 8009b3a:	bf00      	nop
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	3b01      	subs	r3, #1
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d81e      	bhi.n	8009b9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	88db      	ldrh	r3, [r3, #6]
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d004      	beq.n	8009b6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f890 	bl	8009c8c <USBD_CtlError>
        break;
 8009b6c:	e01a      	b.n	8009ba4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d005      	beq.n	8009b8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f043 0202 	orr.w	r2, r3, #2
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	330c      	adds	r3, #12
 8009b8e:	2202      	movs	r2, #2
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f8eb 	bl	8009d6e <USBD_CtlSendData>
      break;
 8009b98:	e004      	b.n	8009ba4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f875 	bl	8009c8c <USBD_CtlError>
      break;
 8009ba2:	bf00      	nop
  }
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	885b      	ldrh	r3, [r3, #2]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d106      	bne.n	8009bcc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f92b 	bl	8009e22 <USBD_CtlSendStatus>
  }
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	3b01      	subs	r3, #1
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d80b      	bhi.n	8009c04 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	885b      	ldrh	r3, [r3, #2]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d10c      	bne.n	8009c0e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f910 	bl	8009e22 <USBD_CtlSendStatus>
      }
      break;
 8009c02:	e004      	b.n	8009c0e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f840 	bl	8009c8c <USBD_CtlError>
      break;
 8009c0c:	e000      	b.n	8009c10 <USBD_ClrFeature+0x3c>
      break;
 8009c0e:	bf00      	nop
  }
}
 8009c10:	bf00      	nop
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	781a      	ldrb	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	781a      	ldrb	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7ff fa7f 	bl	8009146 <SWAPBYTE>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	3301      	adds	r3, #1
 8009c54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f7ff fa72 	bl	8009146 <SWAPBYTE>
 8009c62:	4603      	mov	r3, r0
 8009c64:	461a      	mov	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3301      	adds	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7ff fa65 	bl	8009146 <SWAPBYTE>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	461a      	mov	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	80da      	strh	r2, [r3, #6]
}
 8009c84:	bf00      	nop
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c96:	2180      	movs	r1, #128	@ 0x80
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fbf7 	bl	800a48c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fbf3 	bl	800a48c <USBD_LL_StallEP>
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b086      	sub	sp, #24
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	60f8      	str	r0, [r7, #12]
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d036      	beq.n	8009d32 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009cc8:	6938      	ldr	r0, [r7, #16]
 8009cca:	f000 f836 	bl	8009d3a <USBD_GetLen>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	7812      	ldrb	r2, [r2, #0]
 8009ce6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	3301      	adds	r3, #1
 8009cec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	2203      	movs	r2, #3
 8009cf6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009cfe:	e013      	b.n	8009d28 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	4413      	add	r3, r2
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	7812      	ldrb	r2, [r2, #0]
 8009d0a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	613b      	str	r3, [r7, #16]
    idx++;
 8009d12:	7dfb      	ldrb	r3, [r7, #23]
 8009d14:	3301      	adds	r3, #1
 8009d16:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d18:	7dfb      	ldrb	r3, [r7, #23]
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	3301      	adds	r3, #1
 8009d26:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e7      	bne.n	8009d00 <USBD_GetString+0x52>
 8009d30:	e000      	b.n	8009d34 <USBD_GetString+0x86>
    return;
 8009d32:	bf00      	nop
  }
}
 8009d34:	3718      	adds	r7, #24
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d4a:	e005      	b.n	8009d58 <USBD_GetLen+0x1e>
  {
    len++;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	3301      	adds	r3, #1
 8009d56:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1f5      	bne.n	8009d4c <USBD_GetLen+0x12>
  }

  return len;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	2100      	movs	r1, #0
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 fc02 	bl	800a59e <USBD_LL_Transmit>

  return USBD_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	2100      	movs	r1, #0
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fbf1 	bl	800a59e <USBD_LL_Transmit>

  return USBD_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b084      	sub	sp, #16
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2203      	movs	r2, #3
 8009dd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	2100      	movs	r1, #0
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 fbf5 	bl	800a5e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	2100      	movs	r1, #0
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 fbe4 	bl	800a5e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b082      	sub	sp, #8
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2204      	movs	r2, #4
 8009e2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e32:	2300      	movs	r3, #0
 8009e34:	2200      	movs	r2, #0
 8009e36:	2100      	movs	r1, #0
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fbb0 	bl	800a59e <USBD_LL_Transmit>

  return USBD_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2205      	movs	r2, #5
 8009e54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e58:	2300      	movs	r3, #0
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fbbe 	bl	800a5e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
	...

08009e70 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 8009e74:	2200      	movs	r2, #0
 8009e76:	4912      	ldr	r1, [pc, #72]	@ (8009ec0 <MX_USB_Device_Init+0x50>)
 8009e78:	4812      	ldr	r0, [pc, #72]	@ (8009ec4 <MX_USB_Device_Init+0x54>)
 8009e7a:	f7fe feab 	bl	8008bd4 <USBD_Init>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d001      	beq.n	8009e88 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009e84:	f7f6 fbf0 	bl	8000668 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 8009e88:	490f      	ldr	r1, [pc, #60]	@ (8009ec8 <MX_USB_Device_Init+0x58>)
 8009e8a:	480e      	ldr	r0, [pc, #56]	@ (8009ec4 <MX_USB_Device_Init+0x54>)
 8009e8c:	f7fe fed2 	bl	8008c34 <USBD_RegisterClass>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009e96:	f7f6 fbe7 	bl	8000668 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 8009e9a:	490c      	ldr	r1, [pc, #48]	@ (8009ecc <MX_USB_Device_Init+0x5c>)
 8009e9c:	4809      	ldr	r0, [pc, #36]	@ (8009ec4 <MX_USB_Device_Init+0x54>)
 8009e9e:	f7fe fb17 	bl	80084d0 <USBD_DFU_RegisterMedia>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009ea8:	f7f6 fbde 	bl	8000668 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009eac:	4805      	ldr	r0, [pc, #20]	@ (8009ec4 <MX_USB_Device_Init+0x54>)
 8009eae:	f7fe fee8 	bl	8008c82 <USBD_Start>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009eb8:	f7f6 fbd6 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009ebc:	bf00      	nop
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20000070 	.word	0x20000070
 8009ec4:	200002d4 	.word	0x200002d4
 8009ec8:	2000000c 	.word	0x2000000c
 8009ecc:	200000c4 	.word	0x200000c4

08009ed0 <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	6039      	str	r1, [r7, #0]
 8009eda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2212      	movs	r2, #18
 8009ee0:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 8009ee2:	4b03      	ldr	r3, [pc, #12]	@ (8009ef0 <USBD_DFU_DeviceDescriptor+0x20>)
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	20000090 	.word	0x20000090

08009ef4 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	6039      	str	r1, [r7, #0]
 8009efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	2204      	movs	r2, #4
 8009f04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f06:	4b03      	ldr	r3, [pc, #12]	@ (8009f14 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	200000a4 	.word	0x200000a4

08009f18 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	6039      	str	r1, [r7, #0]
 8009f22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f24:	79fb      	ldrb	r3, [r7, #7]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d105      	bne.n	8009f36 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	4907      	ldr	r1, [pc, #28]	@ (8009f4c <USBD_DFU_ProductStrDescriptor+0x34>)
 8009f2e:	4808      	ldr	r0, [pc, #32]	@ (8009f50 <USBD_DFU_ProductStrDescriptor+0x38>)
 8009f30:	f7ff febd 	bl	8009cae <USBD_GetString>
 8009f34:	e004      	b.n	8009f40 <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	4904      	ldr	r1, [pc, #16]	@ (8009f4c <USBD_DFU_ProductStrDescriptor+0x34>)
 8009f3a:	4805      	ldr	r0, [pc, #20]	@ (8009f50 <USBD_DFU_ProductStrDescriptor+0x38>)
 8009f3c:	f7ff feb7 	bl	8009cae <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f40:	4b02      	ldr	r3, [pc, #8]	@ (8009f4c <USBD_DFU_ProductStrDescriptor+0x34>)
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	200005a4 	.word	0x200005a4
 8009f50:	0800a7b0 	.word	0x0800a7b0

08009f54 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	6039      	str	r1, [r7, #0]
 8009f5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	4904      	ldr	r1, [pc, #16]	@ (8009f74 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 8009f64:	4804      	ldr	r0, [pc, #16]	@ (8009f78 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 8009f66:	f7ff fea2 	bl	8009cae <USBD_GetString>
  return USBD_StrDesc;
 8009f6a:	4b02      	ldr	r3, [pc, #8]	@ (8009f74 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	200005a4 	.word	0x200005a4
 8009f78:	0800a7d0 	.word	0x0800a7d0

08009f7c <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	4603      	mov	r3, r0
 8009f84:	6039      	str	r1, [r7, #0]
 8009f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	221a      	movs	r2, #26
 8009f8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f8e:	f000 f843 	bl	800a018 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009f92:	4b02      	ldr	r3, [pc, #8]	@ (8009f9c <USBD_DFU_SerialStrDescriptor+0x20>)
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	200000a8 	.word	0x200000a8

08009fa0 <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	6039      	str	r1, [r7, #0]
 8009faa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d105      	bne.n	8009fbe <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	4907      	ldr	r1, [pc, #28]	@ (8009fd4 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8009fb6:	4808      	ldr	r0, [pc, #32]	@ (8009fd8 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8009fb8:	f7ff fe79 	bl	8009cae <USBD_GetString>
 8009fbc:	e004      	b.n	8009fc8 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	4904      	ldr	r1, [pc, #16]	@ (8009fd4 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8009fc2:	4805      	ldr	r0, [pc, #20]	@ (8009fd8 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8009fc4:	f7ff fe73 	bl	8009cae <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fc8:	4b02      	ldr	r3, [pc, #8]	@ (8009fd4 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	200005a4 	.word	0x200005a4
 8009fd8:	0800a7e4 	.word	0x0800a7e4

08009fdc <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	6039      	str	r1, [r7, #0]
 8009fe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fe8:	79fb      	ldrb	r3, [r7, #7]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d105      	bne.n	8009ffa <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	4907      	ldr	r1, [pc, #28]	@ (800a010 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8009ff2:	4808      	ldr	r0, [pc, #32]	@ (800a014 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8009ff4:	f7ff fe5b 	bl	8009cae <USBD_GetString>
 8009ff8:	e004      	b.n	800a004 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	4904      	ldr	r1, [pc, #16]	@ (800a010 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8009ffe:	4805      	ldr	r0, [pc, #20]	@ (800a014 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 800a000:	f7ff fe55 	bl	8009cae <USBD_GetString>
  }
  return USBD_StrDesc;
 800a004:	4b02      	ldr	r3, [pc, #8]	@ (800a010 <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	200005a4 	.word	0x200005a4
 800a014:	0800a7f0 	.word	0x0800a7f0

0800a018 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a01e:	4b0f      	ldr	r3, [pc, #60]	@ (800a05c <Get_SerialNum+0x44>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a024:	4b0e      	ldr	r3, [pc, #56]	@ (800a060 <Get_SerialNum+0x48>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a02a:	4b0e      	ldr	r3, [pc, #56]	@ (800a064 <Get_SerialNum+0x4c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4413      	add	r3, r2
 800a036:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d009      	beq.n	800a052 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a03e:	2208      	movs	r2, #8
 800a040:	4909      	ldr	r1, [pc, #36]	@ (800a068 <Get_SerialNum+0x50>)
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 f814 	bl	800a070 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a048:	2204      	movs	r2, #4
 800a04a:	4908      	ldr	r1, [pc, #32]	@ (800a06c <Get_SerialNum+0x54>)
 800a04c:	68b8      	ldr	r0, [r7, #8]
 800a04e:	f000 f80f 	bl	800a070 <IntToUnicode>
  }
}
 800a052:	bf00      	nop
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	1fff7590 	.word	0x1fff7590
 800a060:	1fff7594 	.word	0x1fff7594
 800a064:	1fff7598 	.word	0x1fff7598
 800a068:	200000aa 	.word	0x200000aa
 800a06c:	200000ba 	.word	0x200000ba

0800a070 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a070:	b480      	push	{r7}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	4613      	mov	r3, r2
 800a07c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a082:	2300      	movs	r3, #0
 800a084:	75fb      	strb	r3, [r7, #23]
 800a086:	e027      	b.n	800a0d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	0f1b      	lsrs	r3, r3, #28
 800a08c:	2b09      	cmp	r3, #9
 800a08e:	d80b      	bhi.n	800a0a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	0f1b      	lsrs	r3, r3, #28
 800a094:	b2da      	uxtb	r2, r3
 800a096:	7dfb      	ldrb	r3, [r7, #23]
 800a098:	005b      	lsls	r3, r3, #1
 800a09a:	4619      	mov	r1, r3
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	440b      	add	r3, r1
 800a0a0:	3230      	adds	r2, #48	@ 0x30
 800a0a2:	b2d2      	uxtb	r2, r2
 800a0a4:	701a      	strb	r2, [r3, #0]
 800a0a6:	e00a      	b.n	800a0be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	0f1b      	lsrs	r3, r3, #28
 800a0ac:	b2da      	uxtb	r2, r3
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	440b      	add	r3, r1
 800a0b8:	3237      	adds	r2, #55	@ 0x37
 800a0ba:	b2d2      	uxtb	r2, r2
 800a0bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	011b      	lsls	r3, r3, #4
 800a0c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	005b      	lsls	r3, r3, #1
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	75fb      	strb	r3, [r7, #23]
 800a0d8:	7dfa      	ldrb	r2, [r7, #23]
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d3d3      	bcc.n	800a088 <IntToUnicode+0x18>
  }
}
 800a0e0:	bf00      	nop
 800a0e2:	bf00      	nop
 800a0e4:	371c      	adds	r7, #28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800a0f2:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 800a0fe:	b480      	push	{r7}
 800a100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800a102:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800a104:	4618      	mov	r0, r3
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 800a10e:	b480      	push	{r7}
 800a110:	b083      	sub	sp, #12
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800a116:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800a130:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a132:	4618      	mov	r0, r3
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a13e:	b480      	push	{r7}
 800a140:	b085      	sub	sp, #20
 800a142:	af00      	add	r7, sp, #0
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 800a14a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800a15a:	b480      	push	{r7}
 800a15c:	b085      	sub	sp, #20
 800a15e:	af00      	add	r7, sp, #0
 800a160:	60f8      	str	r0, [r7, #12]
 800a162:	460b      	mov	r3, r1
 800a164:	607a      	str	r2, [r7, #4]
 800a166:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800a168:	7afb      	ldrb	r3, [r7, #11]
 800a16a:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800a16c:	bf00      	nop
  }
  return (USBD_OK);
 800a16e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a170:	4618      	mov	r0, r3
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b094      	sub	sp, #80	@ 0x50
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a184:	f107 030c 	add.w	r3, r7, #12
 800a188:	2244      	movs	r2, #68	@ 0x44
 800a18a:	2100      	movs	r1, #0
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 fac9 	bl	800a724 <memset>
  if(pcdHandle->Instance==USB)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a15      	ldr	r2, [pc, #84]	@ (800a1ec <HAL_PCD_MspInit+0x70>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d122      	bne.n	800a1e2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a19c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a1a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a1a6:	f107 030c 	add.w	r3, r7, #12
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fa ff72 	bl	8005094 <HAL_RCCEx_PeriphCLKConfig>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800a1b6:	f7f6 fa57 	bl	8000668 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a1f0 <HAL_PCD_MspInit+0x74>)
 800a1bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1be:	4a0c      	ldr	r2, [pc, #48]	@ (800a1f0 <HAL_PCD_MspInit+0x74>)
 800a1c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a1c4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a1f0 <HAL_PCD_MspInit+0x74>)
 800a1c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1ce:	60bb      	str	r3, [r7, #8]
 800a1d0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	2014      	movs	r0, #20
 800a1d8:	f7f6 fd21 	bl	8000c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a1dc:	2014      	movs	r0, #20
 800a1de:	f7f6 fd38 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a1e2:	bf00      	nop
 800a1e4:	3750      	adds	r7, #80	@ 0x50
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	40005c00 	.word	0x40005c00
 800a1f0:	40021000 	.word	0x40021000

0800a1f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a208:	4619      	mov	r1, r3
 800a20a:	4610      	mov	r0, r2
 800a20c:	f7fe fd9f 	bl	8008d4e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a22a:	78fa      	ldrb	r2, [r7, #3]
 800a22c:	6879      	ldr	r1, [r7, #4]
 800a22e:	4613      	mov	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	00db      	lsls	r3, r3, #3
 800a236:	440b      	add	r3, r1
 800a238:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	78fb      	ldrb	r3, [r7, #3]
 800a240:	4619      	mov	r1, r3
 800a242:	f7fe fdd9 	bl	8008df8 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a246:	bf00      	nop
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a260:	78fa      	ldrb	r2, [r7, #3]
 800a262:	6879      	ldr	r1, [r7, #4]
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	440b      	add	r3, r1
 800a26e:	3324      	adds	r3, #36	@ 0x24
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	78fb      	ldrb	r3, [r7, #3]
 800a274:	4619      	mov	r1, r3
 800a276:	f7fe fe22 	bl	8008ebe <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a27a:	bf00      	nop
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a290:	4618      	mov	r0, r3
 800a292:	f7fe ff36 	bl	8009102 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a296:	bf00      	nop
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	795b      	ldrb	r3, [r3, #5]
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d001      	beq.n	800a2b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a2b2:	f7f6 f9d9 	bl	8000668 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a2bc:	7bfa      	ldrb	r2, [r7, #15]
 800a2be:	4611      	mov	r1, r2
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fe fee0 	bl	8009086 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fe fe8c 	bl	8008fea <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a2d2:	bf00      	nop
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe fedb 	bl	80090a6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	7a5b      	ldrb	r3, [r3, #9]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d005      	beq.n	800a304 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2f8:	4b04      	ldr	r3, [pc, #16]	@ (800a30c <HAL_PCD_SuspendCallback+0x30>)
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	4a03      	ldr	r2, [pc, #12]	@ (800a30c <HAL_PCD_SuspendCallback+0x30>)
 800a2fe:	f043 0306 	orr.w	r3, r3, #6
 800a302:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a304:	bf00      	nop
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	e000ed00 	.word	0xe000ed00

0800a310 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	7a5b      	ldrb	r3, [r3, #9]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d007      	beq.n	800a330 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a320:	4b08      	ldr	r3, [pc, #32]	@ (800a344 <HAL_PCD_ResumeCallback+0x34>)
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	4a07      	ldr	r2, [pc, #28]	@ (800a344 <HAL_PCD_ResumeCallback+0x34>)
 800a326:	f023 0306 	bic.w	r3, r3, #6
 800a32a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a32c:	f000 f9c8 	bl	800a6c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe fecb 	bl	80090d2 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a33c:	bf00      	nop
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	e000ed00 	.word	0xe000ed00

0800a348 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a350:	4a1e      	ldr	r2, [pc, #120]	@ (800a3cc <USBD_LL_Init+0x84>)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a1c      	ldr	r2, [pc, #112]	@ (800a3cc <USBD_LL_Init+0x84>)
 800a35c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a360:	4b1a      	ldr	r3, [pc, #104]	@ (800a3cc <USBD_LL_Init+0x84>)
 800a362:	4a1b      	ldr	r2, [pc, #108]	@ (800a3d0 <USBD_LL_Init+0x88>)
 800a364:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a366:	4b19      	ldr	r3, [pc, #100]	@ (800a3cc <USBD_LL_Init+0x84>)
 800a368:	2208      	movs	r2, #8
 800a36a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a36c:	4b17      	ldr	r3, [pc, #92]	@ (800a3cc <USBD_LL_Init+0x84>)
 800a36e:	2202      	movs	r2, #2
 800a370:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a372:	4b16      	ldr	r3, [pc, #88]	@ (800a3cc <USBD_LL_Init+0x84>)
 800a374:	2202      	movs	r2, #2
 800a376:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a378:	4b14      	ldr	r3, [pc, #80]	@ (800a3cc <USBD_LL_Init+0x84>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a37e:	4b13      	ldr	r3, [pc, #76]	@ (800a3cc <USBD_LL_Init+0x84>)
 800a380:	2200      	movs	r2, #0
 800a382:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a384:	4b11      	ldr	r3, [pc, #68]	@ (800a3cc <USBD_LL_Init+0x84>)
 800a386:	2200      	movs	r2, #0
 800a388:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a38a:	4b10      	ldr	r3, [pc, #64]	@ (800a3cc <USBD_LL_Init+0x84>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a390:	480e      	ldr	r0, [pc, #56]	@ (800a3cc <USBD_LL_Init+0x84>)
 800a392:	f7f8 fc16 	bl	8002bc2 <HAL_PCD_Init>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a39c:	f7f6 f964 	bl	8000668 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a3a6:	2318      	movs	r3, #24
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	f7fa f85f 	bl	800446e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a3b6:	2358      	movs	r3, #88	@ 0x58
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2180      	movs	r1, #128	@ 0x80
 800a3bc:	f7fa f857 	bl	800446e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	200007a4 	.word	0x200007a4
 800a3d0:	40005c00 	.word	0x40005c00

0800a3d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7f8 fcb7 	bl	8002d5e <HAL_PCD_Start>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 f968 	bl	800a6cc <USBD_Get_USB_Status>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a400:	7bbb      	ldrb	r3, [r7, #14]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b084      	sub	sp, #16
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a420:	4618      	mov	r0, r3
 800a422:	f7f8 fcbe 	bl	8002da2 <HAL_PCD_Stop>
 800a426:	4603      	mov	r3, r0
 800a428:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 f94d 	bl	800a6cc <USBD_Get_USB_Status>
 800a432:	4603      	mov	r3, r0
 800a434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a436:	7bbb      	ldrb	r3, [r7, #14]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	4608      	mov	r0, r1
 800a44a:	4611      	mov	r1, r2
 800a44c:	461a      	mov	r2, r3
 800a44e:	4603      	mov	r3, r0
 800a450:	70fb      	strb	r3, [r7, #3]
 800a452:	460b      	mov	r3, r1
 800a454:	70bb      	strb	r3, [r7, #2]
 800a456:	4613      	mov	r3, r2
 800a458:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a468:	78bb      	ldrb	r3, [r7, #2]
 800a46a:	883a      	ldrh	r2, [r7, #0]
 800a46c:	78f9      	ldrb	r1, [r7, #3]
 800a46e:	f7f8 fe05 	bl	800307c <HAL_PCD_EP_Open>
 800a472:	4603      	mov	r3, r0
 800a474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 f927 	bl	800a6cc <USBD_Get_USB_Status>
 800a47e:	4603      	mov	r3, r0
 800a480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a482:	7bbb      	ldrb	r3, [r7, #14]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4a6:	78fa      	ldrb	r2, [r7, #3]
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7f8 fead 	bl	800320a <HAL_PCD_EP_SetStall>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 f908 	bl	800a6cc <USBD_Get_USB_Status>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4e4:	78fa      	ldrb	r2, [r7, #3]
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f8 fee0 	bl	80032ae <HAL_PCD_EP_ClrStall>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 f8e9 	bl	800a6cc <USBD_Get_USB_Status>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	460b      	mov	r3, r1
 800a512:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a51a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a51c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a520:	2b00      	cmp	r3, #0
 800a522:	da0b      	bge.n	800a53c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a524:	78fb      	ldrb	r3, [r7, #3]
 800a526:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a52a:	68f9      	ldr	r1, [r7, #12]
 800a52c:	4613      	mov	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	440b      	add	r3, r1
 800a536:	3312      	adds	r3, #18
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	e00b      	b.n	800a554 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a53c:	78fb      	ldrb	r3, [r7, #3]
 800a53e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a542:	68f9      	ldr	r1, [r7, #12]
 800a544:	4613      	mov	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	440b      	add	r3, r1
 800a54e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a552:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a57a:	78fa      	ldrb	r2, [r7, #3]
 800a57c:	4611      	mov	r1, r2
 800a57e:	4618      	mov	r0, r3
 800a580:	f7f8 fd58 	bl	8003034 <HAL_PCD_SetAddress>
 800a584:	4603      	mov	r3, r0
 800a586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 f89e 	bl	800a6cc <USBD_Get_USB_Status>
 800a590:	4603      	mov	r3, r0
 800a592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a594:	7bbb      	ldrb	r3, [r7, #14]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b086      	sub	sp, #24
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	60f8      	str	r0, [r7, #12]
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a5bc:	7af9      	ldrb	r1, [r7, #11]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	f7f8 fdeb 	bl	800319c <HAL_PCD_EP_Transmit>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ca:	7dfb      	ldrb	r3, [r7, #23]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 f87d 	bl	800a6cc <USBD_Get_USB_Status>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	607a      	str	r2, [r7, #4]
 800a5ea:	603b      	str	r3, [r7, #0]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a5fe:	7af9      	ldrb	r1, [r7, #11]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	f7f8 fd99 	bl	800313a <HAL_PCD_EP_Receive>
 800a608:	4603      	mov	r3, r0
 800a60a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a60c:	7dfb      	ldrb	r3, [r7, #23]
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 f85c 	bl	800a6cc <USBD_Get_USB_Status>
 800a614:	4603      	mov	r3, r0
 800a616:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a618:	7dbb      	ldrb	r3, [r7, #22]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3718      	adds	r7, #24
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a630:	78fb      	ldrb	r3, [r7, #3]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <HAL_PCDEx_LPM_Callback+0x18>
 800a636:	2b01      	cmp	r3, #1
 800a638:	d013      	beq.n	800a662 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a63a:	e023      	b.n	800a684 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	7a5b      	ldrb	r3, [r3, #9]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d007      	beq.n	800a654 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a644:	f000 f83c 	bl	800a6c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a648:	4b10      	ldr	r3, [pc, #64]	@ (800a68c <HAL_PCDEx_LPM_Callback+0x68>)
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	4a0f      	ldr	r2, [pc, #60]	@ (800a68c <HAL_PCDEx_LPM_Callback+0x68>)
 800a64e:	f023 0306 	bic.w	r3, r3, #6
 800a652:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fe fd39 	bl	80090d2 <USBD_LL_Resume>
    break;
 800a660:	e010      	b.n	800a684 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe fd1c 	bl	80090a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	7a5b      	ldrb	r3, [r3, #9]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d005      	beq.n	800a682 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a676:	4b05      	ldr	r3, [pc, #20]	@ (800a68c <HAL_PCDEx_LPM_Callback+0x68>)
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	4a04      	ldr	r2, [pc, #16]	@ (800a68c <HAL_PCDEx_LPM_Callback+0x68>)
 800a67c:	f043 0306 	orr.w	r3, r3, #6
 800a680:	6113      	str	r3, [r2, #16]
    break;
 800a682:	bf00      	nop
}
 800a684:	bf00      	nop
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	e000ed00 	.word	0xe000ed00

0800a690 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a698:	4b03      	ldr	r3, [pc, #12]	@ (800a6a8 <USBD_static_malloc+0x18>)
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	20000a80 	.word	0x20000a80

0800a6ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]

}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a6c4:	f7f5 fe78 	bl	80003b8 <SystemClock_Config>
}
 800a6c8:	bf00      	nop
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d817      	bhi.n	800a710 <USBD_Get_USB_Status+0x44>
 800a6e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e8 <USBD_Get_USB_Status+0x1c>)
 800a6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e6:	bf00      	nop
 800a6e8:	0800a6f9 	.word	0x0800a6f9
 800a6ec:	0800a6ff 	.word	0x0800a6ff
 800a6f0:	0800a705 	.word	0x0800a705
 800a6f4:	0800a70b 	.word	0x0800a70b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a6fc:	e00b      	b.n	800a716 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6fe:	2303      	movs	r3, #3
 800a700:	73fb      	strb	r3, [r7, #15]
    break;
 800a702:	e008      	b.n	800a716 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a704:	2301      	movs	r3, #1
 800a706:	73fb      	strb	r3, [r7, #15]
    break;
 800a708:	e005      	b.n	800a716 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a70a:	2303      	movs	r3, #3
 800a70c:	73fb      	strb	r3, [r7, #15]
    break;
 800a70e:	e002      	b.n	800a716 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a710:	2303      	movs	r3, #3
 800a712:	73fb      	strb	r3, [r7, #15]
    break;
 800a714:	bf00      	nop
  }
  return usb_status;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <memset>:
 800a724:	4402      	add	r2, r0
 800a726:	4603      	mov	r3, r0
 800a728:	4293      	cmp	r3, r2
 800a72a:	d100      	bne.n	800a72e <memset+0xa>
 800a72c:	4770      	bx	lr
 800a72e:	f803 1b01 	strb.w	r1, [r3], #1
 800a732:	e7f9      	b.n	800a728 <memset+0x4>

0800a734 <__libc_init_array>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	4d0d      	ldr	r5, [pc, #52]	@ (800a76c <__libc_init_array+0x38>)
 800a738:	4c0d      	ldr	r4, [pc, #52]	@ (800a770 <__libc_init_array+0x3c>)
 800a73a:	1b64      	subs	r4, r4, r5
 800a73c:	10a4      	asrs	r4, r4, #2
 800a73e:	2600      	movs	r6, #0
 800a740:	42a6      	cmp	r6, r4
 800a742:	d109      	bne.n	800a758 <__libc_init_array+0x24>
 800a744:	4d0b      	ldr	r5, [pc, #44]	@ (800a774 <__libc_init_array+0x40>)
 800a746:	4c0c      	ldr	r4, [pc, #48]	@ (800a778 <__libc_init_array+0x44>)
 800a748:	f000 f826 	bl	800a798 <_init>
 800a74c:	1b64      	subs	r4, r4, r5
 800a74e:	10a4      	asrs	r4, r4, #2
 800a750:	2600      	movs	r6, #0
 800a752:	42a6      	cmp	r6, r4
 800a754:	d105      	bne.n	800a762 <__libc_init_array+0x2e>
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	f855 3b04 	ldr.w	r3, [r5], #4
 800a75c:	4798      	blx	r3
 800a75e:	3601      	adds	r6, #1
 800a760:	e7ee      	b.n	800a740 <__libc_init_array+0xc>
 800a762:	f855 3b04 	ldr.w	r3, [r5], #4
 800a766:	4798      	blx	r3
 800a768:	3601      	adds	r6, #1
 800a76a:	e7f2      	b.n	800a752 <__libc_init_array+0x1e>
 800a76c:	0800a870 	.word	0x0800a870
 800a770:	0800a870 	.word	0x0800a870
 800a774:	0800a870 	.word	0x0800a870
 800a778:	0800a874 	.word	0x0800a874

0800a77c <memcpy>:
 800a77c:	440a      	add	r2, r1
 800a77e:	4291      	cmp	r1, r2
 800a780:	f100 33ff 	add.w	r3, r0, #4294967295
 800a784:	d100      	bne.n	800a788 <memcpy+0xc>
 800a786:	4770      	bx	lr
 800a788:	b510      	push	{r4, lr}
 800a78a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a78e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a792:	4291      	cmp	r1, r2
 800a794:	d1f9      	bne.n	800a78a <memcpy+0xe>
 800a796:	bd10      	pop	{r4, pc}

0800a798 <_init>:
 800a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79a:	bf00      	nop
 800a79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79e:	bc08      	pop	{r3}
 800a7a0:	469e      	mov	lr, r3
 800a7a2:	4770      	bx	lr

0800a7a4 <_fini>:
 800a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a6:	bf00      	nop
 800a7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7aa:	bc08      	pop	{r3}
 800a7ac:	469e      	mov	lr, r3
 800a7ae:	4770      	bx	lr
