
Torpedo Controller - Juan Garnica - 8-5-2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a528  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800a700  0800a700  0000b700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7c0  0800a7c0  0000c0e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a7c0  0800a7c0  0000c0e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a7c0  0800a7c0  0000c0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7c0  0800a7c0  0000b7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7c4  0800a7c4  0000b7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0800a7c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d90  200000e0  0800a8a8  0000c0e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e70  0800a8a8  0000ce70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019215  00000000  00000000  0000c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d92  00000000  00000000  00025325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  000290b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b7  00000000  00000000  0002a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002102f  00000000  00000000  0002b987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c80f  00000000  00000000  0004c9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7cdf  00000000  00000000  000691c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130ea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006058  00000000  00000000  00130ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00136f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a6e8 	.word	0x0800a6e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e4 	.word	0x200000e4
 8000214:	0800a6e8 	.word	0x0800a6e8

08000218 <i2c_listen>:
extern unsigned char direction;
extern float tim1PWM;
extern float pulseWidth;

static inline void i2c_listen(I2C_HandleTypeDef *hi2c)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(hi2c);
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f001 f8f5 	bl	8001410 <HAL_I2C_EnableListen_IT>
}
 8000226:	bf00      	nop
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <HAL_I2C_AddrCallback>:
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, tim1PWM);
}

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	70fb      	strb	r3, [r7, #3]
 800023c:	4613      	mov	r3, r2
 800023e:	803b      	strh	r3, [r7, #0]
    (void)AddrMatchCode;

    if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8000240:	78fb      	ldrb	r3, [r7, #3]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d107      	bne.n	8000256 <HAL_I2C_AddrCallback+0x26>
        // Expect exactly 2 bytes from master
        HAL_I2C_Slave_Seq_Receive_IT(hi2c, i2c_rx, 2, I2C_LAST_FRAME);
 8000246:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800024a:	2202      	movs	r2, #2
 800024c:	4909      	ldr	r1, [pc, #36]	@ (8000274 <HAL_I2C_AddrCallback+0x44>)
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f001 f82c 	bl	80012ac <HAL_I2C_Slave_Seq_Receive_IT>
    } else {
        // Nothing to send back; just re-listen
        uint8_t dummy_tx[1] = {0};
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, dummy_tx, 1, I2C_LAST_FRAME);
    }
}
 8000254:	e009      	b.n	800026a <HAL_I2C_AddrCallback+0x3a>
        uint8_t dummy_tx[1] = {0};
 8000256:	2300      	movs	r3, #0
 8000258:	733b      	strb	r3, [r7, #12]
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, dummy_tx, 1, I2C_LAST_FRAME);
 800025a:	f107 010c 	add.w	r1, r7, #12
 800025e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000262:	2201      	movs	r2, #1
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	f000 ff6f 	bl	8001148 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	200000fc 	.word	0x200000fc

08000278 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
    have_new_cmd = 1;
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	200000fe 	.word	0x200000fe

08000298 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
    i2c_listen(hi2c);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f7ff ffb9 	bl	8000218 <i2c_listen>
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	b082      	sub	sp, #8
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
    i2c_listen(hi2c);
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f7ff ffae 	bl	8000218 <i2c_listen>
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
    (void)HAL_I2C_GetError(hi2c);
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f001 f96c 	bl	80015aa <HAL_I2C_GetError>
    i2c_listen(hi2c);
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f7ff ffa0 	bl	8000218 <i2c_listen>
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fae3 	bl	80008ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f81c 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 f928 	bl	8000540 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002f0:	f000 f8a4 	bl	800043c <MX_TIM2_Init>
  MX_I2C2_Init();
 80002f4:	f000 f862 	bl	80003bc <MX_I2C2_Init>
  MX_USB_Device_Init();
 80002f8:	f009 fd70 	bl	8009ddc <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002fc:	2100      	movs	r1, #0
 80002fe:	4807      	ldr	r0, [pc, #28]	@ (800031c <main+0x3c>)
 8000300:	f005 f926 	bl	8005550 <HAL_TIM_PWM_Start>

	//uint32_t position = 0;

	if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK) //Enters slave to listen for master requests
 8000304:	4806      	ldr	r0, [pc, #24]	@ (8000320 <main+0x40>)
 8000306:	f001 f883 	bl	8001410 <HAL_I2C_EnableListen_IT>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d002      	beq.n	8000316 <main+0x36>
	{
		Error_Handler();
 8000310:	f000 f960 	bl	80005d4 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	e7fd      	b.n	8000316 <main+0x36>
 800031a:	bf00      	nop
 800031c:	20000154 	.word	0x20000154
 8000320:	20000100 	.word	0x20000100

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b094      	sub	sp, #80	@ 0x50
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	2238      	movs	r2, #56	@ 0x38
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f00a f9ac 	bl	800a690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000346:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800034a:	f004 f8b3 	bl	80044b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800034e:	2321      	movs	r3, #33	@ 0x21
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000352:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000356:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035c:	2302      	movs	r3, #2
 800035e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000360:	2303      	movs	r3, #3
 8000362:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000364:	2302      	movs	r3, #2
 8000366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000368:	230c      	movs	r3, #12
 800036a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800036c:	2302      	movs	r3, #2
 800036e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000370:	2304      	movs	r3, #4
 8000372:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000374:	2302      	movs	r3, #2
 8000376:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0318 	add.w	r3, r7, #24
 800037c:	4618      	mov	r0, r3
 800037e:	f004 f94d 	bl	800461c <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000388:	f000 f924 	bl	80005d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000390:	2303      	movs	r3, #3
 8000392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2101      	movs	r1, #1
 80003a4:	4618      	mov	r0, r3
 80003a6:	f004 fc4b 	bl	8004c40 <HAL_RCC_ClockConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003b0:	f000 f910 	bl	80005d4 <Error_Handler>
  }
}
 80003b4:	bf00      	nop
 80003b6:	3750      	adds	r7, #80	@ 0x50
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000430 <MX_I2C2_Init+0x74>)
 80003c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000434 <MX_I2C2_Init+0x78>)
 80003c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 80003c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000430 <MX_I2C2_Init+0x74>)
 80003c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000438 <MX_I2C2_Init+0x7c>)
 80003ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = (0x4f<<1);
 80003cc:	4b18      	ldr	r3, [pc, #96]	@ (8000430 <MX_I2C2_Init+0x74>)
 80003ce:	229e      	movs	r2, #158	@ 0x9e
 80003d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d2:	4b17      	ldr	r3, [pc, #92]	@ (8000430 <MX_I2C2_Init+0x74>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d8:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <MX_I2C2_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003de:	4b14      	ldr	r3, [pc, #80]	@ (8000430 <MX_I2C2_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e4:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <MX_I2C2_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ea:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <MX_I2C2_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <MX_I2C2_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003f6:	480e      	ldr	r0, [pc, #56]	@ (8000430 <MX_I2C2_Init+0x74>)
 80003f8:	f000 fe0a 	bl	8001010 <HAL_I2C_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000402:	f000 f8e7 	bl	80005d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000406:	2100      	movs	r1, #0
 8000408:	4809      	ldr	r0, [pc, #36]	@ (8000430 <MX_I2C2_Init+0x74>)
 800040a:	f002 faf9 	bl	8002a00 <HAL_I2CEx_ConfigAnalogFilter>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000414:	f000 f8de 	bl	80005d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000418:	2100      	movs	r1, #0
 800041a:	4805      	ldr	r0, [pc, #20]	@ (8000430 <MX_I2C2_Init+0x74>)
 800041c:	f002 fb3b 	bl	8002a96 <HAL_I2CEx_ConfigDigitalFilter>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000426:	f000 f8d5 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000100 	.word	0x20000100
 8000434:	40005800 	.word	0x40005800
 8000438:	10805d88 	.word	0x10805d88

0800043c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b08e      	sub	sp, #56	@ 0x38
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000450:	f107 031c 	add.w	r3, r7, #28
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800045c:	463b      	mov	r3, r7
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]
 8000468:	611a      	str	r2, [r3, #16]
 800046a:	615a      	str	r2, [r3, #20]
 800046c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800046e:	4b33      	ldr	r3, [pc, #204]	@ (800053c <MX_TIM2_Init+0x100>)
 8000470:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000474:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8000476:	4b31      	ldr	r3, [pc, #196]	@ (800053c <MX_TIM2_Init+0x100>)
 8000478:	222f      	movs	r2, #47	@ 0x2f
 800047a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047c:	4b2f      	ldr	r3, [pc, #188]	@ (800053c <MX_TIM2_Init+0x100>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000482:	4b2e      	ldr	r3, [pc, #184]	@ (800053c <MX_TIM2_Init+0x100>)
 8000484:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000488:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048a:	4b2c      	ldr	r3, [pc, #176]	@ (800053c <MX_TIM2_Init+0x100>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b2a      	ldr	r3, [pc, #168]	@ (800053c <MX_TIM2_Init+0x100>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000496:	4829      	ldr	r0, [pc, #164]	@ (800053c <MX_TIM2_Init+0x100>)
 8000498:	f004 ffa2 	bl	80053e0 <HAL_TIM_Base_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80004a2:	f000 f897 	bl	80005d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004b0:	4619      	mov	r1, r3
 80004b2:	4822      	ldr	r0, [pc, #136]	@ (800053c <MX_TIM2_Init+0x100>)
 80004b4:	f005 fa60 	bl	8005978 <HAL_TIM_ConfigClockSource>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80004be:	f000 f889 	bl	80005d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004c2:	481e      	ldr	r0, [pc, #120]	@ (800053c <MX_TIM2_Init+0x100>)
 80004c4:	f004 ffe3 	bl	800548e <HAL_TIM_PWM_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80004ce:	f000 f881 	bl	80005d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	4619      	mov	r1, r3
 80004e0:	4816      	ldr	r0, [pc, #88]	@ (800053c <MX_TIM2_Init+0x100>)
 80004e2:	f005 ff97 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80004ec:	f000 f872 	bl	80005d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f0:	2360      	movs	r3, #96	@ 0x60
 80004f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000500:	463b      	mov	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	4619      	mov	r1, r3
 8000506:	480d      	ldr	r0, [pc, #52]	@ (800053c <MX_TIM2_Init+0x100>)
 8000508:	f005 f922 	bl	8005750 <HAL_TIM_PWM_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000512:	f000 f85f 	bl	80005d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	2204      	movs	r2, #4
 800051a:	4619      	mov	r1, r3
 800051c:	4807      	ldr	r0, [pc, #28]	@ (800053c <MX_TIM2_Init+0x100>)
 800051e:	f005 f917 	bl	8005750 <HAL_TIM_PWM_ConfigChannel>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000528:	f000 f854 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800052c:	4803      	ldr	r0, [pc, #12]	@ (800053c <MX_TIM2_Init+0x100>)
 800052e:	f000 f901 	bl	8000734 <HAL_TIM_MspPostInit>

}
 8000532:	bf00      	nop
 8000534:	3738      	adds	r7, #56	@ 0x38
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000154 	.word	0x20000154

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000556:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <MX_GPIO_Init+0x90>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	4a1d      	ldr	r2, [pc, #116]	@ (80005d0 <MX_GPIO_Init+0x90>)
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <MX_GPIO_Init+0x90>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	f003 0320 	and.w	r3, r3, #32
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <MX_GPIO_Init+0x90>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <MX_GPIO_Init+0x90>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_GPIO_Init+0x90>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <MX_GPIO_Init+0x90>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	4a11      	ldr	r2, [pc, #68]	@ (80005d0 <MX_GPIO_Init+0x90>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <MX_GPIO_Init+0x90>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2101      	movs	r1, #1
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a6:	f000 fd1b 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005aa:	2301      	movs	r3, #1
 80005ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c4:	f000 fb8a 	bl	8000cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <Error_Handler+0x8>

080005e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_MspInit+0x44>)
 80005e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <HAL_MspInit+0x44>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <HAL_MspInit+0x44>)
 80005f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <HAL_MspInit+0x44>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000602:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <HAL_MspInit+0x44>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000608:	6593      	str	r3, [r2, #88]	@ 0x58
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <HAL_MspInit+0x44>)
 800060c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800060e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000616:	f003 fff1 	bl	80045fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09a      	sub	sp, #104	@ 0x68
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	2244      	movs	r2, #68	@ 0x44
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f00a f821 	bl	800a690 <memset>
  if(hi2c->Instance==I2C2)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a27      	ldr	r2, [pc, #156]	@ (80006f0 <HAL_I2C_MspInit+0xc8>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d147      	bne.n	80006e8 <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800065c:	2300      	movs	r3, #0
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4618      	mov	r0, r3
 8000666:	f004 fccb 	bl	8005000 <HAL_RCCEx_PeriphCLKConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000670:	f7ff ffb0 	bl	80005d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <HAL_I2C_MspInit+0xcc>)
 8000676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000678:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <HAL_I2C_MspInit+0xcc>)
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <HAL_I2C_MspInit+0xcc>)
 8000682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800068c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000690:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000692:	2312      	movs	r3, #18
 8000694:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800069e:	2304      	movs	r3, #4
 80006a0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ac:	f000 fb16 	bl	8000cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006b0:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <HAL_I2C_MspInit+0xcc>)
 80006b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b4:	4a0f      	ldr	r2, [pc, #60]	@ (80006f4 <HAL_I2C_MspInit+0xcc>)
 80006b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <HAL_I2C_MspInit+0xcc>)
 80006be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2021      	movs	r0, #33	@ 0x21
 80006ce:	f000 fa5c 	bl	8000b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80006d2:	2021      	movs	r0, #33	@ 0x21
 80006d4:	f000 fa73 	bl	8000bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2022      	movs	r0, #34	@ 0x22
 80006de:	f000 fa54 	bl	8000b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80006e2:	2022      	movs	r0, #34	@ 0x22
 80006e4:	f000 fa6b 	bl	8000bbe <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80006e8:	bf00      	nop
 80006ea:	3768      	adds	r7, #104	@ 0x68
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40005800 	.word	0x40005800
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000708:	d10b      	bne.n	8000722 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <HAL_TIM_Base_MspInit+0x38>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070e:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <HAL_TIM_Base_MspInit+0x38>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6593      	str	r3, [r2, #88]	@ 0x58
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <HAL_TIM_Base_MspInit+0x38>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000754:	d11c      	bne.n	8000790 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <HAL_TIM_MspPostInit+0x64>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	4a0f      	ldr	r2, [pc, #60]	@ (8000798 <HAL_TIM_MspPostInit+0x64>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000762:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <HAL_TIM_MspPostInit+0x64>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800076e:	2322      	movs	r3, #34	@ 0x22
 8000770:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800077e:	2301      	movs	r3, #1
 8000780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4619      	mov	r1, r3
 8000788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078c:	f000 faa6 	bl	8000cdc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <NMI_Handler+0x4>

080007a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <MemManage_Handler+0x4>

080007b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f2:	f000 f8af 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000800:	4802      	ldr	r0, [pc, #8]	@ (800080c <USB_LP_IRQHandler+0x10>)
 8000802:	f002 faa6 	bl	8002d52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000774 	.word	0x20000774

08000810 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000814:	4802      	ldr	r0, [pc, #8]	@ (8000820 <I2C2_EV_IRQHandler+0x10>)
 8000816:	f000 fe1b 	bl	8001450 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000100 	.word	0x20000100

08000824 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000828:	4802      	ldr	r0, [pc, #8]	@ (8000834 <I2C2_ER_IRQHandler+0x10>)
 800082a:	f000 fe2b 	bl	8001484 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000100 	.word	0x20000100

08000838 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <SystemInit+0x20>)
 800083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <SystemInit+0x20>)
 8000844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800085c:	480d      	ldr	r0, [pc, #52]	@ (8000894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000860:	f7ff ffea 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	@ (8000898 <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	@ (800089c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	@ (80008a8 <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f009 ff09 	bl	800a6a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088e:	f7ff fd27 	bl	80002e0 <main>

08000892 <LoopForever>:

LoopForever:
    b LoopForever
 8000892:	e7fe      	b.n	8000892 <LoopForever>
  ldr   r0, =_estack
 8000894:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80008a0:	0800a7c8 	.word	0x0800a7c8
  ldr r2, =_sbss
 80008a4:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80008a8:	20000e70 	.word	0x20000e70

080008ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC1_2_IRQHandler>

080008ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f95b 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f80e 	bl	80008e0 <HAL_InitTick>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d002      	beq.n	80008d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	e001      	b.n	80008d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008d0:	f7ff fe86 	bl	80005e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d4:	79fb      	ldrb	r3, [r7, #7]

}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <HAL_InitTick+0x68>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d022      	beq.n	800093a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008f4:	4b15      	ldr	r3, [pc, #84]	@ (800094c <HAL_InitTick+0x6c>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <HAL_InitTick+0x68>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000900:	fbb1 f3f3 	udiv	r3, r1, r3
 8000904:	fbb2 f3f3 	udiv	r3, r2, r3
 8000908:	4618      	mov	r0, r3
 800090a:	f000 f966 	bl	8000bda <HAL_SYSTICK_Config>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10f      	bne.n	8000934 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b0f      	cmp	r3, #15
 8000918:	d809      	bhi.n	800092e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091a:	2200      	movs	r2, #0
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	f04f 30ff 	mov.w	r0, #4294967295
 8000922:	f000 f932 	bl	8000b8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_InitTick+0x70>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	e007      	b.n	800093e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	e004      	b.n	800093e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	e001      	b.n	800093e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800093e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000008 	.word	0x20000008
 800094c:	20000000 	.word	0x20000000
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_IncTick+0x1c>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <HAL_IncTick+0x20>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4413      	add	r3, r2
 8000962:	4a03      	ldr	r2, [pc, #12]	@ (8000970 <HAL_IncTick+0x1c>)
 8000964:	6013      	str	r3, [r2, #0]
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	200001a0 	.word	0x200001a0
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <HAL_GetTick+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	200001a0 	.word	0x200001a0

08000990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff ffee 	bl	8000978 <HAL_GetTick>
 800099c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a8:	d004      	beq.n	80009b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <HAL_Delay+0x40>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b4:	bf00      	nop
 80009b6:	f7ff ffdf 	bl	8000978 <HAL_GetTick>
 80009ba:	4602      	mov	r2, r0
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d8f7      	bhi.n	80009b6 <HAL_Delay+0x26>
  {
  }
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000008 	.word	0x20000008

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4907      	ldr	r1, [pc, #28]	@ (8000a70 <__NVIC_EnableIRQ+0x38>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	@ (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	@ (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	@ 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	@ 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff8e 	bl	8000a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff29 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff40 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ff90 	bl	8000ac8 <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5f 	bl	8000a74 <__NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff33 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffa4 	bl	8000b30 <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d00d      	beq.n	8000c26 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2201      	movs	r2, #1
 8000c14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e047      	b.n	8000cb6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 020e 	bic.w	r2, r2, #14
 8000c34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0201 	bic.w	r2, r2, #1
 8000c44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000c54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	f003 021f 	and.w	r2, r3, #31
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	2101      	movs	r1, #1
 8000c64:	fa01 f202 	lsl.w	r2, r1, r2
 8000c68:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000c72:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00c      	beq.n	8000c96 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000c8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000c94:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	4798      	blx	r3
    }
  }
  return status;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cce:	b2db      	uxtb	r3, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b087      	sub	sp, #28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cea:	e15a      	b.n	8000fa2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 814c 	beq.w	8000f9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d005      	beq.n	8000d1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d130      	bne.n	8000d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d52:	2201      	movs	r2, #1
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	f003 0201 	and.w	r2, r3, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d017      	beq.n	8000dba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d123      	bne.n	8000e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	08da      	lsrs	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3208      	adds	r2, #8
 8000dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	220f      	movs	r2, #15
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	691a      	ldr	r2, [r3, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	6939      	ldr	r1, [r7, #16]
 8000e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0203 	and.w	r2, r3, #3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 80a6 	beq.w	8000f9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc0 <HAL_GPIO_Init+0x2e4>)
 8000e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e54:	4a5a      	ldr	r2, [pc, #360]	@ (8000fc0 <HAL_GPIO_Init+0x2e4>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e5c:	4b58      	ldr	r3, [pc, #352]	@ (8000fc0 <HAL_GPIO_Init+0x2e4>)
 8000e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e68:	4a56      	ldr	r2, [pc, #344]	@ (8000fc4 <HAL_GPIO_Init+0x2e8>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	220f      	movs	r2, #15
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e92:	d01f      	beq.n	8000ed4 <HAL_GPIO_Init+0x1f8>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc8 <HAL_GPIO_Init+0x2ec>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d019      	beq.n	8000ed0 <HAL_GPIO_Init+0x1f4>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a4b      	ldr	r2, [pc, #300]	@ (8000fcc <HAL_GPIO_Init+0x2f0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d013      	beq.n	8000ecc <HAL_GPIO_Init+0x1f0>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a4a      	ldr	r2, [pc, #296]	@ (8000fd0 <HAL_GPIO_Init+0x2f4>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d00d      	beq.n	8000ec8 <HAL_GPIO_Init+0x1ec>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a49      	ldr	r2, [pc, #292]	@ (8000fd4 <HAL_GPIO_Init+0x2f8>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d007      	beq.n	8000ec4 <HAL_GPIO_Init+0x1e8>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a48      	ldr	r2, [pc, #288]	@ (8000fd8 <HAL_GPIO_Init+0x2fc>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d101      	bne.n	8000ec0 <HAL_GPIO_Init+0x1e4>
 8000ebc:	2305      	movs	r3, #5
 8000ebe:	e00a      	b.n	8000ed6 <HAL_GPIO_Init+0x1fa>
 8000ec0:	2306      	movs	r3, #6
 8000ec2:	e008      	b.n	8000ed6 <HAL_GPIO_Init+0x1fa>
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	e006      	b.n	8000ed6 <HAL_GPIO_Init+0x1fa>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e004      	b.n	8000ed6 <HAL_GPIO_Init+0x1fa>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e002      	b.n	8000ed6 <HAL_GPIO_Init+0x1fa>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <HAL_GPIO_Init+0x1fa>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	f002 0203 	and.w	r2, r2, #3
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	4093      	lsls	r3, r2
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee6:	4937      	ldr	r1, [pc, #220]	@ (8000fc4 <HAL_GPIO_Init+0x2e8>)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ef4:	4b39      	ldr	r3, [pc, #228]	@ (8000fdc <HAL_GPIO_Init+0x300>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f18:	4a30      	ldr	r2, [pc, #192]	@ (8000fdc <HAL_GPIO_Init+0x300>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fdc <HAL_GPIO_Init+0x300>)
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f42:	4a26      	ldr	r2, [pc, #152]	@ (8000fdc <HAL_GPIO_Init+0x300>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f48:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <HAL_GPIO_Init+0x300>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fdc <HAL_GPIO_Init+0x300>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <HAL_GPIO_Init+0x300>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f96:	4a11      	ldr	r2, [pc, #68]	@ (8000fdc <HAL_GPIO_Init+0x300>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f47f ae9d 	bne.w	8000cec <HAL_GPIO_Init+0x10>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	48000800 	.word	0x48000800
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48001000 	.word	0x48001000
 8000fd8:	48001400 	.word	0x48001400
 8000fdc:	40010400 	.word	0x40010400

08000fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e08d      	b.n	800113e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d106      	bne.n	800103c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff faf6 	bl	8000628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2224      	movs	r2, #36	@ 0x24
 8001040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0201 	bic.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001060:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001070:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d107      	bne.n	800108a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	e006      	b.n	8001098 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001096:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d108      	bne.n	80010b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	e007      	b.n	80010c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691a      	ldr	r2, [r3, #16]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69d9      	ldr	r1, [r3, #28]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1a      	ldr	r2, [r3, #32]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0201 	orr.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2220      	movs	r2, #32
 800112a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001164:	2b28      	cmp	r3, #40	@ 0x28
 8001166:	f040 8098 	bne.w	800129a <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d105      	bne.n	8001182 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800117c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e08c      	b.n	800129c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001182:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f001 fbdc 	bl	8002944 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8001196:	2302      	movs	r3, #2
 8001198:	e080      	b.n	800129c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80011ac:	d12a      	bne.n	8001204 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80011ae:	2102      	movs	r1, #2
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f001 fbc7 	bl	8002944 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80011c4:	d11e      	bne.n	8001204 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011d4:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d012      	beq.n	8001204 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011e2:	4a30      	ldr	r2, [pc, #192]	@ (80012a4 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80011e4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fd01 	bl	8000bf2 <HAL_DMA_Abort_IT>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001200:	4610      	mov	r0, r2
 8001202:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2229      	movs	r2, #41	@ 0x29
 8001208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2220      	movs	r2, #32
 8001210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001228:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800123a:	b29a      	uxth	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4a17      	ldr	r2, [pc, #92]	@ (80012a8 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 800124a:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b08      	cmp	r3, #8
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	0c1b      	lsrs	r3, r3, #16
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d106      	bne.n	8001284 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2208      	movs	r2, #8
 8001282:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800128c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f001 fad3 	bl	800283c <I2C_Enable_IRQ>

    return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
  }
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	0800279b 	.word	0x0800279b
 80012a8:	080015c3 	.word	0x080015c3

080012ac <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80012c8:	2b28      	cmp	r3, #40	@ 0x28
 80012ca:	f040 8098 	bne.w	80013fe <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012e0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e08c      	b.n	8001400 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80012e6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f001 fb2a 	bl	8002944 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e080      	b.n	8001400 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b29      	cmp	r3, #41	@ 0x29
 8001310:	d12a      	bne.n	8001368 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001312:	2101      	movs	r1, #1
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f001 fb15 	bl	8002944 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001324:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001328:	d11e      	bne.n	8001368 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001338:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133e:	2b00      	cmp	r3, #0
 8001340:	d012      	beq.n	8001368 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001346:	4a30      	ldr	r2, [pc, #192]	@ (8001408 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001348:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fc4f 	bl	8000bf2 <HAL_DMA_Abort_IT>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800135e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001364:	4610      	mov	r0, r2
 8001366:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	222a      	movs	r2, #42	@ 0x2a
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2220      	movs	r2, #32
 8001374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800138c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800139e:	b29a      	uxth	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4a17      	ldr	r2, [pc, #92]	@ (800140c <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80013ae:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	bf0c      	ite	eq
 80013be:	2301      	moveq	r3, #1
 80013c0:	2300      	movne	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	0c1b      	lsrs	r3, r3, #16
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2208      	movs	r2, #8
 80013e6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80013f0:	f248 0102 	movw	r1, #32770	@ 0x8002
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f001 fa21 	bl	800283c <I2C_Enable_IRQ>

    return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e000      	b.n	8001400 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
  }
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	0800279b 	.word	0x0800279b
 800140c:	080015c3 	.word	0x080015c3

08001410 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b20      	cmp	r3, #32
 8001422:	d10d      	bne.n	8001440 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2228      	movs	r2, #40	@ 0x28
 8001428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a07      	ldr	r2, [pc, #28]	@ (800144c <HAL_I2C_EnableListen_IT+0x3c>)
 8001430:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001432:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f001 fa00 	bl	800283c <I2C_Enable_IRQ>

    return HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001440:	2302      	movs	r3, #2
  }
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	080015c3 	.word	0x080015c3

08001450 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	68f9      	ldr	r1, [r7, #12]
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	4798      	blx	r3
  }
}
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d010      	beq.n	80014ca <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	09db      	lsrs	r3, r3, #7
 80014ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00a      	beq.n	80014ca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b8:	f043 0201 	orr.w	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014c8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	0a9b      	lsrs	r3, r3, #10
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d010      	beq.n	80014f8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	09db      	lsrs	r3, r3, #7
 80014da:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00a      	beq.n	80014f8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f043 0208 	orr.w	r2, r3, #8
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	0a5b      	lsrs	r3, r3, #9
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d010      	beq.n	8001526 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	09db      	lsrs	r3, r3, #7
 8001508:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00a      	beq.n	8001526 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001514:	f043 0202 	orr.w	r2, r3, #2
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001524:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 030b 	and.w	r3, r3, #11
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001536:	68f9      	ldr	r1, [r7, #12]
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fff3 	bl	8002524 <I2C_ITError>
  }
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <I2C_Slave_ISR_IT+0x24>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e0ed      	b.n	80017c2 <I2C_Slave_ISR_IT+0x200>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	095b      	lsrs	r3, r3, #5
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00a      	beq.n	8001610 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	095b      	lsrs	r3, r3, #5
 80015fe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001606:	6939      	ldr	r1, [r7, #16]
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 fdcb 	bl	80021a4 <I2C_ITSlaveCplt>
 800160e:	e0d3      	b.n	80017b8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d04d      	beq.n	80016b8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001624:	2b00      	cmp	r3, #0
 8001626:	d047      	beq.n	80016b8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800162c:	b29b      	uxth	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d128      	bne.n	8001684 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b28      	cmp	r3, #40	@ 0x28
 800163c:	d108      	bne.n	8001650 <I2C_Slave_ISR_IT+0x8e>
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001644:	d104      	bne.n	8001650 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001646:	6939      	ldr	r1, [r7, #16]
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 ff15 	bl	8002478 <I2C_ITListenCplt>
 800164e:	e032      	b.n	80016b6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b29      	cmp	r3, #41	@ 0x29
 800165a:	d10e      	bne.n	800167a <I2C_Slave_ISR_IT+0xb8>
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001662:	d00a      	beq.n	800167a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2210      	movs	r2, #16
 800166a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f001 f870 	bl	8002752 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fc6e 	bl	8001f54 <I2C_ITSlaveSeqCplt>
 8001678:	e01d      	b.n	80016b6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2210      	movs	r2, #16
 8001680:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001682:	e096      	b.n	80017b2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2210      	movs	r2, #16
 800168a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001690:	f043 0204 	orr.w	r2, r3, #4
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <I2C_Slave_ISR_IT+0xe6>
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a4:	f040 8085 	bne.w	80017b2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ac:	4619      	mov	r1, r3
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 ff38 	bl	8002524 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80016b4:	e07d      	b.n	80017b2 <I2C_Slave_ISR_IT+0x1f0>
 80016b6:	e07c      	b.n	80017b2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d030      	beq.n	8001726 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d02a      	beq.n	8001726 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d018      	beq.n	800170c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d14f      	bne.n	80017b6 <I2C_Slave_ISR_IT+0x1f4>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800171c:	d04b      	beq.n	80017b6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fc18 	bl	8001f54 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001724:	e047      	b.n	80017b6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00a      	beq.n	8001748 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	08db      	lsrs	r3, r3, #3
 8001736:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800173e:	6939      	ldr	r1, [r7, #16]
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 fb46 	bl	8001dd2 <I2C_ITAddrCplt>
 8001746:	e037      	b.n	80017b8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d031      	beq.n	80017b8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	085b      	lsrs	r3, r3, #1
 8001758:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800175c:	2b00      	cmp	r3, #0
 800175e:	d02b      	beq.n	80017b8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d018      	beq.n	800179c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	851a      	strh	r2, [r3, #40]	@ 0x28
 800179a:	e00d      	b.n	80017b8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a2:	d002      	beq.n	80017aa <I2C_Slave_ISR_IT+0x1e8>
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 fbd2 	bl	8001f54 <I2C_ITSlaveSeqCplt>
 80017b0:	e002      	b.n	80017b8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80017b2:	bf00      	nop
 80017b4:	e000      	b.n	80017b8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80017b6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b088      	sub	sp, #32
 80017ce:	af02      	add	r7, sp, #8
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <I2C_Master_ISR_DMA+0x1a>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e0e1      	b.n	80019a8 <I2C_Master_ISR_DMA+0x1de>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d017      	beq.n	8001828 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001800:	2b00      	cmp	r3, #0
 8001802:	d011      	beq.n	8001828 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2210      	movs	r2, #16
 800180a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001810:	f043 0204 	orr.w	r2, r3, #4
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001818:	2120      	movs	r1, #32
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f001 f80e 	bl	800283c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 ff96 	bl	8002752 <I2C_Flush_TXDR>
 8001826:	e0ba      	b.n	800199e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	09db      	lsrs	r3, r3, #7
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d072      	beq.n	800191a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	099b      	lsrs	r3, r3, #6
 8001838:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800183c:	2b00      	cmp	r3, #0
 800183e:	d06c      	beq.n	800191a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800184e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001854:	b29b      	uxth	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d04e      	beq.n	80018f8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	b29b      	uxth	r3, r3
 8001862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001866:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	2bff      	cmp	r3, #255	@ 0xff
 8001870:	d906      	bls.n	8001880 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	22ff      	movs	r2, #255	@ 0xff
 8001876:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8001878:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e010      	b.n	80018a2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001892:	d003      	beq.n	800189c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	e002      	b.n	80018a2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800189c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018a0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	8a79      	ldrh	r1, [r7, #18]
 80018aa:	2300      	movs	r3, #0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 ff91 	bl	80027d8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b22      	cmp	r3, #34	@ 0x22
 80018d2:	d108      	bne.n	80018e6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018e2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018e4:	e05b      	b.n	800199e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018f6:	e052      	b.n	800199e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001906:	d003      	beq.n	8001910 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 fae6 	bl	8001eda <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800190e:	e046      	b.n	800199e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001910:	2140      	movs	r1, #64	@ 0x40
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 fe06 	bl	8002524 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001918:	e041      	b.n	800199e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d029      	beq.n	800197a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	099b      	lsrs	r3, r3, #6
 800192a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800192e:	2b00      	cmp	r3, #0
 8001930:	d023      	beq.n	800197a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001936:	b29b      	uxth	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d119      	bne.n	8001970 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800194a:	d027      	beq.n	800199c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001954:	d108      	bne.n	8001968 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001964:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001966:	e019      	b.n	800199c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 fab6 	bl	8001eda <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800196e:	e015      	b.n	800199c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001970:	2140      	movs	r1, #64	@ 0x40
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 fdd6 	bl	8002524 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001978:	e010      	b.n	800199c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	095b      	lsrs	r3, r3, #5
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	095b      	lsrs	r3, r3, #5
 800198a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fb3b 	bl	8002010 <I2C_ITMasterCplt>
 800199a:	e000      	b.n	800199e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800199c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80019bc:	4b92      	ldr	r3, [pc, #584]	@ (8001c08 <I2C_Mem_ISR_DMA+0x258>)
 80019be:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <I2C_Mem_ISR_DMA+0x1e>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e118      	b.n	8001c00 <I2C_Mem_ISR_DMA+0x250>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d017      	beq.n	8001a12 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d011      	beq.n	8001a12 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2210      	movs	r2, #16
 80019f4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	f043 0204 	orr.w	r2, r3, #4
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001a02:	2120      	movs	r1, #32
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 ff19 	bl	800283c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fea1 	bl	8002752 <I2C_Flush_TXDR>
 8001a10:	e0f1      	b.n	8001bf6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00f      	beq.n	8001a3e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a3c:	e0db      	b.n	8001bf6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	09db      	lsrs	r3, r3, #7
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d060      	beq.n	8001b0c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d05a      	beq.n	8001b0c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a56:	2101      	movs	r1, #1
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 ff73 	bl	8002944 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001a5e:	2110      	movs	r1, #16
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 feeb 	bl	800283c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d048      	beq.n	8001b02 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2bff      	cmp	r3, #255	@ 0xff
 8001a78:	d910      	bls.n	8001a9c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	22ff      	movs	r2, #255	@ 0xff
 8001a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a84:	b299      	uxth	r1, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fe9f 	bl	80027d8 <I2C_TransferConfig>
 8001a9a:	e011      	b.n	8001ac0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	b299      	uxth	r1, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fe8c 	bl	80027d8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b22      	cmp	r3, #34	@ 0x22
 8001adc:	d108      	bne.n	8001af0 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001aec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001aee:	e082      	b.n	8001bf6 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001afe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001b00:	e079      	b.n	8001bf6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001b02:	2140      	movs	r1, #64	@ 0x40
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 fd0d 	bl	8002524 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001b0a:	e074      	b.n	8001bf6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	099b      	lsrs	r3, r3, #6
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d05e      	beq.n	8001bd6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d058      	beq.n	8001bd6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b24:	2101      	movs	r1, #1
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 ff0c 	bl	8002944 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001b2c:	2110      	movs	r1, #16
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 fe84 	bl	800283c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b22      	cmp	r3, #34	@ 0x22
 8001b3e:	d101      	bne.n	8001b44 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8001b40:	4b32      	ldr	r3, [pc, #200]	@ (8001c0c <I2C_Mem_ISR_DMA+0x25c>)
 8001b42:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2bff      	cmp	r3, #255	@ 0xff
 8001b4c:	d910      	bls.n	8001b70 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	22ff      	movs	r2, #255	@ 0xff
 8001b52:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b58:	b299      	uxth	r1, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 fe35 	bl	80027d8 <I2C_TransferConfig>
 8001b6e:	e011      	b.n	8001b94 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	b299      	uxth	r1, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fe22 	bl	80027d8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b22      	cmp	r3, #34	@ 0x22
 8001bb0:	d108      	bne.n	8001bc4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bc0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bc2:	e018      	b.n	8001bf6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bd2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bd4:	e00f      	b.n	8001bf6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 fa0d 	bl	8002010 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	80002000 	.word	0x80002000
 8001c0c:	80002400 	.word	0x80002400

08001c10 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c20:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <I2C_Slave_ISR_DMA+0x24>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e0ca      	b.n	8001dca <I2C_Slave_ISR_DMA+0x1ba>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00a      	beq.n	8001c5e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 faa4 	bl	80021a4 <I2C_ITSlaveCplt>
 8001c5c:	e0b0      	b.n	8001dc0 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 809a 	beq.w	8001da0 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8093 	beq.w	8001da0 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0b9b      	lsrs	r3, r3, #14
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d105      	bne.n	8001c92 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0bdb      	lsrs	r3, r3, #15
 8001c8a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d07f      	beq.n	8001d92 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00d      	beq.n	8001cb6 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	0bdb      	lsrs	r3, r3, #15
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00d      	beq.n	8001cda <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	0b9b      	lsrs	r3, r3, #14
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d128      	bne.n	8001d32 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b28      	cmp	r3, #40	@ 0x28
 8001cea:	d108      	bne.n	8001cfe <I2C_Slave_ISR_DMA+0xee>
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cf2:	d104      	bne.n	8001cfe <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 fbbe 	bl	8002478 <I2C_ITListenCplt>
 8001cfc:	e048      	b.n	8001d90 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b29      	cmp	r3, #41	@ 0x29
 8001d08:	d10e      	bne.n	8001d28 <I2C_Slave_ISR_DMA+0x118>
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d10:	d00a      	beq.n	8001d28 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2210      	movs	r2, #16
 8001d18:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 fd19 	bl	8002752 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f917 	bl	8001f54 <I2C_ITSlaveSeqCplt>
 8001d26:	e033      	b.n	8001d90 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001d30:	e034      	b.n	8001d9c <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2210      	movs	r2, #16
 8001d38:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	f043 0204 	orr.w	r2, r3, #4
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d4c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <I2C_Slave_ISR_DMA+0x14c>
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d5a:	d11f      	bne.n	8001d9c <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	2b21      	cmp	r3, #33	@ 0x21
 8001d60:	d002      	beq.n	8001d68 <I2C_Slave_ISR_DMA+0x158>
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	2b29      	cmp	r3, #41	@ 0x29
 8001d66:	d103      	bne.n	8001d70 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2221      	movs	r2, #33	@ 0x21
 8001d6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d6e:	e008      	b.n	8001d82 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b22      	cmp	r3, #34	@ 0x22
 8001d74:	d002      	beq.n	8001d7c <I2C_Slave_ISR_DMA+0x16c>
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
 8001d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d7a:	d102      	bne.n	8001d82 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2222      	movs	r2, #34	@ 0x22
 8001d80:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4619      	mov	r1, r3
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 fbcb 	bl	8002524 <I2C_ITError>
      if (treatdmanack == 1U)
 8001d8e:	e005      	b.n	8001d9c <I2C_Slave_ISR_DMA+0x18c>
 8001d90:	e004      	b.n	8001d9c <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2210      	movs	r2, #16
 8001d98:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001d9a:	e011      	b.n	8001dc0 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8001d9c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001d9e:	e00f      	b.n	8001dc0 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d009      	beq.n	8001dc0 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	08db      	lsrs	r3, r3, #3
 8001db0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f809 	bl	8001dd2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001de8:	2b28      	cmp	r3, #40	@ 0x28
 8001dea:	d16a      	bne.n	8001ec2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	0c1b      	lsrs	r3, r3, #16
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001e0a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e18:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001e26:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d138      	bne.n	8001ea2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001e30:	897b      	ldrh	r3, [r7, #10]
 8001e32:	09db      	lsrs	r3, r3, #7
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	89bb      	ldrh	r3, [r7, #12]
 8001e38:	4053      	eors	r3, r2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	f003 0306 	and.w	r3, r3, #6
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d11c      	bne.n	8001e7e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001e44:	897b      	ldrh	r3, [r7, #10]
 8001e46:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d13b      	bne.n	8001ed2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2208      	movs	r2, #8
 8001e66:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e70:	89ba      	ldrh	r2, [r7, #12]
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe f9da 	bl	8000230 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001e7c:	e029      	b.n	8001ed2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001e7e:	893b      	ldrh	r3, [r7, #8]
 8001e80:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fd5c 	bl	8002944 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e94:	89ba      	ldrh	r2, [r7, #12]
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe f9c8 	bl	8000230 <HAL_I2C_AddrCallback>
}
 8001ea0:	e017      	b.n	8001ed2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fd4c 	bl	8002944 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001eb4:	89ba      	ldrh	r2, [r7, #12]
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7fe f9b8 	bl	8000230 <HAL_I2C_AddrCallback>
}
 8001ec0:	e007      	b.n	8001ed2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b21      	cmp	r3, #33	@ 0x21
 8001ef4:	d115      	bne.n	8001f22 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2211      	movs	r2, #17
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fd19 	bl	8002944 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fb13 	bl	8001546 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f20:	e014      	b.n	8001f4c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2212      	movs	r2, #18
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f36:	2102      	movs	r1, #2
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fd03 	bl	8002944 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fb07 	bl	800155a <HAL_I2C_MasterRxCpltCallback>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	0b9b      	lsrs	r3, r3, #14
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e00d      	b.n	8001fa6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	0bdb      	lsrs	r3, r3, #15
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fa4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b29      	cmp	r3, #41	@ 0x29
 8001fb0:	d112      	bne.n	8001fd8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2228      	movs	r2, #40	@ 0x28
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2221      	movs	r2, #33	@ 0x21
 8001fbe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fcbe 	bl	8002944 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7fe f961 	bl	8000298 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001fd6:	e017      	b.n	8002008 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fe2:	d111      	bne.n	8002008 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2228      	movs	r2, #40	@ 0x28
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2222      	movs	r2, #34	@ 0x22
 8001ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fca5 	bl	8002944 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe f938 	bl	8000278 <HAL_I2C_SlaveRxCpltCallback>
}
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2220      	movs	r2, #32
 8002024:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b21      	cmp	r3, #33	@ 0x21
 8002030:	d107      	bne.n	8002042 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002032:	2101      	movs	r1, #1
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fc85 	bl	8002944 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2211      	movs	r2, #17
 800203e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002040:	e00c      	b.n	800205c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b22      	cmp	r3, #34	@ 0x22
 800204c:	d106      	bne.n	800205c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800204e:	2102      	movs	r1, #2
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fc77 	bl	8002944 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2212      	movs	r2, #18
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6859      	ldr	r1, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b4d      	ldr	r3, [pc, #308]	@ (800219c <I2C_ITMasterCplt+0x18c>)
 8002068:	400b      	ands	r3, r1
 800206a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4a      	ldr	r2, [pc, #296]	@ (80021a0 <I2C_ITMasterCplt+0x190>)
 8002076:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2210      	movs	r2, #16
 800208a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002090:	f043 0204 	orr.w	r2, r3, #4
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b60      	cmp	r3, #96	@ 0x60
 80020a2:	d10b      	bne.n	80020bc <I2C_ITMasterCplt+0xac>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80020ba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fb48 	bl	8002752 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b60      	cmp	r3, #96	@ 0x60
 80020d2:	d002      	beq.n	80020da <I2C_ITMasterCplt+0xca>
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	4619      	mov	r1, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 fa1f 	bl	8002524 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80020e6:	e054      	b.n	8002192 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b21      	cmp	r3, #33	@ 0x21
 80020f2:	d124      	bne.n	800213e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b40      	cmp	r3, #64	@ 0x40
 800210c:	d10b      	bne.n	8002126 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fa25 	bl	800156e <HAL_I2C_MemTxCpltCallback>
}
 8002124:	e035      	b.n	8002192 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fa05 	bl	8001546 <HAL_I2C_MasterTxCpltCallback>
}
 800213c:	e029      	b.n	8002192 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b22      	cmp	r3, #34	@ 0x22
 8002148:	d123      	bne.n	8002192 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b40      	cmp	r3, #64	@ 0x40
 8002162:	d10b      	bne.n	800217c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff fa04 	bl	8001582 <HAL_I2C_MemRxCpltCallback>
}
 800217a:	e00a      	b.n	8002192 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff f9e4 	bl	800155a <HAL_I2C_MasterRxCpltCallback>
}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	fe00e800 	.word	0xfe00e800
 80021a0:	ffff0000 	.word	0xffff0000

080021a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2220      	movs	r2, #32
 80021ce:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021d0:	7afb      	ldrb	r3, [r7, #11]
 80021d2:	2b21      	cmp	r3, #33	@ 0x21
 80021d4:	d002      	beq.n	80021dc <I2C_ITSlaveCplt+0x38>
 80021d6:	7afb      	ldrb	r3, [r7, #11]
 80021d8:	2b29      	cmp	r3, #41	@ 0x29
 80021da:	d108      	bne.n	80021ee <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80021dc:	f248 0101 	movw	r1, #32769	@ 0x8001
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fbaf 	bl	8002944 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2221      	movs	r2, #33	@ 0x21
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80021ec:	e019      	b.n	8002222 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80021ee:	7afb      	ldrb	r3, [r7, #11]
 80021f0:	2b22      	cmp	r3, #34	@ 0x22
 80021f2:	d002      	beq.n	80021fa <I2C_ITSlaveCplt+0x56>
 80021f4:	7afb      	ldrb	r3, [r7, #11]
 80021f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80021f8:	d108      	bne.n	800220c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80021fa:	f248 0102 	movw	r1, #32770	@ 0x8002
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fba0 	bl	8002944 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2222      	movs	r2, #34	@ 0x22
 8002208:	631a      	str	r2, [r3, #48]	@ 0x30
 800220a:	e00a      	b.n	8002222 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800220c:	7afb      	ldrb	r3, [r7, #11]
 800220e:	2b28      	cmp	r3, #40	@ 0x28
 8002210:	d107      	bne.n	8002222 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002212:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fb94 	bl	8002944 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002230:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6859      	ldr	r1, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b8c      	ldr	r3, [pc, #560]	@ (8002470 <I2C_ITSlaveCplt+0x2cc>)
 800223e:	400b      	ands	r3, r1
 8002240:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fa85 	bl	8002752 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	0b9b      	lsrs	r3, r3, #14
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002262:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	b29a      	uxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800227a:	e018      	b.n	80022ae <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	0bdb      	lsrs	r3, r3, #15
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d012      	beq.n	80022ae <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002296:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d020      	beq.n	80022fc <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00c      	beq.n	80022fc <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f043 0204 	orr.w	r2, r3, #4
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d04a      	beq.n	80023b4 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002326:	2b00      	cmp	r3, #0
 8002328:	d044      	beq.n	80023b4 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d128      	bne.n	8002386 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b28      	cmp	r3, #40	@ 0x28
 800233e:	d108      	bne.n	8002352 <I2C_ITSlaveCplt+0x1ae>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002346:	d104      	bne.n	8002352 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002348:	6979      	ldr	r1, [r7, #20]
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f894 	bl	8002478 <I2C_ITListenCplt>
 8002350:	e030      	b.n	80023b4 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b29      	cmp	r3, #41	@ 0x29
 800235c:	d10e      	bne.n	800237c <I2C_ITSlaveCplt+0x1d8>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002364:	d00a      	beq.n	800237c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2210      	movs	r2, #16
 800236c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f9ef 	bl	8002752 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fded 	bl	8001f54 <I2C_ITSlaveSeqCplt>
 800237a:	e01b      	b.n	80023b4 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2210      	movs	r2, #16
 8002382:	61da      	str	r2, [r3, #28]
 8002384:	e016      	b.n	80023b4 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2210      	movs	r2, #16
 800238c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	f043 0204 	orr.w	r2, r3, #4
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <I2C_ITSlaveCplt+0x204>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023a6:	d105      	bne.n	80023b4 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f8b8 	bl	8002524 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d010      	beq.n	80023ec <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	4619      	mov	r1, r3
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f8a7 	bl	8002524 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b28      	cmp	r3, #40	@ 0x28
 80023e0:	d141      	bne.n	8002466 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80023e2:	6979      	ldr	r1, [r7, #20]
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f847 	bl	8002478 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023ea:	e03c      	b.n	8002466 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023f4:	d014      	beq.n	8002420 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fdac 	bl	8001f54 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002474 <I2C_ITSlaveCplt+0x2d0>)
 8002400:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7fd ff48 	bl	80002ae <HAL_I2C_ListenCpltCallback>
}
 800241e:	e022      	b.n	8002466 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b22      	cmp	r3, #34	@ 0x22
 800242a:	d10e      	bne.n	800244a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fd ff18 	bl	8000278 <HAL_I2C_SlaveRxCpltCallback>
}
 8002448:	e00d      	b.n	8002466 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7fd ff19 	bl	8000298 <HAL_I2C_SlaveTxCpltCallback>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	fe00e800 	.word	0xfe00e800
 8002474:	ffff0000 	.word	0xffff0000

08002478 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a26      	ldr	r2, [pc, #152]	@ (8002520 <I2C_ITListenCplt+0xa8>)
 8002486:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d022      	beq.n	80024f6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	f043 0204 	orr.w	r2, r3, #4
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80024f6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa22 	bl	8002944 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2210      	movs	r2, #16
 8002506:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7fd fecc 	bl	80002ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	ffff0000 	.word	0xffff0000

08002524 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002534:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a6d      	ldr	r2, [pc, #436]	@ (80026f8 <I2C_ITError+0x1d4>)
 8002542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	2b28      	cmp	r3, #40	@ 0x28
 800255a:	d005      	beq.n	8002568 <I2C_ITError+0x44>
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b29      	cmp	r3, #41	@ 0x29
 8002560:	d002      	beq.n	8002568 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b2a      	cmp	r3, #42	@ 0x2a
 8002566:	d10b      	bne.n	8002580 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002568:	2103      	movs	r1, #3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f9ea 	bl	8002944 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2228      	movs	r2, #40	@ 0x28
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a60      	ldr	r2, [pc, #384]	@ (80026fc <I2C_ITError+0x1d8>)
 800257c:	635a      	str	r2, [r3, #52]	@ 0x34
 800257e:	e030      	b.n	80025e2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002580:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f9dd 	bl	8002944 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8e1 	bl	8002752 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b60      	cmp	r3, #96	@ 0x60
 800259a:	d01f      	beq.n	80025dc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d114      	bne.n	80025dc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b10      	cmp	r3, #16
 80025be:	d109      	bne.n	80025d4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2210      	movs	r2, #16
 80025c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025cc:	f043 0204 	orr.w	r2, r3, #4
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2220      	movs	r2, #32
 80025da:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d039      	beq.n	8002664 <I2C_ITError+0x140>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b11      	cmp	r3, #17
 80025f4:	d002      	beq.n	80025fc <I2C_ITError+0xd8>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b21      	cmp	r3, #33	@ 0x21
 80025fa:	d133      	bne.n	8002664 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800260a:	d107      	bne.n	800261c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800261a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fb4d 	bl	8000cc0 <HAL_DMA_GetState>
 8002626:	4603      	mov	r3, r0
 8002628:	2b01      	cmp	r3, #1
 800262a:	d017      	beq.n	800265c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002630:	4a33      	ldr	r2, [pc, #204]	@ (8002700 <I2C_ITError+0x1dc>)
 8002632:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fad6 	bl	8000bf2 <HAL_DMA_Abort_IT>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d04d      	beq.n	80026e8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002656:	4610      	mov	r0, r2
 8002658:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800265a:	e045      	b.n	80026e8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f851 	bl	8002704 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002662:	e041      	b.n	80026e8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d039      	beq.n	80026e0 <I2C_ITError+0x1bc>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b12      	cmp	r3, #18
 8002670:	d002      	beq.n	8002678 <I2C_ITError+0x154>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b22      	cmp	r3, #34	@ 0x22
 8002676:	d133      	bne.n	80026e0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002686:	d107      	bne.n	8002698 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002696:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fb0f 	bl	8000cc0 <HAL_DMA_GetState>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d017      	beq.n	80026d8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ac:	4a14      	ldr	r2, [pc, #80]	@ (8002700 <I2C_ITError+0x1dc>)
 80026ae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fa98 	bl	8000bf2 <HAL_DMA_Abort_IT>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d011      	beq.n	80026ec <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026d2:	4610      	mov	r0, r2
 80026d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026d6:	e009      	b.n	80026ec <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f813 	bl	8002704 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026de:	e005      	b.n	80026ec <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f80f 	bl	8002704 <I2C_TreatErrorCallback>
  }
}
 80026e6:	e002      	b.n	80026ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026e8:	bf00      	nop
 80026ea:	e000      	b.n	80026ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026ec:	bf00      	nop
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	ffff0000 	.word	0xffff0000
 80026fc:	080015c3 	.word	0x080015c3
 8002700:	0800279b 	.word	0x0800279b

08002704 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b60      	cmp	r3, #96	@ 0x60
 8002716:	d10e      	bne.n	8002736 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fe ff31 	bl	8001596 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002734:	e009      	b.n	800274a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7fd fdbd 	bl	80002c4 <HAL_I2C_ErrorCallback>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d103      	bne.n	8002770 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2200      	movs	r2, #0
 800276e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d007      	beq.n	800278e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0201 	orr.w	r2, r2, #1
 800278c:	619a      	str	r2, [r3, #24]
  }
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b4:	2200      	movs	r2, #0
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c4:	2200      	movs	r2, #0
 80027c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7ff ff9b 	bl	8002704 <I2C_TreatErrorCallback>
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	817b      	strh	r3, [r7, #10]
 80027e6:	4613      	mov	r3, r2
 80027e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ea:	897b      	ldrh	r3, [r7, #10]
 80027ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027f0:	7a7b      	ldrb	r3, [r7, #9]
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	4313      	orrs	r3, r2
 8002802:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002806:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	0d5b      	lsrs	r3, r3, #21
 8002812:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <I2C_TransferConfig+0x60>)
 8002818:	430b      	orrs	r3, r1
 800281a:	43db      	mvns	r3, r3
 800281c:	ea02 0103 	and.w	r1, r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	03ff63ff 	.word	0x03ff63ff

0800283c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002850:	4a39      	ldr	r2, [pc, #228]	@ (8002938 <I2C_Enable_IRQ+0xfc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d032      	beq.n	80028bc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800285a:	4a38      	ldr	r2, [pc, #224]	@ (800293c <I2C_Enable_IRQ+0x100>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d02d      	beq.n	80028bc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002864:	4a36      	ldr	r2, [pc, #216]	@ (8002940 <I2C_Enable_IRQ+0x104>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d028      	beq.n	80028bc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800286a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800286e:	2b00      	cmp	r3, #0
 8002870:	da03      	bge.n	800287a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002878:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800288a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800288c:	887b      	ldrh	r3, [r7, #2]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800289c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d103      	bne.n	80028ac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80028aa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d133      	bne.n	800291a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f043 0320 	orr.w	r3, r3, #32
 80028b8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028ba:	e02e      	b.n	800291a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80028bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	da03      	bge.n	80028cc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80028ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80028dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80028ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80028f0:	887b      	ldrh	r3, [r7, #2]
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d103      	bne.n	80028fe <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80028fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	2b20      	cmp	r3, #32
 8002902:	d103      	bne.n	800290c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800290a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800290c:	887b      	ldrh	r3, [r7, #2]
 800290e:	2b40      	cmp	r3, #64	@ 0x40
 8002910:	d103      	bne.n	800291a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002918:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	080017cb 	.word	0x080017cb
 800293c:	08001c11 	.word	0x08001c11
 8002940:	080019b1 	.word	0x080019b1

08002944 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00f      	beq.n	800297e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002964:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002972:	2b28      	cmp	r3, #40	@ 0x28
 8002974:	d003      	beq.n	800297e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800297c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800297e:	887b      	ldrh	r3, [r7, #2]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00f      	beq.n	80029a8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800298e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800299c:	2b28      	cmp	r3, #40	@ 0x28
 800299e:	d003      	beq.n	80029a8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80029a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80029a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	da03      	bge.n	80029b8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80029b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d103      	bne.n	80029c6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80029c6:	887b      	ldrh	r3, [r7, #2]
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d103      	bne.n	80029d4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f043 0320 	orr.w	r3, r3, #32
 80029d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80029d4:	887b      	ldrh	r3, [r7, #2]
 80029d6:	2b40      	cmp	r3, #64	@ 0x40
 80029d8:	d103      	bne.n	80029e2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029e0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6819      	ldr	r1, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43da      	mvns	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	400a      	ands	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	d138      	bne.n	8002a88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e032      	b.n	8002a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2224      	movs	r2, #36	@ 0x24
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d139      	bne.n	8002b20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e033      	b.n	8002b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2224      	movs	r2, #36	@ 0x24
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ae8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0c0      	b.n	8002cc2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d106      	bne.n	8002b5a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f007 fac7 	bl	800a0e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 fced 	bl	8006546 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	e03e      	b.n	8002bf0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	3311      	adds	r3, #17
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	440b      	add	r3, r1
 8002b94:	3310      	adds	r3, #16
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3313      	adds	r3, #19
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	3320      	adds	r3, #32
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	3324      	adds	r3, #36	@ 0x24
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	3301      	adds	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	791b      	ldrb	r3, [r3, #4]
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3bb      	bcc.n	8002b72 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	e044      	b.n	8002c8a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	3301      	adds	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	791b      	ldrb	r3, [r3, #4]
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d3b5      	bcc.n	8002c00 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ca0:	f003 fc6c 	bl	800657c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7a9b      	ldrb	r3, [r3, #10]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f001 fbd0 	bl	8004460 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_PCD_Start+0x16>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e012      	b.n	8002d06 <HAL_PCD_Start+0x3c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fc13 	bl	8006518 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f005 f803 	bl	8007d02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_PCD_Stop+0x16>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e012      	b.n	8002d4a <HAL_PCD_Stop+0x3c>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 fc08 	bl	8006546 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 fff8 	bl	8007d30 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fffb 	bl	8007d5a <USB_ReadInterrupts>
 8002d64:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 faa6 	bl	80032c2 <PCD_EP_ISR_Handler>

    return;
 8002d76:	e110      	b.n	8002f9a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d013      	beq.n	8002daa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d94:	b292      	uxth	r2, r2
 8002d96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f007 fa35 	bl	800a20a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002da0:	2100      	movs	r1, #0
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8fc 	bl	8002fa0 <HAL_PCD_SetAddress>

    return;
 8002da8:	e0f7      	b.n	8002f9a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00c      	beq.n	8002dce <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dc6:	b292      	uxth	r2, r2
 8002dc8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002dcc:	e0e5      	b.n	8002f9a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00c      	beq.n	8002df2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dea:	b292      	uxth	r2, r2
 8002dec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002df0:	e0d3      	b.n	8002f9a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d034      	beq.n	8002e66 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0204 	bic.w	r2, r2, #4
 8002e0e:	b292      	uxth	r2, r2
 8002e10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0208 	bic.w	r2, r2, #8
 8002e26:	b292      	uxth	r2, r2
 8002e28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e3e:	2100      	movs	r1, #0
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f007 fba5 	bl	800a590 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f007 fa18 	bl	800a27c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e5e:	b292      	uxth	r2, r2
 8002e60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e64:	e099      	b.n	8002f9a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d027      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0208 	orr.w	r2, r2, #8
 8002e82:	b292      	uxth	r2, r2
 8002e84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e9a:	b292      	uxth	r2, r2
 8002e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0204 	orr.w	r2, r2, #4
 8002eb2:	b292      	uxth	r2, r2
 8002eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f007 f9c5 	bl	800a248 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ebe:	e06c      	b.n	8002f9a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d040      	beq.n	8002f4c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002edc:	b292      	uxth	r2, r2
 8002ede:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d12b      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0204 	orr.w	r2, r2, #4
 8002efe:	b292      	uxth	r2, r2
 8002f00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0208 	orr.w	r2, r2, #8
 8002f16:	b292      	uxth	r2, r2
 8002f18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f007 fb27 	bl	800a590 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002f42:	e02a      	b.n	8002f9a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f007 f97f 	bl	800a248 <HAL_PCD_SuspendCallback>
    return;
 8002f4a:	e026      	b.n	8002f9a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00f      	beq.n	8002f76 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f68:	b292      	uxth	r2, r2
 8002f6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f007 f93d 	bl	800a1ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f74:	e011      	b.n	8002f9a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00c      	beq.n	8002f9a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f92:	b292      	uxth	r2, r2
 8002f94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f98:	bf00      	nop
  }
}
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_PCD_SetAddress+0x1a>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e012      	b.n	8002fe0 <HAL_PCD_SetAddress+0x40>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 fe82 	bl	8007cda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	70fb      	strb	r3, [r7, #3]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	803b      	strh	r3, [r7, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800300a:	2b00      	cmp	r3, #0
 800300c:	da0e      	bge.n	800302c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f003 0207 	and.w	r2, r3, #7
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	3310      	adds	r3, #16
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	705a      	strb	r2, [r3, #1]
 800302a:	e00e      	b.n	800304a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 0207 	and.w	r2, r3, #7
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003056:	883b      	ldrh	r3, [r7, #0]
 8003058:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	78ba      	ldrb	r2, [r7, #2]
 8003064:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003066:	78bb      	ldrb	r3, [r7, #2]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d102      	bne.n	8003072 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_PCD_EP_Open+0x98>
 800307c:	2302      	movs	r3, #2
 800307e:	e00e      	b.n	800309e <HAL_PCD_EP_Open+0xb6>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68f9      	ldr	r1, [r7, #12]
 800308e:	4618      	mov	r0, r3
 8003090:	f003 fa92 	bl	80065b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800309c:	7afb      	ldrb	r3, [r7, #11]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	460b      	mov	r3, r1
 80030b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	f003 0207 	and.w	r2, r3, #7
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2200      	movs	r2, #0
 80030e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e6:	7afb      	ldrb	r3, [r7, #11]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6979      	ldr	r1, [r7, #20]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 ff45 	bl	8006f88 <USB_EPStartXfer>

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	460b      	mov	r3, r1
 8003116:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003118:	7afb      	ldrb	r3, [r7, #11]
 800311a:	f003 0207 	and.w	r2, r3, #7
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	3310      	adds	r3, #16
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2200      	movs	r2, #0
 800314c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2201      	movs	r2, #1
 8003152:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003154:	7afb      	ldrb	r3, [r7, #11]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	b2da      	uxtb	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6979      	ldr	r1, [r7, #20]
 8003166:	4618      	mov	r0, r3
 8003168:	f003 ff0e 	bl	8006f88 <USB_EPStartXfer>

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	7912      	ldrb	r2, [r2, #4]
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e03e      	b.n	8003212 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003198:	2b00      	cmp	r3, #0
 800319a:	da0e      	bge.n	80031ba <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	3310      	adds	r3, #16
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	705a      	strb	r2, [r3, #1]
 80031b8:	e00c      	b.n	80031d4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_PCD_EP_SetStall+0x7e>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e00e      	b.n	8003212 <HAL_PCD_EP_SetStall+0x9c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68f9      	ldr	r1, [r7, #12]
 8003202:	4618      	mov	r0, r3
 8003204:	f004 fc6f 	bl	8007ae6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	7912      	ldrb	r2, [r2, #4]
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e040      	b.n	80032ba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da0e      	bge.n	800325e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 0207 	and.w	r2, r3, #7
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	3310      	adds	r3, #16
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	705a      	strb	r2, [r3, #1]
 800325c:	e00e      	b.n	800327c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 0207 	and.w	r2, r3, #7
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_PCD_EP_ClrStall+0x82>
 8003298:	2302      	movs	r3, #2
 800329a:	e00e      	b.n	80032ba <HAL_PCD_EP_ClrStall+0xa0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f004 fc6c 	bl	8007b88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b092      	sub	sp, #72	@ 0x48
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032ca:	e333      	b.n	8003934 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032d4:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80032e2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 8108 	bne.w	80034fc <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032ec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d14c      	bne.n	8003390 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003306:	813b      	strh	r3, [r7, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	893b      	ldrh	r3, [r7, #8]
 800330e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003316:	b29b      	uxth	r3, r3
 8003318:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3310      	adds	r3, #16
 800331e:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003328:	b29b      	uxth	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	4413      	add	r3, r2
 800333a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003346:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	441a      	add	r2, r3
 8003352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003354:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003356:	2100      	movs	r1, #0
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f006 ff2e 	bl	800a1ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7b1b      	ldrb	r3, [r3, #12]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 82e5 	beq.w	8003934 <PCD_EP_ISR_Handler+0x672>
 800336a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 82e0 	bne.w	8003934 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	7b1b      	ldrb	r3, [r3, #12]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800337e:	b2da      	uxtb	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	731a      	strb	r2, [r3, #12]
 800338e:	e2d1      	b.n	8003934 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003396:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80033a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80033a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d032      	beq.n	8003410 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	4413      	add	r3, r2
 80033c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80033dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033de:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f004 fd0b 	bl	8007e00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033f6:	4013      	ands	r3, r2
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	897a      	ldrh	r2, [r7, #10]
 8003400:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003404:	b292      	uxth	r2, r2
 8003406:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f006 fea9 	bl	800a160 <HAL_PCD_SetupStageCallback>
 800340e:	e291      	b.n	8003934 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003410:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003414:	2b00      	cmp	r3, #0
 8003416:	f280 828d 	bge.w	8003934 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29a      	uxth	r2, r3
 8003422:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003426:	4013      	ands	r3, r2
 8003428:	81fb      	strh	r3, [r7, #14]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	89fa      	ldrh	r2, [r7, #14]
 8003430:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003434:	b292      	uxth	r2, r2
 8003436:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003440:	b29b      	uxth	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	4413      	add	r3, r2
 8003452:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800345c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800345e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d019      	beq.n	800349c <PCD_EP_ISR_Handler+0x1da>
 8003468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003476:	6959      	ldr	r1, [r3, #20]
 8003478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800347a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800347c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800347e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003480:	b29b      	uxth	r3, r3
 8003482:	f004 fcbd 	bl	8007e00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	441a      	add	r2, r3
 8003490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003492:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003494:	2100      	movs	r1, #0
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f006 fe74 	bl	800a184 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80034a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80034a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 8242 	bne.w	8003934 <PCD_EP_ISR_Handler+0x672>
 80034b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80034b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034ba:	f000 823b 	beq.w	8003934 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ce:	81bb      	strh	r3, [r7, #12]
 80034d0:	89bb      	ldrh	r3, [r7, #12]
 80034d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80034d6:	81bb      	strh	r3, [r7, #12]
 80034d8:	89bb      	ldrh	r3, [r7, #12]
 80034da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80034de:	81bb      	strh	r3, [r7, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	89bb      	ldrh	r3, [r7, #12]
 80034e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	8013      	strh	r3, [r2, #0]
 80034fa:	e21b      	b.n	8003934 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800350e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003512:	2b00      	cmp	r3, #0
 8003514:	f280 80f1 	bge.w	80036fa <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29a      	uxth	r2, r3
 800352a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800352e:	4013      	ands	r3, r2
 8003530:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003542:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003546:	b292      	uxth	r2, r2
 8003548:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800354a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003562:	7b1b      	ldrb	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d123      	bne.n	80035b0 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	4413      	add	r3, r2
 8003582:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800358c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003590:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 808b 	beq.w	80036b0 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a0:	6959      	ldr	r1, [r3, #20]
 80035a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a4:	88da      	ldrh	r2, [r3, #6]
 80035a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80035aa:	f004 fc29 	bl	8007e00 <USB_ReadPMA>
 80035ae:	e07f      	b.n	80036b0 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80035b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035b2:	78db      	ldrb	r3, [r3, #3]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d109      	bne.n	80035cc <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80035b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80035ba:	461a      	mov	r2, r3
 80035bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9c6 	bl	8003950 <HAL_PCD_EP_DB_Receive>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80035ca:	e071      	b.n	80036b0 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035e6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	441a      	add	r2, r3
 80035f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80035f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003600:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003604:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003608:	b29b      	uxth	r3, r3
 800360a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d022      	beq.n	800366c <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800362e:	b29b      	uxth	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	4413      	add	r3, r2
 8003640:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800364a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800364e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003652:	2b00      	cmp	r3, #0
 8003654:	d02c      	beq.n	80036b0 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800365c:	6959      	ldr	r1, [r3, #20]
 800365e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003660:	891a      	ldrh	r2, [r3, #8]
 8003662:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003666:	f004 fbcb 	bl	8007e00 <USB_ReadPMA>
 800366a:	e021      	b.n	80036b0 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003674:	b29b      	uxth	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	4413      	add	r3, r2
 8003686:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003690:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003694:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a2:	6959      	ldr	r1, [r3, #20]
 80036a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a6:	895a      	ldrh	r2, [r3, #10]
 80036a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036ac:	f004 fba8 	bl	8007e00 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80036b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036b8:	441a      	add	r2, r3
 80036ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80036be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036c6:	441a      	add	r2, r3
 80036c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80036cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <PCD_EP_ISR_Handler+0x41e>
 80036d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80036d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d206      	bcs.n	80036ee <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80036e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f006 fd4c 	bl	800a184 <HAL_PCD_DataOutStageCallback>
 80036ec:	e005      	b.n	80036fa <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036f4:	4618      	mov	r0, r3
 80036f6:	f003 fc47 	bl	8006f88 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80036fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8117 	beq.w	8003934 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003706:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	3310      	adds	r3, #16
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003734:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	441a      	add	r2, r3
 8003744:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800374a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800374e:	b29b      	uxth	r3, r3
 8003750:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003754:	78db      	ldrb	r3, [r3, #3]
 8003756:	2b01      	cmp	r3, #1
 8003758:	f040 80a1 	bne.w	800389e <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800375c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800375e:	2200      	movs	r2, #0
 8003760:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003764:	7b1b      	ldrb	r3, [r3, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8092 	beq.w	8003890 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800376c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d046      	beq.n	8003804 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003778:	785b      	ldrb	r3, [r3, #1]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d126      	bne.n	80037cc <PCD_EP_ISR_Handler+0x50a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800378c:	b29b      	uxth	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	4413      	add	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	00da      	lsls	r2, r3, #3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	4413      	add	r3, r2
 80037a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	801a      	strh	r2, [r3, #0]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	e061      	b.n	8003890 <PCD_EP_ISR_Handler+0x5ce>
 80037cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d15d      	bne.n	8003890 <PCD_EP_ISR_Handler+0x5ce>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	00da      	lsls	r2, r3, #3
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2200      	movs	r2, #0
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	e045      	b.n	8003890 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800380a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d126      	bne.n	8003860 <PCD_EP_ISR_Handler+0x59e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003820:	b29b      	uxth	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	4413      	add	r3, r2
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
 800382a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	00da      	lsls	r2, r3, #3
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	4413      	add	r3, r2
 8003834:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003838:	623b      	str	r3, [r7, #32]
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003844:	b29a      	uxth	r2, r3
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	801a      	strh	r2, [r3, #0]
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003858:	b29a      	uxth	r2, r3
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	e017      	b.n	8003890 <PCD_EP_ISR_Handler+0x5ce>
 8003860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d113      	bne.n	8003890 <PCD_EP_ISR_Handler+0x5ce>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003870:	b29b      	uxth	r3, r3
 8003872:	461a      	mov	r2, r3
 8003874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003876:	4413      	add	r3, r2
 8003878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800387a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	00da      	lsls	r2, r3, #3
 8003880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003882:	4413      	add	r3, r2
 8003884:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800388a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388c:	2200      	movs	r2, #0
 800388e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	4619      	mov	r1, r3
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f006 fc8f 	bl	800a1ba <HAL_PCD_DataInStageCallback>
 800389c:	e04a      	b.n	8003934 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800389e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80038a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d13f      	bne.n	8003928 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4413      	add	r3, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	4413      	add	r3, r2
 80038c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038cc:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80038ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d906      	bls.n	80038e6 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80038d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038da:	699a      	ldr	r2, [r3, #24]
 80038dc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80038de:	1ad2      	subs	r2, r2, r3
 80038e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e2:	619a      	str	r2, [r3, #24]
 80038e4:	e002      	b.n	80038ec <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80038e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e8:	2200      	movs	r2, #0
 80038ea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80038ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f006 fc5d 	bl	800a1ba <HAL_PCD_DataInStageCallback>
 8003900:	e018      	b.n	8003934 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003908:	441a      	add	r2, r3
 800390a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800390e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003914:	441a      	add	r2, r3
 8003916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003918:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003920:	4618      	mov	r0, r3
 8003922:	f003 fb31 	bl	8006f88 <USB_EPStartXfer>
 8003926:	e005      	b.n	8003934 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003928:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800392a:	461a      	mov	r2, r3
 800392c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f917 	bl	8003b62 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800393c:	b29b      	uxth	r3, r3
 800393e:	b21b      	sxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	f6ff acc3 	blt.w	80032cc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3748      	adds	r7, #72	@ 0x48
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d07c      	beq.n	8003a62 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003970:	b29b      	uxth	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	4413      	add	r3, r2
 8003982:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	8b7b      	ldrh	r3, [r7, #26]
 8003994:	429a      	cmp	r2, r3
 8003996:	d306      	bcc.n	80039a6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	8b7b      	ldrh	r3, [r7, #26]
 800399e:	1ad2      	subs	r2, r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	619a      	str	r2, [r3, #24]
 80039a4:	e002      	b.n	80039ac <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d123      	bne.n	80039fc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ce:	833b      	strh	r3, [r7, #24]
 80039d0:	8b3b      	ldrh	r3, [r7, #24]
 80039d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80039d6:	833b      	strh	r3, [r7, #24]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	441a      	add	r2, r3
 80039e6:	8b3b      	ldrh	r3, [r7, #24]
 80039e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01f      	beq.n	8003a46 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a20:	82fb      	strh	r3, [r7, #22]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	441a      	add	r2, r3
 8003a30:	8afb      	ldrh	r3, [r7, #22]
 8003a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a46:	8b7b      	ldrh	r3, [r7, #26]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8085 	beq.w	8003b58 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6959      	ldr	r1, [r3, #20]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	891a      	ldrh	r2, [r3, #8]
 8003a5a:	8b7b      	ldrh	r3, [r7, #26]
 8003a5c:	f004 f9d0 	bl	8007e00 <USB_ReadPMA>
 8003a60:	e07a      	b.n	8003b58 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a86:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	8b7b      	ldrh	r3, [r7, #26]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d306      	bcc.n	8003aa0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	8b7b      	ldrh	r3, [r7, #26]
 8003a98:	1ad2      	subs	r2, r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	619a      	str	r2, [r3, #24]
 8003a9e:	e002      	b.n	8003aa6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d123      	bne.n	8003af6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac8:	83fb      	strh	r3, [r7, #30]
 8003aca:	8bfb      	ldrh	r3, [r7, #30]
 8003acc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ad0:	83fb      	strh	r3, [r7, #30]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	441a      	add	r2, r3
 8003ae0:	8bfb      	ldrh	r3, [r7, #30]
 8003ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d11f      	bne.n	8003b40 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b1a:	83bb      	strh	r3, [r7, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	8bbb      	ldrh	r3, [r7, #28]
 8003b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b40:	8b7b      	ldrh	r3, [r7, #26]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6959      	ldr	r1, [r3, #20]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	895a      	ldrh	r2, [r3, #10]
 8003b52:	8b7b      	ldrh	r3, [r7, #26]
 8003b54:	f004 f954 	bl	8007e00 <USB_ReadPMA>
    }
  }

  return count;
 8003b58:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b0a6      	sub	sp, #152	@ 0x98
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 81f7 	beq.w	8003f6a <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d907      	bls.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003bb8:	1ad2      	subs	r2, r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	619a      	str	r2, [r3, #24]
 8003bbe:	e002      	b.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 80e1 	bne.w	8003d92 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	785b      	ldrb	r3, [r3, #1]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d126      	bne.n	8003c26 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	4413      	add	r3, r2
 8003bee:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	00da      	lsls	r2, r3, #3
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0e:	801a      	strh	r2, [r3, #0]
 8003c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c22:	801a      	strh	r2, [r3, #0]
 8003c24:	e01a      	b.n	8003c5c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	785b      	ldrb	r3, [r3, #1]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d116      	bne.n	8003c5c <HAL_PCD_EP_DB_Transmit+0xfa>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c42:	4413      	add	r3, r2
 8003c44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	00da      	lsls	r2, r3, #3
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4e:	4413      	add	r3, r2
 8003c50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c58:	2200      	movs	r2, #0
 8003c5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d126      	bne.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0x156>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	623b      	str	r3, [r7, #32]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	4413      	add	r3, r2
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	00da      	lsls	r2, r3, #3
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	e017      	b.n	8003ce8 <HAL_PCD_EP_DB_Transmit+0x186>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	785b      	ldrb	r3, [r3, #1]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d113      	bne.n	8003ce8 <HAL_PCD_EP_DB_Transmit+0x186>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cce:	4413      	add	r3, r2
 8003cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	00da      	lsls	r2, r3, #3
 8003cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cda:	4413      	add	r3, r2
 8003cdc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	78db      	ldrb	r3, [r3, #3]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d123      	bne.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d0a:	837b      	strh	r3, [r7, #26]
 8003d0c:	8b7b      	ldrh	r3, [r7, #26]
 8003d0e:	f083 0320 	eor.w	r3, r3, #32
 8003d12:	837b      	strh	r3, [r7, #26]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	8b7b      	ldrh	r3, [r7, #26]
 8003d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f006 fa3b 	bl	800a1ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01f      	beq.n	8003d8e <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d68:	833b      	strh	r3, [r7, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	441a      	add	r2, r3
 8003d78:	8b3b      	ldrh	r3, [r7, #24]
 8003d7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e31f      	b.n	80043d2 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d021      	beq.n	8003de0 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	441a      	add	r2, r3
 8003dc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	f040 82ca 	bne.w	8004380 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003df4:	441a      	add	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e02:	441a      	add	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	6a1a      	ldr	r2, [r3, #32]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d309      	bcc.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6a1a      	ldr	r2, [r3, #32]
 8003e1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e20:	1ad2      	subs	r2, r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	621a      	str	r2, [r3, #32]
 8003e26:	e015      	b.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d107      	bne.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003e30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e34:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e3e:	e009      	b.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2200      	movs	r2, #0
 8003e52:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	785b      	ldrb	r3, [r3, #1]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d15f      	bne.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e70:	4413      	add	r3, r2
 8003e72:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	00da      	lsls	r2, r3, #3
 8003e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e92:	801a      	strh	r2, [r3, #0]
 8003e94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eac:	801a      	strh	r2, [r3, #0]
 8003eae:	e051      	b.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003eb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003eb4:	d816      	bhi.n	8003ee4 <HAL_PCD_EP_DB_Transmit+0x382>
 8003eb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eb8:	085b      	lsrs	r3, r3, #1
 8003eba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_PCD_EP_DB_Transmit+0x36a>
 8003ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ec8:	3301      	adds	r3, #1
 8003eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	029b      	lsls	r3, r3, #10
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee0:	801a      	strh	r2, [r3, #0]
 8003ee2:	e037      	b.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <HAL_PCD_EP_DB_Transmit+0x398>
 8003ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	029b      	lsls	r3, r3, #10
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	e01b      	b.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d117      	bne.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f38:	4413      	add	r3, r2
 8003f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	00da      	lsls	r2, r3, #3
 8003f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f44:	4413      	add	r3, r2
 8003f46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f52:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	6959      	ldr	r1, [r3, #20]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	891a      	ldrh	r2, [r3, #8]
 8003f60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f003 ff09 	bl	8007d7a <USB_WritePMA>
 8003f68:	e20a      	b.n	8004380 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	4413      	add	r3, r2
 8003f84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f8e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d307      	bcc.n	8003fae <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003fa6:	1ad2      	subs	r2, r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	619a      	str	r2, [r3, #24]
 8003fac:	e002      	b.n	8003fb4 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f040 80f6 	bne.w	80041aa <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	785b      	ldrb	r3, [r3, #1]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d126      	bne.n	8004014 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fda:	4413      	add	r3, r2
 8003fdc:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	00da      	lsls	r2, r3, #3
 8003fe4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fec:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ffc:	801a      	strh	r2, [r3, #0]
 8003ffe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400c:	b29a      	uxth	r2, r3
 800400e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004010:	801a      	strh	r2, [r3, #0]
 8004012:	e01a      	b.n	800404a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d116      	bne.n	800404a <HAL_PCD_EP_DB_Transmit+0x4e8>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800402a:	b29b      	uxth	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004030:	4413      	add	r3, r2
 8004032:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	00da      	lsls	r2, r3, #3
 800403a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800403c:	4413      	add	r3, r2
 800403e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004042:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004046:	2200      	movs	r2, #0
 8004048:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	785b      	ldrb	r3, [r3, #1]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d12f      	bne.n	80040ba <HAL_PCD_EP_DB_Transmit+0x558>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800406a:	b29b      	uxth	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004072:	4413      	add	r3, r2
 8004074:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	00da      	lsls	r2, r3, #3
 800407e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004082:	4413      	add	r3, r2
 8004084:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800408c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004098:	b29a      	uxth	r2, r3
 800409a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800409e:	801a      	strh	r2, [r3, #0]
 80040a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	e01c      	b.n	80040f4 <HAL_PCD_EP_DB_Transmit+0x592>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	785b      	ldrb	r3, [r3, #1]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d118      	bne.n	80040f4 <HAL_PCD_EP_DB_Transmit+0x592>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040d2:	4413      	add	r3, r2
 80040d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	00da      	lsls	r2, r3, #3
 80040de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040e2:	4413      	add	r3, r2
 80040e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040f0:	2200      	movs	r2, #0
 80040f2:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	78db      	ldrb	r3, [r3, #3]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d127      	bne.n	800414c <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004116:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800411a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800411e:	f083 0320 	eor.w	r3, r3, #32
 8004122:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	441a      	add	r2, r3
 8004134:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800413c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004148:	b29b      	uxth	r3, r3
 800414a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	4619      	mov	r1, r3
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f006 f831 	bl	800a1ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d121      	bne.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	441a      	add	r2, r3
 800418e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800419a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800419e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e113      	b.n	80043d2 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d121      	bne.n	80041f8 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ce:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	441a      	add	r2, r3
 80041e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80041e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041fe:	2b01      	cmp	r3, #1
 8004200:	f040 80be 	bne.w	8004380 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800420c:	441a      	add	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800421a:	441a      	add	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	6a1a      	ldr	r2, [r3, #32]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	429a      	cmp	r2, r3
 800422a:	d309      	bcc.n	8004240 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004238:	1ad2      	subs	r2, r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	621a      	str	r2, [r3, #32]
 800423e:	e015      	b.n	800426c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d107      	bne.n	8004258 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004248:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800424c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004256:	e009      	b.n	800426c <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d15f      	bne.n	800433a <HAL_PCD_EP_DB_Transmit+0x7d8>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004288:	b29b      	uxth	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800428e:	4413      	add	r3, r2
 8004290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	00da      	lsls	r2, r3, #3
 8004298:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800429a:	4413      	add	r3, r2
 800429c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80042a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <HAL_PCD_EP_DB_Transmit+0x76c>
 80042b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042ca:	801a      	strh	r2, [r3, #0]
 80042cc:	e04e      	b.n	800436c <HAL_PCD_EP_DB_Transmit+0x80a>
 80042ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80042d2:	d816      	bhi.n	8004302 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80042d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80042da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_PCD_EP_DB_Transmit+0x788>
 80042e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042e6:	3301      	adds	r3, #1
 80042e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	029b      	lsls	r3, r3, #10
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	4313      	orrs	r3, r2
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042fe:	801a      	strh	r2, [r3, #0]
 8004300:	e034      	b.n	800436c <HAL_PCD_EP_DB_Transmit+0x80a>
 8004302:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	663b      	str	r3, [r7, #96]	@ 0x60
 8004308:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004312:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004314:	3b01      	subs	r3, #1
 8004316:	663b      	str	r3, [r7, #96]	@ 0x60
 8004318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	b29a      	uxth	r2, r3
 800431e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004320:	b29b      	uxth	r3, r3
 8004322:	029b      	lsls	r3, r3, #10
 8004324:	b29b      	uxth	r3, r3
 8004326:	4313      	orrs	r3, r2
 8004328:	b29b      	uxth	r3, r3
 800432a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800432e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004332:	b29a      	uxth	r2, r3
 8004334:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004336:	801a      	strh	r2, [r3, #0]
 8004338:	e018      	b.n	800436c <HAL_PCD_EP_DB_Transmit+0x80a>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	785b      	ldrb	r3, [r3, #1]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d114      	bne.n	800436c <HAL_PCD_EP_DB_Transmit+0x80a>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800434a:	b29b      	uxth	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004350:	4413      	add	r3, r2
 8004352:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	00da      	lsls	r2, r3, #3
 800435a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800435c:	4413      	add	r3, r2
 800435e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004362:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004366:	b29a      	uxth	r2, r3
 8004368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800436a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	6959      	ldr	r1, [r3, #20]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	895a      	ldrh	r2, [r3, #10]
 8004378:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800437a:	b29b      	uxth	r3, r3
 800437c:	f003 fcfd 	bl	8007d7a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800439a:	82fb      	strh	r3, [r7, #22]
 800439c:	8afb      	ldrh	r3, [r7, #22]
 800439e:	f083 0310 	eor.w	r3, r3, #16
 80043a2:	82fb      	strh	r3, [r7, #22]
 80043a4:	8afb      	ldrh	r3, [r7, #22]
 80043a6:	f083 0320 	eor.w	r3, r3, #32
 80043aa:	82fb      	strh	r3, [r7, #22]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	441a      	add	r2, r3
 80043ba:	8afb      	ldrh	r3, [r7, #22]
 80043bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3798      	adds	r7, #152	@ 0x98
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80043da:	b480      	push	{r7}
 80043dc:	b087      	sub	sp, #28
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	817b      	strh	r3, [r7, #10]
 80043e8:	4613      	mov	r3, r2
 80043ea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043ec:	897b      	ldrh	r3, [r7, #10]
 80043ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00b      	beq.n	8004410 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f8:	897b      	ldrh	r3, [r7, #10]
 80043fa:	f003 0207 	and.w	r2, r3, #7
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	3310      	adds	r3, #16
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e009      	b.n	8004424 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004410:	897a      	ldrh	r2, [r7, #10]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004424:	893b      	ldrh	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d107      	bne.n	800443a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2200      	movs	r2, #0
 800442e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	b29a      	uxth	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	80da      	strh	r2, [r3, #6]
 8004438:	e00b      	b.n	8004452 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2201      	movs	r2, #1
 800443e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	b29a      	uxth	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	b29a      	uxth	r2, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004484:	b29b      	uxth	r3, r3
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004498:	b29b      	uxth	r3, r3
 800449a:	f043 0302 	orr.w	r3, r3, #2
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d141      	bne.n	8004546 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044c2:	4b4b      	ldr	r3, [pc, #300]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ce:	d131      	bne.n	8004534 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044d0:	4b47      	ldr	r3, [pc, #284]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044d6:	4a46      	ldr	r2, [pc, #280]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044e0:	4b43      	ldr	r3, [pc, #268]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044e8:	4a41      	ldr	r2, [pc, #260]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044f0:	4b40      	ldr	r3, [pc, #256]	@ (80045f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2232      	movs	r2, #50	@ 0x32
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	4a3f      	ldr	r2, [pc, #252]	@ (80045f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	0c9b      	lsrs	r3, r3, #18
 8004502:	3301      	adds	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004506:	e002      	b.n	800450e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3b01      	subs	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800450e:	4b38      	ldr	r3, [pc, #224]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800451a:	d102      	bne.n	8004522 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f2      	bne.n	8004508 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004522:	4b33      	ldr	r3, [pc, #204]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800452a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452e:	d158      	bne.n	80045e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e057      	b.n	80045e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004534:	4b2e      	ldr	r3, [pc, #184]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800453a:	4a2d      	ldr	r2, [pc, #180]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004540:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004544:	e04d      	b.n	80045e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800454c:	d141      	bne.n	80045d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800454e:	4b28      	ldr	r3, [pc, #160]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800455a:	d131      	bne.n	80045c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800455c:	4b24      	ldr	r3, [pc, #144]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800455e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004562:	4a23      	ldr	r2, [pc, #140]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004568:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800456c:	4b20      	ldr	r3, [pc, #128]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004574:	4a1e      	ldr	r2, [pc, #120]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800457a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800457c:	4b1d      	ldr	r3, [pc, #116]	@ (80045f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2232      	movs	r2, #50	@ 0x32
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	4a1c      	ldr	r2, [pc, #112]	@ (80045f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	0c9b      	lsrs	r3, r3, #18
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004592:	e002      	b.n	800459a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3b01      	subs	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800459a:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a6:	d102      	bne.n	80045ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f2      	bne.n	8004594 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045ae:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ba:	d112      	bne.n	80045e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e011      	b.n	80045e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045c0:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045c6:	4a0a      	ldr	r2, [pc, #40]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045d0:	e007      	b.n	80045e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045d2:	4b07      	ldr	r3, [pc, #28]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045da:	4a05      	ldr	r2, [pc, #20]	@ (80045f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40007000 	.word	0x40007000
 80045f4:	20000000 	.word	0x20000000
 80045f8:	431bde83 	.word	0x431bde83

080045fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004600:	4b05      	ldr	r3, [pc, #20]	@ (8004618 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4a04      	ldr	r2, [pc, #16]	@ (8004618 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800460a:	6093      	str	r3, [r2, #8]
}
 800460c:	bf00      	nop
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40007000 	.word	0x40007000

0800461c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e2fe      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d075      	beq.n	8004726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800463a:	4b97      	ldr	r3, [pc, #604]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004644:	4b94      	ldr	r3, [pc, #592]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b0c      	cmp	r3, #12
 8004652:	d102      	bne.n	800465a <HAL_RCC_OscConfig+0x3e>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b03      	cmp	r3, #3
 8004658:	d002      	beq.n	8004660 <HAL_RCC_OscConfig+0x44>
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d10b      	bne.n	8004678 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	4b8d      	ldr	r3, [pc, #564]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d05b      	beq.n	8004724 <HAL_RCC_OscConfig+0x108>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d157      	bne.n	8004724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e2d9      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004680:	d106      	bne.n	8004690 <HAL_RCC_OscConfig+0x74>
 8004682:	4b85      	ldr	r3, [pc, #532]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a84      	ldr	r2, [pc, #528]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e01d      	b.n	80046cc <HAL_RCC_OscConfig+0xb0>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x98>
 800469a:	4b7f      	ldr	r3, [pc, #508]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a7e      	ldr	r2, [pc, #504]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80046a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4b7c      	ldr	r3, [pc, #496]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a7b      	ldr	r2, [pc, #492]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0xb0>
 80046b4:	4b78      	ldr	r3, [pc, #480]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a77      	ldr	r2, [pc, #476]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b75      	ldr	r3, [pc, #468]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a74      	ldr	r2, [pc, #464]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d013      	beq.n	80046fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fc f950 	bl	8000978 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046dc:	f7fc f94c 	bl	8000978 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	@ 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e29e      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0xc0>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fc f93c 	bl	8000978 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004704:	f7fc f938 	bl	8000978 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	@ 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e28a      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004716:	4b60      	ldr	r3, [pc, #384]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0xe8>
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d075      	beq.n	800481e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004732:	4b59      	ldr	r3, [pc, #356]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800473c:	4b56      	ldr	r3, [pc, #344]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b0c      	cmp	r3, #12
 800474a:	d102      	bne.n	8004752 <HAL_RCC_OscConfig+0x136>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d002      	beq.n	8004758 <HAL_RCC_OscConfig+0x13c>
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b04      	cmp	r3, #4
 8004756:	d11f      	bne.n	8004798 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004758:	4b4f      	ldr	r3, [pc, #316]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_OscConfig+0x154>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e25d      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004770:	4b49      	ldr	r3, [pc, #292]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	4946      	ldr	r1, [pc, #280]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004784:	4b45      	ldr	r3, [pc, #276]	@ (800489c <HAL_RCC_OscConfig+0x280>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f7fc f8a9 	bl	80008e0 <HAL_InitTick>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d043      	beq.n	800481c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e249      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d023      	beq.n	80047e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80047a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fc f8e4 	bl	8000978 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b4:	f7fc f8e0 	bl	8000978 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e232      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047c6:	4b34      	ldr	r3, [pc, #208]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d2:	4b31      	ldr	r3, [pc, #196]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	061b      	lsls	r3, r3, #24
 80047e0:	492d      	ldr	r1, [pc, #180]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	604b      	str	r3, [r1, #4]
 80047e6:	e01a      	b.n	800481e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 80047ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f4:	f7fc f8c0 	bl	8000978 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047fc:	f7fc f8bc 	bl	8000978 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e20e      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800480e:	4b22      	ldr	r3, [pc, #136]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x1e0>
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800481c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d041      	beq.n	80048ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01c      	beq.n	800486c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004832:	4b19      	ldr	r3, [pc, #100]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 8004834:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004838:	4a17      	ldr	r2, [pc, #92]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004842:	f7fc f899 	bl	8000978 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800484a:	f7fc f895 	bl	8000978 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e1e7      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485c:	4b0e      	ldr	r3, [pc, #56]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 800485e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ef      	beq.n	800484a <HAL_RCC_OscConfig+0x22e>
 800486a:	e020      	b.n	80048ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486c:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 800486e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004872:	4a09      	ldr	r2, [pc, #36]	@ (8004898 <HAL_RCC_OscConfig+0x27c>)
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fc f87c 	bl	8000978 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004882:	e00d      	b.n	80048a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004884:	f7fc f878 	bl	8000978 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d906      	bls.n	80048a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e1ca      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048a0:	4b8c      	ldr	r3, [pc, #560]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 80048a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1ea      	bne.n	8004884 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80a6 	beq.w	8004a08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048bc:	2300      	movs	r3, #0
 80048be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048c0:	4b84      	ldr	r3, [pc, #528]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_OscConfig+0x2b4>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x2b6>
 80048d0:	2300      	movs	r3, #0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00d      	beq.n	80048f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048da:	4a7e      	ldr	r2, [pc, #504]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 80048dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80048e2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048ee:	2301      	movs	r3, #1
 80048f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f2:	4b79      	ldr	r3, [pc, #484]	@ (8004ad8 <HAL_RCC_OscConfig+0x4bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d118      	bne.n	8004930 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048fe:	4b76      	ldr	r3, [pc, #472]	@ (8004ad8 <HAL_RCC_OscConfig+0x4bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a75      	ldr	r2, [pc, #468]	@ (8004ad8 <HAL_RCC_OscConfig+0x4bc>)
 8004904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490a:	f7fc f835 	bl	8000978 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004912:	f7fc f831 	bl	8000978 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e183      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004924:	4b6c      	ldr	r3, [pc, #432]	@ (8004ad8 <HAL_RCC_OscConfig+0x4bc>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d108      	bne.n	800494a <HAL_RCC_OscConfig+0x32e>
 8004938:	4b66      	ldr	r3, [pc, #408]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493e:	4a65      	ldr	r2, [pc, #404]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004948:	e024      	b.n	8004994 <HAL_RCC_OscConfig+0x378>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b05      	cmp	r3, #5
 8004950:	d110      	bne.n	8004974 <HAL_RCC_OscConfig+0x358>
 8004952:	4b60      	ldr	r3, [pc, #384]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004958:	4a5e      	ldr	r2, [pc, #376]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 800495a:	f043 0304 	orr.w	r3, r3, #4
 800495e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004962:	4b5c      	ldr	r3, [pc, #368]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004968:	4a5a      	ldr	r2, [pc, #360]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004972:	e00f      	b.n	8004994 <HAL_RCC_OscConfig+0x378>
 8004974:	4b57      	ldr	r3, [pc, #348]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497a:	4a56      	ldr	r2, [pc, #344]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004984:	4b53      	ldr	r3, [pc, #332]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498a:	4a52      	ldr	r2, [pc, #328]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 800498c:	f023 0304 	bic.w	r3, r3, #4
 8004990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d016      	beq.n	80049ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fb ffec 	bl	8000978 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7fb ffe8 	bl	8000978 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e138      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ba:	4b46      	ldr	r3, [pc, #280]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0ed      	beq.n	80049a4 <HAL_RCC_OscConfig+0x388>
 80049c8:	e015      	b.n	80049f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ca:	f7fb ffd5 	bl	8000978 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049d0:	e00a      	b.n	80049e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fb ffd1 	bl	8000978 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e121      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049e8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1ed      	bne.n	80049d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049f6:	7ffb      	ldrb	r3, [r7, #31]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d105      	bne.n	8004a08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fc:	4b35      	ldr	r3, [pc, #212]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 80049fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a00:	4a34      	ldr	r2, [pc, #208]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d03c      	beq.n	8004a8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01c      	beq.n	8004a56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a22:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2c:	f7fb ffa4 	bl	8000978 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a34:	f7fb ffa0 	bl	8000978 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e0f2      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a46:	4b23      	ldr	r3, [pc, #140]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ef      	beq.n	8004a34 <HAL_RCC_OscConfig+0x418>
 8004a54:	e01b      	b.n	8004a8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a56:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a66:	f7fb ff87 	bl	8000978 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a6e:	f7fb ff83 	bl	8000978 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0d5      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a80:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1ef      	bne.n	8004a6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 80c9 	beq.w	8004c2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a98:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 030c 	and.w	r3, r3, #12
 8004aa0:	2b0c      	cmp	r3, #12
 8004aa2:	f000 8083 	beq.w	8004bac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d15e      	bne.n	8004b6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aae:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a08      	ldr	r2, [pc, #32]	@ (8004ad4 <HAL_RCC_OscConfig+0x4b8>)
 8004ab4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fb ff5d 	bl	8000978 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac0:	e00c      	b.n	8004adc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac2:	f7fb ff59 	bl	8000978 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d905      	bls.n	8004adc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e0ab      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004adc:	4b55      	ldr	r3, [pc, #340]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1ec      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae8:	4b52      	ldr	r3, [pc, #328]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	4b52      	ldr	r3, [pc, #328]	@ (8004c38 <HAL_RCC_OscConfig+0x61c>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6a11      	ldr	r1, [r2, #32]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004af8:	3a01      	subs	r2, #1
 8004afa:	0112      	lsls	r2, r2, #4
 8004afc:	4311      	orrs	r1, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b02:	0212      	lsls	r2, r2, #8
 8004b04:	4311      	orrs	r1, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b0a:	0852      	lsrs	r2, r2, #1
 8004b0c:	3a01      	subs	r2, #1
 8004b0e:	0552      	lsls	r2, r2, #21
 8004b10:	4311      	orrs	r1, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b16:	0852      	lsrs	r2, r2, #1
 8004b18:	3a01      	subs	r2, #1
 8004b1a:	0652      	lsls	r2, r2, #25
 8004b1c:	4311      	orrs	r1, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b22:	06d2      	lsls	r2, r2, #27
 8004b24:	430a      	orrs	r2, r1
 8004b26:	4943      	ldr	r1, [pc, #268]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b2c:	4b41      	ldr	r3, [pc, #260]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a40      	ldr	r2, [pc, #256]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b38:	4b3e      	ldr	r3, [pc, #248]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fb ff18 	bl	8000978 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fb ff14 	bl	8000978 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e066      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b5e:	4b35      	ldr	r3, [pc, #212]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x530>
 8004b6a:	e05e      	b.n	8004c2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6c:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a30      	ldr	r2, [pc, #192]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fb fefe 	bl	8000978 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b80:	f7fb fefa 	bl	8000978 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e04c      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b92:	4b28      	ldr	r3, [pc, #160]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004b9e:	4b25      	ldr	r3, [pc, #148]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	4924      	ldr	r1, [pc, #144]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004ba4:	4b25      	ldr	r3, [pc, #148]	@ (8004c3c <HAL_RCC_OscConfig+0x620>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	60cb      	str	r3, [r1, #12]
 8004baa:	e03e      	b.n	8004c2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e039      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c34 <HAL_RCC_OscConfig+0x618>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 0203 	and.w	r2, r3, #3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d12c      	bne.n	8004c26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d123      	bne.n	8004c26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d11b      	bne.n	8004c26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d113      	bne.n	8004c26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d109      	bne.n	8004c26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d001      	beq.n	8004c2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3720      	adds	r7, #32
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	019f800c 	.word	0x019f800c
 8004c3c:	feeefffc 	.word	0xfeeefffc

08004c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e11e      	b.n	8004e96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c58:	4b91      	ldr	r3, [pc, #580]	@ (8004ea0 <HAL_RCC_ClockConfig+0x260>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d910      	bls.n	8004c88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c66:	4b8e      	ldr	r3, [pc, #568]	@ (8004ea0 <HAL_RCC_ClockConfig+0x260>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 020f 	bic.w	r2, r3, #15
 8004c6e:	498c      	ldr	r1, [pc, #560]	@ (8004ea0 <HAL_RCC_ClockConfig+0x260>)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c76:	4b8a      	ldr	r3, [pc, #552]	@ (8004ea0 <HAL_RCC_ClockConfig+0x260>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e106      	b.n	8004e96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d073      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d129      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c9c:	4b81      	ldr	r3, [pc, #516]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0f4      	b.n	8004e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004cac:	f000 f964 	bl	8004f78 <RCC_GetSysClockFreqFromPLLSource>
 8004cb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4a7c      	ldr	r2, [pc, #496]	@ (8004ea8 <HAL_RCC_ClockConfig+0x268>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d93f      	bls.n	8004d3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004cba:	4b7a      	ldr	r3, [pc, #488]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d033      	beq.n	8004d3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d12f      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cda:	4b72      	ldr	r3, [pc, #456]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ce2:	4a70      	ldr	r2, [pc, #448]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ce8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cea:	2380      	movs	r3, #128	@ 0x80
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e024      	b.n	8004d3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cf8:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0c6      	b.n	8004e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d08:	4b66      	ldr	r3, [pc, #408]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0be      	b.n	8004e96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d18:	f000 f8ce 	bl	8004eb8 <HAL_RCC_GetSysClockFreq>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4a61      	ldr	r2, [pc, #388]	@ (8004ea8 <HAL_RCC_ClockConfig+0x268>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d909      	bls.n	8004d3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d26:	4b5f      	ldr	r3, [pc, #380]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d2e:	4a5d      	ldr	r2, [pc, #372]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d36:	2380      	movs	r3, #128	@ 0x80
 8004d38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d3a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 0203 	bic.w	r2, r3, #3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	4957      	ldr	r1, [pc, #348]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4c:	f7fb fe14 	bl	8000978 <HAL_GetTick>
 8004d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d52:	e00a      	b.n	8004d6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d54:	f7fb fe10 	bl	8000978 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e095      	b.n	8004e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 020c 	and.w	r2, r3, #12
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d1eb      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d023      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d94:	4b43      	ldr	r3, [pc, #268]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4a42      	ldr	r2, [pc, #264]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004d9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004dac:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004db4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004db6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004dba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dbc:	4b39      	ldr	r3, [pc, #228]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4936      	ldr	r1, [pc, #216]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b80      	cmp	r3, #128	@ 0x80
 8004dd4:	d105      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004dd6:	4b33      	ldr	r3, [pc, #204]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	4a32      	ldr	r2, [pc, #200]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004ddc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004de0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004de2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ea0 <HAL_RCC_ClockConfig+0x260>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d21d      	bcs.n	8004e2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df0:	4b2b      	ldr	r3, [pc, #172]	@ (8004ea0 <HAL_RCC_ClockConfig+0x260>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f023 020f 	bic.w	r2, r3, #15
 8004df8:	4929      	ldr	r1, [pc, #164]	@ (8004ea0 <HAL_RCC_ClockConfig+0x260>)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e00:	f7fb fdba 	bl	8000978 <HAL_GetTick>
 8004e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	e00a      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e08:	f7fb fdb6 	bl	8000978 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e03b      	b.n	8004e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1e:	4b20      	ldr	r3, [pc, #128]	@ (8004ea0 <HAL_RCC_ClockConfig+0x260>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d1ed      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4917      	ldr	r1, [pc, #92]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e56:	4b13      	ldr	r3, [pc, #76]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	490f      	ldr	r1, [pc, #60]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e6a:	f000 f825 	bl	8004eb8 <HAL_RCC_GetSysClockFreq>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <HAL_RCC_ClockConfig+0x264>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	490c      	ldr	r1, [pc, #48]	@ (8004eac <HAL_RCC_ClockConfig+0x26c>)
 8004e7c:	5ccb      	ldrb	r3, [r1, r3]
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	fa22 f303 	lsr.w	r3, r2, r3
 8004e86:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb0 <HAL_RCC_ClockConfig+0x270>)
 8004e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb4 <HAL_RCC_ClockConfig+0x274>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fb fd26 	bl	80008e0 <HAL_InitTick>
 8004e94:	4603      	mov	r3, r0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40022000 	.word	0x40022000
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	04c4b400 	.word	0x04c4b400
 8004eac:	0800a7b0 	.word	0x0800a7b0
 8004eb0:	20000000 	.word	0x20000000
 8004eb4:	20000004 	.word	0x20000004

08004eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d102      	bne.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eca:	4b2a      	ldr	r3, [pc, #168]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	e047      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ed0:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 030c 	and.w	r3, r3, #12
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d102      	bne.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004edc:	4b25      	ldr	r3, [pc, #148]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	e03e      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ee2:	4b23      	ldr	r3, [pc, #140]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b0c      	cmp	r3, #12
 8004eec:	d136      	bne.n	8004f5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eee:	4b20      	ldr	r3, [pc, #128]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	3301      	adds	r3, #1
 8004f04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d10c      	bne.n	8004f26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f0c:	4a19      	ldr	r2, [pc, #100]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	4a16      	ldr	r2, [pc, #88]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f16:	68d2      	ldr	r2, [r2, #12]
 8004f18:	0a12      	lsrs	r2, r2, #8
 8004f1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	617b      	str	r3, [r7, #20]
      break;
 8004f24:	e00c      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f26:	4a13      	ldr	r2, [pc, #76]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2e:	4a10      	ldr	r2, [pc, #64]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f30:	68d2      	ldr	r2, [r2, #12]
 8004f32:	0a12      	lsrs	r2, r2, #8
 8004f34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f38:	fb02 f303 	mul.w	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]
      break;
 8004f3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	0e5b      	lsrs	r3, r3, #25
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	e001      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004f60:	693b      	ldr	r3, [r7, #16]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40021000 	.word	0x40021000
 8004f74:	00f42400 	.word	0x00f42400

08004f78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	091b      	lsrs	r3, r3, #4
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	3301      	adds	r3, #1
 8004f94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d10c      	bne.n	8004fb6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f9c:	4a17      	ldr	r2, [pc, #92]	@ (8004ffc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	4a14      	ldr	r2, [pc, #80]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fa6:	68d2      	ldr	r2, [r2, #12]
 8004fa8:	0a12      	lsrs	r2, r2, #8
 8004faa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fae:	fb02 f303 	mul.w	r3, r2, r3
 8004fb2:	617b      	str	r3, [r7, #20]
    break;
 8004fb4:	e00c      	b.n	8004fd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fb6:	4a11      	ldr	r2, [pc, #68]	@ (8004ffc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fc0:	68d2      	ldr	r2, [r2, #12]
 8004fc2:	0a12      	lsrs	r2, r2, #8
 8004fc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fc8:	fb02 f303 	mul.w	r3, r2, r3
 8004fcc:	617b      	str	r3, [r7, #20]
    break;
 8004fce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fd0:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	0e5b      	lsrs	r3, r3, #25
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	3301      	adds	r3, #1
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004fea:	687b      	ldr	r3, [r7, #4]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	00f42400 	.word	0x00f42400

08005000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005008:	2300      	movs	r3, #0
 800500a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800500c:	2300      	movs	r3, #0
 800500e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 8098 	beq.w	800514e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501e:	2300      	movs	r3, #0
 8005020:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005022:	4b43      	ldr	r3, [pc, #268]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10d      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800502e:	4b40      	ldr	r3, [pc, #256]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005032:	4a3f      	ldr	r2, [pc, #252]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005038:	6593      	str	r3, [r2, #88]	@ 0x58
 800503a:	4b3d      	ldr	r3, [pc, #244]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800503c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005042:	60bb      	str	r3, [r7, #8]
 8005044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005046:	2301      	movs	r3, #1
 8005048:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800504a:	4b3a      	ldr	r3, [pc, #232]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a39      	ldr	r2, [pc, #228]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005054:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005056:	f7fb fc8f 	bl	8000978 <HAL_GetTick>
 800505a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505c:	e009      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505e:	f7fb fc8b 	bl	8000978 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d902      	bls.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	74fb      	strb	r3, [r7, #19]
        break;
 8005070:	e005      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005072:	4b30      	ldr	r3, [pc, #192]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0ef      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800507e:	7cfb      	ldrb	r3, [r7, #19]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d159      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005084:	4b2a      	ldr	r3, [pc, #168]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800508e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d01e      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	d019      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050a0:	4b23      	ldr	r3, [pc, #140]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050ac:	4b20      	ldr	r3, [pc, #128]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050cc:	4a18      	ldr	r2, [pc, #96]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d016      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050de:	f7fb fc4b 	bl	8000978 <HAL_GetTick>
 80050e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e4:	e00b      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e6:	f7fb fc47 	bl	8000978 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d902      	bls.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	74fb      	strb	r3, [r7, #19]
            break;
 80050fc:	e006      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0ec      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800510c:	7cfb      	ldrb	r3, [r7, #19]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005112:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005118:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	4903      	ldr	r1, [pc, #12]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005128:	e008      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800512a:	7cfb      	ldrb	r3, [r7, #19]
 800512c:	74bb      	strb	r3, [r7, #18]
 800512e:	e005      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005130:	40021000 	.word	0x40021000
 8005134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005138:	7cfb      	ldrb	r3, [r7, #19]
 800513a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800513c:	7c7b      	ldrb	r3, [r7, #17]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d105      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005142:	4ba6      	ldr	r3, [pc, #664]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005146:	4aa5      	ldr	r2, [pc, #660]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800514c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800515a:	4ba0      	ldr	r3, [pc, #640]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005160:	f023 0203 	bic.w	r2, r3, #3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	499c      	ldr	r1, [pc, #624]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800517c:	4b97      	ldr	r3, [pc, #604]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005182:	f023 020c 	bic.w	r2, r3, #12
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	4994      	ldr	r1, [pc, #592]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800519e:	4b8f      	ldr	r3, [pc, #572]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	498b      	ldr	r1, [pc, #556]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051c0:	4b86      	ldr	r3, [pc, #536]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	4983      	ldr	r1, [pc, #524]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051e2:	4b7e      	ldr	r3, [pc, #504]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	497a      	ldr	r1, [pc, #488]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005204:	4b75      	ldr	r3, [pc, #468]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	4972      	ldr	r1, [pc, #456]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005226:	4b6d      	ldr	r3, [pc, #436]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	4969      	ldr	r1, [pc, #420]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005248:	4b64      	ldr	r3, [pc, #400]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	4961      	ldr	r1, [pc, #388]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800526a:	4b5c      	ldr	r3, [pc, #368]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005270:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	4958      	ldr	r1, [pc, #352]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005288:	2b00      	cmp	r3, #0
 800528a:	d015      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800528c:	4b53      	ldr	r3, [pc, #332]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005292:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	4950      	ldr	r1, [pc, #320]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052aa:	d105      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ac:	4b4b      	ldr	r3, [pc, #300]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4a4a      	ldr	r2, [pc, #296]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052b6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d015      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052c4:	4b45      	ldr	r3, [pc, #276]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	4942      	ldr	r1, [pc, #264]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052e2:	d105      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e4:	4b3d      	ldr	r3, [pc, #244]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	4a3c      	ldr	r2, [pc, #240]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d015      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052fc:	4b37      	ldr	r3, [pc, #220]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005302:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530a:	4934      	ldr	r1, [pc, #208]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005316:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800531a:	d105      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800531c:	4b2f      	ldr	r3, [pc, #188]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a2e      	ldr	r2, [pc, #184]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005326:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d015      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005334:	4b29      	ldr	r3, [pc, #164]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005342:	4926      	ldr	r1, [pc, #152]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005352:	d105      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005354:	4b21      	ldr	r3, [pc, #132]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4a20      	ldr	r2, [pc, #128]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800535e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d015      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800536c:	4b1b      	ldr	r3, [pc, #108]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005372:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537a:	4918      	ldr	r1, [pc, #96]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800538a:	d105      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800538c:	4b13      	ldr	r3, [pc, #76]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4a12      	ldr	r2, [pc, #72]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005396:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d015      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053a4:	4b0d      	ldr	r3, [pc, #52]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b2:	490a      	ldr	r1, [pc, #40]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053c2:	d105      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053c4:	4b05      	ldr	r3, [pc, #20]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4a04      	ldr	r2, [pc, #16]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80053d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000

080053e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e049      	b.n	8005486 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fb f976 	bl	80006f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f000 fba4 	bl	8005b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e049      	b.n	8005534 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f841 	bl	800553c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3304      	adds	r3, #4
 80054ca:	4619      	mov	r1, r3
 80054cc:	4610      	mov	r0, r2
 80054ce:	f000 fb4d 	bl	8005b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d109      	bne.n	8005574 <HAL_TIM_PWM_Start+0x24>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	e03c      	b.n	80055ee <HAL_TIM_PWM_Start+0x9e>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b04      	cmp	r3, #4
 8005578:	d109      	bne.n	800558e <HAL_TIM_PWM_Start+0x3e>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b01      	cmp	r3, #1
 8005584:	bf14      	ite	ne
 8005586:	2301      	movne	r3, #1
 8005588:	2300      	moveq	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	e02f      	b.n	80055ee <HAL_TIM_PWM_Start+0x9e>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b08      	cmp	r3, #8
 8005592:	d109      	bne.n	80055a8 <HAL_TIM_PWM_Start+0x58>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	bf14      	ite	ne
 80055a0:	2301      	movne	r3, #1
 80055a2:	2300      	moveq	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	e022      	b.n	80055ee <HAL_TIM_PWM_Start+0x9e>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b0c      	cmp	r3, #12
 80055ac:	d109      	bne.n	80055c2 <HAL_TIM_PWM_Start+0x72>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	bf14      	ite	ne
 80055ba:	2301      	movne	r3, #1
 80055bc:	2300      	moveq	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	e015      	b.n	80055ee <HAL_TIM_PWM_Start+0x9e>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d109      	bne.n	80055dc <HAL_TIM_PWM_Start+0x8c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	bf14      	ite	ne
 80055d4:	2301      	movne	r3, #1
 80055d6:	2300      	moveq	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	e008      	b.n	80055ee <HAL_TIM_PWM_Start+0x9e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e097      	b.n	8005726 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_PWM_Start+0xb6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005604:	e023      	b.n	800564e <HAL_TIM_PWM_Start+0xfe>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d104      	bne.n	8005616 <HAL_TIM_PWM_Start+0xc6>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005614:	e01b      	b.n	800564e <HAL_TIM_PWM_Start+0xfe>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d104      	bne.n	8005626 <HAL_TIM_PWM_Start+0xd6>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005624:	e013      	b.n	800564e <HAL_TIM_PWM_Start+0xfe>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b0c      	cmp	r3, #12
 800562a:	d104      	bne.n	8005636 <HAL_TIM_PWM_Start+0xe6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005634:	e00b      	b.n	800564e <HAL_TIM_PWM_Start+0xfe>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b10      	cmp	r3, #16
 800563a:	d104      	bne.n	8005646 <HAL_TIM_PWM_Start+0xf6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005644:	e003      	b.n	800564e <HAL_TIM_PWM_Start+0xfe>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2201      	movs	r2, #1
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 feb6 	bl	80063c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a33      	ldr	r2, [pc, #204]	@ (8005730 <HAL_TIM_PWM_Start+0x1e0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d013      	beq.n	800568e <HAL_TIM_PWM_Start+0x13e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a32      	ldr	r2, [pc, #200]	@ (8005734 <HAL_TIM_PWM_Start+0x1e4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00e      	beq.n	800568e <HAL_TIM_PWM_Start+0x13e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a30      	ldr	r2, [pc, #192]	@ (8005738 <HAL_TIM_PWM_Start+0x1e8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_TIM_PWM_Start+0x13e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2f      	ldr	r2, [pc, #188]	@ (800573c <HAL_TIM_PWM_Start+0x1ec>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d004      	beq.n	800568e <HAL_TIM_PWM_Start+0x13e>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a2d      	ldr	r2, [pc, #180]	@ (8005740 <HAL_TIM_PWM_Start+0x1f0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d101      	bne.n	8005692 <HAL_TIM_PWM_Start+0x142>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <HAL_TIM_PWM_Start+0x144>
 8005692:	2300      	movs	r3, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a20      	ldr	r2, [pc, #128]	@ (8005730 <HAL_TIM_PWM_Start+0x1e0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d018      	beq.n	80056e4 <HAL_TIM_PWM_Start+0x194>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ba:	d013      	beq.n	80056e4 <HAL_TIM_PWM_Start+0x194>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a20      	ldr	r2, [pc, #128]	@ (8005744 <HAL_TIM_PWM_Start+0x1f4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00e      	beq.n	80056e4 <HAL_TIM_PWM_Start+0x194>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005748 <HAL_TIM_PWM_Start+0x1f8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d009      	beq.n	80056e4 <HAL_TIM_PWM_Start+0x194>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a17      	ldr	r2, [pc, #92]	@ (8005734 <HAL_TIM_PWM_Start+0x1e4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <HAL_TIM_PWM_Start+0x194>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a16      	ldr	r2, [pc, #88]	@ (8005738 <HAL_TIM_PWM_Start+0x1e8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d115      	bne.n	8005710 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	4b18      	ldr	r3, [pc, #96]	@ (800574c <HAL_TIM_PWM_Start+0x1fc>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d015      	beq.n	8005722 <HAL_TIM_PWM_Start+0x1d2>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056fc:	d011      	beq.n	8005722 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0201 	orr.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570e:	e008      	b.n	8005722 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e000      	b.n	8005724 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005722:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40012c00 	.word	0x40012c00
 8005734:	40013400 	.word	0x40013400
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	00010007 	.word	0x00010007

08005750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800576a:	2302      	movs	r3, #2
 800576c:	e0ff      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b14      	cmp	r3, #20
 800577a:	f200 80f0 	bhi.w	800595e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800577e:	a201      	add	r2, pc, #4	@ (adr r2, 8005784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	080057d9 	.word	0x080057d9
 8005788:	0800595f 	.word	0x0800595f
 800578c:	0800595f 	.word	0x0800595f
 8005790:	0800595f 	.word	0x0800595f
 8005794:	08005819 	.word	0x08005819
 8005798:	0800595f 	.word	0x0800595f
 800579c:	0800595f 	.word	0x0800595f
 80057a0:	0800595f 	.word	0x0800595f
 80057a4:	0800585b 	.word	0x0800585b
 80057a8:	0800595f 	.word	0x0800595f
 80057ac:	0800595f 	.word	0x0800595f
 80057b0:	0800595f 	.word	0x0800595f
 80057b4:	0800589b 	.word	0x0800589b
 80057b8:	0800595f 	.word	0x0800595f
 80057bc:	0800595f 	.word	0x0800595f
 80057c0:	0800595f 	.word	0x0800595f
 80057c4:	080058dd 	.word	0x080058dd
 80057c8:	0800595f 	.word	0x0800595f
 80057cc:	0800595f 	.word	0x0800595f
 80057d0:	0800595f 	.word	0x0800595f
 80057d4:	0800591d 	.word	0x0800591d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fa60 	bl	8005ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0208 	orr.w	r2, r2, #8
 80057f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0204 	bic.w	r2, r2, #4
 8005802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6999      	ldr	r1, [r3, #24]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	619a      	str	r2, [r3, #24]
      break;
 8005816:	e0a5      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fad0 	bl	8005dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6999      	ldr	r1, [r3, #24]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	021a      	lsls	r2, r3, #8
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	619a      	str	r2, [r3, #24]
      break;
 8005858:	e084      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fb39 	bl	8005ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0208 	orr.w	r2, r2, #8
 8005874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0204 	bic.w	r2, r2, #4
 8005884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69d9      	ldr	r1, [r3, #28]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	61da      	str	r2, [r3, #28]
      break;
 8005898:	e064      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fba1 	bl	8005fe8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69d9      	ldr	r1, [r3, #28]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	021a      	lsls	r2, r3, #8
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	61da      	str	r2, [r3, #28]
      break;
 80058da:	e043      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fc0a 	bl	80060fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0208 	orr.w	r2, r2, #8
 80058f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0204 	bic.w	r2, r2, #4
 8005906:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800591a:	e023      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fc4e 	bl	80061c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005936:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005946:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	021a      	lsls	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800595c:	e002      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	75fb      	strb	r3, [r7, #23]
      break;
 8005962:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800596c:	7dfb      	ldrb	r3, [r7, #23]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop

08005978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_TIM_ConfigClockSource+0x1c>
 8005990:	2302      	movs	r3, #2
 8005992:	e0de      	b.n	8005b52 <HAL_TIM_ConfigClockSource+0x1da>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80059b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a63      	ldr	r2, [pc, #396]	@ (8005b5c <HAL_TIM_ConfigClockSource+0x1e4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f000 80a9 	beq.w	8005b26 <HAL_TIM_ConfigClockSource+0x1ae>
 80059d4:	4a61      	ldr	r2, [pc, #388]	@ (8005b5c <HAL_TIM_ConfigClockSource+0x1e4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	f200 80ae 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 80059dc:	4a60      	ldr	r2, [pc, #384]	@ (8005b60 <HAL_TIM_ConfigClockSource+0x1e8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	f000 80a1 	beq.w	8005b26 <HAL_TIM_ConfigClockSource+0x1ae>
 80059e4:	4a5e      	ldr	r2, [pc, #376]	@ (8005b60 <HAL_TIM_ConfigClockSource+0x1e8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	f200 80a6 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 80059ec:	4a5d      	ldr	r2, [pc, #372]	@ (8005b64 <HAL_TIM_ConfigClockSource+0x1ec>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	f000 8099 	beq.w	8005b26 <HAL_TIM_ConfigClockSource+0x1ae>
 80059f4:	4a5b      	ldr	r2, [pc, #364]	@ (8005b64 <HAL_TIM_ConfigClockSource+0x1ec>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	f200 809e 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 80059fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005b68 <HAL_TIM_ConfigClockSource+0x1f0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	f000 8091 	beq.w	8005b26 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a04:	4a58      	ldr	r2, [pc, #352]	@ (8005b68 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	f200 8096 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a10:	f000 8089 	beq.w	8005b26 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a18:	f200 808e 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a20:	d03e      	beq.n	8005aa0 <HAL_TIM_ConfigClockSource+0x128>
 8005a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a26:	f200 8087 	bhi.w	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2e:	f000 8086 	beq.w	8005b3e <HAL_TIM_ConfigClockSource+0x1c6>
 8005a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a36:	d87f      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a38:	2b70      	cmp	r3, #112	@ 0x70
 8005a3a:	d01a      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0xfa>
 8005a3c:	2b70      	cmp	r3, #112	@ 0x70
 8005a3e:	d87b      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a40:	2b60      	cmp	r3, #96	@ 0x60
 8005a42:	d050      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x16e>
 8005a44:	2b60      	cmp	r3, #96	@ 0x60
 8005a46:	d877      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a48:	2b50      	cmp	r3, #80	@ 0x50
 8005a4a:	d03c      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x14e>
 8005a4c:	2b50      	cmp	r3, #80	@ 0x50
 8005a4e:	d873      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a50:	2b40      	cmp	r3, #64	@ 0x40
 8005a52:	d058      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0x18e>
 8005a54:	2b40      	cmp	r3, #64	@ 0x40
 8005a56:	d86f      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a58:	2b30      	cmp	r3, #48	@ 0x30
 8005a5a:	d064      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a5c:	2b30      	cmp	r3, #48	@ 0x30
 8005a5e:	d86b      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d060      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d867      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d05c      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a6c:	2b10      	cmp	r3, #16
 8005a6e:	d05a      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a70:	e062      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a82:	f000 fc81 	bl	8006388 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	609a      	str	r2, [r3, #8]
      break;
 8005a9e:	e04f      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ab0:	f000 fc6a 	bl	8006388 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ac2:	609a      	str	r2, [r3, #8]
      break;
 8005ac4:	e03c      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f000 fbdc 	bl	8006290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2150      	movs	r1, #80	@ 0x50
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fc35 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005ae4:	e02c      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005af2:	461a      	mov	r2, r3
 8005af4:	f000 fbfb 	bl	80062ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2160      	movs	r1, #96	@ 0x60
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fc25 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005b04:	e01c      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b12:	461a      	mov	r2, r3
 8005b14:	f000 fbbc 	bl	8006290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2140      	movs	r1, #64	@ 0x40
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fc15 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005b24:	e00c      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f000 fc0c 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005b36:	e003      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b3c:	e000      	b.n	8005b40 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	00100070 	.word	0x00100070
 8005b60:	00100040 	.word	0x00100040
 8005b64:	00100030 	.word	0x00100030
 8005b68:	00100020 	.word	0x00100020

08005b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a42      	ldr	r2, [pc, #264]	@ (8005c88 <TIM_Base_SetConfig+0x11c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00f      	beq.n	8005ba4 <TIM_Base_SetConfig+0x38>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b8a:	d00b      	beq.n	8005ba4 <TIM_Base_SetConfig+0x38>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c8c <TIM_Base_SetConfig+0x120>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d007      	beq.n	8005ba4 <TIM_Base_SetConfig+0x38>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3e      	ldr	r2, [pc, #248]	@ (8005c90 <TIM_Base_SetConfig+0x124>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <TIM_Base_SetConfig+0x38>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3d      	ldr	r2, [pc, #244]	@ (8005c94 <TIM_Base_SetConfig+0x128>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d108      	bne.n	8005bb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a33      	ldr	r2, [pc, #204]	@ (8005c88 <TIM_Base_SetConfig+0x11c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01b      	beq.n	8005bf6 <TIM_Base_SetConfig+0x8a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc4:	d017      	beq.n	8005bf6 <TIM_Base_SetConfig+0x8a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a30      	ldr	r2, [pc, #192]	@ (8005c8c <TIM_Base_SetConfig+0x120>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <TIM_Base_SetConfig+0x8a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2f      	ldr	r2, [pc, #188]	@ (8005c90 <TIM_Base_SetConfig+0x124>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_Base_SetConfig+0x8a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8005c94 <TIM_Base_SetConfig+0x128>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_Base_SetConfig+0x8a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c98 <TIM_Base_SetConfig+0x12c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_Base_SetConfig+0x8a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2c      	ldr	r2, [pc, #176]	@ (8005c9c <TIM_Base_SetConfig+0x130>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_Base_SetConfig+0x8a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8005ca0 <TIM_Base_SetConfig+0x134>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d108      	bne.n	8005c08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a16      	ldr	r2, [pc, #88]	@ (8005c88 <TIM_Base_SetConfig+0x11c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00f      	beq.n	8005c54 <TIM_Base_SetConfig+0xe8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a17      	ldr	r2, [pc, #92]	@ (8005c94 <TIM_Base_SetConfig+0x128>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_Base_SetConfig+0xe8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a16      	ldr	r2, [pc, #88]	@ (8005c98 <TIM_Base_SetConfig+0x12c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_Base_SetConfig+0xe8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a15      	ldr	r2, [pc, #84]	@ (8005c9c <TIM_Base_SetConfig+0x130>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0xe8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a14      	ldr	r2, [pc, #80]	@ (8005ca0 <TIM_Base_SetConfig+0x134>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d103      	bne.n	8005c5c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d105      	bne.n	8005c7a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f023 0201 	bic.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	611a      	str	r2, [r3, #16]
  }
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40013400 	.word	0x40013400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800

08005ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f023 0201 	bic.w	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0303 	bic.w	r3, r3, #3
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f023 0302 	bic.w	r3, r3, #2
 8005cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8005db0 <TIM_OC1_SetConfig+0x10c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00f      	beq.n	8005d24 <TIM_OC1_SetConfig+0x80>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a2b      	ldr	r2, [pc, #172]	@ (8005db4 <TIM_OC1_SetConfig+0x110>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <TIM_OC1_SetConfig+0x80>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005db8 <TIM_OC1_SetConfig+0x114>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_OC1_SetConfig+0x80>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a29      	ldr	r2, [pc, #164]	@ (8005dbc <TIM_OC1_SetConfig+0x118>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC1_SetConfig+0x80>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a28      	ldr	r2, [pc, #160]	@ (8005dc0 <TIM_OC1_SetConfig+0x11c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10c      	bne.n	8005d3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0308 	bic.w	r3, r3, #8
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 0304 	bic.w	r3, r3, #4
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1b      	ldr	r2, [pc, #108]	@ (8005db0 <TIM_OC1_SetConfig+0x10c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00f      	beq.n	8005d66 <TIM_OC1_SetConfig+0xc2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a1a      	ldr	r2, [pc, #104]	@ (8005db4 <TIM_OC1_SetConfig+0x110>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <TIM_OC1_SetConfig+0xc2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a19      	ldr	r2, [pc, #100]	@ (8005db8 <TIM_OC1_SetConfig+0x114>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <TIM_OC1_SetConfig+0xc2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a18      	ldr	r2, [pc, #96]	@ (8005dbc <TIM_OC1_SetConfig+0x118>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_OC1_SetConfig+0xc2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a17      	ldr	r2, [pc, #92]	@ (8005dc0 <TIM_OC1_SetConfig+0x11c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d111      	bne.n	8005d8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	621a      	str	r2, [r3, #32]
}
 8005da4:	bf00      	nop
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40014400 	.word	0x40014400
 8005dc0:	40014800 	.word	0x40014800

08005dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	f023 0210 	bic.w	r2, r3, #16
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 0320 	bic.w	r3, r3, #32
 8005e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a28      	ldr	r2, [pc, #160]	@ (8005ec4 <TIM_OC2_SetConfig+0x100>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_OC2_SetConfig+0x6c>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a27      	ldr	r2, [pc, #156]	@ (8005ec8 <TIM_OC2_SetConfig+0x104>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d10d      	bne.n	8005e4c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec4 <TIM_OC2_SetConfig+0x100>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00f      	beq.n	8005e74 <TIM_OC2_SetConfig+0xb0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec8 <TIM_OC2_SetConfig+0x104>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00b      	beq.n	8005e74 <TIM_OC2_SetConfig+0xb0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ecc <TIM_OC2_SetConfig+0x108>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d007      	beq.n	8005e74 <TIM_OC2_SetConfig+0xb0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed0 <TIM_OC2_SetConfig+0x10c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d003      	beq.n	8005e74 <TIM_OC2_SetConfig+0xb0>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a19      	ldr	r2, [pc, #100]	@ (8005ed4 <TIM_OC2_SetConfig+0x110>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d113      	bne.n	8005e9c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40013400 	.word	0x40013400
 8005ecc:	40014000 	.word	0x40014000
 8005ed0:	40014400 	.word	0x40014400
 8005ed4:	40014800 	.word	0x40014800

08005ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a27      	ldr	r2, [pc, #156]	@ (8005fd4 <TIM_OC3_SetConfig+0xfc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d003      	beq.n	8005f42 <TIM_OC3_SetConfig+0x6a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a26      	ldr	r2, [pc, #152]	@ (8005fd8 <TIM_OC3_SetConfig+0x100>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d10d      	bne.n	8005f5e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	021b      	lsls	r3, r3, #8
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd4 <TIM_OC3_SetConfig+0xfc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00f      	beq.n	8005f86 <TIM_OC3_SetConfig+0xae>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd8 <TIM_OC3_SetConfig+0x100>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00b      	beq.n	8005f86 <TIM_OC3_SetConfig+0xae>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a1a      	ldr	r2, [pc, #104]	@ (8005fdc <TIM_OC3_SetConfig+0x104>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d007      	beq.n	8005f86 <TIM_OC3_SetConfig+0xae>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a19      	ldr	r2, [pc, #100]	@ (8005fe0 <TIM_OC3_SetConfig+0x108>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d003      	beq.n	8005f86 <TIM_OC3_SetConfig+0xae>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a18      	ldr	r2, [pc, #96]	@ (8005fe4 <TIM_OC3_SetConfig+0x10c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d113      	bne.n	8005fae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	621a      	str	r2, [r3, #32]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40012c00 	.word	0x40012c00
 8005fd8:	40013400 	.word	0x40013400
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40014400 	.word	0x40014400
 8005fe4:	40014800 	.word	0x40014800

08005fe8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	031b      	lsls	r3, r3, #12
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a28      	ldr	r2, [pc, #160]	@ (80060e8 <TIM_OC4_SetConfig+0x100>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d003      	beq.n	8006054 <TIM_OC4_SetConfig+0x6c>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a27      	ldr	r2, [pc, #156]	@ (80060ec <TIM_OC4_SetConfig+0x104>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d10d      	bne.n	8006070 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800605a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	031b      	lsls	r3, r3, #12
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800606e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a1d      	ldr	r2, [pc, #116]	@ (80060e8 <TIM_OC4_SetConfig+0x100>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00f      	beq.n	8006098 <TIM_OC4_SetConfig+0xb0>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a1c      	ldr	r2, [pc, #112]	@ (80060ec <TIM_OC4_SetConfig+0x104>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00b      	beq.n	8006098 <TIM_OC4_SetConfig+0xb0>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a1b      	ldr	r2, [pc, #108]	@ (80060f0 <TIM_OC4_SetConfig+0x108>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d007      	beq.n	8006098 <TIM_OC4_SetConfig+0xb0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a1a      	ldr	r2, [pc, #104]	@ (80060f4 <TIM_OC4_SetConfig+0x10c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_OC4_SetConfig+0xb0>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a19      	ldr	r2, [pc, #100]	@ (80060f8 <TIM_OC4_SetConfig+0x110>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d113      	bne.n	80060c0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800609e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	019b      	lsls	r3, r3, #6
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	019b      	lsls	r3, r3, #6
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40014400 	.word	0x40014400
 80060f8:	40014800 	.word	0x40014800

080060fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800612a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a17      	ldr	r2, [pc, #92]	@ (80061b0 <TIM_OC5_SetConfig+0xb4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00f      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a16      	ldr	r2, [pc, #88]	@ (80061b4 <TIM_OC5_SetConfig+0xb8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00b      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a15      	ldr	r2, [pc, #84]	@ (80061b8 <TIM_OC5_SetConfig+0xbc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a14      	ldr	r2, [pc, #80]	@ (80061bc <TIM_OC5_SetConfig+0xc0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_OC5_SetConfig+0x7a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a13      	ldr	r2, [pc, #76]	@ (80061c0 <TIM_OC5_SetConfig+0xc4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d109      	bne.n	800618a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800617c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	621a      	str	r2, [r3, #32]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40013400 	.word	0x40013400
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800620a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	051b      	lsls	r3, r3, #20
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a18      	ldr	r2, [pc, #96]	@ (800627c <TIM_OC6_SetConfig+0xb8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00f      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a17      	ldr	r2, [pc, #92]	@ (8006280 <TIM_OC6_SetConfig+0xbc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00b      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a16      	ldr	r2, [pc, #88]	@ (8006284 <TIM_OC6_SetConfig+0xc0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a15      	ldr	r2, [pc, #84]	@ (8006288 <TIM_OC6_SetConfig+0xc4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_OC6_SetConfig+0x7c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a14      	ldr	r2, [pc, #80]	@ (800628c <TIM_OC6_SetConfig+0xc8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d109      	bne.n	8006254 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	029b      	lsls	r3, r3, #10
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40013400 	.word	0x40013400
 8006284:	40014000 	.word	0x40014000
 8006288:	40014400 	.word	0x40014400
 800628c:	40014800 	.word	0x40014800

08006290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f023 0201 	bic.w	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f023 030a 	bic.w	r3, r3, #10
 80062cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b087      	sub	sp, #28
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	f023 0210 	bic.w	r2, r3, #16
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	031b      	lsls	r3, r3, #12
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800632a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	f043 0307 	orr.w	r3, r3, #7
 8006374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	609a      	str	r2, [r3, #8]
}
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	021a      	lsls	r2, r3, #8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f003 031f 	and.w	r3, r3, #31
 80063da:	2201      	movs	r2, #1
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1a      	ldr	r2, [r3, #32]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	43db      	mvns	r3, r3
 80063ea:	401a      	ands	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a1a      	ldr	r2, [r3, #32]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006400:	431a      	orrs	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006428:	2302      	movs	r3, #2
 800642a:	e065      	b.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a2c      	ldr	r2, [pc, #176]	@ (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a2b      	ldr	r2, [pc, #172]	@ (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d108      	bne.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006466:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800647c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1b      	ldr	r2, [pc, #108]	@ (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d018      	beq.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a2:	d013      	beq.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a18      	ldr	r2, [pc, #96]	@ (800650c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00e      	beq.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a17      	ldr	r2, [pc, #92]	@ (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d009      	beq.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a12      	ldr	r2, [pc, #72]	@ (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d004      	beq.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a13      	ldr	r2, [pc, #76]	@ (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d10c      	bne.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	40012c00 	.word	0x40012c00
 8006508:	40013400 	.word	0x40013400
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40014000 	.word	0x40014000

08006518 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006528:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800652c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	b29a      	uxth	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800654e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006552:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	b29b      	uxth	r3, r3
 8006560:	43db      	mvns	r3, r3
 8006562:	b29b      	uxth	r3, r3
 8006564:	4013      	ands	r3, r2
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	1d3b      	adds	r3, r7, #4
 8006586:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b0a7      	sub	sp, #156	@ 0x9c
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80065da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065de:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	78db      	ldrb	r3, [r3, #3]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d81f      	bhi.n	800662a <USB_ActivateEndpoint+0x72>
 80065ea:	a201      	add	r2, pc, #4	@ (adr r2, 80065f0 <USB_ActivateEndpoint+0x38>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006601 	.word	0x08006601
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	08006633 	.word	0x08006633
 80065fc:	0800660f 	.word	0x0800660f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006600:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006604:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006608:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800660c:	e012      	b.n	8006634 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800660e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006612:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006616:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800661a:	e00b      	b.n	8006634 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800661c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006620:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006624:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006628:	e004      	b.n	8006634 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8006630:	e000      	b.n	8006634 <USB_ActivateEndpoint+0x7c>
      break;
 8006632:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	441a      	add	r2, r3
 800663e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800664a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800664e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006652:	b29b      	uxth	r3, r3
 8006654:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	b21b      	sxth	r3, r3
 8006666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800666a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666e:	b21a      	sxth	r2, r3
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	b21b      	sxth	r3, r3
 8006676:	4313      	orrs	r3, r2
 8006678:	b21b      	sxth	r3, r3
 800667a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	441a      	add	r2, r3
 8006688:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800668c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800669c:	b29b      	uxth	r3, r3
 800669e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	7b1b      	ldrb	r3, [r3, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f040 8180 	bne.w	80069aa <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	785b      	ldrb	r3, [r3, #1]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8084 	beq.w	80067bc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066be:	b29b      	uxth	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	4413      	add	r3, r2
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	00da      	lsls	r2, r3, #3
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	88db      	ldrh	r3, [r3, #6]
 80066dc:	085b      	lsrs	r3, r3, #1
 80066de:	b29b      	uxth	r3, r3
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	827b      	strh	r3, [r7, #18]
 80066f6:	8a7b      	ldrh	r3, [r7, #18]
 80066f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01b      	beq.n	8006738 <USB_ActivateEndpoint+0x180>
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006716:	823b      	strh	r3, [r7, #16]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	441a      	add	r2, r3
 8006722:	8a3b      	ldrh	r3, [r7, #16]
 8006724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006730:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006734:	b29b      	uxth	r3, r3
 8006736:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	78db      	ldrb	r3, [r3, #3]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d020      	beq.n	8006782 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006756:	81bb      	strh	r3, [r7, #12]
 8006758:	89bb      	ldrh	r3, [r7, #12]
 800675a:	f083 0320 	eor.w	r3, r3, #32
 800675e:	81bb      	strh	r3, [r7, #12]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	441a      	add	r2, r3
 800676a:	89bb      	ldrh	r3, [r7, #12]
 800676c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677c:	b29b      	uxth	r3, r3
 800677e:	8013      	strh	r3, [r2, #0]
 8006780:	e3f9      	b.n	8006f76 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006798:	81fb      	strh	r3, [r7, #14]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	441a      	add	r2, r3
 80067a4:	89fb      	ldrh	r3, [r7, #14]
 80067a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	8013      	strh	r3, [r2, #0]
 80067ba:	e3dc      	b.n	8006f76 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	633b      	str	r3, [r7, #48]	@ 0x30
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	4413      	add	r3, r2
 80067ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	00da      	lsls	r2, r3, #3
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	4413      	add	r3, r2
 80067da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	88db      	ldrh	r3, [r3, #6]
 80067e4:	085b      	lsrs	r3, r3, #1
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	4413      	add	r3, r2
 8006802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	00da      	lsls	r2, r3, #3
 800680a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680c:	4413      	add	r3, r2
 800680e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800681e:	b29a      	uxth	r2, r3
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <USB_ActivateEndpoint+0x28a>
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683a:	b29a      	uxth	r2, r3
 800683c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	e041      	b.n	80068c6 <USB_ActivateEndpoint+0x30e>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b3e      	cmp	r3, #62	@ 0x3e
 8006848:	d81c      	bhi.n	8006884 <USB_ActivateEndpoint+0x2cc>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	085b      	lsrs	r3, r3, #1
 8006850:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <USB_ActivateEndpoint+0x2b2>
 8006860:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006864:	3301      	adds	r3, #1
 8006866:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29a      	uxth	r2, r3
 8006870:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006874:	b29b      	uxth	r3, r3
 8006876:	029b      	lsls	r3, r3, #10
 8006878:	b29b      	uxth	r3, r3
 800687a:	4313      	orrs	r3, r2
 800687c:	b29a      	uxth	r2, r3
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	e020      	b.n	80068c6 <USB_ActivateEndpoint+0x30e>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2b00      	cmp	r3, #0
 8006898:	d104      	bne.n	80068a4 <USB_ActivateEndpoint+0x2ec>
 800689a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800689e:	3b01      	subs	r3, #1
 80068a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	029b      	lsls	r3, r3, #10
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	4313      	orrs	r3, r2
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80068d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80068d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01b      	beq.n	8006916 <USB_ActivateEndpoint+0x35e>
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f4:	843b      	strh	r3, [r7, #32]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	8c3b      	ldrh	r3, [r7, #32]
 8006902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800690a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800690e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006912:	b29b      	uxth	r3, r3
 8006914:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d124      	bne.n	8006968 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006934:	83bb      	strh	r3, [r7, #28]
 8006936:	8bbb      	ldrh	r3, [r7, #28]
 8006938:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800693c:	83bb      	strh	r3, [r7, #28]
 800693e:	8bbb      	ldrh	r3, [r7, #28]
 8006940:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006944:	83bb      	strh	r3, [r7, #28]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	441a      	add	r2, r3
 8006950:	8bbb      	ldrh	r3, [r7, #28]
 8006952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800695a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800695e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006962:	b29b      	uxth	r3, r3
 8006964:	8013      	strh	r3, [r2, #0]
 8006966:	e306      	b.n	8006f76 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29b      	uxth	r3, r3
 8006976:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800697a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697e:	83fb      	strh	r3, [r7, #30]
 8006980:	8bfb      	ldrh	r3, [r7, #30]
 8006982:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006986:	83fb      	strh	r3, [r7, #30]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	441a      	add	r2, r3
 8006992:	8bfb      	ldrh	r3, [r7, #30]
 8006994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800699c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	8013      	strh	r3, [r2, #0]
 80069a8:	e2e5      	b.n	8006f76 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	78db      	ldrb	r3, [r3, #3]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d11e      	bne.n	80069f0 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	441a      	add	r2, r3
 80069d6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80069da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069e2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80069e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	8013      	strh	r3, [r2, #0]
 80069ee:	e01d      	b.n	8006a2c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a06:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	441a      	add	r2, r3
 8006a14:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a3c:	4413      	add	r3, r2
 8006a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	00da      	lsls	r2, r3, #3
 8006a46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	891b      	ldrh	r3, [r3, #8]
 8006a54:	085b      	lsrs	r3, r3, #1
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a5e:	801a      	strh	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a70:	4413      	add	r3, r2
 8006a72:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	00da      	lsls	r2, r3, #3
 8006a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a82:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	895b      	ldrh	r3, [r3, #10]
 8006a88:	085b      	lsrs	r3, r3, #1
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	785b      	ldrb	r3, [r3, #1]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f040 81af 	bne.w	8006dfc <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006aae:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d01d      	beq.n	8006af6 <USB_ActivateEndpoint+0x53e>
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	441a      	add	r2, r3
 8006ade:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006b06:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d01d      	beq.n	8006b4e <USB_ActivateEndpoint+0x596>
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b28:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	785b      	ldrb	r3, [r3, #1]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d16b      	bne.n	8006c2e <USB_ActivateEndpoint+0x676>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b66:	4413      	add	r3, r2
 8006b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	00da      	lsls	r2, r3, #3
 8006b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b72:	4413      	add	r3, r2
 8006b74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b88:	801a      	strh	r2, [r3, #0]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <USB_ActivateEndpoint+0x5f0>
 8006b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ba4:	801a      	strh	r2, [r3, #0]
 8006ba6:	e05d      	b.n	8006c64 <USB_ActivateEndpoint+0x6ac>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bae:	d81c      	bhi.n	8006bea <USB_ActivateEndpoint+0x632>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d004      	beq.n	8006bd0 <USB_ActivateEndpoint+0x618>
 8006bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bca:	3301      	adds	r3, #1
 8006bcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	029b      	lsls	r3, r3, #10
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	4313      	orrs	r3, r2
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006be6:	801a      	strh	r2, [r3, #0]
 8006be8:	e03c      	b.n	8006c64 <USB_ActivateEndpoint+0x6ac>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	095b      	lsrs	r3, r3, #5
 8006bf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d104      	bne.n	8006c0a <USB_ActivateEndpoint+0x652>
 8006c00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c04:	3b01      	subs	r3, #1
 8006c06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	029b      	lsls	r3, r3, #10
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	e01a      	b.n	8006c64 <USB_ActivateEndpoint+0x6ac>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	785b      	ldrb	r3, [r3, #1]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d116      	bne.n	8006c64 <USB_ActivateEndpoint+0x6ac>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c46:	4413      	add	r3, r2
 8006c48:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	00da      	lsls	r2, r3, #3
 8006c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c52:	4413      	add	r3, r2
 8006c54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c58:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d16b      	bne.n	8006d48 <USB_ActivateEndpoint+0x790>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c80:	4413      	add	r3, r2
 8006c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	00da      	lsls	r2, r3, #3
 8006c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <USB_ActivateEndpoint+0x70a>
 8006cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbe:	801a      	strh	r2, [r3, #0]
 8006cc0:	e05b      	b.n	8006d7a <USB_ActivateEndpoint+0x7c2>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cc8:	d81c      	bhi.n	8006d04 <USB_ActivateEndpoint+0x74c>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	085b      	lsrs	r3, r3, #1
 8006cd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d004      	beq.n	8006cea <USB_ActivateEndpoint+0x732>
 8006ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	029b      	lsls	r3, r3, #10
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e03a      	b.n	8006d7a <USB_ActivateEndpoint+0x7c2>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <USB_ActivateEndpoint+0x76c>
 8006d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	029b      	lsls	r3, r3, #10
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d44:	801a      	strh	r2, [r3, #0]
 8006d46:	e018      	b.n	8006d7a <USB_ActivateEndpoint+0x7c2>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d114      	bne.n	8006d7a <USB_ActivateEndpoint+0x7c2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d5c:	4413      	add	r3, r2
 8006d5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	00da      	lsls	r2, r3, #3
 8006d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d78:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d90:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006d92:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d94:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d98:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006d9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006da0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	441a      	add	r2, r3
 8006dac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006dae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006db2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dd8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006de6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	8013      	strh	r3, [r2, #0]
 8006dfa:	e0bc      	b.n	8006f76 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8006e0c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006e10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01d      	beq.n	8006e54 <USB_ActivateEndpoint+0x89c>
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e2e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006e64:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01d      	beq.n	8006eac <USB_ActivateEndpoint+0x8f4>
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e86:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	441a      	add	r2, r3
 8006e94:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ea4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	78db      	ldrb	r3, [r3, #3]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d024      	beq.n	8006efe <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eca:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006ece:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006ed2:	f083 0320 	eor.w	r3, r3, #32
 8006ed6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	8013      	strh	r3, [r2, #0]
 8006efc:	e01d      	b.n	8006f3a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f14:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	441a      	add	r2, r3
 8006f22:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006f26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f50:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	441a      	add	r2, r3
 8006f5e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006f62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006f76:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	379c      	adds	r7, #156	@ 0x9c
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop

08006f88 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b0ac      	sub	sp, #176	@ 0xb0
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	785b      	ldrb	r3, [r3, #1]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	f040 84ca 	bne.w	8007930 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d904      	bls.n	8006fb2 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fb0:	e003      	b.n	8006fba <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	7b1b      	ldrb	r3, [r3, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d122      	bne.n	8007008 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6959      	ldr	r1, [r3, #20]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	88da      	ldrh	r2, [r3, #6]
 8006fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fed2 	bl	8007d7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	00da      	lsls	r2, r3, #3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	801a      	strh	r2, [r3, #0]
 8007004:	f000 bc6f 	b.w	80078e6 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	78db      	ldrb	r3, [r3, #3]
 800700c:	2b02      	cmp	r3, #2
 800700e:	f040 831e 	bne.w	800764e <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6a1a      	ldr	r2, [r3, #32]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	429a      	cmp	r2, r3
 800701c:	f240 82cf 	bls.w	80075be <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007036:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	441a      	add	r2, r3
 8007044:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007048:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800704c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007050:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007058:	b29b      	uxth	r3, r3
 800705a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6a1a      	ldr	r2, [r3, #32]
 8007060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007064:	1ad2      	subs	r2, r2, r3
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 814f 	beq.w	8007320 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	633b      	str	r3, [r7, #48]	@ 0x30
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	785b      	ldrb	r3, [r3, #1]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d16b      	bne.n	8007166 <USB_EPStartXfer+0x1de>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007098:	b29b      	uxth	r3, r3
 800709a:	461a      	mov	r2, r3
 800709c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709e:	4413      	add	r3, r2
 80070a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	00da      	lsls	r2, r3, #3
 80070a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070aa:	4413      	add	r3, r2
 80070ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070bc:	b29a      	uxth	r2, r3
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	801a      	strh	r2, [r3, #0]
 80070c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10a      	bne.n	80070e0 <USB_EPStartXfer+0x158>
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d8:	b29a      	uxth	r2, r3
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	801a      	strh	r2, [r3, #0]
 80070de:	e05b      	b.n	8007198 <USB_EPStartXfer+0x210>
 80070e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80070e6:	d81c      	bhi.n	8007122 <USB_EPStartXfer+0x19a>
 80070e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <USB_EPStartXfer+0x180>
 80070fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007102:	3301      	adds	r3, #1
 8007104:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29a      	uxth	r2, r3
 800710e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007112:	b29b      	uxth	r3, r3
 8007114:	029b      	lsls	r3, r3, #10
 8007116:	b29b      	uxth	r3, r3
 8007118:	4313      	orrs	r3, r2
 800711a:	b29a      	uxth	r2, r3
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	e03a      	b.n	8007198 <USB_EPStartXfer+0x210>
 8007122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800712c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007130:	f003 031f 	and.w	r3, r3, #31
 8007134:	2b00      	cmp	r3, #0
 8007136:	d104      	bne.n	8007142 <USB_EPStartXfer+0x1ba>
 8007138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800713c:	3b01      	subs	r3, #1
 800713e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	b29a      	uxth	r2, r3
 8007148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800714c:	b29b      	uxth	r3, r3
 800714e:	029b      	lsls	r3, r3, #10
 8007150:	b29b      	uxth	r3, r3
 8007152:	4313      	orrs	r3, r2
 8007154:	b29b      	uxth	r3, r3
 8007156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800715a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800715e:	b29a      	uxth	r2, r3
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	e018      	b.n	8007198 <USB_EPStartXfer+0x210>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	785b      	ldrb	r3, [r3, #1]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d114      	bne.n	8007198 <USB_EPStartXfer+0x210>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007174:	b29b      	uxth	r3, r3
 8007176:	461a      	mov	r2, r3
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	4413      	add	r3, r2
 800717c:	633b      	str	r3, [r7, #48]	@ 0x30
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	00da      	lsls	r2, r3, #3
 8007184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007186:	4413      	add	r3, r2
 8007188:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800718c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800718e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007192:	b29a      	uxth	r2, r3
 8007194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007196:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	895b      	ldrh	r3, [r3, #10]
 800719c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	6959      	ldr	r1, [r3, #20]
 80071a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fde3 	bl	8007d7a <USB_WritePMA>
            ep->xfer_buff += len;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	695a      	ldr	r2, [r3, #20]
 80071b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071bc:	441a      	add	r2, r3
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	6a1a      	ldr	r2, [r3, #32]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d907      	bls.n	80071de <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	6a1a      	ldr	r2, [r3, #32]
 80071d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071d6:	1ad2      	subs	r2, r2, r3
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	621a      	str	r2, [r3, #32]
 80071dc:	e006      	b.n	80071ec <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2200      	movs	r2, #0
 80071ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d16b      	bne.n	80072cc <USB_EPStartXfer+0x344>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071fe:	b29b      	uxth	r3, r3
 8007200:	461a      	mov	r2, r3
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	4413      	add	r3, r2
 8007206:	61bb      	str	r3, [r7, #24]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	00da      	lsls	r2, r3, #3
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	4413      	add	r3, r2
 8007212:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007222:	b29a      	uxth	r2, r3
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <USB_EPStartXfer+0x2be>
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800723e:	b29a      	uxth	r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	801a      	strh	r2, [r3, #0]
 8007244:	e05d      	b.n	8007302 <USB_EPStartXfer+0x37a>
 8007246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800724a:	2b3e      	cmp	r3, #62	@ 0x3e
 800724c:	d81c      	bhi.n	8007288 <USB_EPStartXfer+0x300>
 800724e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d004      	beq.n	800726e <USB_EPStartXfer+0x2e6>
 8007264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007268:	3301      	adds	r3, #1
 800726a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29a      	uxth	r2, r3
 8007274:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007278:	b29b      	uxth	r3, r3
 800727a:	029b      	lsls	r3, r3, #10
 800727c:	b29b      	uxth	r3, r3
 800727e:	4313      	orrs	r3, r2
 8007280:	b29a      	uxth	r2, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	e03c      	b.n	8007302 <USB_EPStartXfer+0x37a>
 8007288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800728c:	095b      	lsrs	r3, r3, #5
 800728e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	2b00      	cmp	r3, #0
 800729c:	d104      	bne.n	80072a8 <USB_EPStartXfer+0x320>
 800729e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072a2:	3b01      	subs	r3, #1
 80072a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	029b      	lsls	r3, r3, #10
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	4313      	orrs	r3, r2
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	801a      	strh	r2, [r3, #0]
 80072ca:	e01a      	b.n	8007302 <USB_EPStartXfer+0x37a>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	785b      	ldrb	r3, [r3, #1]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d116      	bne.n	8007302 <USB_EPStartXfer+0x37a>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	623b      	str	r3, [r7, #32]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072de:	b29b      	uxth	r3, r3
 80072e0:	461a      	mov	r2, r3
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	4413      	add	r3, r2
 80072e6:	623b      	str	r3, [r7, #32]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	00da      	lsls	r2, r3, #3
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	4413      	add	r3, r2
 80072f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072f6:	61fb      	str	r3, [r7, #28]
 80072f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	891b      	ldrh	r3, [r3, #8]
 8007306:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	6959      	ldr	r1, [r3, #20]
 800730e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007312:	b29b      	uxth	r3, r3
 8007314:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fd2e 	bl	8007d7a <USB_WritePMA>
 800731e:	e2e2      	b.n	80078e6 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	785b      	ldrb	r3, [r3, #1]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d16b      	bne.n	8007400 <USB_EPStartXfer+0x478>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007332:	b29b      	uxth	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007338:	4413      	add	r3, r2
 800733a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	00da      	lsls	r2, r3, #3
 8007342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007344:	4413      	add	r3, r2
 8007346:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800734a:	647b      	str	r3, [r7, #68]	@ 0x44
 800734c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007356:	b29a      	uxth	r2, r3
 8007358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800735a:	801a      	strh	r2, [r3, #0]
 800735c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <USB_EPStartXfer+0x3f2>
 8007364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007372:	b29a      	uxth	r2, r3
 8007374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007376:	801a      	strh	r2, [r3, #0]
 8007378:	e05d      	b.n	8007436 <USB_EPStartXfer+0x4ae>
 800737a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800737e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007380:	d81c      	bhi.n	80073bc <USB_EPStartXfer+0x434>
 8007382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007386:	085b      	lsrs	r3, r3, #1
 8007388:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800738c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d004      	beq.n	80073a2 <USB_EPStartXfer+0x41a>
 8007398:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800739c:	3301      	adds	r3, #1
 800739e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	029b      	lsls	r3, r3, #10
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	4313      	orrs	r3, r2
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	e03c      	b.n	8007436 <USB_EPStartXfer+0x4ae>
 80073bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ca:	f003 031f 	and.w	r3, r3, #31
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d104      	bne.n	80073dc <USB_EPStartXfer+0x454>
 80073d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073d6:	3b01      	subs	r3, #1
 80073d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	029b      	lsls	r3, r3, #10
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	4313      	orrs	r3, r2
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	e01a      	b.n	8007436 <USB_EPStartXfer+0x4ae>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d116      	bne.n	8007436 <USB_EPStartXfer+0x4ae>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	653b      	str	r3, [r7, #80]	@ 0x50
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007412:	b29b      	uxth	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007418:	4413      	add	r3, r2
 800741a:	653b      	str	r3, [r7, #80]	@ 0x50
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	00da      	lsls	r2, r3, #3
 8007422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007424:	4413      	add	r3, r2
 8007426:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800742a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800742c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007430:	b29a      	uxth	r2, r3
 8007432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007434:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	891b      	ldrh	r3, [r3, #8]
 800743a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	6959      	ldr	r1, [r3, #20]
 8007442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007446:	b29b      	uxth	r3, r3
 8007448:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fc94 	bl	8007d7a <USB_WritePMA>
            ep->xfer_buff += len;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	695a      	ldr	r2, [r3, #20]
 8007456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800745a:	441a      	add	r2, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	6a1a      	ldr	r2, [r3, #32]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	429a      	cmp	r2, r3
 800746a:	d907      	bls.n	800747c <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	6a1a      	ldr	r2, [r3, #32]
 8007470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007474:	1ad2      	subs	r2, r2, r3
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	621a      	str	r2, [r3, #32]
 800747a:	e006      	b.n	800748a <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2200      	movs	r2, #0
 8007488:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	643b      	str	r3, [r7, #64]	@ 0x40
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d16b      	bne.n	800756e <USB_EPStartXfer+0x5e6>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	63bb      	str	r3, [r7, #56]	@ 0x38
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a6:	4413      	add	r3, r2
 80074a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	00da      	lsls	r2, r3, #3
 80074b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b2:	4413      	add	r3, r2
 80074b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c8:	801a      	strh	r2, [r3, #0]
 80074ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <USB_EPStartXfer+0x560>
 80074d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	e05b      	b.n	80075a0 <USB_EPStartXfer+0x618>
 80074e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80074ee:	d81c      	bhi.n	800752a <USB_EPStartXfer+0x5a2>
 80074f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074f4:	085b      	lsrs	r3, r3, #1
 80074f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d004      	beq.n	8007510 <USB_EPStartXfer+0x588>
 8007506:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800750a:	3301      	adds	r3, #1
 800750c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	b29a      	uxth	r2, r3
 8007516:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800751a:	b29b      	uxth	r3, r3
 800751c:	029b      	lsls	r3, r3, #10
 800751e:	b29b      	uxth	r3, r3
 8007520:	4313      	orrs	r3, r2
 8007522:	b29a      	uxth	r2, r3
 8007524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007526:	801a      	strh	r2, [r3, #0]
 8007528:	e03a      	b.n	80075a0 <USB_EPStartXfer+0x618>
 800752a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007538:	f003 031f 	and.w	r3, r3, #31
 800753c:	2b00      	cmp	r3, #0
 800753e:	d104      	bne.n	800754a <USB_EPStartXfer+0x5c2>
 8007540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007544:	3b01      	subs	r3, #1
 8007546:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800754a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29a      	uxth	r2, r3
 8007550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007554:	b29b      	uxth	r3, r3
 8007556:	029b      	lsls	r3, r3, #10
 8007558:	b29b      	uxth	r3, r3
 800755a:	4313      	orrs	r3, r2
 800755c:	b29b      	uxth	r3, r3
 800755e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007566:	b29a      	uxth	r2, r3
 8007568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756a:	801a      	strh	r2, [r3, #0]
 800756c:	e018      	b.n	80075a0 <USB_EPStartXfer+0x618>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	785b      	ldrb	r3, [r3, #1]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d114      	bne.n	80075a0 <USB_EPStartXfer+0x618>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800757c:	b29b      	uxth	r3, r3
 800757e:	461a      	mov	r2, r3
 8007580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007582:	4413      	add	r3, r2
 8007584:	643b      	str	r3, [r7, #64]	@ 0x40
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	00da      	lsls	r2, r3, #3
 800758c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800758e:	4413      	add	r3, r2
 8007590:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007594:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800759a:	b29a      	uxth	r2, r3
 800759c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800759e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	895b      	ldrh	r3, [r3, #10]
 80075a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	6959      	ldr	r1, [r3, #20]
 80075ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fbdf 	bl	8007d7a <USB_WritePMA>
 80075bc:	e193      	b.n	80078e6 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80075d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075dc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	441a      	add	r2, r3
 80075ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80075ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075fe:	b29b      	uxth	r3, r3
 8007600:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800760c:	b29b      	uxth	r3, r3
 800760e:	461a      	mov	r2, r3
 8007610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007612:	4413      	add	r3, r2
 8007614:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	00da      	lsls	r2, r3, #3
 800761c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800761e:	4413      	add	r3, r2
 8007620:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007624:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800762a:	b29a      	uxth	r2, r3
 800762c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800762e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	891b      	ldrh	r3, [r3, #8]
 8007634:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	6959      	ldr	r1, [r3, #20]
 800763c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007640:	b29b      	uxth	r3, r3
 8007642:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fb97 	bl	8007d7a <USB_WritePMA>
 800764c:	e14b      	b.n	80078e6 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6a1a      	ldr	r2, [r3, #32]
 8007652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007656:	1ad2      	subs	r2, r2, r3
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29b      	uxth	r3, r3
 800766a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 809a 	beq.w	80077a8 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	673b      	str	r3, [r7, #112]	@ 0x70
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d16b      	bne.n	8007758 <USB_EPStartXfer+0x7d0>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800768a:	b29b      	uxth	r3, r3
 800768c:	461a      	mov	r2, r3
 800768e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007690:	4413      	add	r3, r2
 8007692:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	00da      	lsls	r2, r3, #3
 800769a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800769c:	4413      	add	r3, r2
 800769e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80076a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <USB_EPStartXfer+0x74a>
 80076bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ce:	801a      	strh	r2, [r3, #0]
 80076d0:	e05b      	b.n	800778a <USB_EPStartXfer+0x802>
 80076d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80076d8:	d81c      	bhi.n	8007714 <USB_EPStartXfer+0x78c>
 80076da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076de:	085b      	lsrs	r3, r3, #1
 80076e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d004      	beq.n	80076fa <USB_EPStartXfer+0x772>
 80076f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076f4:	3301      	adds	r3, #1
 80076f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	b29a      	uxth	r2, r3
 8007700:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007704:	b29b      	uxth	r3, r3
 8007706:	029b      	lsls	r3, r3, #10
 8007708:	b29b      	uxth	r3, r3
 800770a:	4313      	orrs	r3, r2
 800770c:	b29a      	uxth	r2, r3
 800770e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007710:	801a      	strh	r2, [r3, #0]
 8007712:	e03a      	b.n	800778a <USB_EPStartXfer+0x802>
 8007714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007718:	095b      	lsrs	r3, r3, #5
 800771a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800771e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <USB_EPStartXfer+0x7ac>
 800772a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800772e:	3b01      	subs	r3, #1
 8007730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29a      	uxth	r2, r3
 800773a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800773e:	b29b      	uxth	r3, r3
 8007740:	029b      	lsls	r3, r3, #10
 8007742:	b29b      	uxth	r3, r3
 8007744:	4313      	orrs	r3, r2
 8007746:	b29b      	uxth	r3, r3
 8007748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800774c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007750:	b29a      	uxth	r2, r3
 8007752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007754:	801a      	strh	r2, [r3, #0]
 8007756:	e018      	b.n	800778a <USB_EPStartXfer+0x802>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d114      	bne.n	800778a <USB_EPStartXfer+0x802>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007766:	b29b      	uxth	r3, r3
 8007768:	461a      	mov	r2, r3
 800776a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800776c:	4413      	add	r3, r2
 800776e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	00da      	lsls	r2, r3, #3
 8007776:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007778:	4413      	add	r3, r2
 800777a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800777e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007784:	b29a      	uxth	r2, r3
 8007786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007788:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	895b      	ldrh	r3, [r3, #10]
 800778e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	6959      	ldr	r1, [r3, #20]
 8007796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800779a:	b29b      	uxth	r3, r3
 800779c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 faea 	bl	8007d7a <USB_WritePMA>
 80077a6:	e09e      	b.n	80078e6 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	785b      	ldrb	r3, [r3, #1]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d16b      	bne.n	8007888 <USB_EPStartXfer+0x900>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077c0:	4413      	add	r3, r2
 80077c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	00da      	lsls	r2, r3, #3
 80077ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077cc:	4413      	add	r3, r2
 80077ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077de:	b29a      	uxth	r2, r3
 80077e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <USB_EPStartXfer+0x87a>
 80077ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077fe:	801a      	strh	r2, [r3, #0]
 8007800:	e063      	b.n	80078ca <USB_EPStartXfer+0x942>
 8007802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007806:	2b3e      	cmp	r3, #62	@ 0x3e
 8007808:	d81c      	bhi.n	8007844 <USB_EPStartXfer+0x8bc>
 800780a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800780e:	085b      	lsrs	r3, r3, #1
 8007810:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <USB_EPStartXfer+0x8a2>
 8007820:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007824:	3301      	adds	r3, #1
 8007826:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800782a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	b29a      	uxth	r2, r3
 8007830:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007834:	b29b      	uxth	r3, r3
 8007836:	029b      	lsls	r3, r3, #10
 8007838:	b29b      	uxth	r3, r3
 800783a:	4313      	orrs	r3, r2
 800783c:	b29a      	uxth	r2, r3
 800783e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007840:	801a      	strh	r2, [r3, #0]
 8007842:	e042      	b.n	80078ca <USB_EPStartXfer+0x942>
 8007844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800784e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007852:	f003 031f 	and.w	r3, r3, #31
 8007856:	2b00      	cmp	r3, #0
 8007858:	d104      	bne.n	8007864 <USB_EPStartXfer+0x8dc>
 800785a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800785e:	3b01      	subs	r3, #1
 8007860:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29a      	uxth	r2, r3
 800786a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800786e:	b29b      	uxth	r3, r3
 8007870:	029b      	lsls	r3, r3, #10
 8007872:	b29b      	uxth	r3, r3
 8007874:	4313      	orrs	r3, r2
 8007876:	b29b      	uxth	r3, r3
 8007878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800787c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007880:	b29a      	uxth	r2, r3
 8007882:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	e020      	b.n	80078ca <USB_EPStartXfer+0x942>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d11c      	bne.n	80078ca <USB_EPStartXfer+0x942>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800789c:	b29b      	uxth	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078a4:	4413      	add	r3, r2
 80078a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	00da      	lsls	r2, r3, #3
 80078b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078b4:	4413      	add	r3, r2
 80078b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80078c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	891b      	ldrh	r3, [r3, #8]
 80078ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	6959      	ldr	r1, [r3, #20]
 80078d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fa4a 	bl	8007d7a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078fc:	817b      	strh	r3, [r7, #10]
 80078fe:	897b      	ldrh	r3, [r7, #10]
 8007900:	f083 0310 	eor.w	r3, r3, #16
 8007904:	817b      	strh	r3, [r7, #10]
 8007906:	897b      	ldrh	r3, [r7, #10]
 8007908:	f083 0320 	eor.w	r3, r3, #32
 800790c:	817b      	strh	r3, [r7, #10]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	441a      	add	r2, r3
 8007918:	897b      	ldrh	r3, [r7, #10]
 800791a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800791e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800792a:	b29b      	uxth	r3, r3
 800792c:	8013      	strh	r3, [r2, #0]
 800792e:	e0d5      	b.n	8007adc <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	7b1b      	ldrb	r3, [r3, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d156      	bne.n	80079e6 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d122      	bne.n	8007986 <USB_EPStartXfer+0x9fe>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	78db      	ldrb	r3, [r3, #3]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d11e      	bne.n	8007986 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800795a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800795e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	441a      	add	r2, r3
 800796c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007978:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800797c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007980:	b29b      	uxth	r3, r3
 8007982:	8013      	strh	r3, [r2, #0]
 8007984:	e01d      	b.n	80079c2 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800799c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	441a      	add	r2, r3
 80079aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80079ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079be:	b29b      	uxth	r3, r3
 80079c0:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d907      	bls.n	80079de <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	1ad2      	subs	r2, r2, r3
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	619a      	str	r2, [r3, #24]
 80079dc:	e054      	b.n	8007a88 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2200      	movs	r2, #0
 80079e2:	619a      	str	r2, [r3, #24]
 80079e4:	e050      	b.n	8007a88 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	78db      	ldrb	r3, [r3, #3]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d142      	bne.n	8007a74 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d048      	beq.n	8007a88 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a06:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <USB_EPStartXfer+0xa96>
 8007a12:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10b      	bne.n	8007a36 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a1e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d12e      	bne.n	8007a88 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a2a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d128      	bne.n	8007a88 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a4c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	441a      	add	r2, r3
 8007a5a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	8013      	strh	r3, [r2, #0]
 8007a72:	e009      	b.n	8007a88 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	78db      	ldrb	r3, [r3, #3]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d103      	bne.n	8007a84 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	619a      	str	r2, [r3, #24]
 8007a82:	e001      	b.n	8007a88 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e02a      	b.n	8007ade <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a9e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007aa2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007aa6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007aaa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007aae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ab2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ab6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	441a      	add	r2, r3
 8007ac4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	37b0      	adds	r7, #176	@ 0xb0
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b085      	sub	sp, #20
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d020      	beq.n	8007b3a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b0e:	81bb      	strh	r3, [r7, #12]
 8007b10:	89bb      	ldrh	r3, [r7, #12]
 8007b12:	f083 0310 	eor.w	r3, r3, #16
 8007b16:	81bb      	strh	r3, [r7, #12]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	441a      	add	r2, r3
 8007b22:	89bb      	ldrh	r3, [r7, #12]
 8007b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	8013      	strh	r3, [r2, #0]
 8007b38:	e01f      	b.n	8007b7a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b50:	81fb      	strh	r3, [r7, #14]
 8007b52:	89fb      	ldrh	r3, [r7, #14]
 8007b54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b58:	81fb      	strh	r3, [r7, #14]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	441a      	add	r2, r3
 8007b64:	89fb      	ldrh	r3, [r7, #14]
 8007b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	785b      	ldrb	r3, [r3, #1]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d04c      	beq.n	8007c34 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	823b      	strh	r3, [r7, #16]
 8007ba8:	8a3b      	ldrh	r3, [r7, #16]
 8007baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d01b      	beq.n	8007bea <USB_EPClearStall+0x62>
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc8:	81fb      	strh	r3, [r7, #14]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	441a      	add	r2, r3
 8007bd4:	89fb      	ldrh	r3, [r7, #14]
 8007bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007be2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	78db      	ldrb	r3, [r3, #3]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d06c      	beq.n	8007ccc <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c08:	81bb      	strh	r3, [r7, #12]
 8007c0a:	89bb      	ldrh	r3, [r7, #12]
 8007c0c:	f083 0320 	eor.w	r3, r3, #32
 8007c10:	81bb      	strh	r3, [r7, #12]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	441a      	add	r2, r3
 8007c1c:	89bb      	ldrh	r3, [r7, #12]
 8007c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	8013      	strh	r3, [r2, #0]
 8007c32:	e04b      	b.n	8007ccc <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	82fb      	strh	r3, [r7, #22]
 8007c42:	8afb      	ldrh	r3, [r7, #22]
 8007c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01b      	beq.n	8007c84 <USB_EPClearStall+0xfc>
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c62:	82bb      	strh	r3, [r7, #20]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	441a      	add	r2, r3
 8007c6e:	8abb      	ldrh	r3, [r7, #20]
 8007c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c9a:	827b      	strh	r3, [r7, #18]
 8007c9c:	8a7b      	ldrh	r3, [r7, #18]
 8007c9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ca2:	827b      	strh	r3, [r7, #18]
 8007ca4:	8a7b      	ldrh	r3, [r7, #18]
 8007ca6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007caa:	827b      	strh	r3, [r7, #18]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	441a      	add	r2, r3
 8007cb6:	8a7b      	ldrh	r3, [r7, #18]
 8007cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ce6:	78fb      	ldrb	r3, [r7, #3]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d103      	bne.n	8007cf4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2280      	movs	r2, #128	@ 0x80
 8007cf0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b08b      	sub	sp, #44	@ 0x2c
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	4611      	mov	r1, r2
 8007d86:	461a      	mov	r2, r3
 8007d88:	460b      	mov	r3, r1
 8007d8a:	80fb      	strh	r3, [r7, #6]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d90:	88bb      	ldrh	r3, [r7, #4]
 8007d92:	3301      	adds	r3, #1
 8007d94:	085b      	lsrs	r3, r3, #1
 8007d96:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007da0:	88fa      	ldrh	r2, [r7, #6]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007daa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8007db0:	e01c      	b.n	8007dec <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	b21b      	sxth	r3, r3
 8007dc0:	021b      	lsls	r3, r3, #8
 8007dc2:	b21a      	sxth	r2, r3
 8007dc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	b21b      	sxth	r3, r3
 8007dcc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	8a7a      	ldrh	r2, [r7, #18]
 8007dd2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	3302      	adds	r3, #2
 8007dd8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	3301      	adds	r3, #1
 8007de4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	3b01      	subs	r3, #1
 8007dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1df      	bne.n	8007db2 <USB_WritePMA+0x38>
  }
}
 8007df2:	bf00      	nop
 8007df4:	bf00      	nop
 8007df6:	372c      	adds	r7, #44	@ 0x2c
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b08b      	sub	sp, #44	@ 0x2c
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	460b      	mov	r3, r1
 8007e10:	80fb      	strh	r3, [r7, #6]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e16:	88bb      	ldrh	r3, [r7, #4]
 8007e18:	085b      	lsrs	r3, r3, #1
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e26:	88fa      	ldrh	r2, [r7, #6]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e30:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e36:	e018      	b.n	8007e6a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	3302      	adds	r3, #2
 8007e44:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	3301      	adds	r3, #1
 8007e52:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	0a1b      	lsrs	r3, r3, #8
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	3301      	adds	r3, #1
 8007e62:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	3b01      	subs	r3, #1
 8007e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e3      	bne.n	8007e38 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007e70:	88bb      	ldrh	r3, [r7, #4]
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d007      	beq.n	8007e8c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	701a      	strb	r2, [r3, #0]
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	372c      	adds	r7, #44	@ 0x2c
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <__NVIC_SystemReset>:
{
 8007e98:	b480      	push	{r7}
 8007e9a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007e9c:	f3bf 8f4f 	dsb	sy
}
 8007ea0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007ea2:	4b06      	ldr	r3, [pc, #24]	@ (8007ebc <__NVIC_SystemReset+0x24>)
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007eaa:	4904      	ldr	r1, [pc, #16]	@ (8007ebc <__NVIC_SystemReset+0x24>)
 8007eac:	4b04      	ldr	r3, [pc, #16]	@ (8007ec0 <__NVIC_SystemReset+0x28>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007eb2:	f3bf 8f4f 	dsb	sy
}
 8007eb6:	bf00      	nop
    __NOP();
 8007eb8:	bf00      	nop
 8007eba:	e7fd      	b.n	8007eb8 <__NVIC_SystemReset+0x20>
 8007ebc:	e000ed00 	.word	0xe000ed00
 8007ec0:	05fa0004 	.word	0x05fa0004

08007ec4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8007ed0:	f240 401c 	movw	r0, #1052	@ 0x41c
 8007ed4:	f002 fb92 	bl	800a5fc <USBD_static_malloc>
 8007ed8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d105      	bne.n	8007eec <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e03f      	b.n	8007f6c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007f02:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2202      	movs	r2, #2
 8007f22:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	4798      	blx	r3
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e000      	b.n	8007f6c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e027      	b.n	8007fde <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f94:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2202      	movs	r2, #2
 8007fba:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f002 fb22 	bl	800a618 <USBD_static_free>
  pdev->pClassData = NULL;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ff8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008010:	2303      	movs	r3, #3
 8008012:	e0d5      	b.n	80081c0 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800801c:	2b00      	cmp	r3, #0
 800801e:	d03e      	beq.n	800809e <USBD_DFU_Setup+0xb6>
 8008020:	2b20      	cmp	r3, #32
 8008022:	f040 80c5 	bne.w	80081b0 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	785b      	ldrb	r3, [r3, #1]
 800802a:	2b06      	cmp	r3, #6
 800802c:	d82f      	bhi.n	800808e <USBD_DFU_Setup+0xa6>
 800802e:	a201      	add	r2, pc, #4	@ (adr r2, 8008034 <USBD_DFU_Setup+0x4c>)
 8008030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008034:	08008085 	.word	0x08008085
 8008038:	08008051 	.word	0x08008051
 800803c:	0800805b 	.word	0x0800805b
 8008040:	08008065 	.word	0x08008065
 8008044:	0800806d 	.word	0x0800806d
 8008048:	08008075 	.word	0x08008075
 800804c:	0800807d 	.word	0x0800807d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fa6c 	bl	8008530 <DFU_Download>
          break;
 8008058:	e020      	b.n	800809c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fad3 	bl	8008608 <DFU_Upload>
          break;
 8008062:	e01b      	b.n	800809c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fba9 	bl	80087bc <DFU_GetStatus>
          break;
 800806a:	e017      	b.n	800809c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fc5b 	bl	8008928 <DFU_ClearStatus>
          break;
 8008072:	e013      	b.n	800809c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fcab 	bl	80089d0 <DFU_GetState>
          break;
 800807a:	e00f      	b.n	800809c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fcbf 	bl	8008a00 <DFU_Abort>
          break;
 8008082:	e00b      	b.n	800809c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f9ee 	bl	8008468 <DFU_Detach>
          break;
 800808c:	e006      	b.n	800809c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 fdb1 	bl	8009bf8 <USBD_CtlError>
          ret = USBD_FAIL;
 8008096:	2303      	movs	r3, #3
 8008098:	77fb      	strb	r3, [r7, #31]
          break;
 800809a:	bf00      	nop
      }
      break;
 800809c:	e08f      	b.n	80081be <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	785b      	ldrb	r3, [r3, #1]
 80080a2:	2b0b      	cmp	r3, #11
 80080a4:	d87b      	bhi.n	800819e <USBD_DFU_Setup+0x1b6>
 80080a6:	a201      	add	r2, pc, #4	@ (adr r2, 80080ac <USBD_DFU_Setup+0xc4>)
 80080a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ac:	080080dd 	.word	0x080080dd
 80080b0:	080081ad 	.word	0x080081ad
 80080b4:	0800819f 	.word	0x0800819f
 80080b8:	0800819f 	.word	0x0800819f
 80080bc:	0800819f 	.word	0x0800819f
 80080c0:	0800819f 	.word	0x0800819f
 80080c4:	08008107 	.word	0x08008107
 80080c8:	0800819f 	.word	0x0800819f
 80080cc:	0800819f 	.word	0x0800819f
 80080d0:	0800819f 	.word	0x0800819f
 80080d4:	08008131 	.word	0x08008131
 80080d8:	0800815d 	.word	0x0800815d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d107      	bne.n	80080f8 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80080e8:	f107 030e 	add.w	r3, r7, #14
 80080ec:	2202      	movs	r2, #2
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 fdf2 	bl	8009cda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080f6:	e05a      	b.n	80081ae <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 fd7c 	bl	8009bf8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008100:	2303      	movs	r3, #3
 8008102:	77fb      	strb	r3, [r7, #31]
          break;
 8008104:	e053      	b.n	80081ae <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	885b      	ldrh	r3, [r3, #2]
 800810a:	0a1b      	lsrs	r3, r3, #8
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b21      	cmp	r3, #33	@ 0x21
 8008110:	d107      	bne.n	8008122 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8008112:	4b2d      	ldr	r3, [pc, #180]	@ (80081c8 <USBD_DFU_Setup+0x1e0>)
 8008114:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	88db      	ldrh	r3, [r3, #6]
 800811a:	2b09      	cmp	r3, #9
 800811c:	bf28      	it	cs
 800811e:	2309      	movcs	r3, #9
 8008120:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008122:	8afb      	ldrh	r3, [r7, #22]
 8008124:	461a      	mov	r2, r3
 8008126:	69b9      	ldr	r1, [r7, #24]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f001 fdd6 	bl	8009cda <USBD_CtlSendData>
          break;
 800812e:	e03e      	b.n	80081ae <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b03      	cmp	r3, #3
 800813a:	d108      	bne.n	800814e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008142:	2201      	movs	r2, #1
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 fdc7 	bl	8009cda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800814c:	e02f      	b.n	80081ae <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f001 fd51 	bl	8009bf8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008156:	2303      	movs	r3, #3
 8008158:	77fb      	strb	r3, [r7, #31]
          break;
 800815a:	e028      	b.n	80081ae <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	885b      	ldrh	r3, [r3, #2]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d114      	bne.n	8008190 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b03      	cmp	r3, #3
 8008170:	d107      	bne.n	8008182 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	885b      	ldrh	r3, [r3, #2]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008180:	e015      	b.n	80081ae <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 fd37 	bl	8009bf8 <USBD_CtlError>
              ret = USBD_FAIL;
 800818a:	2303      	movs	r3, #3
 800818c:	77fb      	strb	r3, [r7, #31]
          break;
 800818e:	e00e      	b.n	80081ae <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f001 fd30 	bl	8009bf8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	77fb      	strb	r3, [r7, #31]
          break;
 800819c:	e007      	b.n	80081ae <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fd29 	bl	8009bf8 <USBD_CtlError>
          ret = USBD_FAIL;
 80081a6:	2303      	movs	r3, #3
 80081a8:	77fb      	strb	r3, [r7, #31]
          break;
 80081aa:	e000      	b.n	80081ae <USBD_DFU_Setup+0x1c6>
          break;
 80081ac:	bf00      	nop
      }
      break;
 80081ae:	e006      	b.n	80081be <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fd20 	bl	8009bf8 <USBD_CtlError>
      ret = USBD_FAIL;
 80081b8:	2303      	movs	r3, #3
 80081ba:	77fb      	strb	r3, [r7, #31]
      break;
 80081bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80081be:	7ffb      	ldrb	r3, [r7, #31]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3720      	adds	r7, #32
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	2000005a 	.word	0x2000005a

080081cc <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	221b      	movs	r2, #27
 80081d8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 80081da:	4b03      	ldr	r3, [pc, #12]	@ (80081e8 <USBD_DFU_GetCfgDesc+0x1c>)
}
 80081dc:	4618      	mov	r0, r3
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	20000048 	.word	0x20000048

080081ec <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b088      	sub	sp, #32
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008210:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008218:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	e0ce      	b.n	80083c2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800822a:	2b04      	cmp	r3, #4
 800822c:	f040 80bd 	bne.w	80083aa <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008236:	2b00      	cmp	r3, #0
 8008238:	d17c      	bne.n	8008334 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008240:	2b01      	cmp	r3, #1
 8008242:	f000 8093 	beq.w	800836c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800824c:	2b05      	cmp	r3, #5
 800824e:	d15e      	bne.n	800830e <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b21      	cmp	r3, #33	@ 0x21
 8008256:	d124      	bne.n	80082a2 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	461a      	mov	r2, r3
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	789b      	ldrb	r3, [r3, #2]
 800826e:	021b      	lsls	r3, r3, #8
 8008270:	441a      	add	r2, r3
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	041b      	lsls	r3, r3, #16
 8008284:	441a      	add	r2, r3
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	791b      	ldrb	r3, [r3, #4]
 8008296:	061b      	lsls	r3, r3, #24
 8008298:	441a      	add	r2, r3
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80082a0:	e064      	b.n	800836c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b41      	cmp	r3, #65	@ 0x41
 80082a8:	d12f      	bne.n	800830a <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	785b      	ldrb	r3, [r3, #1]
 80082ae:	461a      	mov	r2, r3
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	789b      	ldrb	r3, [r3, #2]
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	441a      	add	r2, r3
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	78db      	ldrb	r3, [r3, #3]
 80082d4:	041b      	lsls	r3, r3, #16
 80082d6:	441a      	add	r2, r3
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	791b      	ldrb	r3, [r3, #4]
 80082e8:	061b      	lsls	r3, r3, #24
 80082ea:	441a      	add	r2, r3
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d032      	beq.n	800836c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8008306:	2303      	movs	r3, #3
 8008308:	e05b      	b.n	80083c2 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800830a:	2303      	movs	r3, #3
 800830c:	e059      	b.n	80083c2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	2200      	movs	r2, #0
 8008312:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	2200      	movs	r2, #0
 800831a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800831e:	2300      	movs	r3, #0
 8008320:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8008322:	2301      	movs	r3, #1
 8008324:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8008326:	f107 030c 	add.w	r3, r7, #12
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 fc63 	bl	8009bf8 <USBD_CtlError>
 8008332:	e01b      	b.n	800836c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800833a:	2b01      	cmp	r3, #1
 800833c:	d916      	bls.n	800836c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008344:	3b02      	subs	r3, #2
 8008346:	029a      	lsls	r2, r3, #10
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800834e:	4413      	add	r3, r2
 8008350:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	69f8      	ldr	r0, [r7, #28]
 8008358:	6979      	ldr	r1, [r7, #20]
 800835a:	69fa      	ldr	r2, [r7, #28]
 800835c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8008360:	4798      	blx	r3
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8008368:	2303      	movs	r3, #3
 800836a:	e02a      	b.n	80083c2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	2203      	movs	r2, #3
 8008380:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 80083a8:	e00a      	b.n	80083c0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80083b0:	2b07      	cmp	r3, #7
 80083b2:	d103      	bne.n	80083bc <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fb75 	bl	8008aa4 <DFU_Leave>
 80083ba:	e001      	b.n	80083c0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 80083bc:	2303      	movs	r3, #3
 80083be:	e000      	b.n	80083c2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3720      	adds	r7, #32
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	220a      	movs	r2, #10
 80083ec:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 80083ee:	4b03      	ldr	r3, [pc, #12]	@ (80083fc <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	20000064 	.word	0x20000064

08008400 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	460b      	mov	r3, r1
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008414:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8008416:	7afb      	ldrb	r3, [r7, #11]
 8008418:	2b06      	cmp	r3, #6
 800841a:	d808      	bhi.n	800842e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	4905      	ldr	r1, [pc, #20]	@ (8008438 <USBD_DFU_GetUsrStringDesc+0x38>)
 8008424:	4618      	mov	r0, r3
 8008426:	f001 fbf8 	bl	8009c1a <USBD_GetString>
    return USBD_StrDesc;
 800842a:	4b03      	ldr	r3, [pc, #12]	@ (8008438 <USBD_DFU_GetUsrStringDesc+0x38>)
 800842c:	e000      	b.n	8008430 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800842e:	2300      	movs	r3, #0
  }
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	200001a4 	.word	0x200001a4

0800843c <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800844c:	2303      	movs	r3, #3
 800844e:	e004      	b.n	800845a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
	...

08008468 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008478:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d051      	beq.n	8008524 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008486:	2b02      	cmp	r3, #2
 8008488:	d013      	beq.n	80084b2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008490:	2b03      	cmp	r3, #3
 8008492:	d00e      	beq.n	80084b2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800849a:	2b05      	cmp	r3, #5
 800849c:	d009      	beq.n	80084b2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	d004      	beq.n	80084b2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80084ae:	2b09      	cmp	r3, #9
 80084b0:	d125      	bne.n	80084fe <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2202      	movs	r2, #2
 80084b6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 80084fe:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <DFU_Detach+0xc4>)
 8008500:	7d5b      	ldrb	r3, [r3, #21]
 8008502:	f003 0310 	and.w	r3, r3, #16
 8008506:	2b00      	cmp	r3, #0
 8008508:	d006      	beq.n	8008518 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fb7b 	bl	8008c06 <USBD_Stop>
    (void)USBD_Start(pdev);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fb6c 	bl	8008bee <USBD_Start>
 8008516:	e006      	b.n	8008526 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	885b      	ldrh	r3, [r3, #2]
 800851c:	4618      	mov	r0, r3
 800851e:	f7f8 fa37 	bl	8000990 <HAL_Delay>
 8008522:	e000      	b.n	8008526 <DFU_Detach+0xbe>
    return;
 8008524:	bf00      	nop
  }
}
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20000048 	.word	0x20000048

08008530 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008540:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d05b      	beq.n	8008600 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	88db      	ldrh	r3, [r3, #6]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d02d      	beq.n	80085ac <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008556:	2b02      	cmp	r3, #2
 8008558:	d004      	beq.n	8008564 <DFU_Download+0x34>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008560:	2b05      	cmp	r3, #5
 8008562:	d11e      	bne.n	80085a2 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	885b      	ldrh	r3, [r3, #2]
 8008568:	461a      	mov	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	88db      	ldrh	r3, [r3, #6]
 8008574:	461a      	mov	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2203      	movs	r2, #3
 8008580:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008590:	68f9      	ldr	r1, [r7, #12]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008598:	461a      	mov	r2, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 fbc9 	bl	8009d32 <USBD_CtlPrepareRx>
 80085a0:	e02f      	b.n	8008602 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f001 fb27 	bl	8009bf8 <USBD_CtlError>
 80085aa:	e02a      	b.n	8008602 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80085b2:	2b05      	cmp	r3, #5
 80085b4:	d004      	beq.n	80085c0 <DFU_Download+0x90>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d11a      	bne.n	80085f6 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2206      	movs	r2, #6
 80085cc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 80085f4:	e005      	b.n	8008602 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 fafd 	bl	8009bf8 <USBD_CtlError>
 80085fe:	e000      	b.n	8008602 <DFU_Download+0xd2>
    return;
 8008600:	bf00      	nop
    }
  }
}
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008618:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008620:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 80c4 	beq.w	80087b2 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	88db      	ldrh	r3, [r3, #6]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 80a8 	beq.w	8008784 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800863a:	2b02      	cmp	r3, #2
 800863c:	d005      	beq.n	800864a <DFU_Upload+0x42>
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008644:	2b09      	cmp	r3, #9
 8008646:	f040 8090 	bne.w	800876a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	885b      	ldrh	r3, [r3, #2]
 800864e:	461a      	mov	r2, r3
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	88db      	ldrh	r3, [r3, #6]
 800865a:	461a      	mov	r2, r3
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008668:	2b00      	cmp	r3, #0
 800866a:	d12c      	bne.n	80086c6 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008672:	2b03      	cmp	r3, #3
 8008674:	d901      	bls.n	800867a <DFU_Upload+0x72>
 8008676:	2202      	movs	r2, #2
 8008678:	e000      	b.n	800867c <DFU_Upload+0x74>
 800867a:	2209      	movs	r2, #9
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2200      	movs	r2, #0
 80086aa:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2221      	movs	r2, #33	@ 0x21
 80086b0:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2241      	movs	r2, #65	@ 0x41
 80086b6:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	2203      	movs	r2, #3
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fb0b 	bl	8009cda <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80086c4:	e076      	b.n	80087b4 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d931      	bls.n	8008734 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2209      	movs	r2, #9
 80086d4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008702:	3b02      	subs	r3, #2
 8008704:	029a      	lsls	r2, r3, #10
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800870c:	4413      	add	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	6979      	ldr	r1, [r7, #20]
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800871e:	4798      	blx	r3
 8008720:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008728:	461a      	mov	r2, r3
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 fad4 	bl	8009cda <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008732:	e03f      	b.n	80087b4 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	220f      	movs	r2, #15
 8008738:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 fa48 	bl	8009bf8 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8008768:	e024      	b.n	80087b4 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2200      	movs	r2, #0
 800876e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2200      	movs	r2, #0
 8008776:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 fa3b 	bl	8009bf8 <USBD_CtlError>
 8008782:	e017      	b.n	80087b4 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 80087b0:	e000      	b.n	80087b4 <DFU_Upload+0x1ac>
    return;
 80087b2:	bf00      	nop
  }
}
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087ca:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087d2:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 80a0 	beq.w	800891c <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d002      	beq.n	80087ec <DFU_GetStatus+0x30>
 80087e6:	2b06      	cmp	r3, #6
 80087e8:	d051      	beq.n	800888e <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 80087ea:	e08e      	b.n	800890a <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d034      	beq.n	8008860 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2204      	movs	r2, #4
 80087fa:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10e      	bne.n	800884a <DFU_GetStatus+0x8e>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b41      	cmp	r3, #65	@ 0x41
 8008832:	d10a      	bne.n	800884a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8008844:	2100      	movs	r1, #0
 8008846:	4798      	blx	r3
      break;
 8008848:	e05f      	b.n	800890a <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800885a:	2101      	movs	r1, #1
 800885c:	4798      	blx	r3
      break;
 800885e:	e054      	b.n	800890a <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2205      	movs	r2, #5
 8008864:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800888c:	e03d      	b.n	800890a <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8008894:	2b01      	cmp	r3, #1
 8008896:	d116      	bne.n	80088c6 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2207      	movs	r2, #7
 800889c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80088c4:	e020      	b.n	8008908 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d11b      	bne.n	8008908 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 80088d0:	4b14      	ldr	r3, [pc, #80]	@ (8008924 <DFU_GetStatus+0x168>)
 80088d2:	7d1b      	ldrb	r3, [r3, #20]
 80088d4:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d015      	beq.n	8008908 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2202      	movs	r2, #2
 80088e0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008908:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8008910:	2206      	movs	r2, #6
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 f9e0 	bl	8009cda <USBD_CtlSendData>
 800891a:	e000      	b.n	800891e <DFU_GetStatus+0x162>
    return;
 800891c:	bf00      	nop
}
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20000048 	.word	0x20000048

08008928 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008936:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d042      	beq.n	80089c4 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008944:	2b0a      	cmp	r3, #10
 8008946:	d11e      	bne.n	8008986 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8008984:	e01f      	b.n	80089c6 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	220a      	movs	r2, #10
 800898a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	220e      	movs	r2, #14
 8008992:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 80089c2:	e000      	b.n	80089c6 <DFU_ClearStatus+0x9e>
    return;
 80089c4:	bf00      	nop
  }
}
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089de:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d008      	beq.n	80089f8 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80089ec:	2201      	movs	r2, #1
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 f972 	bl	8009cda <USBD_CtlSendData>
 80089f6:	e000      	b.n	80089fa <DFU_GetState+0x2a>
    return;
 80089f8:	bf00      	nop
}
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a0e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d03f      	beq.n	8008a96 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d013      	beq.n	8008a48 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d00e      	beq.n	8008a48 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008a30:	2b05      	cmp	r3, #5
 8008a32:	d009      	beq.n	8008a48 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008a3a:	2b06      	cmp	r3, #6
 8008a3c:	d004      	beq.n	8008a48 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	d127      	bne.n	8008a98 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8008a94:	e000      	b.n	8008a98 <DFU_Abort+0x98>
    return;
 8008a96:	bf00      	nop
  }
}
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
	...

08008aa4 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ab2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d03b      	beq.n	8008b32 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8008ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8008b3c <DFU_Leave+0x98>)
 8008ac4:	7d1b      	ldrb	r3, [r3, #20]
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d016      	beq.n	8008afc <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2206      	movs	r2, #6
 8008ad2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 8008afa:	e01b      	b.n	8008b34 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2208      	movs	r2, #8
 8008b00:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f86c 	bl	8008c06 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8008b2e:	f7ff f9b3 	bl	8007e98 <__NVIC_SystemReset>
    return;
 8008b32:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20000048 	.word	0x20000048

08008b40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e01f      	b.n	8008b98 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	79fa      	ldrb	r2, [r7, #7]
 8008b8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f001 fb91 	bl	800a2b4 <USBD_LL_Init>
 8008b92:	4603      	mov	r3, r0
 8008b94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e016      	b.n	8008be6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd4:	f107 020e 	add.w	r2, r7, #14
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
 8008bdc:	4602      	mov	r2, r0
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 fba2 	bl	800a340 <USBD_LL_Start>
 8008bfc:	4603      	mov	r3, r0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f001 fbb1 	bl	800a376 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d009      	beq.n	8008c32 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	6852      	ldr	r2, [r2, #4]
 8008c2a:	b2d2      	uxtb	r2, r2
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	4798      	blx	r3
  }

  return USBD_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	78fa      	ldrb	r2, [r7, #3]
 8008c76:	4611      	mov	r1, r2
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	4798      	blx	r3
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	460b      	mov	r3, r1
 8008c94:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d007      	beq.n	8008cb0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	78fa      	ldrb	r2, [r7, #3]
 8008caa:	4611      	mov	r1, r2
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	4798      	blx	r3
  }

  return USBD_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 ff59 	bl	8009b84 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008cee:	f003 031f 	and.w	r3, r3, #31
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d01a      	beq.n	8008d2c <USBD_LL_SetupStage+0x72>
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d822      	bhi.n	8008d40 <USBD_LL_SetupStage+0x86>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d002      	beq.n	8008d04 <USBD_LL_SetupStage+0x4a>
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d00a      	beq.n	8008d18 <USBD_LL_SetupStage+0x5e>
 8008d02:	e01d      	b.n	8008d40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f9ef 	bl	80090f0 <USBD_StdDevReq>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
      break;
 8008d16:	e020      	b.n	8008d5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fa53 	bl	80091cc <USBD_StdItfReq>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73fb      	strb	r3, [r7, #15]
      break;
 8008d2a:	e016      	b.n	8008d5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fa92 	bl	800925e <USBD_StdEPReq>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d3e:	e00c      	b.n	8008d5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fb52 	bl	800a3f8 <USBD_LL_StallEP>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]
      break;
 8008d58:	bf00      	nop
  }

  return ret;
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	607a      	str	r2, [r7, #4]
 8008d70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d72:	7afb      	ldrb	r3, [r7, #11]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d138      	bne.n	8008dea <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008d7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d14a      	bne.n	8008e20 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d913      	bls.n	8008dbe <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	689a      	ldr	r2, [r3, #8]
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	1ad2      	subs	r2, r2, r3
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	68da      	ldr	r2, [r3, #12]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	4293      	cmp	r3, r2
 8008dae:	bf28      	it	cs
 8008db0:	4613      	movcs	r3, r2
 8008db2:	461a      	mov	r2, r3
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 ffd8 	bl	8009d6c <USBD_CtlContinueRx>
 8008dbc:	e030      	b.n	8008e20 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d10b      	bne.n	8008de2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d005      	beq.n	8008de2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 ffd3 	bl	8009d8e <USBD_CtlSendStatus>
 8008de8:	e01a      	b.n	8008e20 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d114      	bne.n	8008e20 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00e      	beq.n	8008e20 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	7afa      	ldrb	r2, [r7, #11]
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	4798      	blx	r3
 8008e12:	4603      	mov	r3, r0
 8008e14:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	e000      	b.n	8008e22 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b086      	sub	sp, #24
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	60f8      	str	r0, [r7, #12]
 8008e32:	460b      	mov	r3, r1
 8008e34:	607a      	str	r2, [r7, #4]
 8008e36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e38:	7afb      	ldrb	r3, [r7, #11]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d16b      	bne.n	8008f16 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3314      	adds	r3, #20
 8008e42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d156      	bne.n	8008efc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	689a      	ldr	r2, [r3, #8]
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d914      	bls.n	8008e84 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	689a      	ldr	r2, [r3, #8]
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	1ad2      	subs	r2, r2, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6879      	ldr	r1, [r7, #4]
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 ff4d 	bl	8009d10 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e76:	2300      	movs	r3, #0
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f001 fb65 	bl	800a54c <USBD_LL_PrepareReceive>
 8008e82:	e03b      	b.n	8008efc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	68da      	ldr	r2, [r3, #12]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d11c      	bne.n	8008eca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d316      	bcc.n	8008eca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d20f      	bcs.n	8008eca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2100      	movs	r1, #0
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 ff2e 	bl	8009d10 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f001 fb42 	bl	800a54c <USBD_LL_PrepareReceive>
 8008ec8:	e018      	b.n	8008efc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	d10b      	bne.n	8008eee <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d005      	beq.n	8008eee <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eee:	2180      	movs	r1, #128	@ 0x80
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f001 fa81 	bl	800a3f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 ff5c 	bl	8009db4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d122      	bne.n	8008f4c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f7ff fe98 	bl	8008c3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008f14:	e01a      	b.n	8008f4c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d114      	bne.n	8008f4c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00e      	beq.n	8008f4c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	7afa      	ldrb	r2, [r7, #11]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	4798      	blx	r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	e000      	b.n	8008f4e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e02f      	b.n	8008fea <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00f      	beq.n	8008fb4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d009      	beq.n	8008fb4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6852      	ldr	r2, [r2, #4]
 8008fac:	b2d2      	uxtb	r2, r2
 8008fae:	4611      	mov	r1, r2
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fb4:	2340      	movs	r3, #64	@ 0x40
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	2100      	movs	r1, #0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 f9f6 	bl	800a3ac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2240      	movs	r2, #64	@ 0x40
 8008fcc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fd0:	2340      	movs	r3, #64	@ 0x40
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2180      	movs	r1, #128	@ 0x80
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 f9e8 	bl	800a3ac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2240      	movs	r2, #64	@ 0x40
 8008fe6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	78fa      	ldrb	r2, [r7, #3]
 8009002:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009020:	b2da      	uxtb	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2204      	movs	r2, #4
 800902c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b04      	cmp	r3, #4
 8009050:	d106      	bne.n	8009060 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009058:	b2da      	uxtb	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b082      	sub	sp, #8
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800907c:	2b00      	cmp	r3, #0
 800907e:	d101      	bne.n	8009084 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009080:	2303      	movs	r3, #3
 8009082:	e012      	b.n	80090aa <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b03      	cmp	r3, #3
 800908e:	d10b      	bne.n	80090a8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d005      	beq.n	80090a8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a2:	69db      	ldr	r3, [r3, #28]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b087      	sub	sp, #28
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	3301      	adds	r3, #1
 80090c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	b21a      	sxth	r2, r3
 80090d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090dc:	4313      	orrs	r3, r2
 80090de:	b21b      	sxth	r3, r3
 80090e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090e2:	89fb      	ldrh	r3, [r7, #14]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009106:	2b40      	cmp	r3, #64	@ 0x40
 8009108:	d005      	beq.n	8009116 <USBD_StdDevReq+0x26>
 800910a:	2b40      	cmp	r3, #64	@ 0x40
 800910c:	d853      	bhi.n	80091b6 <USBD_StdDevReq+0xc6>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00b      	beq.n	800912a <USBD_StdDevReq+0x3a>
 8009112:	2b20      	cmp	r3, #32
 8009114:	d14f      	bne.n	80091b6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	4798      	blx	r3
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]
      break;
 8009128:	e04a      	b.n	80091c0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	785b      	ldrb	r3, [r3, #1]
 800912e:	2b09      	cmp	r3, #9
 8009130:	d83b      	bhi.n	80091aa <USBD_StdDevReq+0xba>
 8009132:	a201      	add	r2, pc, #4	@ (adr r2, 8009138 <USBD_StdDevReq+0x48>)
 8009134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009138:	0800918d 	.word	0x0800918d
 800913c:	080091a1 	.word	0x080091a1
 8009140:	080091ab 	.word	0x080091ab
 8009144:	08009197 	.word	0x08009197
 8009148:	080091ab 	.word	0x080091ab
 800914c:	0800916b 	.word	0x0800916b
 8009150:	08009161 	.word	0x08009161
 8009154:	080091ab 	.word	0x080091ab
 8009158:	08009183 	.word	0x08009183
 800915c:	08009175 	.word	0x08009175
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9de 	bl	8009524 <USBD_GetDescriptor>
          break;
 8009168:	e024      	b.n	80091b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fb7f 	bl	8009870 <USBD_SetAddress>
          break;
 8009172:	e01f      	b.n	80091b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fbbe 	bl	80098f8 <USBD_SetConfig>
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]
          break;
 8009180:	e018      	b.n	80091b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fc5d 	bl	8009a44 <USBD_GetConfig>
          break;
 800918a:	e013      	b.n	80091b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 fc8e 	bl	8009ab0 <USBD_GetStatus>
          break;
 8009194:	e00e      	b.n	80091b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fcbd 	bl	8009b18 <USBD_SetFeature>
          break;
 800919e:	e009      	b.n	80091b4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091a0:	6839      	ldr	r1, [r7, #0]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fccc 	bl	8009b40 <USBD_ClrFeature>
          break;
 80091a8:	e004      	b.n	80091b4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fd23 	bl	8009bf8 <USBD_CtlError>
          break;
 80091b2:	bf00      	nop
      }
      break;
 80091b4:	e004      	b.n	80091c0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fd1d 	bl	8009bf8 <USBD_CtlError>
      break;
 80091be:	bf00      	nop
  }

  return ret;
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop

080091cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091e2:	2b40      	cmp	r3, #64	@ 0x40
 80091e4:	d005      	beq.n	80091f2 <USBD_StdItfReq+0x26>
 80091e6:	2b40      	cmp	r3, #64	@ 0x40
 80091e8:	d82f      	bhi.n	800924a <USBD_StdItfReq+0x7e>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <USBD_StdItfReq+0x26>
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	d12b      	bne.n	800924a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	3b01      	subs	r3, #1
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d81d      	bhi.n	800923c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	889b      	ldrh	r3, [r3, #4]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b01      	cmp	r3, #1
 8009208:	d813      	bhi.n	8009232 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	4798      	blx	r3
 8009218:	4603      	mov	r3, r0
 800921a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	88db      	ldrh	r3, [r3, #6]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d110      	bne.n	8009246 <USBD_StdItfReq+0x7a>
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10d      	bne.n	8009246 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fdaf 	bl	8009d8e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009230:	e009      	b.n	8009246 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fcdf 	bl	8009bf8 <USBD_CtlError>
          break;
 800923a:	e004      	b.n	8009246 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fcda 	bl	8009bf8 <USBD_CtlError>
          break;
 8009244:	e000      	b.n	8009248 <USBD_StdItfReq+0x7c>
          break;
 8009246:	bf00      	nop
      }
      break;
 8009248:	e004      	b.n	8009254 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fcd3 	bl	8009bf8 <USBD_CtlError>
      break;
 8009252:	bf00      	nop
  }

  return ret;
 8009254:	7bfb      	ldrb	r3, [r7, #15]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	889b      	ldrh	r3, [r3, #4]
 8009270:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800927a:	2b40      	cmp	r3, #64	@ 0x40
 800927c:	d007      	beq.n	800928e <USBD_StdEPReq+0x30>
 800927e:	2b40      	cmp	r3, #64	@ 0x40
 8009280:	f200 8145 	bhi.w	800950e <USBD_StdEPReq+0x2b0>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00c      	beq.n	80092a2 <USBD_StdEPReq+0x44>
 8009288:	2b20      	cmp	r3, #32
 800928a:	f040 8140 	bne.w	800950e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	4798      	blx	r3
 800929c:	4603      	mov	r3, r0
 800929e:	73fb      	strb	r3, [r7, #15]
      break;
 80092a0:	e13a      	b.n	8009518 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	785b      	ldrb	r3, [r3, #1]
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d007      	beq.n	80092ba <USBD_StdEPReq+0x5c>
 80092aa:	2b03      	cmp	r3, #3
 80092ac:	f300 8129 	bgt.w	8009502 <USBD_StdEPReq+0x2a4>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d07f      	beq.n	80093b4 <USBD_StdEPReq+0x156>
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d03c      	beq.n	8009332 <USBD_StdEPReq+0xd4>
 80092b8:	e123      	b.n	8009502 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d002      	beq.n	80092cc <USBD_StdEPReq+0x6e>
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d016      	beq.n	80092f8 <USBD_StdEPReq+0x9a>
 80092ca:	e02c      	b.n	8009326 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00d      	beq.n	80092ee <USBD_StdEPReq+0x90>
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	2b80      	cmp	r3, #128	@ 0x80
 80092d6:	d00a      	beq.n	80092ee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f88b 	bl	800a3f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092e2:	2180      	movs	r1, #128	@ 0x80
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f001 f887 	bl	800a3f8 <USBD_LL_StallEP>
 80092ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092ec:	e020      	b.n	8009330 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fc81 	bl	8009bf8 <USBD_CtlError>
              break;
 80092f6:	e01b      	b.n	8009330 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	885b      	ldrh	r3, [r3, #2]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10e      	bne.n	800931e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009300:	7bbb      	ldrb	r3, [r7, #14]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00b      	beq.n	800931e <USBD_StdEPReq+0xc0>
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	2b80      	cmp	r3, #128	@ 0x80
 800930a:	d008      	beq.n	800931e <USBD_StdEPReq+0xc0>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	88db      	ldrh	r3, [r3, #6]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d104      	bne.n	800931e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009314:	7bbb      	ldrb	r3, [r7, #14]
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 f86d 	bl	800a3f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fd35 	bl	8009d8e <USBD_CtlSendStatus>

              break;
 8009324:	e004      	b.n	8009330 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fc65 	bl	8009bf8 <USBD_CtlError>
              break;
 800932e:	bf00      	nop
          }
          break;
 8009330:	e0ec      	b.n	800950c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d002      	beq.n	8009344 <USBD_StdEPReq+0xe6>
 800933e:	2b03      	cmp	r3, #3
 8009340:	d016      	beq.n	8009370 <USBD_StdEPReq+0x112>
 8009342:	e030      	b.n	80093a6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00d      	beq.n	8009366 <USBD_StdEPReq+0x108>
 800934a:	7bbb      	ldrb	r3, [r7, #14]
 800934c:	2b80      	cmp	r3, #128	@ 0x80
 800934e:	d00a      	beq.n	8009366 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009350:	7bbb      	ldrb	r3, [r7, #14]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 f84f 	bl	800a3f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800935a:	2180      	movs	r1, #128	@ 0x80
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 f84b 	bl	800a3f8 <USBD_LL_StallEP>
 8009362:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009364:	e025      	b.n	80093b2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fc45 	bl	8009bf8 <USBD_CtlError>
              break;
 800936e:	e020      	b.n	80093b2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	885b      	ldrh	r3, [r3, #2]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d11b      	bne.n	80093b0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800937e:	2b00      	cmp	r3, #0
 8009380:	d004      	beq.n	800938c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009382:	7bbb      	ldrb	r3, [r7, #14]
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 f855 	bl	800a436 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fcfe 	bl	8009d8e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	4798      	blx	r3
 80093a0:	4603      	mov	r3, r0
 80093a2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80093a4:	e004      	b.n	80093b0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fc25 	bl	8009bf8 <USBD_CtlError>
              break;
 80093ae:	e000      	b.n	80093b2 <USBD_StdEPReq+0x154>
              break;
 80093b0:	bf00      	nop
          }
          break;
 80093b2:	e0ab      	b.n	800950c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d002      	beq.n	80093c6 <USBD_StdEPReq+0x168>
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d032      	beq.n	800942a <USBD_StdEPReq+0x1cc>
 80093c4:	e097      	b.n	80094f6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d007      	beq.n	80093dc <USBD_StdEPReq+0x17e>
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	2b80      	cmp	r3, #128	@ 0x80
 80093d0:	d004      	beq.n	80093dc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fc0f 	bl	8009bf8 <USBD_CtlError>
                break;
 80093da:	e091      	b.n	8009500 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	da0b      	bge.n	80093fc <USBD_StdEPReq+0x19e>
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	3310      	adds	r3, #16
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	4413      	add	r3, r2
 80093f8:	3304      	adds	r3, #4
 80093fa:	e00b      	b.n	8009414 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	4413      	add	r3, r2
 8009412:	3304      	adds	r3, #4
 8009414:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2202      	movs	r2, #2
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fc59 	bl	8009cda <USBD_CtlSendData>
              break;
 8009428:	e06a      	b.n	8009500 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800942a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800942e:	2b00      	cmp	r3, #0
 8009430:	da11      	bge.n	8009456 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	f003 020f 	and.w	r2, r3, #15
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	440b      	add	r3, r1
 8009444:	3324      	adds	r3, #36	@ 0x24
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d117      	bne.n	800947c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fbd2 	bl	8009bf8 <USBD_CtlError>
                  break;
 8009454:	e054      	b.n	8009500 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	f003 020f 	and.w	r2, r3, #15
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d104      	bne.n	800947c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fbbf 	bl	8009bf8 <USBD_CtlError>
                  break;
 800947a:	e041      	b.n	8009500 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800947c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009480:	2b00      	cmp	r3, #0
 8009482:	da0b      	bge.n	800949c <USBD_StdEPReq+0x23e>
 8009484:	7bbb      	ldrb	r3, [r7, #14]
 8009486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	3310      	adds	r3, #16
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	4413      	add	r3, r2
 8009498:	3304      	adds	r3, #4
 800949a:	e00b      	b.n	80094b4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	4413      	add	r3, r2
 80094b2:	3304      	adds	r3, #4
 80094b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <USBD_StdEPReq+0x264>
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	2b80      	cmp	r3, #128	@ 0x80
 80094c0:	d103      	bne.n	80094ca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	e00e      	b.n	80094e8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094ca:	7bbb      	ldrb	r3, [r7, #14]
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 ffd0 	bl	800a474 <USBD_LL_IsStallEP>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2201      	movs	r2, #1
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	e002      	b.n	80094e8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2200      	movs	r2, #0
 80094e6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2202      	movs	r2, #2
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fbf3 	bl	8009cda <USBD_CtlSendData>
              break;
 80094f4:	e004      	b.n	8009500 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fb7d 	bl	8009bf8 <USBD_CtlError>
              break;
 80094fe:	bf00      	nop
          }
          break;
 8009500:	e004      	b.n	800950c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fb77 	bl	8009bf8 <USBD_CtlError>
          break;
 800950a:	bf00      	nop
      }
      break;
 800950c:	e004      	b.n	8009518 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fb71 	bl	8009bf8 <USBD_CtlError>
      break;
 8009516:	bf00      	nop
  }

  return ret;
 8009518:	7bfb      	ldrb	r3, [r7, #15]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
	...

08009524 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009536:	2300      	movs	r3, #0
 8009538:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	885b      	ldrh	r3, [r3, #2]
 800953e:	0a1b      	lsrs	r3, r3, #8
 8009540:	b29b      	uxth	r3, r3
 8009542:	3b01      	subs	r3, #1
 8009544:	2b0e      	cmp	r3, #14
 8009546:	f200 8165 	bhi.w	8009814 <USBD_GetDescriptor+0x2f0>
 800954a:	a201      	add	r2, pc, #4	@ (adr r2, 8009550 <USBD_GetDescriptor+0x2c>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	080095c1 	.word	0x080095c1
 8009554:	080095d9 	.word	0x080095d9
 8009558:	08009619 	.word	0x08009619
 800955c:	08009815 	.word	0x08009815
 8009560:	08009815 	.word	0x08009815
 8009564:	080097b5 	.word	0x080097b5
 8009568:	080097e1 	.word	0x080097e1
 800956c:	08009815 	.word	0x08009815
 8009570:	08009815 	.word	0x08009815
 8009574:	08009815 	.word	0x08009815
 8009578:	08009815 	.word	0x08009815
 800957c:	08009815 	.word	0x08009815
 8009580:	08009815 	.word	0x08009815
 8009584:	08009815 	.word	0x08009815
 8009588:	0800958d 	.word	0x0800958d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00b      	beq.n	80095b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800959e:	69db      	ldr	r3, [r3, #28]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	7c12      	ldrb	r2, [r2, #16]
 80095a4:	f107 0108 	add.w	r1, r7, #8
 80095a8:	4610      	mov	r0, r2
 80095aa:	4798      	blx	r3
 80095ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095ae:	e139      	b.n	8009824 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fb20 	bl	8009bf8 <USBD_CtlError>
        err++;
 80095b8:	7afb      	ldrb	r3, [r7, #11]
 80095ba:	3301      	adds	r3, #1
 80095bc:	72fb      	strb	r3, [r7, #11]
      break;
 80095be:	e131      	b.n	8009824 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	7c12      	ldrb	r2, [r2, #16]
 80095cc:	f107 0108 	add.w	r1, r7, #8
 80095d0:	4610      	mov	r0, r2
 80095d2:	4798      	blx	r3
 80095d4:	60f8      	str	r0, [r7, #12]
      break;
 80095d6:	e125      	b.n	8009824 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	7c1b      	ldrb	r3, [r3, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10d      	bne.n	80095fc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e8:	f107 0208 	add.w	r2, r7, #8
 80095ec:	4610      	mov	r0, r2
 80095ee:	4798      	blx	r3
 80095f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	3301      	adds	r3, #1
 80095f6:	2202      	movs	r2, #2
 80095f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095fa:	e113      	b.n	8009824 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009604:	f107 0208 	add.w	r2, r7, #8
 8009608:	4610      	mov	r0, r2
 800960a:	4798      	blx	r3
 800960c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3301      	adds	r3, #1
 8009612:	2202      	movs	r2, #2
 8009614:	701a      	strb	r2, [r3, #0]
      break;
 8009616:	e105      	b.n	8009824 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	885b      	ldrh	r3, [r3, #2]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b05      	cmp	r3, #5
 8009620:	f200 80ac 	bhi.w	800977c <USBD_GetDescriptor+0x258>
 8009624:	a201      	add	r2, pc, #4	@ (adr r2, 800962c <USBD_GetDescriptor+0x108>)
 8009626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962a:	bf00      	nop
 800962c:	08009645 	.word	0x08009645
 8009630:	08009679 	.word	0x08009679
 8009634:	080096ad 	.word	0x080096ad
 8009638:	080096e1 	.word	0x080096e1
 800963c:	08009715 	.word	0x08009715
 8009640:	08009749 	.word	0x08009749
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00b      	beq.n	8009668 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	7c12      	ldrb	r2, [r2, #16]
 800965c:	f107 0108 	add.w	r1, r7, #8
 8009660:	4610      	mov	r0, r2
 8009662:	4798      	blx	r3
 8009664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009666:	e0a4      	b.n	80097b2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fac4 	bl	8009bf8 <USBD_CtlError>
            err++;
 8009670:	7afb      	ldrb	r3, [r7, #11]
 8009672:	3301      	adds	r3, #1
 8009674:	72fb      	strb	r3, [r7, #11]
          break;
 8009676:	e09c      	b.n	80097b2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00b      	beq.n	800969c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	7c12      	ldrb	r2, [r2, #16]
 8009690:	f107 0108 	add.w	r1, r7, #8
 8009694:	4610      	mov	r0, r2
 8009696:	4798      	blx	r3
 8009698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800969a:	e08a      	b.n	80097b2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 faaa 	bl	8009bf8 <USBD_CtlError>
            err++;
 80096a4:	7afb      	ldrb	r3, [r7, #11]
 80096a6:	3301      	adds	r3, #1
 80096a8:	72fb      	strb	r3, [r7, #11]
          break;
 80096aa:	e082      	b.n	80097b2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00b      	beq.n	80096d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	7c12      	ldrb	r2, [r2, #16]
 80096c4:	f107 0108 	add.w	r1, r7, #8
 80096c8:	4610      	mov	r0, r2
 80096ca:	4798      	blx	r3
 80096cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ce:	e070      	b.n	80097b2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fa90 	bl	8009bf8 <USBD_CtlError>
            err++;
 80096d8:	7afb      	ldrb	r3, [r7, #11]
 80096da:	3301      	adds	r3, #1
 80096dc:	72fb      	strb	r3, [r7, #11]
          break;
 80096de:	e068      	b.n	80097b2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	7c12      	ldrb	r2, [r2, #16]
 80096f8:	f107 0108 	add.w	r1, r7, #8
 80096fc:	4610      	mov	r0, r2
 80096fe:	4798      	blx	r3
 8009700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009702:	e056      	b.n	80097b2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fa76 	bl	8009bf8 <USBD_CtlError>
            err++;
 800970c:	7afb      	ldrb	r3, [r7, #11]
 800970e:	3301      	adds	r3, #1
 8009710:	72fb      	strb	r3, [r7, #11]
          break;
 8009712:	e04e      	b.n	80097b2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	7c12      	ldrb	r2, [r2, #16]
 800972c:	f107 0108 	add.w	r1, r7, #8
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3
 8009734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009736:	e03c      	b.n	80097b2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fa5c 	bl	8009bf8 <USBD_CtlError>
            err++;
 8009740:	7afb      	ldrb	r3, [r7, #11]
 8009742:	3301      	adds	r3, #1
 8009744:	72fb      	strb	r3, [r7, #11]
          break;
 8009746:	e034      	b.n	80097b2 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00b      	beq.n	800976c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	7c12      	ldrb	r2, [r2, #16]
 8009760:	f107 0108 	add.w	r1, r7, #8
 8009764:	4610      	mov	r0, r2
 8009766:	4798      	blx	r3
 8009768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976a:	e022      	b.n	80097b2 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa42 	bl	8009bf8 <USBD_CtlError>
            err++;
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	3301      	adds	r3, #1
 8009778:	72fb      	strb	r3, [r7, #11]
          break;
 800977a:	e01a      	b.n	80097b2 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00c      	beq.n	80097a2 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800978e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	8852      	ldrh	r2, [r2, #2]
 8009794:	b2d1      	uxtb	r1, r2
 8009796:	f107 0208 	add.w	r2, r7, #8
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	4798      	blx	r3
 800979e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 80097a0:	e006      	b.n	80097b0 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fa27 	bl	8009bf8 <USBD_CtlError>
            err++;
 80097aa:	7afb      	ldrb	r3, [r7, #11]
 80097ac:	3301      	adds	r3, #1
 80097ae:	72fb      	strb	r3, [r7, #11]
          break;
 80097b0:	bf00      	nop
      }
      break;
 80097b2:	e037      	b.n	8009824 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7c1b      	ldrb	r3, [r3, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d109      	bne.n	80097d0 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c4:	f107 0208 	add.w	r2, r7, #8
 80097c8:	4610      	mov	r0, r2
 80097ca:	4798      	blx	r3
 80097cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097ce:	e029      	b.n	8009824 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fa10 	bl	8009bf8 <USBD_CtlError>
        err++;
 80097d8:	7afb      	ldrb	r3, [r7, #11]
 80097da:	3301      	adds	r3, #1
 80097dc:	72fb      	strb	r3, [r7, #11]
      break;
 80097de:	e021      	b.n	8009824 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	7c1b      	ldrb	r3, [r3, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10d      	bne.n	8009804 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f0:	f107 0208 	add.w	r2, r7, #8
 80097f4:	4610      	mov	r0, r2
 80097f6:	4798      	blx	r3
 80097f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3301      	adds	r3, #1
 80097fe:	2207      	movs	r2, #7
 8009800:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009802:	e00f      	b.n	8009824 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f9f6 	bl	8009bf8 <USBD_CtlError>
        err++;
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	3301      	adds	r3, #1
 8009810:	72fb      	strb	r3, [r7, #11]
      break;
 8009812:	e007      	b.n	8009824 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f9ee 	bl	8009bf8 <USBD_CtlError>
      err++;
 800981c:	7afb      	ldrb	r3, [r7, #11]
 800981e:	3301      	adds	r3, #1
 8009820:	72fb      	strb	r3, [r7, #11]
      break;
 8009822:	bf00      	nop
  }

  if (err != 0U)
 8009824:	7afb      	ldrb	r3, [r7, #11]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d11e      	bne.n	8009868 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	88db      	ldrh	r3, [r3, #6]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d016      	beq.n	8009860 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 8009832:	893b      	ldrh	r3, [r7, #8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00e      	beq.n	8009856 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	88da      	ldrh	r2, [r3, #6]
 800983c:	893b      	ldrh	r3, [r7, #8]
 800983e:	4293      	cmp	r3, r2
 8009840:	bf28      	it	cs
 8009842:	4613      	movcs	r3, r2
 8009844:	b29b      	uxth	r3, r3
 8009846:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009848:	893b      	ldrh	r3, [r7, #8]
 800984a:	461a      	mov	r2, r3
 800984c:	68f9      	ldr	r1, [r7, #12]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fa43 	bl	8009cda <USBD_CtlSendData>
 8009854:	e009      	b.n	800986a <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f9cd 	bl	8009bf8 <USBD_CtlError>
 800985e:	e004      	b.n	800986a <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fa94 	bl	8009d8e <USBD_CtlSendStatus>
 8009866:	e000      	b.n	800986a <USBD_GetDescriptor+0x346>
    return;
 8009868:	bf00      	nop
  }
}
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	889b      	ldrh	r3, [r3, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d131      	bne.n	80098e6 <USBD_SetAddress+0x76>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	88db      	ldrh	r3, [r3, #6]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d12d      	bne.n	80098e6 <USBD_SetAddress+0x76>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	885b      	ldrh	r3, [r3, #2]
 800988e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009890:	d829      	bhi.n	80098e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	885b      	ldrh	r3, [r3, #2]
 8009896:	b2db      	uxtb	r3, r3
 8009898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800989c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d104      	bne.n	80098b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f9a3 	bl	8009bf8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b2:	e01d      	b.n	80098f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	7bfa      	ldrb	r2, [r7, #15]
 80098b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fe03 	bl	800a4cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fa61 	bl	8009d8e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d004      	beq.n	80098dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2202      	movs	r2, #2
 80098d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098da:	e009      	b.n	80098f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e4:	e004      	b.n	80098f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f985 	bl	8009bf8 <USBD_CtlError>
  }
}
 80098ee:	bf00      	nop
 80098f0:	bf00      	nop
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	885b      	ldrh	r3, [r3, #2]
 800990a:	b2da      	uxtb	r2, r3
 800990c:	4b4c      	ldr	r3, [pc, #304]	@ (8009a40 <USBD_SetConfig+0x148>)
 800990e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009910:	4b4b      	ldr	r3, [pc, #300]	@ (8009a40 <USBD_SetConfig+0x148>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d905      	bls.n	8009924 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f96c 	bl	8009bf8 <USBD_CtlError>
    return USBD_FAIL;
 8009920:	2303      	movs	r3, #3
 8009922:	e088      	b.n	8009a36 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b02      	cmp	r3, #2
 800992e:	d002      	beq.n	8009936 <USBD_SetConfig+0x3e>
 8009930:	2b03      	cmp	r3, #3
 8009932:	d025      	beq.n	8009980 <USBD_SetConfig+0x88>
 8009934:	e071      	b.n	8009a1a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009936:	4b42      	ldr	r3, [pc, #264]	@ (8009a40 <USBD_SetConfig+0x148>)
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d01c      	beq.n	8009978 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800993e:	4b40      	ldr	r3, [pc, #256]	@ (8009a40 <USBD_SetConfig+0x148>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009948:	4b3d      	ldr	r3, [pc, #244]	@ (8009a40 <USBD_SetConfig+0x148>)
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7ff f97f 	bl	8008c52 <USBD_SetClassConfig>
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d004      	beq.n	8009968 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f949 	bl	8009bf8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009966:	e065      	b.n	8009a34 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fa10 	bl	8009d8e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2203      	movs	r2, #3
 8009972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009976:	e05d      	b.n	8009a34 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fa08 	bl	8009d8e <USBD_CtlSendStatus>
      break;
 800997e:	e059      	b.n	8009a34 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009980:	4b2f      	ldr	r3, [pc, #188]	@ (8009a40 <USBD_SetConfig+0x148>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d112      	bne.n	80099ae <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009990:	4b2b      	ldr	r3, [pc, #172]	@ (8009a40 <USBD_SetConfig+0x148>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	461a      	mov	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800999a:	4b29      	ldr	r3, [pc, #164]	@ (8009a40 <USBD_SetConfig+0x148>)
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff f972 	bl	8008c8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f9f1 	bl	8009d8e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099ac:	e042      	b.n	8009a34 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80099ae:	4b24      	ldr	r3, [pc, #144]	@ (8009a40 <USBD_SetConfig+0x148>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d02a      	beq.n	8009a12 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7ff f960 	bl	8008c8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80099ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009a40 <USBD_SetConfig+0x148>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a40 <USBD_SetConfig+0x148>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7ff f939 	bl	8008c52 <USBD_SetClassConfig>
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00f      	beq.n	8009a0a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f903 	bl	8009bf8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7ff f945 	bl	8008c8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2202      	movs	r2, #2
 8009a04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a08:	e014      	b.n	8009a34 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f9bf 	bl	8009d8e <USBD_CtlSendStatus>
      break;
 8009a10:	e010      	b.n	8009a34 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f9bb 	bl	8009d8e <USBD_CtlSendStatus>
      break;
 8009a18:	e00c      	b.n	8009a34 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f8eb 	bl	8009bf8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a22:	4b07      	ldr	r3, [pc, #28]	@ (8009a40 <USBD_SetConfig+0x148>)
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff f92e 	bl	8008c8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	73fb      	strb	r3, [r7, #15]
      break;
 8009a32:	bf00      	nop
  }

  return ret;
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	200002a3 	.word	0x200002a3

08009a44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	88db      	ldrh	r3, [r3, #6]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d004      	beq.n	8009a60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f8cd 	bl	8009bf8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a5e:	e023      	b.n	8009aa8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	dc02      	bgt.n	8009a72 <USBD_GetConfig+0x2e>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	dc03      	bgt.n	8009a78 <USBD_GetConfig+0x34>
 8009a70:	e015      	b.n	8009a9e <USBD_GetConfig+0x5a>
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d00b      	beq.n	8009a8e <USBD_GetConfig+0x4a>
 8009a76:	e012      	b.n	8009a9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3308      	adds	r3, #8
 8009a82:	2201      	movs	r2, #1
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f927 	bl	8009cda <USBD_CtlSendData>
        break;
 8009a8c:	e00c      	b.n	8009aa8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	3304      	adds	r3, #4
 8009a92:	2201      	movs	r2, #1
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f91f 	bl	8009cda <USBD_CtlSendData>
        break;
 8009a9c:	e004      	b.n	8009aa8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f8a9 	bl	8009bf8 <USBD_CtlError>
        break;
 8009aa6:	bf00      	nop
}
 8009aa8:	bf00      	nop
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d81e      	bhi.n	8009b06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	88db      	ldrh	r3, [r3, #6]
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d004      	beq.n	8009ada <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f890 	bl	8009bf8 <USBD_CtlError>
        break;
 8009ad8:	e01a      	b.n	8009b10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d005      	beq.n	8009af6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f043 0202 	orr.w	r2, r3, #2
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	330c      	adds	r3, #12
 8009afa:	2202      	movs	r2, #2
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f8eb 	bl	8009cda <USBD_CtlSendData>
      break;
 8009b04:	e004      	b.n	8009b10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f875 	bl	8009bf8 <USBD_CtlError>
      break;
 8009b0e:	bf00      	nop
  }
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	885b      	ldrh	r3, [r3, #2]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d106      	bne.n	8009b38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f92b 	bl	8009d8e <USBD_CtlSendStatus>
  }
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d80b      	bhi.n	8009b70 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	885b      	ldrh	r3, [r3, #2]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d10c      	bne.n	8009b7a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f910 	bl	8009d8e <USBD_CtlSendStatus>
      }
      break;
 8009b6e:	e004      	b.n	8009b7a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f840 	bl	8009bf8 <USBD_CtlError>
      break;
 8009b78:	e000      	b.n	8009b7c <USBD_ClrFeature+0x3c>
      break;
 8009b7a:	bf00      	nop
  }
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	781a      	ldrb	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	781a      	ldrb	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3301      	adds	r3, #1
 8009bac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f7ff fa7f 	bl	80090b2 <SWAPBYTE>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff fa72 	bl	80090b2 <SWAPBYTE>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3301      	adds	r3, #1
 8009be0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f7ff fa65 	bl	80090b2 <SWAPBYTE>
 8009be8:	4603      	mov	r3, r0
 8009bea:	461a      	mov	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	80da      	strh	r2, [r3, #6]
}
 8009bf0:	bf00      	nop
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c02:	2180      	movs	r1, #128	@ 0x80
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fbf7 	bl	800a3f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fbf3 	bl	800a3f8 <USBD_LL_StallEP>
}
 8009c12:	bf00      	nop
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b086      	sub	sp, #24
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	60f8      	str	r0, [r7, #12]
 8009c22:	60b9      	str	r1, [r7, #8]
 8009c24:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d036      	beq.n	8009c9e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c34:	6938      	ldr	r0, [r7, #16]
 8009c36:	f000 f836 	bl	8009ca6 <USBD_GetLen>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	7812      	ldrb	r2, [r2, #0]
 8009c52:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
 8009c56:	3301      	adds	r3, #1
 8009c58:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	4413      	add	r3, r2
 8009c60:	2203      	movs	r2, #3
 8009c62:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	3301      	adds	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c6a:	e013      	b.n	8009c94 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	4413      	add	r3, r2
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	7812      	ldrb	r2, [r2, #0]
 8009c76:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	613b      	str	r3, [r7, #16]
    idx++;
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	3301      	adds	r3, #1
 8009c82:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c84:	7dfb      	ldrb	r3, [r7, #23]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	4413      	add	r3, r2
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	3301      	adds	r3, #1
 8009c92:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1e7      	bne.n	8009c6c <USBD_GetString+0x52>
 8009c9c:	e000      	b.n	8009ca0 <USBD_GetString+0x86>
    return;
 8009c9e:	bf00      	nop
  }
}
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b085      	sub	sp, #20
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009cb6:	e005      	b.n	8009cc4 <USBD_GetLen+0x1e>
  {
    len++;
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1f5      	bne.n	8009cb8 <USBD_GetLen+0x12>
  }

  return len;
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2202      	movs	r2, #2
 8009cea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	2100      	movs	r1, #0
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 fc02 	bl	800a50a <USBD_LL_Transmit>

  return USBD_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	2100      	movs	r1, #0
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 fbf1 	bl	800a50a <USBD_LL_Transmit>

  return USBD_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	60b9      	str	r1, [r7, #8]
 8009d3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2203      	movs	r2, #3
 8009d42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 fbf5 	bl	800a54c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 fbe4 	bl	800a54c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2204      	movs	r2, #4
 8009d9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d9e:	2300      	movs	r3, #0
 8009da0:	2200      	movs	r2, #0
 8009da2:	2100      	movs	r1, #0
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fbb0 	bl	800a50a <USBD_LL_Transmit>

  return USBD_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2205      	movs	r2, #5
 8009dc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	2100      	movs	r1, #0
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fbbe 	bl	800a54c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
	...

08009ddc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 8009de0:	2200      	movs	r2, #0
 8009de2:	4912      	ldr	r1, [pc, #72]	@ (8009e2c <MX_USB_Device_Init+0x50>)
 8009de4:	4812      	ldr	r0, [pc, #72]	@ (8009e30 <MX_USB_Device_Init+0x54>)
 8009de6:	f7fe feab 	bl	8008b40 <USBD_Init>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009df0:	f7f6 fbf0 	bl	80005d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 8009df4:	490f      	ldr	r1, [pc, #60]	@ (8009e34 <MX_USB_Device_Init+0x58>)
 8009df6:	480e      	ldr	r0, [pc, #56]	@ (8009e30 <MX_USB_Device_Init+0x54>)
 8009df8:	f7fe fed2 	bl	8008ba0 <USBD_RegisterClass>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009e02:	f7f6 fbe7 	bl	80005d4 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 8009e06:	490c      	ldr	r1, [pc, #48]	@ (8009e38 <MX_USB_Device_Init+0x5c>)
 8009e08:	4809      	ldr	r0, [pc, #36]	@ (8009e30 <MX_USB_Device_Init+0x54>)
 8009e0a:	f7fe fb17 	bl	800843c <USBD_DFU_RegisterMedia>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009e14:	f7f6 fbde 	bl	80005d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009e18:	4805      	ldr	r0, [pc, #20]	@ (8009e30 <MX_USB_Device_Init+0x54>)
 8009e1a:	f7fe fee8 	bl	8008bee <USBD_Start>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009e24:	f7f6 fbd6 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009e28:	bf00      	nop
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	20000070 	.word	0x20000070
 8009e30:	200002a4 	.word	0x200002a4
 8009e34:	2000000c 	.word	0x2000000c
 8009e38:	200000c4 	.word	0x200000c4

08009e3c <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	6039      	str	r1, [r7, #0]
 8009e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2212      	movs	r2, #18
 8009e4c:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 8009e4e:	4b03      	ldr	r3, [pc, #12]	@ (8009e5c <USBD_DFU_DeviceDescriptor+0x20>)
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	20000090 	.word	0x20000090

08009e60 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4603      	mov	r3, r0
 8009e68:	6039      	str	r1, [r7, #0]
 8009e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	2204      	movs	r2, #4
 8009e70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e72:	4b03      	ldr	r3, [pc, #12]	@ (8009e80 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	200000a4 	.word	0x200000a4

08009e84 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	6039      	str	r1, [r7, #0]
 8009e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e90:	79fb      	ldrb	r3, [r7, #7]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d105      	bne.n	8009ea2 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	4907      	ldr	r1, [pc, #28]	@ (8009eb8 <USBD_DFU_ProductStrDescriptor+0x34>)
 8009e9a:	4808      	ldr	r0, [pc, #32]	@ (8009ebc <USBD_DFU_ProductStrDescriptor+0x38>)
 8009e9c:	f7ff febd 	bl	8009c1a <USBD_GetString>
 8009ea0:	e004      	b.n	8009eac <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	4904      	ldr	r1, [pc, #16]	@ (8009eb8 <USBD_DFU_ProductStrDescriptor+0x34>)
 8009ea6:	4805      	ldr	r0, [pc, #20]	@ (8009ebc <USBD_DFU_ProductStrDescriptor+0x38>)
 8009ea8:	f7ff feb7 	bl	8009c1a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009eac:	4b02      	ldr	r3, [pc, #8]	@ (8009eb8 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20000574 	.word	0x20000574
 8009ebc:	0800a700 	.word	0x0800a700

08009ec0 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	6039      	str	r1, [r7, #0]
 8009eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	4904      	ldr	r1, [pc, #16]	@ (8009ee0 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 8009ed0:	4804      	ldr	r0, [pc, #16]	@ (8009ee4 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 8009ed2:	f7ff fea2 	bl	8009c1a <USBD_GetString>
  return USBD_StrDesc;
 8009ed6:	4b02      	ldr	r3, [pc, #8]	@ (8009ee0 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	20000574 	.word	0x20000574
 8009ee4:	0800a720 	.word	0x0800a720

08009ee8 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	6039      	str	r1, [r7, #0]
 8009ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	221a      	movs	r2, #26
 8009ef8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009efa:	f000 f843 	bl	8009f84 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009efe:	4b02      	ldr	r3, [pc, #8]	@ (8009f08 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	200000a8 	.word	0x200000a8

08009f0c <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	6039      	str	r1, [r7, #0]
 8009f16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d105      	bne.n	8009f2a <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	4907      	ldr	r1, [pc, #28]	@ (8009f40 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8009f22:	4808      	ldr	r0, [pc, #32]	@ (8009f44 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8009f24:	f7ff fe79 	bl	8009c1a <USBD_GetString>
 8009f28:	e004      	b.n	8009f34 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	4904      	ldr	r1, [pc, #16]	@ (8009f40 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8009f2e:	4805      	ldr	r0, [pc, #20]	@ (8009f44 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8009f30:	f7ff fe73 	bl	8009c1a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f34:	4b02      	ldr	r3, [pc, #8]	@ (8009f40 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000574 	.word	0x20000574
 8009f44:	0800a734 	.word	0x0800a734

08009f48 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	6039      	str	r1, [r7, #0]
 8009f52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f54:	79fb      	ldrb	r3, [r7, #7]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d105      	bne.n	8009f66 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	4907      	ldr	r1, [pc, #28]	@ (8009f7c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8009f5e:	4808      	ldr	r0, [pc, #32]	@ (8009f80 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8009f60:	f7ff fe5b 	bl	8009c1a <USBD_GetString>
 8009f64:	e004      	b.n	8009f70 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	4904      	ldr	r1, [pc, #16]	@ (8009f7c <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8009f6a:	4805      	ldr	r0, [pc, #20]	@ (8009f80 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8009f6c:	f7ff fe55 	bl	8009c1a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f70:	4b02      	ldr	r3, [pc, #8]	@ (8009f7c <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20000574 	.word	0x20000574
 8009f80:	0800a740 	.word	0x0800a740

08009f84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8009fc8 <Get_SerialNum+0x44>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f90:	4b0e      	ldr	r3, [pc, #56]	@ (8009fcc <Get_SerialNum+0x48>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f96:	4b0e      	ldr	r3, [pc, #56]	@ (8009fd0 <Get_SerialNum+0x4c>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d009      	beq.n	8009fbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009faa:	2208      	movs	r2, #8
 8009fac:	4909      	ldr	r1, [pc, #36]	@ (8009fd4 <Get_SerialNum+0x50>)
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 f814 	bl	8009fdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009fb4:	2204      	movs	r2, #4
 8009fb6:	4908      	ldr	r1, [pc, #32]	@ (8009fd8 <Get_SerialNum+0x54>)
 8009fb8:	68b8      	ldr	r0, [r7, #8]
 8009fba:	f000 f80f 	bl	8009fdc <IntToUnicode>
  }
}
 8009fbe:	bf00      	nop
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	1fff7590 	.word	0x1fff7590
 8009fcc:	1fff7594 	.word	0x1fff7594
 8009fd0:	1fff7598 	.word	0x1fff7598
 8009fd4:	200000aa 	.word	0x200000aa
 8009fd8:	200000ba 	.word	0x200000ba

08009fdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009fea:	2300      	movs	r3, #0
 8009fec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009fee:	2300      	movs	r3, #0
 8009ff0:	75fb      	strb	r3, [r7, #23]
 8009ff2:	e027      	b.n	800a044 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	0f1b      	lsrs	r3, r3, #28
 8009ff8:	2b09      	cmp	r3, #9
 8009ffa:	d80b      	bhi.n	800a014 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	0f1b      	lsrs	r3, r3, #28
 800a000:	b2da      	uxtb	r2, r3
 800a002:	7dfb      	ldrb	r3, [r7, #23]
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	4619      	mov	r1, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	440b      	add	r3, r1
 800a00c:	3230      	adds	r2, #48	@ 0x30
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	701a      	strb	r2, [r3, #0]
 800a012:	e00a      	b.n	800a02a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	0f1b      	lsrs	r3, r3, #28
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	005b      	lsls	r3, r3, #1
 800a01e:	4619      	mov	r1, r3
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	440b      	add	r3, r1
 800a024:	3237      	adds	r2, #55	@ 0x37
 800a026:	b2d2      	uxtb	r2, r2
 800a028:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	011b      	lsls	r3, r3, #4
 800a02e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	3301      	adds	r3, #1
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	4413      	add	r3, r2
 800a03a:	2200      	movs	r2, #0
 800a03c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a03e:	7dfb      	ldrb	r3, [r7, #23]
 800a040:	3301      	adds	r3, #1
 800a042:	75fb      	strb	r3, [r7, #23]
 800a044:	7dfa      	ldrb	r2, [r7, #23]
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d3d3      	bcc.n	8009ff4 <IntToUnicode+0x18>
  }
}
 800a04c:	bf00      	nop
 800a04e:	bf00      	nop
 800a050:	371c      	adds	r7, #28
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 800a05a:	b480      	push	{r7}
 800a05c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800a05e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800a060:	4618      	mov	r0, r3
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 800a06a:	b480      	push	{r7}
 800a06c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800a06e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800a070:	4618      	mov	r0, r3
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b083      	sub	sp, #12
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800a082:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a084:	4618      	mov	r0, r3
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800a09c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b085      	sub	sp, #20
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 800a0b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	b085      	sub	sp, #20
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	607a      	str	r2, [r7, #4]
 800a0d2:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800a0d4:	7afb      	ldrb	r3, [r7, #11]
 800a0d6:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800a0d8:	bf00      	nop
  }
  return (USBD_OK);
 800a0da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b094      	sub	sp, #80	@ 0x50
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a0f0:	f107 030c 	add.w	r3, r7, #12
 800a0f4:	2244      	movs	r2, #68	@ 0x44
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 fac9 	bl	800a690 <memset>
  if(pcdHandle->Instance==USB)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a15      	ldr	r2, [pc, #84]	@ (800a158 <HAL_PCD_MspInit+0x70>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d122      	bne.n	800a14e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a108:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a10c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a10e:	2300      	movs	r3, #0
 800a110:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a112:	f107 030c 	add.w	r3, r7, #12
 800a116:	4618      	mov	r0, r3
 800a118:	f7fa ff72 	bl	8005000 <HAL_RCCEx_PeriphCLKConfig>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800a122:	f7f6 fa57 	bl	80005d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a126:	4b0d      	ldr	r3, [pc, #52]	@ (800a15c <HAL_PCD_MspInit+0x74>)
 800a128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a12a:	4a0c      	ldr	r2, [pc, #48]	@ (800a15c <HAL_PCD_MspInit+0x74>)
 800a12c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a130:	6593      	str	r3, [r2, #88]	@ 0x58
 800a132:	4b0a      	ldr	r3, [pc, #40]	@ (800a15c <HAL_PCD_MspInit+0x74>)
 800a134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a13a:	60bb      	str	r3, [r7, #8]
 800a13c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a13e:	2200      	movs	r2, #0
 800a140:	2100      	movs	r1, #0
 800a142:	2014      	movs	r0, #20
 800a144:	f7f6 fd21 	bl	8000b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a148:	2014      	movs	r0, #20
 800a14a:	f7f6 fd38 	bl	8000bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a14e:	bf00      	nop
 800a150:	3750      	adds	r7, #80	@ 0x50
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	40005c00 	.word	0x40005c00
 800a15c:	40021000 	.word	0x40021000

0800a160 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a174:	4619      	mov	r1, r3
 800a176:	4610      	mov	r0, r2
 800a178:	f7fe fd9f 	bl	8008cba <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a17c:	bf00      	nop
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a196:	78fa      	ldrb	r2, [r7, #3]
 800a198:	6879      	ldr	r1, [r7, #4]
 800a19a:	4613      	mov	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4413      	add	r3, r2
 800a1a0:	00db      	lsls	r3, r3, #3
 800a1a2:	440b      	add	r3, r1
 800a1a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	78fb      	ldrb	r3, [r7, #3]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f7fe fdd9 	bl	8008d64 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a1cc:	78fa      	ldrb	r2, [r7, #3]
 800a1ce:	6879      	ldr	r1, [r7, #4]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	440b      	add	r3, r1
 800a1da:	3324      	adds	r3, #36	@ 0x24
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	78fb      	ldrb	r3, [r7, #3]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	f7fe fe22 	bl	8008e2a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a1e6:	bf00      	nop
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fe ff36 	bl	800906e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a202:	bf00      	nop
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a212:	2301      	movs	r3, #1
 800a214:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	795b      	ldrb	r3, [r3, #5]
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d001      	beq.n	800a222 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a21e:	f7f6 f9d9 	bl	80005d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a228:	7bfa      	ldrb	r2, [r7, #15]
 800a22a:	4611      	mov	r1, r2
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fe fee0 	bl	8008ff2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fe fe8c 	bl	8008f56 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a23e:	bf00      	nop
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
	...

0800a248 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe fedb 	bl	8009012 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	7a5b      	ldrb	r3, [r3, #9]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d005      	beq.n	800a270 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a264:	4b04      	ldr	r3, [pc, #16]	@ (800a278 <HAL_PCD_SuspendCallback+0x30>)
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	4a03      	ldr	r2, [pc, #12]	@ (800a278 <HAL_PCD_SuspendCallback+0x30>)
 800a26a:	f043 0306 	orr.w	r3, r3, #6
 800a26e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	e000ed00 	.word	0xe000ed00

0800a27c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	7a5b      	ldrb	r3, [r3, #9]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d007      	beq.n	800a29c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a28c:	4b08      	ldr	r3, [pc, #32]	@ (800a2b0 <HAL_PCD_ResumeCallback+0x34>)
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	4a07      	ldr	r2, [pc, #28]	@ (800a2b0 <HAL_PCD_ResumeCallback+0x34>)
 800a292:	f023 0306 	bic.w	r3, r3, #6
 800a296:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a298:	f000 f9c8 	bl	800a62c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fecb 	bl	800903e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a2a8:	bf00      	nop
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	e000ed00 	.word	0xe000ed00

0800a2b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a2bc:	4a1e      	ldr	r2, [pc, #120]	@ (800a338 <USBD_LL_Init+0x84>)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a1c      	ldr	r2, [pc, #112]	@ (800a338 <USBD_LL_Init+0x84>)
 800a2c8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a2cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a338 <USBD_LL_Init+0x84>)
 800a2ce:	4a1b      	ldr	r2, [pc, #108]	@ (800a33c <USBD_LL_Init+0x88>)
 800a2d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a2d2:	4b19      	ldr	r3, [pc, #100]	@ (800a338 <USBD_LL_Init+0x84>)
 800a2d4:	2208      	movs	r2, #8
 800a2d6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a2d8:	4b17      	ldr	r3, [pc, #92]	@ (800a338 <USBD_LL_Init+0x84>)
 800a2da:	2202      	movs	r2, #2
 800a2dc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2de:	4b16      	ldr	r3, [pc, #88]	@ (800a338 <USBD_LL_Init+0x84>)
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a2e4:	4b14      	ldr	r3, [pc, #80]	@ (800a338 <USBD_LL_Init+0x84>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a2ea:	4b13      	ldr	r3, [pc, #76]	@ (800a338 <USBD_LL_Init+0x84>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a2f0:	4b11      	ldr	r3, [pc, #68]	@ (800a338 <USBD_LL_Init+0x84>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a2f6:	4b10      	ldr	r3, [pc, #64]	@ (800a338 <USBD_LL_Init+0x84>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a2fc:	480e      	ldr	r0, [pc, #56]	@ (800a338 <USBD_LL_Init+0x84>)
 800a2fe:	f7f8 fc16 	bl	8002b2e <HAL_PCD_Init>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a308:	f7f6 f964 	bl	80005d4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a312:	2318      	movs	r3, #24
 800a314:	2200      	movs	r2, #0
 800a316:	2100      	movs	r1, #0
 800a318:	f7fa f85f 	bl	80043da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a322:	2358      	movs	r3, #88	@ 0x58
 800a324:	2200      	movs	r2, #0
 800a326:	2180      	movs	r1, #128	@ 0x80
 800a328:	f7fa f857 	bl	80043da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20000774 	.word	0x20000774
 800a33c:	40005c00 	.word	0x40005c00

0800a340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a356:	4618      	mov	r0, r3
 800a358:	f7f8 fcb7 	bl	8002cca <HAL_PCD_Start>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f968 	bl	800a638 <USBD_Get_USB_Status>
 800a368:	4603      	mov	r3, r0
 800a36a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7f8 fcbe 	bl	8002d0e <HAL_PCD_Stop>
 800a392:	4603      	mov	r3, r0
 800a394:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a396:	7bfb      	ldrb	r3, [r7, #15]
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 f94d 	bl	800a638 <USBD_Get_USB_Status>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	70fb      	strb	r3, [r7, #3]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	70bb      	strb	r3, [r7, #2]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a3d4:	78bb      	ldrb	r3, [r7, #2]
 800a3d6:	883a      	ldrh	r2, [r7, #0]
 800a3d8:	78f9      	ldrb	r1, [r7, #3]
 800a3da:	f7f8 fe05 	bl	8002fe8 <HAL_PCD_EP_Open>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 f927 	bl	800a638 <USBD_Get_USB_Status>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a412:	78fa      	ldrb	r2, [r7, #3]
 800a414:	4611      	mov	r1, r2
 800a416:	4618      	mov	r0, r3
 800a418:	f7f8 fead 	bl	8003176 <HAL_PCD_EP_SetStall>
 800a41c:	4603      	mov	r3, r0
 800a41e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 f908 	bl	800a638 <USBD_Get_USB_Status>
 800a428:	4603      	mov	r3, r0
 800a42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	460b      	mov	r3, r1
 800a440:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a450:	78fa      	ldrb	r2, [r7, #3]
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f7f8 fee0 	bl	800321a <HAL_PCD_EP_ClrStall>
 800a45a:	4603      	mov	r3, r0
 800a45c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	4618      	mov	r0, r3
 800a462:	f000 f8e9 	bl	800a638 <USBD_Get_USB_Status>
 800a466:	4603      	mov	r3, r0
 800a468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a486:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	da0b      	bge.n	800a4a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a490:	78fb      	ldrb	r3, [r7, #3]
 800a492:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a496:	68f9      	ldr	r1, [r7, #12]
 800a498:	4613      	mov	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	440b      	add	r3, r1
 800a4a2:	3312      	adds	r3, #18
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	e00b      	b.n	800a4c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4ae:	68f9      	ldr	r1, [r7, #12]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	00db      	lsls	r3, r3, #3
 800a4b8:	440b      	add	r3, r1
 800a4ba:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a4be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4e6:	78fa      	ldrb	r2, [r7, #3]
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7f8 fd58 	bl	8002fa0 <HAL_PCD_SetAddress>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 f89e 	bl	800a638 <USBD_Get_USB_Status>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a500:	7bbb      	ldrb	r3, [r7, #14]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b086      	sub	sp, #24
 800a50e:	af00      	add	r7, sp, #0
 800a510:	60f8      	str	r0, [r7, #12]
 800a512:	607a      	str	r2, [r7, #4]
 800a514:	603b      	str	r3, [r7, #0]
 800a516:	460b      	mov	r3, r1
 800a518:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a528:	7af9      	ldrb	r1, [r7, #11]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	f7f8 fdeb 	bl	8003108 <HAL_PCD_EP_Transmit>
 800a532:	4603      	mov	r3, r0
 800a534:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a536:	7dfb      	ldrb	r3, [r7, #23]
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 f87d 	bl	800a638 <USBD_Get_USB_Status>
 800a53e:	4603      	mov	r3, r0
 800a540:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a542:	7dbb      	ldrb	r3, [r7, #22]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	607a      	str	r2, [r7, #4]
 800a556:	603b      	str	r3, [r7, #0]
 800a558:	460b      	mov	r3, r1
 800a55a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a56a:	7af9      	ldrb	r1, [r7, #11]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	f7f8 fd99 	bl	80030a6 <HAL_PCD_EP_Receive>
 800a574:	4603      	mov	r3, r0
 800a576:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a578:	7dfb      	ldrb	r3, [r7, #23]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 f85c 	bl	800a638 <USBD_Get_USB_Status>
 800a580:	4603      	mov	r3, r0
 800a582:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a584:	7dbb      	ldrb	r3, [r7, #22]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	460b      	mov	r3, r1
 800a59a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a59c:	78fb      	ldrb	r3, [r7, #3]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d002      	beq.n	800a5a8 <HAL_PCDEx_LPM_Callback+0x18>
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d013      	beq.n	800a5ce <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a5a6:	e023      	b.n	800a5f0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	7a5b      	ldrb	r3, [r3, #9]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d007      	beq.n	800a5c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a5b0:	f000 f83c 	bl	800a62c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5b4:	4b10      	ldr	r3, [pc, #64]	@ (800a5f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	4a0f      	ldr	r2, [pc, #60]	@ (800a5f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a5ba:	f023 0306 	bic.w	r3, r3, #6
 800a5be:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fe fd39 	bl	800903e <USBD_LL_Resume>
    break;
 800a5cc:	e010      	b.n	800a5f0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fe fd1c 	bl	8009012 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	7a5b      	ldrb	r3, [r3, #9]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d005      	beq.n	800a5ee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5e2:	4b05      	ldr	r3, [pc, #20]	@ (800a5f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	4a04      	ldr	r2, [pc, #16]	@ (800a5f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800a5e8:	f043 0306 	orr.w	r3, r3, #6
 800a5ec:	6113      	str	r3, [r2, #16]
    break;
 800a5ee:	bf00      	nop
}
 800a5f0:	bf00      	nop
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	e000ed00 	.word	0xe000ed00

0800a5fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a604:	4b03      	ldr	r3, [pc, #12]	@ (800a614 <USBD_static_malloc+0x18>)
}
 800a606:	4618      	mov	r0, r3
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	20000a50 	.word	0x20000a50

0800a618 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]

}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a630:	f7f5 fe78 	bl	8000324 <SystemClock_Config>
}
 800a634:	bf00      	nop
 800a636:	bd80      	pop	{r7, pc}

0800a638 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a646:	79fb      	ldrb	r3, [r7, #7]
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d817      	bhi.n	800a67c <USBD_Get_USB_Status+0x44>
 800a64c:	a201      	add	r2, pc, #4	@ (adr r2, 800a654 <USBD_Get_USB_Status+0x1c>)
 800a64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a652:	bf00      	nop
 800a654:	0800a665 	.word	0x0800a665
 800a658:	0800a66b 	.word	0x0800a66b
 800a65c:	0800a671 	.word	0x0800a671
 800a660:	0800a677 	.word	0x0800a677
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	73fb      	strb	r3, [r7, #15]
    break;
 800a668:	e00b      	b.n	800a682 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a66a:	2303      	movs	r3, #3
 800a66c:	73fb      	strb	r3, [r7, #15]
    break;
 800a66e:	e008      	b.n	800a682 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a670:	2301      	movs	r3, #1
 800a672:	73fb      	strb	r3, [r7, #15]
    break;
 800a674:	e005      	b.n	800a682 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a676:	2303      	movs	r3, #3
 800a678:	73fb      	strb	r3, [r7, #15]
    break;
 800a67a:	e002      	b.n	800a682 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a67c:	2303      	movs	r3, #3
 800a67e:	73fb      	strb	r3, [r7, #15]
    break;
 800a680:	bf00      	nop
  }
  return usb_status;
 800a682:	7bfb      	ldrb	r3, [r7, #15]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <memset>:
 800a690:	4402      	add	r2, r0
 800a692:	4603      	mov	r3, r0
 800a694:	4293      	cmp	r3, r2
 800a696:	d100      	bne.n	800a69a <memset+0xa>
 800a698:	4770      	bx	lr
 800a69a:	f803 1b01 	strb.w	r1, [r3], #1
 800a69e:	e7f9      	b.n	800a694 <memset+0x4>

0800a6a0 <__libc_init_array>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	4d0d      	ldr	r5, [pc, #52]	@ (800a6d8 <__libc_init_array+0x38>)
 800a6a4:	4c0d      	ldr	r4, [pc, #52]	@ (800a6dc <__libc_init_array+0x3c>)
 800a6a6:	1b64      	subs	r4, r4, r5
 800a6a8:	10a4      	asrs	r4, r4, #2
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	42a6      	cmp	r6, r4
 800a6ae:	d109      	bne.n	800a6c4 <__libc_init_array+0x24>
 800a6b0:	4d0b      	ldr	r5, [pc, #44]	@ (800a6e0 <__libc_init_array+0x40>)
 800a6b2:	4c0c      	ldr	r4, [pc, #48]	@ (800a6e4 <__libc_init_array+0x44>)
 800a6b4:	f000 f818 	bl	800a6e8 <_init>
 800a6b8:	1b64      	subs	r4, r4, r5
 800a6ba:	10a4      	asrs	r4, r4, #2
 800a6bc:	2600      	movs	r6, #0
 800a6be:	42a6      	cmp	r6, r4
 800a6c0:	d105      	bne.n	800a6ce <__libc_init_array+0x2e>
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}
 800a6c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c8:	4798      	blx	r3
 800a6ca:	3601      	adds	r6, #1
 800a6cc:	e7ee      	b.n	800a6ac <__libc_init_array+0xc>
 800a6ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6d2:	4798      	blx	r3
 800a6d4:	3601      	adds	r6, #1
 800a6d6:	e7f2      	b.n	800a6be <__libc_init_array+0x1e>
 800a6d8:	0800a7c0 	.word	0x0800a7c0
 800a6dc:	0800a7c0 	.word	0x0800a7c0
 800a6e0:	0800a7c0 	.word	0x0800a7c0
 800a6e4:	0800a7c4 	.word	0x0800a7c4

0800a6e8 <_init>:
 800a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ea:	bf00      	nop
 800a6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ee:	bc08      	pop	{r3}
 800a6f0:	469e      	mov	lr, r3
 800a6f2:	4770      	bx	lr

0800a6f4 <_fini>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	bf00      	nop
 800a6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fa:	bc08      	pop	{r3}
 800a6fc:	469e      	mov	lr, r3
 800a6fe:	4770      	bx	lr
