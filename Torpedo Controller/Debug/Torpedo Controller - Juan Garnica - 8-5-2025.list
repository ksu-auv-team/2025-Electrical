
Torpedo Controller - Juan Garnica - 8-5-2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad1c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800aef4  0800aef4  0000bef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afb4  0800afb4  0000c0e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800afb4  0800afb4  0000c0e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800afb4  0800afb4  0000c0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afb4  0800afb4  0000bfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800afb8  0800afb8  0000bfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0800afbc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e5c  200000e0  0800b09c  0000c0e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f3c  0800b09c  0000cf3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001950b  00000000  00000000  0000c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dcf  00000000  00000000  0002561b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  000293f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c3  00000000  00000000  0002ab18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021035  00000000  00000000  0002bcdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8de  00000000  00000000  0004cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7d6f  00000000  00000000  000695ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013135d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006084  00000000  00000000  001313a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00137424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aedc 	.word	0x0800aedc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e4 	.word	0x200000e4
 8000214:	0800aedc 	.word	0x0800aedc

08000218 <process_data>:
int countAddr = 0;
int countrxcplt = 0;
int counterror = 0;

void process_data (void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0

	int startREG = RxData[0];  // get the register address
 800021e:	4b16      	ldr	r3, [pc, #88]	@ (8000278 <process_data+0x60>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	617b      	str	r3, [r7, #20]
	int numREG = rxcount-1;  // Get the number of registers
 8000224:	4b15      	ldr	r3, [pc, #84]	@ (800027c <process_data+0x64>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3b01      	subs	r3, #1
 800022a:	60bb      	str	r3, [r7, #8]
	int endREG = startREG + numREG -1;  // calculate the end register
 800022c:	697a      	ldr	r2, [r7, #20]
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	4413      	add	r3, r2
 8000232:	3b01      	subs	r3, #1
 8000234:	607b      	str	r3, [r7, #4]
	if (endREG>9)  // There are a total of 10 registers (0-9)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2b09      	cmp	r3, #9
 800023a:	dd01      	ble.n	8000240 <process_data+0x28>
	{
		Error_Handler();
 800023c:	f000 fa68 	bl	8000710 <Error_Handler>
	}

	int indx = 1;  // set the indx to 1 in order to start reading from RxData[1]
 8000240:	2301      	movs	r3, #1
 8000242:	613b      	str	r3, [r7, #16]
	for (int i=0; i<numREG; i++)
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e00c      	b.n	8000264 <process_data+0x4c>
	{
		I2C_REGISTERS[startREG++] = RxData[indx++];  // Read the data from RxData and save it in the I2C_REGISTERS
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	1c53      	adds	r3, r2, #1
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	1c59      	adds	r1, r3, #1
 8000254:	6179      	str	r1, [r7, #20]
 8000256:	4908      	ldr	r1, [pc, #32]	@ (8000278 <process_data+0x60>)
 8000258:	5c89      	ldrb	r1, [r1, r2]
 800025a:	4a09      	ldr	r2, [pc, #36]	@ (8000280 <process_data+0x68>)
 800025c:	54d1      	strb	r1, [r2, r3]
	for (int i=0; i<numREG; i++)
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	3301      	adds	r3, #1
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	429a      	cmp	r2, r3
 800026a:	dbee      	blt.n	800024a <process_data+0x32>
	}
}
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	3718      	adds	r7, #24
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000104 	.word	0x20000104
 800027c:	20000106 	.word	0x20000106
 8000280:	200000fc 	.word	0x200000fc

08000284 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) // Puts to listen mode to look for req from master
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f001 fae7 	bl	8001860 <HAL_I2C_EnableListen_IT>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	460b      	mov	r3, r1
 80002a6:	70fb      	strb	r3, [r7, #3]
 80002a8:	4613      	mov	r3, r2
 80002aa:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d10d      	bne.n	80002ce <HAL_I2C_AddrCallback+0x32>
	{
		rxcount = 0;
 80002b2:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <HAL_I2C_AddrCallback+0x40>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 80002b8:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <HAL_I2C_AddrCallback+0x40>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	461a      	mov	r2, r3
 80002be:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <HAL_I2C_AddrCallback+0x44>)
 80002c0:	18d1      	adds	r1, r2, r3
 80002c2:	2300      	movs	r3, #0
 80002c4:	2201      	movs	r2, #1
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f001 fa18 	bl	80016fc <HAL_I2C_Slave_Seq_Receive_IT>

	else
	{
		Error_Handler();
	}
}
 80002cc:	e001      	b.n	80002d2 <HAL_I2C_AddrCallback+0x36>
		Error_Handler();
 80002ce:	f000 fa1f 	bl	8000710 <Error_Handler>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000106 	.word	0x20000106
 80002e0:	20000104 	.word	0x20000104

080002e4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	rxcount++;
 80002ec:	4b17      	ldr	r3, [pc, #92]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	3301      	adds	r3, #1
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002f6:	701a      	strb	r2, [r3, #0]
	if (rxcount < RxSIZE)
 80002f8:	4b14      	ldr	r3, [pc, #80]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d81a      	bhi.n	8000336 <HAL_I2C_SlaveRxCpltCallback+0x52>
	{
		if (rxcount == RxSIZE-1)
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d10b      	bne.n	8000320 <HAL_I2C_SlaveRxCpltCallback+0x3c>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 8000308:	4b10      	ldr	r3, [pc, #64]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8000310:	18d1      	adds	r1, r2, r3
 8000312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000316:	2201      	movs	r2, #1
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f001 f9ef 	bl	80016fc <HAL_I2C_Slave_Seq_Receive_IT>
 800031e:	e00a      	b.n	8000336 <HAL_I2C_SlaveRxCpltCallback+0x52>
		}
		else
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 8000320:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8000328:	18d1      	adds	r1, r2, r3
 800032a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800032e:	2201      	movs	r2, #1
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f001 f9e3 	bl	80016fc <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (rxcount == RxSIZE)
 8000336:	4b05      	ldr	r3, [pc, #20]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d101      	bne.n	8000342 <HAL_I2C_SlaveRxCpltCallback+0x5e>
	{
		process_data();
 800033e:	f7ff ff6b 	bl	8000218 <process_data>
	}
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000106 	.word	0x20000106
 8000350:	20000104 	.word	0x20000104

08000354 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	counterror++;
 800035c:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <HAL_I2C_ErrorCallback+0x34>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <HAL_I2C_ErrorCallback+0x34>)
 8000364:	6013      	str	r3, [r2, #0]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f001 fb51 	bl	8001a0e <HAL_I2C_GetError>
 800036c:	60f8      	str	r0, [r7, #12]
	if (errorcode == 4)  // AF error
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	2b04      	cmp	r3, #4
 8000372:	d101      	bne.n	8000378 <HAL_I2C_ErrorCallback+0x24>
	{
		process_data();
 8000374:	f7ff ff50 	bl	8000218 <process_data>
	}
	HAL_I2C_EnableListen_IT(hi2c);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f001 fa71 	bl	8001860 <HAL_I2C_EnableListen_IT>
}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000108 	.word	0x20000108

0800038c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000390:	f000 fbad 	bl	8000aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000394:	f000 f834 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000398:	f000 f970 	bl	800067c <MX_GPIO_Init>
  MX_DMA_Init();
 800039c:	f000 f93c 	bl	8000618 <MX_DMA_Init>
  MX_I2C2_Init();
 80003a0:	f000 f878 	bl	8000494 <MX_I2C2_Init>
  MX_TIM2_Init();
 80003a4:	f000 f8b6 	bl	8000514 <MX_TIM2_Init>
  MX_USB_Device_Init();
 80003a8:	f00a f912 	bl	800a5d0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80003ac:	2100      	movs	r1, #0
 80003ae:	4812      	ldr	r0, [pc, #72]	@ (80003f8 <main+0x6c>)
 80003b0:	f005 fb00 	bl	80059b4 <HAL_TIM_PWM_Start>
  //uint32_t position = 0;

  if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK) //Entrs slav to listen for master requests
 80003b4:	4811      	ldr	r0, [pc, #68]	@ (80003fc <main+0x70>)
 80003b6:	f001 fa53 	bl	8001860 <HAL_I2C_EnableListen_IT>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <main+0x38>
  {
	  Error_Handler();
 80003c0:	f000 f9a6 	bl	8000710 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  htim2.Instance->CCR1 = 15;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	@ (80003f8 <main+0x6c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	220f      	movs	r2, #15
 80003ca:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay (100);
 80003cc:	2064      	movs	r0, #100	@ 0x64
 80003ce:	f000 fbff 	bl	8000bd0 <HAL_Delay>
	  htim2.Instance->CCR1 = 30;
 80003d2:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <main+0x6c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	221e      	movs	r2, #30
 80003d8:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay (100);
 80003da:	2064      	movs	r0, #100	@ 0x64
 80003dc:	f000 fbf8 	bl	8000bd0 <HAL_Delay>
	  htim2.Instance->CCR1 = 75;
 80003e0:	4b05      	ldr	r3, [pc, #20]	@ (80003f8 <main+0x6c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	224b      	movs	r2, #75	@ 0x4b
 80003e6:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay (100);
 80003e8:	2064      	movs	r0, #100	@ 0x64
 80003ea:	f000 fbf1 	bl	8000bd0 <HAL_Delay>

	  HAL_Delay (100);
 80003ee:	2064      	movs	r0, #100	@ 0x64
 80003f0:	f000 fbee 	bl	8000bd0 <HAL_Delay>
	  htim2.Instance->CCR1 = 15;
 80003f4:	bf00      	nop
 80003f6:	e7e5      	b.n	80003c4 <main+0x38>
 80003f8:	20000160 	.word	0x20000160
 80003fc:	2000010c 	.word	0x2000010c

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b094      	sub	sp, #80	@ 0x50
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0318 	add.w	r3, r7, #24
 800040a:	2238      	movs	r2, #56	@ 0x38
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f00a fd38 	bl	800ae84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000422:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000426:	f004 fa77 	bl	8004918 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800042a:	2301      	movs	r3, #1
 800042c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000432:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2302      	movs	r3, #2
 8000436:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000438:	2303      	movs	r3, #3
 800043a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800043c:	2301      	movs	r3, #1
 800043e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000440:	230c      	movs	r3, #12
 8000442:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000444:	2302      	movs	r3, #2
 8000446:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000448:	2304      	movs	r3, #4
 800044a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800044c:	2302      	movs	r3, #2
 800044e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000450:	f107 0318 	add.w	r3, r7, #24
 8000454:	4618      	mov	r0, r3
 8000456:	f004 fb13 	bl	8004a80 <HAL_RCC_OscConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000460:	f000 f956 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	230f      	movs	r3, #15
 8000466:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000468:	2303      	movs	r3, #3
 800046a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2103      	movs	r1, #3
 800047c:	4618      	mov	r0, r3
 800047e:	f004 fe11 	bl	80050a4 <HAL_RCC_ClockConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000488:	f000 f942 	bl	8000710 <Error_Handler>
  }
}
 800048c:	bf00      	nop
 800048e:	3750      	adds	r7, #80	@ 0x50
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000498:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <MX_I2C2_Init+0x74>)
 800049a:	4a1c      	ldr	r2, [pc, #112]	@ (800050c <MX_I2C2_Init+0x78>)
 800049c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B17DB6;
 800049e:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_I2C2_Init+0x74>)
 80004a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000510 <MX_I2C2_Init+0x7c>)
 80004a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 158;
 80004a4:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_I2C2_Init+0x74>)
 80004a6:	229e      	movs	r2, #158	@ 0x9e
 80004a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_I2C2_Init+0x74>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b0:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <MX_I2C2_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80004b6:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_I2C2_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004bc:	4b12      	ldr	r3, [pc, #72]	@ (8000508 <MX_I2C2_Init+0x74>)
 80004be:	2200      	movs	r2, #0
 80004c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c2:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <MX_I2C2_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_I2C2_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004ce:	480e      	ldr	r0, [pc, #56]	@ (8000508 <MX_I2C2_Init+0x74>)
 80004d0:	f001 f878 	bl	80015c4 <HAL_I2C_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80004da:	f000 f919 	bl	8000710 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004de:	2100      	movs	r1, #0
 80004e0:	4809      	ldr	r0, [pc, #36]	@ (8000508 <MX_I2C2_Init+0x74>)
 80004e2:	f002 fcbf 	bl	8002e64 <HAL_I2CEx_ConfigAnalogFilter>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004ec:	f000 f910 	bl	8000710 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004f0:	2100      	movs	r1, #0
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_I2C2_Init+0x74>)
 80004f4:	f002 fd01 	bl	8002efa <HAL_I2CEx_ConfigDigitalFilter>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004fe:	f000 f907 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	2000010c 	.word	0x2000010c
 800050c:	40005800 	.word	0x40005800
 8000510:	20b17db6 	.word	0x20b17db6

08000514 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08e      	sub	sp, #56	@ 0x38
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000528:	f107 031c 	add.w	r3, r7, #28
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]
 8000542:	615a      	str	r2, [r3, #20]
 8000544:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000546:	4b33      	ldr	r3, [pc, #204]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000548:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800054c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600-1;
 800054e:	4b31      	ldr	r3, [pc, #196]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000550:	f242 527f 	movw	r2, #9599	@ 0x257f
 8000554:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000556:	4b2f      	ldr	r3, [pc, #188]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800055c:	4b2d      	ldr	r3, [pc, #180]	@ (8000614 <MX_TIM2_Init+0x100>)
 800055e:	2263      	movs	r2, #99	@ 0x63
 8000560:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000562:	4b2c      	ldr	r3, [pc, #176]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000568:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <MX_TIM2_Init+0x100>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800056e:	4829      	ldr	r0, [pc, #164]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000570:	f005 f968 	bl	8005844 <HAL_TIM_Base_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800057a:	f000 f8c9 	bl	8000710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800057e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000582:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000584:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000588:	4619      	mov	r1, r3
 800058a:	4822      	ldr	r0, [pc, #136]	@ (8000614 <MX_TIM2_Init+0x100>)
 800058c:	f005 fd76 	bl	800607c <HAL_TIM_ConfigClockSource>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000596:	f000 f8bb 	bl	8000710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800059a:	481e      	ldr	r0, [pc, #120]	@ (8000614 <MX_TIM2_Init+0x100>)
 800059c:	f005 f9a9 	bl	80058f2 <HAL_TIM_PWM_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80005a6:	f000 f8b3 	bl	8000710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	4619      	mov	r1, r3
 80005b8:	4816      	ldr	r0, [pc, #88]	@ (8000614 <MX_TIM2_Init+0x100>)
 80005ba:	f006 fadf 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80005c4:	f000 f8a4 	bl	8000710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005c8:	2360      	movs	r3, #96	@ 0x60
 80005ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	480d      	ldr	r0, [pc, #52]	@ (8000614 <MX_TIM2_Init+0x100>)
 80005e0:	f005 fc38 	bl	8005e54 <HAL_TIM_PWM_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80005ea:	f000 f891 	bl	8000710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	2204      	movs	r2, #4
 80005f2:	4619      	mov	r1, r3
 80005f4:	4807      	ldr	r0, [pc, #28]	@ (8000614 <MX_TIM2_Init+0x100>)
 80005f6:	f005 fc2d 	bl	8005e54 <HAL_TIM_PWM_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000600:	f000 f886 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <MX_TIM2_Init+0x100>)
 8000606:	f000 f997 	bl	8000938 <HAL_TIM_MspPostInit>

}
 800060a:	bf00      	nop
 800060c:	3738      	adds	r7, #56	@ 0x38
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000160 	.word	0x20000160

08000618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <MX_DMA_Init+0x60>)
 8000620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000622:	4a15      	ldr	r2, [pc, #84]	@ (8000678 <MX_DMA_Init+0x60>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6493      	str	r3, [r2, #72]	@ 0x48
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_DMA_Init+0x60>)
 800062c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <MX_DMA_Init+0x60>)
 8000638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800063a:	4a0f      	ldr	r2, [pc, #60]	@ (8000678 <MX_DMA_Init+0x60>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6493      	str	r3, [r2, #72]	@ 0x48
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <MX_DMA_Init+0x60>)
 8000644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	200b      	movs	r0, #11
 8000654:	f000 fbb9 	bl	8000dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000658:	200b      	movs	r0, #11
 800065a:	f000 fbd0 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	200c      	movs	r0, #12
 8000664:	f000 fbb1 	bl	8000dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000668:	200c      	movs	r0, #12
 800066a:	f000 fbc8 	bl	8000dfe <HAL_NVIC_EnableIRQ>

}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000692:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <MX_GPIO_Init+0x90>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	4a1d      	ldr	r2, [pc, #116]	@ (800070c <MX_GPIO_Init+0x90>)
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069e:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <MX_GPIO_Init+0x90>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	f003 0320 	and.w	r3, r3, #32
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b18      	ldr	r3, [pc, #96]	@ (800070c <MX_GPIO_Init+0x90>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	4a17      	ldr	r2, [pc, #92]	@ (800070c <MX_GPIO_Init+0x90>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_GPIO_Init+0x90>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_GPIO_Init+0x90>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <MX_GPIO_Init+0x90>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_GPIO_Init+0x90>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e2:	f000 ff57 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e6:	2301      	movs	r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000700:	f000 fdc6 	bl	8001290 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <Error_Handler+0x8>

0800071c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <HAL_MspInit+0x44>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000726:	4a0e      	ldr	r2, [pc, #56]	@ (8000760 <HAL_MspInit+0x44>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6613      	str	r3, [r2, #96]	@ 0x60
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <HAL_MspInit+0x44>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073e:	4a08      	ldr	r2, [pc, #32]	@ (8000760 <HAL_MspInit+0x44>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000744:	6593      	str	r3, [r2, #88]	@ 0x58
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800074a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000752:	f004 f985 	bl	8004a60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b09a      	sub	sp, #104	@ 0x68
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	2244      	movs	r2, #68	@ 0x44
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f00a fb7d 	bl	800ae84 <memset>
  if(hi2c->Instance==I2C2)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a27      	ldr	r2, [pc, #156]	@ (800082c <HAL_I2C_MspInit+0xc8>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d147      	bne.n	8000824 <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000794:	2380      	movs	r3, #128	@ 0x80
 8000796:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4618      	mov	r0, r3
 80007a2:	f004 fe5f 	bl	8005464 <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007ac:	f7ff ffb0 	bl	8000710 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <HAL_I2C_MspInit+0xcc>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000830 <HAL_I2C_MspInit+0xcc>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <HAL_I2C_MspInit+0xcc>)
 80007be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007cc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ce:	2312      	movs	r3, #18
 80007d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007da:	2304      	movs	r3, #4
 80007dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e8:	f000 fd52 	bl	8001290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007ec:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <HAL_I2C_MspInit+0xcc>)
 80007ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000830 <HAL_I2C_MspInit+0xcc>)
 80007f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <HAL_I2C_MspInit+0xcc>)
 80007fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2021      	movs	r0, #33	@ 0x21
 800080a:	f000 fade 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800080e:	2021      	movs	r0, #33	@ 0x21
 8000810:	f000 faf5 	bl	8000dfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2022      	movs	r0, #34	@ 0x22
 800081a:	f000 fad6 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800081e:	2022      	movs	r0, #34	@ 0x22
 8000820:	f000 faed 	bl	8000dfe <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000824:	bf00      	nop
 8000826:	3768      	adds	r7, #104	@ 0x68
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40005800 	.word	0x40005800
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000844:	d169      	bne.n	800091a <HAL_TIM_Base_MspInit+0xe6>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000846:	4b37      	ldr	r3, [pc, #220]	@ (8000924 <HAL_TIM_Base_MspInit+0xf0>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084a:	4a36      	ldr	r2, [pc, #216]	@ (8000924 <HAL_TIM_Base_MspInit+0xf0>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6593      	str	r3, [r2, #88]	@ 0x58
 8000852:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <HAL_TIM_Base_MspInit+0xf0>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 800085e:	4b32      	ldr	r3, [pc, #200]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 8000860:	4a32      	ldr	r2, [pc, #200]	@ (800092c <HAL_TIM_Base_MspInit+0xf8>)
 8000862:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000864:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 8000866:	2238      	movs	r2, #56	@ 0x38
 8000868:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800086a:	4b2f      	ldr	r3, [pc, #188]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 800086c:	2210      	movs	r2, #16
 800086e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000870:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000876:	4b2c      	ldr	r3, [pc, #176]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800087c:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 800087e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000882:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 8000886:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800088a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800088c:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000892:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000898:	4823      	ldr	r0, [pc, #140]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 800089a:	f000 facb 	bl	8000e34 <HAL_DMA_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80008a4:	f7ff ff34 	bl	8000710 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 80008ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80008ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000928 <HAL_TIM_Base_MspInit+0xf4>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel2;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 80008b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000934 <HAL_TIM_Base_MspInit+0x100>)
 80008b8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 80008bc:	2239      	movs	r2, #57	@ 0x39
 80008be:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80008cc:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 80008ce:	2280      	movs	r2, #128	@ 0x80
 80008d0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 80008d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008d8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 80008dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008e0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 80008ee:	4810      	ldr	r0, [pc, #64]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 80008f0:	f000 faa0 	bl	8000e34 <HAL_DMA_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_TIM_Base_MspInit+0xca>
    {
      Error_Handler();
 80008fa:	f7ff ff09 	bl	8000710 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a0b      	ldr	r2, [pc, #44]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 8000902:	629a      	str	r2, [r3, #40]	@ 0x28
 8000904:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <HAL_TIM_Base_MspInit+0xfc>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	201c      	movs	r0, #28
 8000910:	f000 fa5b 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000914:	201c      	movs	r0, #28
 8000916:	f000 fa72 	bl	8000dfe <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000
 8000928:	200001ac 	.word	0x200001ac
 800092c:	40020008 	.word	0x40020008
 8000930:	2000020c 	.word	0x2000020c
 8000934:	4002001c 	.word	0x4002001c

08000938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000958:	d11c      	bne.n	8000994 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <HAL_TIM_MspPostInit+0x64>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4a0f      	ldr	r2, [pc, #60]	@ (800099c <HAL_TIM_MspPostInit+0x64>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <HAL_TIM_MspPostInit+0x64>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000972:	2322      	movs	r3, #34	@ 0x22
 8000974:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f000 fc7e 	bl	8001290 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <NMI_Handler+0x4>

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <MemManage_Handler+0x4>

080009b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f6:	f000 f8cd 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000a04:	4802      	ldr	r0, [pc, #8]	@ (8000a10 <DMA1_Channel1_IRQHandler+0x10>)
 8000a06:	f000 fb24 	bl	8001052 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001ac 	.word	0x200001ac

08000a14 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8000a18:	4802      	ldr	r0, [pc, #8]	@ (8000a24 <DMA1_Channel2_IRQHandler+0x10>)
 8000a1a:	f000 fb1a 	bl	8001052 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000020c 	.word	0x2000020c

08000a28 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <USB_LP_IRQHandler+0x10>)
 8000a2e:	f002 fbc2 	bl	80031b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000840 	.word	0x20000840

08000a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <TIM2_IRQHandler+0x10>)
 8000a42:	f005 f8b7 	bl	8005bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000160 	.word	0x20000160

08000a50 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <I2C2_EV_IRQHandler+0x10>)
 8000a56:	f000 ff23 	bl	80018a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000010c 	.word	0x2000010c

08000a64 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000a68:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <I2C2_ER_IRQHandler+0x10>)
 8000a6a:	f000 ff33 	bl	80018d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000010c 	.word	0x2000010c

08000a78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a9c:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a9e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa0:	f7ff ffea 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa6:	490d      	ldr	r1, [pc, #52]	@ (8000adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae0 <LoopForever+0xe>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000abc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae8 <LoopForever+0x16>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f00a f9e3 	bl	800ae94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ace:	f7ff fc5d 	bl	800038c <main>

08000ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
  ldr   r0, =_estack
 8000ad4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8000ae0:	0800afbc 	.word	0x0800afbc
  ldr r2, =_sbss
 8000ae4:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8000ae8:	20000f3c 	.word	0x20000f3c

08000aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_2_IRQHandler>

08000aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f95b 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f80e 	bl	8000b20 <HAL_InitTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	e001      	b.n	8000b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b10:	f7ff fe04 	bl	800071c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b14:	79fb      	ldrb	r3, [r7, #7]

}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b2c:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <HAL_InitTick+0x68>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d022      	beq.n	8000b7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b34:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <HAL_InitTick+0x6c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <HAL_InitTick+0x68>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f966 	bl	8000e1a <HAL_SYSTICK_Config>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10f      	bne.n	8000b74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b0f      	cmp	r3, #15
 8000b58:	d809      	bhi.n	8000b6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b62:	f000 f932 	bl	8000dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <HAL_InitTick+0x70>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	e007      	b.n	8000b7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e004      	b.n	8000b7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]
 8000b78:	e001      	b.n	8000b7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <HAL_IncTick+0x1c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <HAL_IncTick+0x20>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a03      	ldr	r2, [pc, #12]	@ (8000bb0 <HAL_IncTick+0x1c>)
 8000ba4:	6013      	str	r3, [r2, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	2000026c 	.word	0x2000026c
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2000026c 	.word	0x2000026c

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d004      	beq.n	8000bf4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_Delay+0x40>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf4:	bf00      	nop
 8000bf6:	f7ff ffdf 	bl	8000bb8 <HAL_GetTick>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d8f7      	bhi.n	8000bf6 <HAL_Delay+0x26>
  {
  }
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000008 	.word	0x20000008

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	@ (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	@ (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	@ 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff29 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff40 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff90 	bl	8000d08 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5f 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff33 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffa4 	bl	8000d70 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e08d      	b.n	8000f62 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b47      	ldr	r3, [pc, #284]	@ (8000f6c <HAL_DMA_Init+0x138>)
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d80f      	bhi.n	8000e72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b45      	ldr	r3, [pc, #276]	@ (8000f70 <HAL_DMA_Init+0x13c>)
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a45      	ldr	r2, [pc, #276]	@ (8000f74 <HAL_DMA_Init+0x140>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	009a      	lsls	r2, r3, #2
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a42      	ldr	r2, [pc, #264]	@ (8000f78 <HAL_DMA_Init+0x144>)
 8000e6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e70:	e00e      	b.n	8000e90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b40      	ldr	r3, [pc, #256]	@ (8000f7c <HAL_DMA_Init+0x148>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f74 <HAL_DMA_Init+0x140>)
 8000e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	009a      	lsls	r2, r3, #2
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f80 <HAL_DMA_Init+0x14c>)
 8000e8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2202      	movs	r2, #2
 8000e94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000eaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f972 	bl	80011cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ef0:	d102      	bne.n	8000ef8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f0c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d010      	beq.n	8000f38 <HAL_DMA_Init+0x104>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d80c      	bhi.n	8000f38 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f992 	bl	8001248 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	e008      	b.n	8000f4a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40020407 	.word	0x40020407
 8000f70:	bffdfff8 	.word	0xbffdfff8
 8000f74:	cccccccd 	.word	0xcccccccd
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	bffdfbf8 	.word	0xbffdfbf8
 8000f80:	40020400 	.word	0x40020400

08000f84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d00d      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	e047      	b.n	8001048 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 020e 	bic.w	r2, r2, #14
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0201 	bic.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001004:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00c      	beq.n	8001028 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001018:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800101c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001026:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	4798      	blx	r3
    }
  }
  return status;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f003 031f 	and.w	r3, r3, #31
 8001072:	2204      	movs	r2, #4
 8001074:	409a      	lsls	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4013      	ands	r3, r2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d026      	beq.n	80010cc <HAL_DMA_IRQHandler+0x7a>
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	d021      	beq.n	80010cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	2b00      	cmp	r3, #0
 8001094:	d107      	bne.n	80010a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0204 	bic.w	r2, r2, #4
 80010a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	f003 021f 	and.w	r2, r3, #31
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	2104      	movs	r1, #4
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d071      	beq.n	80011a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010ca:	e06c      	b.n	80011a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	2202      	movs	r2, #2
 80010d6:	409a      	lsls	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4013      	ands	r3, r2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d02e      	beq.n	800113e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d029      	beq.n	800113e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10b      	bne.n	8001110 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 020a 	bic.w	r2, r2, #10
 8001106:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	2102      	movs	r1, #2
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001130:	2b00      	cmp	r3, #0
 8001132:	d038      	beq.n	80011a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800113c:	e033      	b.n	80011a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	2208      	movs	r2, #8
 8001148:	409a      	lsls	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d02a      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	2b00      	cmp	r3, #0
 800115a:	d025      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 020e 	bic.w	r2, r2, #14
 800116a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	2101      	movs	r1, #1
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119a:	2b00      	cmp	r3, #0
 800119c:	d004      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
}
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011be:	b2db      	uxtb	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80011dc:	429a      	cmp	r2, r3
 80011de:	d802      	bhi.n	80011e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80011e0:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e001      	b.n	80011ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80011e8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3b08      	subs	r3, #8
 80011f6:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80011f8:	fba2 2303 	umull	r2, r3, r2, r3
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	009a      	lsls	r2, r3, #2
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4413      	add	r3, r2
 800120c:	461a      	mov	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a0b      	ldr	r2, [pc, #44]	@ (8001244 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001216:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	2201      	movs	r2, #1
 8001220:	409a      	lsls	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001226:	bf00      	nop
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40020407 	.word	0x40020407
 8001238:	40020800 	.word	0x40020800
 800123c:	40020820 	.word	0x40020820
 8001240:	cccccccd 	.word	0xcccccccd
 8001244:	40020880 	.word	0x40020880

08001248 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a08      	ldr	r2, [pc, #32]	@ (800128c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800126a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3b01      	subs	r3, #1
 8001270:	f003 031f 	and.w	r3, r3, #31
 8001274:	2201      	movs	r2, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	1000823f 	.word	0x1000823f
 800128c:	40020940 	.word	0x40020940

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800129e:	e15a      	b.n	8001556 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 814c 	beq.w	8001550 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d005      	beq.n	80012d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d130      	bne.n	8001332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001306:	2201      	movs	r2, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f003 0201 	and.w	r2, r3, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b03      	cmp	r3, #3
 800133c:	d017      	beq.n	800136e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d123      	bne.n	80013c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3208      	adds	r2, #8
 8001382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	6939      	ldr	r1, [r7, #16]
 80013be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0203 	and.w	r2, r3, #3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 80a6 	beq.w	8001550 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001404:	4b5b      	ldr	r3, [pc, #364]	@ (8001574 <HAL_GPIO_Init+0x2e4>)
 8001406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001408:	4a5a      	ldr	r2, [pc, #360]	@ (8001574 <HAL_GPIO_Init+0x2e4>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001410:	4b58      	ldr	r3, [pc, #352]	@ (8001574 <HAL_GPIO_Init+0x2e4>)
 8001412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141c:	4a56      	ldr	r2, [pc, #344]	@ (8001578 <HAL_GPIO_Init+0x2e8>)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	3302      	adds	r3, #2
 8001424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	220f      	movs	r2, #15
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001446:	d01f      	beq.n	8001488 <HAL_GPIO_Init+0x1f8>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a4c      	ldr	r2, [pc, #304]	@ (800157c <HAL_GPIO_Init+0x2ec>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d019      	beq.n	8001484 <HAL_GPIO_Init+0x1f4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a4b      	ldr	r2, [pc, #300]	@ (8001580 <HAL_GPIO_Init+0x2f0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d013      	beq.n	8001480 <HAL_GPIO_Init+0x1f0>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4a      	ldr	r2, [pc, #296]	@ (8001584 <HAL_GPIO_Init+0x2f4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d00d      	beq.n	800147c <HAL_GPIO_Init+0x1ec>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a49      	ldr	r2, [pc, #292]	@ (8001588 <HAL_GPIO_Init+0x2f8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d007      	beq.n	8001478 <HAL_GPIO_Init+0x1e8>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a48      	ldr	r2, [pc, #288]	@ (800158c <HAL_GPIO_Init+0x2fc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d101      	bne.n	8001474 <HAL_GPIO_Init+0x1e4>
 8001470:	2305      	movs	r3, #5
 8001472:	e00a      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 8001474:	2306      	movs	r3, #6
 8001476:	e008      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 8001478:	2304      	movs	r3, #4
 800147a:	e006      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 800147c:	2303      	movs	r3, #3
 800147e:	e004      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 8001480:	2302      	movs	r3, #2
 8001482:	e002      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <HAL_GPIO_Init+0x1fa>
 8001488:	2300      	movs	r3, #0
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	f002 0203 	and.w	r2, r2, #3
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	4093      	lsls	r3, r2
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149a:	4937      	ldr	r1, [pc, #220]	@ (8001578 <HAL_GPIO_Init+0x2e8>)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a8:	4b39      	ldr	r3, [pc, #228]	@ (8001590 <HAL_GPIO_Init+0x300>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014cc:	4a30      	ldr	r2, [pc, #192]	@ (8001590 <HAL_GPIO_Init+0x300>)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001590 <HAL_GPIO_Init+0x300>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014f6:	4a26      	ldr	r2, [pc, #152]	@ (8001590 <HAL_GPIO_Init+0x300>)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014fc:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <HAL_GPIO_Init+0x300>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001520:	4a1b      	ldr	r2, [pc, #108]	@ (8001590 <HAL_GPIO_Init+0x300>)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001526:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <HAL_GPIO_Init+0x300>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800154a:	4a11      	ldr	r2, [pc, #68]	@ (8001590 <HAL_GPIO_Init+0x300>)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	f47f ae9d 	bne.w	80012a0 <HAL_GPIO_Init+0x10>
  }
}
 8001566:	bf00      	nop
 8001568:	bf00      	nop
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000
 8001578:	40010000 	.word	0x40010000
 800157c:	48000400 	.word	0x48000400
 8001580:	48000800 	.word	0x48000800
 8001584:	48000c00 	.word	0x48000c00
 8001588:	48001000 	.word	0x48001000
 800158c:	48001400 	.word	0x48001400
 8001590:	40010400 	.word	0x40010400

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e08d      	b.n	80016f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d106      	bne.n	80015f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff f8ba 	bl	8000764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2224      	movs	r2, #36	@ 0x24
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001614:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001624:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e006      	b.n	800164c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800164a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d108      	bne.n	8001666 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	e007      	b.n	8001676 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001674:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001688:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001698:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69d9      	ldr	r1, [r3, #28]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1a      	ldr	r2, [r3, #32]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001718:	2b28      	cmp	r3, #40	@ 0x28
 800171a:	f040 8098 	bne.w	800184e <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001730:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e08c      	b.n	8001850 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001736:	f248 0102 	movw	r1, #32770	@ 0x8002
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f001 fb34 	bl	8002da8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 800174a:	2302      	movs	r3, #2
 800174c:	e080      	b.n	8001850 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b29      	cmp	r3, #41	@ 0x29
 8001760:	d12a      	bne.n	80017b8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001762:	2101      	movs	r1, #1
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f001 fb1f 	bl	8002da8 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001778:	d11e      	bne.n	80017b8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001788:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178e:	2b00      	cmp	r3, #0
 8001790:	d012      	beq.n	80017b8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001796:	4a30      	ldr	r2, [pc, #192]	@ (8001858 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001798:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fbf0 	bl	8000f84 <HAL_DMA_Abort_IT>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017b4:	4610      	mov	r0, r2
 80017b6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	222a      	movs	r2, #42	@ 0x2a
 80017bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2220      	movs	r2, #32
 80017c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017dc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	88fa      	ldrh	r2, [r7, #6]
 80017e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4a17      	ldr	r2, [pc, #92]	@ (800185c <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80017fe:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b08      	cmp	r3, #8
 800180c:	bf0c      	ite	eq
 800180e:	2301      	moveq	r3, #1
 8001810:	2300      	movne	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	0c1b      	lsrs	r3, r3, #16
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2208      	movs	r2, #8
 8001836:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001840:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f001 fa2b 	bl	8002ca0 <I2C_Enable_IRQ>

    return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
  }
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	08002bff 	.word	0x08002bff
 800185c:	08001a27 	.word	0x08001a27

08001860 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b20      	cmp	r3, #32
 8001872:	d10d      	bne.n	8001890 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2228      	movs	r2, #40	@ 0x28
 8001878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a07      	ldr	r2, [pc, #28]	@ (800189c <HAL_I2C_EnableListen_IT+0x3c>)
 8001880:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001882:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f001 fa0a 	bl	8002ca0 <I2C_Enable_IRQ>

    return HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	e000      	b.n	8001892 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001890:	2302      	movs	r3, #2
  }
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	08001a27 	.word	0x08001a27

080018a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	68f9      	ldr	r1, [r7, #12]
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	4798      	blx	r3
  }
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d010      	beq.n	800191a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	09db      	lsrs	r3, r3, #7
 80018fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00a      	beq.n	800191a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001918:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	0a9b      	lsrs	r3, r3, #10
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d010      	beq.n	8001948 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	09db      	lsrs	r3, r3, #7
 800192a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00a      	beq.n	8001948 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	f043 0208 	orr.w	r2, r3, #8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001946:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	0a5b      	lsrs	r3, r3, #9
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d010      	beq.n	8001976 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	09db      	lsrs	r3, r3, #7
 8001958:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00a      	beq.n	8001976 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001964:	f043 0202 	orr.w	r2, r3, #2
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001974:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 030b 	and.w	r3, r3, #11
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001986:	68f9      	ldr	r1, [r7, #12]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 fffd 	bl	8002988 <I2C_ITError>
  }
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a36:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <I2C_Slave_ISR_IT+0x24>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e0ed      	b.n	8001c26 <I2C_Slave_ISR_IT+0x200>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	095b      	lsrs	r3, r3, #5
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00a      	beq.n	8001a74 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d004      	beq.n	8001a74 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a6a:	6939      	ldr	r1, [r7, #16]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fdcb 	bl	8002608 <I2C_ITSlaveCplt>
 8001a72:	e0d3      	b.n	8001c1c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d04d      	beq.n	8001b1c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d047      	beq.n	8001b1c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d128      	bne.n	8001ae8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b28      	cmp	r3, #40	@ 0x28
 8001aa0:	d108      	bne.n	8001ab4 <I2C_Slave_ISR_IT+0x8e>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001aa8:	d104      	bne.n	8001ab4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001aaa:	6939      	ldr	r1, [r7, #16]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 ff15 	bl	80028dc <I2C_ITListenCplt>
 8001ab2:	e032      	b.n	8001b1a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b29      	cmp	r3, #41	@ 0x29
 8001abe:	d10e      	bne.n	8001ade <I2C_Slave_ISR_IT+0xb8>
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ac6:	d00a      	beq.n	8001ade <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2210      	movs	r2, #16
 8001ace:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f001 f870 	bl	8002bb6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 fc6e 	bl	80023b8 <I2C_ITSlaveSeqCplt>
 8001adc:	e01d      	b.n	8001b1a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ae6:	e096      	b.n	8001c16 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2210      	movs	r2, #16
 8001aee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af4:	f043 0204 	orr.w	r2, r3, #4
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <I2C_Slave_ISR_IT+0xe6>
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b08:	f040 8085 	bne.w	8001c16 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b10:	4619      	mov	r1, r3
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 ff38 	bl	8002988 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001b18:	e07d      	b.n	8001c16 <I2C_Slave_ISR_IT+0x1f0>
 8001b1a:	e07c      	b.n	8001c16 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d030      	beq.n	8001b8a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02a      	beq.n	8001b8a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d018      	beq.n	8001b70 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d14f      	bne.n	8001c1a <I2C_Slave_ISR_IT+0x1f4>
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b80:	d04b      	beq.n	8001c1a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 fc18 	bl	80023b8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001b88:	e047      	b.n	8001c1a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00a      	beq.n	8001bac <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001ba2:	6939      	ldr	r1, [r7, #16]
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fb46 	bl	8002236 <I2C_ITAddrCplt>
 8001baa:	e037      	b.n	8001c1c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	085b      	lsrs	r3, r3, #1
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d031      	beq.n	8001c1c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d02b      	beq.n	8001c1c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d018      	beq.n	8001c00 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001bfe:	e00d      	b.n	8001c1c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c06:	d002      	beq.n	8001c0e <I2C_Slave_ISR_IT+0x1e8>
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fbd2 	bl	80023b8 <I2C_ITSlaveSeqCplt>
 8001c14:	e002      	b.n	8001c1c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8001c16:	bf00      	nop
 8001c18:	e000      	b.n	8001c1c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8001c1a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b088      	sub	sp, #32
 8001c32:	af02      	add	r7, sp, #8
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <I2C_Master_ISR_DMA+0x1a>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e0e1      	b.n	8001e0c <I2C_Master_ISR_DMA+0x1de>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d017      	beq.n	8001c8c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d011      	beq.n	8001c8c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f001 f80e 	bl	8002ca0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 ff96 	bl	8002bb6 <I2C_Flush_TXDR>
 8001c8a:	e0ba      	b.n	8001e02 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	09db      	lsrs	r3, r3, #7
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d072      	beq.n	8001d7e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d06c      	beq.n	8001d7e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cb2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d04e      	beq.n	8001d5c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cca:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2bff      	cmp	r3, #255	@ 0xff
 8001cd4:	d906      	bls.n	8001ce4 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	22ff      	movs	r2, #255	@ 0xff
 8001cda:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8001cdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e010      	b.n	8001d06 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cf6:	d003      	beq.n	8001d00 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e002      	b.n	8001d06 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001d00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d04:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	8a79      	ldrh	r1, [r7, #18]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 ff91 	bl	8002c3c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b22      	cmp	r3, #34	@ 0x22
 8001d36:	d108      	bne.n	8001d4a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d48:	e05b      	b.n	8001e02 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d5a:	e052      	b.n	8001e02 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d6a:	d003      	beq.n	8001d74 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fae6 	bl	800233e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001d72:	e046      	b.n	8001e02 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001d74:	2140      	movs	r1, #64	@ 0x40
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fe06 	bl	8002988 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001d7c:	e041      	b.n	8001e02 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d029      	beq.n	8001dde <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	099b      	lsrs	r3, r3, #6
 8001d8e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d023      	beq.n	8001dde <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d119      	bne.n	8001dd4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001daa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001dae:	d027      	beq.n	8001e00 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001db8:	d108      	bne.n	8001dcc <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dc8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001dca:	e019      	b.n	8001e00 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fab6 	bl	800233e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001dd2:	e015      	b.n	8001e00 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001dd4:	2140      	movs	r1, #64	@ 0x40
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 fdd6 	bl	8002988 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ddc:	e010      	b.n	8001e00 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	095b      	lsrs	r3, r3, #5
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 fb3b 	bl	8002474 <I2C_ITMasterCplt>
 8001dfe:	e000      	b.n	8001e02 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001e00:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001e20:	4b92      	ldr	r3, [pc, #584]	@ (800206c <I2C_Mem_ISR_DMA+0x258>)
 8001e22:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <I2C_Mem_ISR_DMA+0x1e>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e118      	b.n	8002064 <I2C_Mem_ISR_DMA+0x250>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d017      	beq.n	8001e76 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d011      	beq.n	8001e76 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2210      	movs	r2, #16
 8001e58:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f043 0204 	orr.w	r2, r3, #4
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001e66:	2120      	movs	r1, #32
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 ff19 	bl	8002ca0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fea1 	bl	8002bb6 <I2C_Flush_TXDR>
 8001e74:	e0f1      	b.n	800205a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00f      	beq.n	8001ea2 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d009      	beq.n	8001ea2 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ea0:	e0db      	b.n	800205a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	09db      	lsrs	r3, r3, #7
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d060      	beq.n	8001f70 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d05a      	beq.n	8001f70 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001eba:	2101      	movs	r1, #1
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 ff73 	bl	8002da8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 feeb 	bl	8002ca0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d048      	beq.n	8001f66 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2bff      	cmp	r3, #255	@ 0xff
 8001edc:	d910      	bls.n	8001f00 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	22ff      	movs	r2, #255	@ 0xff
 8001ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee8:	b299      	uxth	r1, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 fe9f 	bl	8002c3c <I2C_TransferConfig>
 8001efe:	e011      	b.n	8001f24 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	b299      	uxth	r1, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	2300      	movs	r3, #0
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fe8c 	bl	8002c3c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b22      	cmp	r3, #34	@ 0x22
 8001f40:	d108      	bne.n	8001f54 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f50:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001f52:	e082      	b.n	800205a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f62:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001f64:	e079      	b.n	800205a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001f66:	2140      	movs	r1, #64	@ 0x40
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fd0d 	bl	8002988 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001f6e:	e074      	b.n	800205a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d05e      	beq.n	800203a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d058      	beq.n	800203a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f88:	2101      	movs	r1, #1
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 ff0c 	bl	8002da8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001f90:	2110      	movs	r1, #16
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fe84 	bl	8002ca0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b22      	cmp	r3, #34	@ 0x22
 8001fa2:	d101      	bne.n	8001fa8 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8001fa4:	4b32      	ldr	r3, [pc, #200]	@ (8002070 <I2C_Mem_ISR_DMA+0x25c>)
 8001fa6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2bff      	cmp	r3, #255	@ 0xff
 8001fb0:	d910      	bls.n	8001fd4 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	22ff      	movs	r2, #255	@ 0xff
 8001fb6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbc:	b299      	uxth	r1, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fe35 	bl	8002c3c <I2C_TransferConfig>
 8001fd2:	e011      	b.n	8001ff8 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	b299      	uxth	r1, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fe22 	bl	8002c3c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b22      	cmp	r3, #34	@ 0x22
 8002014:	d108      	bne.n	8002028 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002024:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002026:	e018      	b.n	800205a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002036:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002038:	e00f      	b.n	800205a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fa0d 	bl	8002474 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	80002000 	.word	0x80002000
 8002070:	80002400 	.word	0x80002400

08002074 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002084:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <I2C_Slave_ISR_DMA+0x24>
 8002094:	2302      	movs	r3, #2
 8002096:	e0ca      	b.n	800222e <I2C_Slave_ISR_DMA+0x1ba>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d004      	beq.n	80020c2 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 faa4 	bl	8002608 <I2C_ITSlaveCplt>
 80020c0:	e0b0      	b.n	8002224 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 809a 	beq.w	8002204 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8093 	beq.w	8002204 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0b9b      	lsrs	r3, r3, #14
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d105      	bne.n	80020f6 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0bdb      	lsrs	r3, r3, #15
 80020ee:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d07f      	beq.n	80021f6 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00d      	beq.n	800211a <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0bdb      	lsrs	r3, r3, #15
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8002116:	2301      	movs	r3, #1
 8002118:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0b9b      	lsrs	r3, r3, #14
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 800213a:	2301      	movs	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d128      	bne.n	8002196 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b28      	cmp	r3, #40	@ 0x28
 800214e:	d108      	bne.n	8002162 <I2C_Slave_ISR_DMA+0xee>
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002156:	d104      	bne.n	8002162 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fbbe 	bl	80028dc <I2C_ITListenCplt>
 8002160:	e048      	b.n	80021f4 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b29      	cmp	r3, #41	@ 0x29
 800216c:	d10e      	bne.n	800218c <I2C_Slave_ISR_DMA+0x118>
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002174:	d00a      	beq.n	800218c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2210      	movs	r2, #16
 800217c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fd19 	bl	8002bb6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f917 	bl	80023b8 <I2C_ITSlaveSeqCplt>
 800218a:	e033      	b.n	80021f4 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2210      	movs	r2, #16
 8002192:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002194:	e034      	b.n	8002200 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2210      	movs	r2, #16
 800219c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	f043 0204 	orr.w	r2, r3, #4
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <I2C_Slave_ISR_DMA+0x14c>
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021be:	d11f      	bne.n	8002200 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	2b21      	cmp	r3, #33	@ 0x21
 80021c4:	d002      	beq.n	80021cc <I2C_Slave_ISR_DMA+0x158>
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	2b29      	cmp	r3, #41	@ 0x29
 80021ca:	d103      	bne.n	80021d4 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2221      	movs	r2, #33	@ 0x21
 80021d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80021d2:	e008      	b.n	80021e6 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b22      	cmp	r3, #34	@ 0x22
 80021d8:	d002      	beq.n	80021e0 <I2C_Slave_ISR_DMA+0x16c>
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80021de:	d102      	bne.n	80021e6 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2222      	movs	r2, #34	@ 0x22
 80021e4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	4619      	mov	r1, r3
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fbcb 	bl	8002988 <I2C_ITError>
      if (treatdmanack == 1U)
 80021f2:	e005      	b.n	8002200 <I2C_Slave_ISR_DMA+0x18c>
 80021f4:	e004      	b.n	8002200 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2210      	movs	r2, #16
 80021fc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80021fe:	e011      	b.n	8002224 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8002200:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002202:	e00f      	b.n	8002224 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	08db      	lsrs	r3, r3, #3
 8002214:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f809 	bl	8002236 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800224c:	2b28      	cmp	r3, #40	@ 0x28
 800224e:	d16a      	bne.n	8002326 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	0c1b      	lsrs	r3, r3, #16
 8002268:	b29b      	uxth	r3, r3
 800226a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800226e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	b29b      	uxth	r3, r3
 8002278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800227c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	b29b      	uxth	r3, r3
 8002286:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800228a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d138      	bne.n	8002306 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002294:	897b      	ldrh	r3, [r7, #10]
 8002296:	09db      	lsrs	r3, r3, #7
 8002298:	b29a      	uxth	r2, r3
 800229a:	89bb      	ldrh	r3, [r7, #12]
 800229c:	4053      	eors	r3, r2
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f003 0306 	and.w	r3, r3, #6
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d11c      	bne.n	80022e2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80022a8:	897b      	ldrh	r3, [r7, #10]
 80022aa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d13b      	bne.n	8002336 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2208      	movs	r2, #8
 80022ca:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022d4:	89ba      	ldrh	r2, [r7, #12]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fd ffde 	bl	800029c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80022e0:	e029      	b.n	8002336 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80022e2:	893b      	ldrh	r3, [r7, #8]
 80022e4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80022e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fd5c 	bl	8002da8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022f8:	89ba      	ldrh	r2, [r7, #12]
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fd ffcc 	bl	800029c <HAL_I2C_AddrCallback>
}
 8002304:	e017      	b.n	8002336 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002306:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fd4c 	bl	8002da8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002318:	89ba      	ldrh	r2, [r7, #12]
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	4619      	mov	r1, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fd ffbc 	bl	800029c <HAL_I2C_AddrCallback>
}
 8002324:	e007      	b.n	8002336 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2208      	movs	r2, #8
 800232c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b21      	cmp	r3, #33	@ 0x21
 8002358:	d115      	bne.n	8002386 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2211      	movs	r2, #17
 8002366:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800236e:	2101      	movs	r1, #1
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fd19 	bl	8002da8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fb09 	bl	8001996 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002384:	e014      	b.n	80023b0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2212      	movs	r2, #18
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800239a:	2102      	movs	r1, #2
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fd03 	bl	8002da8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fafd 	bl	80019aa <HAL_I2C_MasterRxCpltCallback>
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	0b9b      	lsrs	r3, r3, #14
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e00d      	b.n	800240a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0bdb      	lsrs	r3, r3, #15
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002408:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b29      	cmp	r3, #41	@ 0x29
 8002414:	d112      	bne.n	800243c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2228      	movs	r2, #40	@ 0x28
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2221      	movs	r2, #33	@ 0x21
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002424:	2101      	movs	r1, #1
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fcbe 	bl	8002da8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fac2 	bl	80019be <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800243a:	e017      	b.n	800246c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b2a      	cmp	r3, #42	@ 0x2a
 8002446:	d111      	bne.n	800246c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2228      	movs	r2, #40	@ 0x28
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2222      	movs	r2, #34	@ 0x22
 8002454:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002456:	2102      	movs	r1, #2
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fca5 	bl	8002da8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fd ff3c 	bl	80002e4 <HAL_I2C_SlaveRxCpltCallback>
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2220      	movs	r2, #32
 8002488:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b21      	cmp	r3, #33	@ 0x21
 8002494:	d107      	bne.n	80024a6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002496:	2101      	movs	r1, #1
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fc85 	bl	8002da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2211      	movs	r2, #17
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80024a4:	e00c      	b.n	80024c0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b22      	cmp	r3, #34	@ 0x22
 80024b0:	d106      	bne.n	80024c0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80024b2:	2102      	movs	r1, #2
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fc77 	bl	8002da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2212      	movs	r2, #18
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002600 <I2C_ITMasterCplt+0x18c>)
 80024cc:	400b      	ands	r3, r1
 80024ce:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002604 <I2C_ITMasterCplt+0x190>)
 80024da:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2210      	movs	r2, #16
 80024ee:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f4:	f043 0204 	orr.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b60      	cmp	r3, #96	@ 0x60
 8002506:	d10b      	bne.n	8002520 <I2C_ITMasterCplt+0xac>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	b2db      	uxtb	r3, r3
 800251c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800251e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fb48 	bl	8002bb6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b60      	cmp	r3, #96	@ 0x60
 8002536:	d002      	beq.n	800253e <I2C_ITMasterCplt+0xca>
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fa1f 	bl	8002988 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800254a:	e054      	b.n	80025f6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b21      	cmp	r3, #33	@ 0x21
 8002556:	d124      	bne.n	80025a2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b40      	cmp	r3, #64	@ 0x40
 8002570:	d10b      	bne.n	800258a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fa25 	bl	80019d2 <HAL_I2C_MemTxCpltCallback>
}
 8002588:	e035      	b.n	80025f6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff f9fb 	bl	8001996 <HAL_I2C_MasterTxCpltCallback>
}
 80025a0:	e029      	b.n	80025f6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b22      	cmp	r3, #34	@ 0x22
 80025ac:	d123      	bne.n	80025f6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b40      	cmp	r3, #64	@ 0x40
 80025c6:	d10b      	bne.n	80025e0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff fa04 	bl	80019e6 <HAL_I2C_MemRxCpltCallback>
}
 80025de:	e00a      	b.n	80025f6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff f9da 	bl	80019aa <HAL_I2C_MasterRxCpltCallback>
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	fe00e800 	.word	0xfe00e800
 8002604:	ffff0000 	.word	0xffff0000

08002608 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800262a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2220      	movs	r2, #32
 8002632:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002634:	7afb      	ldrb	r3, [r7, #11]
 8002636:	2b21      	cmp	r3, #33	@ 0x21
 8002638:	d002      	beq.n	8002640 <I2C_ITSlaveCplt+0x38>
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	2b29      	cmp	r3, #41	@ 0x29
 800263e:	d108      	bne.n	8002652 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002640:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fbaf 	bl	8002da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2221      	movs	r2, #33	@ 0x21
 800264e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002650:	e019      	b.n	8002686 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002652:	7afb      	ldrb	r3, [r7, #11]
 8002654:	2b22      	cmp	r3, #34	@ 0x22
 8002656:	d002      	beq.n	800265e <I2C_ITSlaveCplt+0x56>
 8002658:	7afb      	ldrb	r3, [r7, #11]
 800265a:	2b2a      	cmp	r3, #42	@ 0x2a
 800265c:	d108      	bne.n	8002670 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800265e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fba0 	bl	8002da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2222      	movs	r2, #34	@ 0x22
 800266c:	631a      	str	r2, [r3, #48]	@ 0x30
 800266e:	e00a      	b.n	8002686 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002670:	7afb      	ldrb	r3, [r7, #11]
 8002672:	2b28      	cmp	r3, #40	@ 0x28
 8002674:	d107      	bne.n	8002686 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002676:	f248 0103 	movw	r1, #32771	@ 0x8003
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fb94 	bl	8002da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002694:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b8c      	ldr	r3, [pc, #560]	@ (80028d4 <I2C_ITSlaveCplt+0x2cc>)
 80026a2:	400b      	ands	r3, r1
 80026a4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa85 	bl	8002bb6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	0b9b      	lsrs	r3, r3, #14
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026de:	e018      	b.n	8002712 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	0bdb      	lsrs	r3, r3, #15
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d012      	beq.n	8002712 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002700:	2b00      	cmp	r3, #0
 8002702:	d006      	beq.n	8002712 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	089b      	lsrs	r3, r3, #2
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d020      	beq.n	8002760 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	f043 0204 	orr.w	r2, r3, #4
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d04a      	beq.n	8002818 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800278a:	2b00      	cmp	r3, #0
 800278c:	d044      	beq.n	8002818 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d128      	bne.n	80027ea <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b28      	cmp	r3, #40	@ 0x28
 80027a2:	d108      	bne.n	80027b6 <I2C_ITSlaveCplt+0x1ae>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027aa:	d104      	bne.n	80027b6 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80027ac:	6979      	ldr	r1, [r7, #20]
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f894 	bl	80028dc <I2C_ITListenCplt>
 80027b4:	e030      	b.n	8002818 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b29      	cmp	r3, #41	@ 0x29
 80027c0:	d10e      	bne.n	80027e0 <I2C_ITSlaveCplt+0x1d8>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027c8:	d00a      	beq.n	80027e0 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2210      	movs	r2, #16
 80027d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f9ef 	bl	8002bb6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff fded 	bl	80023b8 <I2C_ITSlaveSeqCplt>
 80027de:	e01b      	b.n	8002818 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2210      	movs	r2, #16
 80027e6:	61da      	str	r2, [r3, #28]
 80027e8:	e016      	b.n	8002818 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2210      	movs	r2, #16
 80027f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	f043 0204 	orr.w	r2, r3, #4
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <I2C_ITSlaveCplt+0x204>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800280a:	d105      	bne.n	8002818 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f8b8 	bl	8002988 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	2b00      	cmp	r3, #0
 800282c:	d010      	beq.n	8002850 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	4619      	mov	r1, r3
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f8a7 	bl	8002988 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b28      	cmp	r3, #40	@ 0x28
 8002844:	d141      	bne.n	80028ca <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002846:	6979      	ldr	r1, [r7, #20]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f847 	bl	80028dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800284e:	e03c      	b.n	80028ca <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002858:	d014      	beq.n	8002884 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fdac 	bl	80023b8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a1d      	ldr	r2, [pc, #116]	@ (80028d8 <I2C_ITSlaveCplt+0x2d0>)
 8002864:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7fd fd01 	bl	8000284 <HAL_I2C_ListenCpltCallback>
}
 8002882:	e022      	b.n	80028ca <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b22      	cmp	r3, #34	@ 0x22
 800288e:	d10e      	bne.n	80028ae <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fd fd1c 	bl	80002e4 <HAL_I2C_SlaveRxCpltCallback>
}
 80028ac:	e00d      	b.n	80028ca <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff f87a 	bl	80019be <HAL_I2C_SlaveTxCpltCallback>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	fe00e800 	.word	0xfe00e800
 80028d8:	ffff0000 	.word	0xffff0000

080028dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a26      	ldr	r2, [pc, #152]	@ (8002984 <I2C_ITListenCplt+0xa8>)
 80028ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d022      	beq.n	800295a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002930:	2b00      	cmp	r3, #0
 8002932:	d012      	beq.n	800295a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f043 0204 	orr.w	r2, r3, #4
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800295a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa22 	bl	8002da8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2210      	movs	r2, #16
 800296a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7fd fc85 	bl	8000284 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	ffff0000 	.word	0xffff0000

08002988 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002998:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a6d      	ldr	r2, [pc, #436]	@ (8002b5c <I2C_ITError+0x1d4>)
 80029a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b28      	cmp	r3, #40	@ 0x28
 80029be:	d005      	beq.n	80029cc <I2C_ITError+0x44>
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b29      	cmp	r3, #41	@ 0x29
 80029c4:	d002      	beq.n	80029cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80029ca:	d10b      	bne.n	80029e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029cc:	2103      	movs	r1, #3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f9ea 	bl	8002da8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2228      	movs	r2, #40	@ 0x28
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a60      	ldr	r2, [pc, #384]	@ (8002b60 <I2C_ITError+0x1d8>)
 80029e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80029e2:	e030      	b.n	8002a46 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029e4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f9dd 	bl	8002da8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8e1 	bl	8002bb6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b60      	cmp	r3, #96	@ 0x60
 80029fe:	d01f      	beq.n	8002a40 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	d114      	bne.n	8002a40 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d109      	bne.n	8002a38 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a30:	f043 0204 	orr.w	r2, r3, #4
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d039      	beq.n	8002ac8 <I2C_ITError+0x140>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b11      	cmp	r3, #17
 8002a58:	d002      	beq.n	8002a60 <I2C_ITError+0xd8>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b21      	cmp	r3, #33	@ 0x21
 8002a5e:	d133      	bne.n	8002ac8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a6e:	d107      	bne.n	8002a80 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fb93 	bl	80011b0 <HAL_DMA_GetState>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d017      	beq.n	8002ac0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a94:	4a33      	ldr	r2, [pc, #204]	@ (8002b64 <I2C_ITError+0x1dc>)
 8002a96:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fa6d 	bl	8000f84 <HAL_DMA_Abort_IT>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d04d      	beq.n	8002b4c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002aba:	4610      	mov	r0, r2
 8002abc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002abe:	e045      	b.n	8002b4c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f851 	bl	8002b68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ac6:	e041      	b.n	8002b4c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d039      	beq.n	8002b44 <I2C_ITError+0x1bc>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b12      	cmp	r3, #18
 8002ad4:	d002      	beq.n	8002adc <I2C_ITError+0x154>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b22      	cmp	r3, #34	@ 0x22
 8002ada:	d133      	bne.n	8002b44 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aea:	d107      	bne.n	8002afc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002afa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe fb55 	bl	80011b0 <HAL_DMA_GetState>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d017      	beq.n	8002b3c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b10:	4a14      	ldr	r2, [pc, #80]	@ (8002b64 <I2C_ITError+0x1dc>)
 8002b12:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fa2f 	bl	8000f84 <HAL_DMA_Abort_IT>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d011      	beq.n	8002b50 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b36:	4610      	mov	r0, r2
 8002b38:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b3a:	e009      	b.n	8002b50 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f813 	bl	8002b68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b42:	e005      	b.n	8002b50 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f80f 	bl	8002b68 <I2C_TreatErrorCallback>
  }
}
 8002b4a:	e002      	b.n	8002b52 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b4c:	bf00      	nop
 8002b4e:	e000      	b.n	8002b52 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b50:	bf00      	nop
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	ffff0000 	.word	0xffff0000
 8002b60:	08001a27 	.word	0x08001a27
 8002b64:	08002bff 	.word	0x08002bff

08002b68 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b60      	cmp	r3, #96	@ 0x60
 8002b7a:	d10e      	bne.n	8002b9a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe ff31 	bl	80019fa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b98:	e009      	b.n	8002bae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7fd fbd3 	bl	8000354 <HAL_I2C_ErrorCallback>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d103      	bne.n	8002bd4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d007      	beq.n	8002bf2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	619a      	str	r2, [r3, #24]
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c18:	2200      	movs	r2, #0
 8002c1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	2200      	movs	r2, #0
 8002c2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff ff9b 	bl	8002b68 <I2C_TreatErrorCallback>
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	817b      	strh	r3, [r7, #10]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c4e:	897b      	ldrh	r3, [r7, #10]
 8002c50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c54:	7a7b      	ldrb	r3, [r7, #9]
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	0d5b      	lsrs	r3, r3, #21
 8002c76:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002c7a:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <I2C_TransferConfig+0x60>)
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	ea02 0103 	and.w	r1, r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	03ff63ff 	.word	0x03ff63ff

08002ca0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb4:	4a39      	ldr	r2, [pc, #228]	@ (8002d9c <I2C_Enable_IRQ+0xfc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d032      	beq.n	8002d20 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002cbe:	4a38      	ldr	r2, [pc, #224]	@ (8002da0 <I2C_Enable_IRQ+0x100>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d02d      	beq.n	8002d20 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002cc8:	4a36      	ldr	r2, [pc, #216]	@ (8002da4 <I2C_Enable_IRQ+0x104>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d028      	beq.n	8002d20 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002cce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	da03      	bge.n	8002cde <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002cdc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002cee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002d00:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d103      	bne.n	8002d10 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002d0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d133      	bne.n	8002d7e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f043 0320 	orr.w	r3, r3, #32
 8002d1c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d1e:	e02e      	b.n	8002d7e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da03      	bge.n	8002d30 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002d2e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002d30:	887b      	ldrh	r3, [r7, #2]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002d40:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d42:	887b      	ldrh	r3, [r7, #2]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002d52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002d54:	887b      	ldrh	r3, [r7, #2]
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d103      	bne.n	8002d62 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002d60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d103      	bne.n	8002d70 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	2b40      	cmp	r3, #64	@ 0x40
 8002d74:	d103      	bne.n	8002d7e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6819      	ldr	r1, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	08001c2f 	.word	0x08001c2f
 8002da0:	08002075 	.word	0x08002075
 8002da4:	08001e15 	.word	0x08001e15

08002da8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00f      	beq.n	8002de2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002dc8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002dd6:	2b28      	cmp	r3, #40	@ 0x28
 8002dd8:	d003      	beq.n	8002de2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002de0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002de2:	887b      	ldrh	r3, [r7, #2]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00f      	beq.n	8002e0c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002df2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e00:	2b28      	cmp	r3, #40	@ 0x28
 8002e02:	d003      	beq.n	8002e0c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002e0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002e0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	da03      	bge.n	8002e1c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002e1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d103      	bne.n	8002e2a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002e2a:	887b      	ldrh	r3, [r7, #2]
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d103      	bne.n	8002e38 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f043 0320 	orr.w	r3, r3, #32
 8002e36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	2b40      	cmp	r3, #64	@ 0x40
 8002e3c:	d103      	bne.n	8002e46 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6819      	ldr	r1, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	400a      	ands	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d138      	bne.n	8002eec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e032      	b.n	8002eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	@ 0x24
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6819      	ldr	r1, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d139      	bne.n	8002f84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e033      	b.n	8002f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2224      	movs	r2, #36	@ 0x24
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0c0      	b.n	8003126 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d106      	bne.n	8002fbe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f007 fc8f 	bl	800a8dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 feb5 	bl	8006d3a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	e03e      	b.n	8003054 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3311      	adds	r3, #17
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3310      	adds	r3, #16
 8002ffa:	7bfa      	ldrb	r2, [r7, #15]
 8002ffc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	440b      	add	r3, r1
 800300c:	3313      	adds	r3, #19
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	440b      	add	r3, r1
 8003020:	3320      	adds	r3, #32
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003026:	7bfa      	ldrb	r2, [r7, #15]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	440b      	add	r3, r1
 8003034:	3324      	adds	r3, #36	@ 0x24
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	440b      	add	r3, r1
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	3301      	adds	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	791b      	ldrb	r3, [r3, #4]
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	429a      	cmp	r2, r3
 800305c:	d3bb      	bcc.n	8002fd6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	e044      	b.n	80030ee <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	440b      	add	r3, r1
 8003072:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	440b      	add	r3, r1
 80030ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	3301      	adds	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	791b      	ldrb	r3, [r3, #4]
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d3b5      	bcc.n	8003064 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003104:	f003 fe34 	bl	8006d70 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7a9b      	ldrb	r3, [r3, #10]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f001 fbd0 	bl	80048c4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_PCD_Start+0x16>
 8003140:	2302      	movs	r3, #2
 8003142:	e012      	b.n	800316a <HAL_PCD_Start+0x3c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fddb 	bl	8006d0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f005 f9cb 	bl	80084f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_PCD_Stop+0x16>
 8003184:	2302      	movs	r3, #2
 8003186:	e012      	b.n	80031ae <HAL_PCD_Stop+0x3c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fdd0 	bl	8006d3a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f005 f9c0 	bl	8008524 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f005 f9c3 	bl	800854e <USB_ReadInterrupts>
 80031c8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 faa6 	bl	8003726 <PCD_EP_ISR_Handler>

    return;
 80031da:	e110      	b.n	80033fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d013      	beq.n	800320e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f8:	b292      	uxth	r2, r2
 80031fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f007 fbfd 	bl	800a9fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003204:	2100      	movs	r1, #0
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8fc 	bl	8003404 <HAL_PCD_SetAddress>

    return;
 800320c:	e0f7      	b.n	80033fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00c      	beq.n	8003232 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003220:	b29a      	uxth	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800322a:	b292      	uxth	r2, r2
 800322c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003230:	e0e5      	b.n	80033fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00c      	beq.n	8003256 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800324e:	b292      	uxth	r2, r2
 8003250:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003254:	e0d3      	b.n	80033fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d034      	beq.n	80032ca <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0204 	bic.w	r2, r2, #4
 8003272:	b292      	uxth	r2, r2
 8003274:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0208 	bic.w	r2, r2, #8
 800328a:	b292      	uxth	r2, r2
 800328c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003296:	2b01      	cmp	r3, #1
 8003298:	d107      	bne.n	80032aa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032a2:	2100      	movs	r1, #0
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f007 fd6d 	bl	800ad84 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f007 fbe0 	bl	800aa70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032c2:	b292      	uxth	r2, r2
 80032c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80032c8:	e099      	b.n	80033fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d027      	beq.n	8003324 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032dc:	b29a      	uxth	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0208 	orr.w	r2, r2, #8
 80032e6:	b292      	uxth	r2, r2
 80032e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032fe:	b292      	uxth	r2, r2
 8003300:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800330c:	b29a      	uxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0204 	orr.w	r2, r2, #4
 8003316:	b292      	uxth	r2, r2
 8003318:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f007 fb8d 	bl	800aa3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003322:	e06c      	b.n	80033fe <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332a:	2b00      	cmp	r3, #0
 800332c:	d040      	beq.n	80033b0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003336:	b29a      	uxth	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003340:	b292      	uxth	r2, r2
 8003342:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d12b      	bne.n	80033a8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003358:	b29a      	uxth	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0204 	orr.w	r2, r2, #4
 8003362:	b292      	uxth	r2, r2
 8003364:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003370:	b29a      	uxth	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0208 	orr.w	r2, r2, #8
 800337a:	b292      	uxth	r2, r2
 800337c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003390:	b29b      	uxth	r3, r3
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800339e:	2101      	movs	r1, #1
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f007 fcef 	bl	800ad84 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80033a6:	e02a      	b.n	80033fe <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f007 fb47 	bl	800aa3c <HAL_PCD_SuspendCallback>
    return;
 80033ae:	e026      	b.n	80033fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00f      	beq.n	80033da <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033cc:	b292      	uxth	r2, r2
 80033ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f007 fb05 	bl	800a9e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80033d8:	e011      	b.n	80033fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00c      	beq.n	80033fe <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033f6:	b292      	uxth	r2, r2
 80033f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80033fc:	bf00      	nop
  }
}
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_PCD_SetAddress+0x1a>
 800341a:	2302      	movs	r3, #2
 800341c:	e012      	b.n	8003444 <HAL_PCD_SetAddress+0x40>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f005 f84a 	bl	80084ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	4608      	mov	r0, r1
 8003456:	4611      	mov	r1, r2
 8003458:	461a      	mov	r2, r3
 800345a:	4603      	mov	r3, r0
 800345c:	70fb      	strb	r3, [r7, #3]
 800345e:	460b      	mov	r3, r1
 8003460:	803b      	strh	r3, [r7, #0]
 8003462:	4613      	mov	r3, r2
 8003464:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800346a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800346e:	2b00      	cmp	r3, #0
 8003470:	da0e      	bge.n	8003490 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	f003 0207 	and.w	r2, r3, #7
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	3310      	adds	r3, #16
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	705a      	strb	r2, [r3, #1]
 800348e:	e00e      	b.n	80034ae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 0207 	and.w	r2, r3, #7
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80034ba:	883b      	ldrh	r3, [r7, #0]
 80034bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	78ba      	ldrb	r2, [r7, #2]
 80034c8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034ca:	78bb      	ldrb	r3, [r7, #2]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d102      	bne.n	80034d6 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_PCD_EP_Open+0x98>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e00e      	b.n	8003502 <HAL_PCD_EP_Open+0xb6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68f9      	ldr	r1, [r7, #12]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f003 fc5a 	bl	8006dac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003500:	7afb      	ldrb	r3, [r7, #11]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	460b      	mov	r3, r1
 8003518:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800351a:	7afb      	ldrb	r3, [r7, #11]
 800351c:	f003 0207 	and.w	r2, r3, #7
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2200      	movs	r2, #0
 8003548:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800354a:	7afb      	ldrb	r3, [r7, #11]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	b2da      	uxtb	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6979      	ldr	r1, [r7, #20]
 800355c:	4618      	mov	r0, r3
 800355e:	f004 f90d 	bl	800777c <USB_EPStartXfer>

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	460b      	mov	r3, r1
 800357a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800357c:	7afb      	ldrb	r3, [r7, #11]
 800357e:	f003 0207 	and.w	r2, r3, #7
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	3310      	adds	r3, #16
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2201      	movs	r2, #1
 80035b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b8:	7afb      	ldrb	r3, [r7, #11]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6979      	ldr	r1, [r7, #20]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f004 f8d6 	bl	800777c <USB_EPStartXfer>

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	7912      	ldrb	r2, [r2, #4]
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e03e      	b.n	8003676 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	da0e      	bge.n	800361e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f003 0207 	and.w	r2, r3, #7
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	3310      	adds	r3, #16
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	705a      	strb	r2, [r3, #1]
 800361c:	e00c      	b.n	8003638 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_PCD_EP_SetStall+0x7e>
 8003654:	2302      	movs	r3, #2
 8003656:	e00e      	b.n	8003676 <HAL_PCD_EP_SetStall+0x9c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68f9      	ldr	r1, [r7, #12]
 8003666:	4618      	mov	r0, r3
 8003668:	f004 fe37 	bl	80082da <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	7912      	ldrb	r2, [r2, #4]
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e040      	b.n	800371e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800369c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	da0e      	bge.n	80036c2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	f003 0207 	and.w	r2, r3, #7
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	3310      	adds	r3, #16
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	705a      	strb	r2, [r3, #1]
 80036c0:	e00e      	b.n	80036e0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	f003 0207 	and.w	r2, r3, #7
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_PCD_EP_ClrStall+0x82>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e00e      	b.n	800371e <HAL_PCD_EP_ClrStall+0xa0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68f9      	ldr	r1, [r7, #12]
 800370e:	4618      	mov	r0, r3
 8003710:	f004 fe34 	bl	800837c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b092      	sub	sp, #72	@ 0x48
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800372e:	e333      	b.n	8003d98 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003738:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800373a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003746:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 8108 	bne.w	8003960 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003750:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d14c      	bne.n	80037f4 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	b29b      	uxth	r3, r3
 8003762:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376a:	813b      	strh	r3, [r7, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	893b      	ldrh	r3, [r7, #8]
 8003772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800377a:	b29b      	uxth	r3, r3
 800377c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3310      	adds	r3, #16
 8003782:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800378c:	b29b      	uxth	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	4413      	add	r3, r2
 800379e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80037ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	441a      	add	r2, r3
 80037b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80037ba:	2100      	movs	r1, #0
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f007 f8f6 	bl	800a9ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	7b1b      	ldrb	r3, [r3, #12]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 82e5 	beq.w	8003d98 <PCD_EP_ISR_Handler+0x672>
 80037ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 82e0 	bne.w	8003d98 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7b1b      	ldrb	r3, [r3, #12]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	731a      	strb	r2, [r3, #12]
 80037f2:	e2d1      	b.n	8003d98 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037fa:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003804:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003806:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800380a:	2b00      	cmp	r3, #0
 800380c:	d032      	beq.n	8003874 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003816:	b29b      	uxth	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	4413      	add	r3, r2
 8003828:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003834:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003842:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003846:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003848:	b29b      	uxth	r3, r3
 800384a:	f004 fed3 	bl	80085f4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b29a      	uxth	r2, r3
 8003856:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800385a:	4013      	ands	r3, r2
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	897a      	ldrh	r2, [r7, #10]
 8003864:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003868:	b292      	uxth	r2, r2
 800386a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f007 f871 	bl	800a954 <HAL_PCD_SetupStageCallback>
 8003872:	e291      	b.n	8003d98 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003874:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003878:	2b00      	cmp	r3, #0
 800387a:	f280 828d 	bge.w	8003d98 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29a      	uxth	r2, r3
 8003886:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800388a:	4013      	ands	r3, r2
 800388c:	81fb      	strh	r3, [r7, #14]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	89fa      	ldrh	r2, [r7, #14]
 8003894:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003898:	b292      	uxth	r2, r2
 800389a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	4413      	add	r3, r2
 80038b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80038c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d019      	beq.n	8003900 <PCD_EP_ISR_Handler+0x1da>
 80038cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038da:	6959      	ldr	r1, [r3, #20]
 80038dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038de:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80038e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f004 fe85 	bl	80085f4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80038ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	441a      	add	r2, r3
 80038f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80038f8:	2100      	movs	r1, #0
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f007 f83c 	bl	800a978 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003908:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800390a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800390e:	2b00      	cmp	r3, #0
 8003910:	f040 8242 	bne.w	8003d98 <PCD_EP_ISR_Handler+0x672>
 8003914:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003916:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800391a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800391e:	f000 823b 	beq.w	8003d98 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800392e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003932:	81bb      	strh	r3, [r7, #12]
 8003934:	89bb      	ldrh	r3, [r7, #12]
 8003936:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800393a:	81bb      	strh	r3, [r7, #12]
 800393c:	89bb      	ldrh	r3, [r7, #12]
 800393e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003942:	81bb      	strh	r3, [r7, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	89bb      	ldrh	r3, [r7, #12]
 800394a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800394e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800395a:	b29b      	uxth	r3, r3
 800395c:	8013      	strh	r3, [r2, #0]
 800395e:	e21b      	b.n	8003d98 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003972:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003976:	2b00      	cmp	r3, #0
 8003978:	f280 80f1 	bge.w	8003b5e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29a      	uxth	r2, r3
 800398e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003992:	4013      	ands	r3, r2
 8003994:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80039a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039aa:	b292      	uxth	r2, r2
 80039ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80039ae:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4413      	add	r3, r2
 80039c2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80039c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c6:	7b1b      	ldrb	r3, [r3, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d123      	bne.n	8003a14 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80039f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 808b 	beq.w	8003b14 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a04:	6959      	ldr	r1, [r3, #20]
 8003a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a08:	88da      	ldrh	r2, [r3, #6]
 8003a0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003a0e:	f004 fdf1 	bl	80085f4 <USB_ReadPMA>
 8003a12:	e07f      	b.n	8003b14 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a16:	78db      	ldrb	r3, [r3, #3]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d109      	bne.n	8003a30 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f9c6 	bl	8003db4 <HAL_PCD_EP_DB_Receive>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003a2e:	e071      	b.n	8003b14 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	441a      	add	r2, r3
 8003a5a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d022      	beq.n	8003ad0 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003ab2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d02c      	beq.n	8003b14 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ac0:	6959      	ldr	r1, [r3, #20]
 8003ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ac4:	891a      	ldrh	r2, [r3, #8]
 8003ac6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003aca:	f004 fd93 	bl	80085f4 <USB_ReadPMA>
 8003ace:	e021      	b.n	8003b14 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003af4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003af8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d009      	beq.n	8003b14 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b06:	6959      	ldr	r1, [r3, #20]
 8003b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b0a:	895a      	ldrh	r2, [r3, #10]
 8003b0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b10:	f004 fd70 	bl	80085f4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b1c:	441a      	add	r2, r3
 8003b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b2a:	441a      	add	r2, r3
 8003b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b2e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <PCD_EP_ISR_Handler+0x41e>
 8003b38:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d206      	bcs.n	8003b52 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f006 ff14 	bl	800a978 <HAL_PCD_DataOutStageCallback>
 8003b50:	e005      	b.n	8003b5e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 fe0f 	bl	800777c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8117 	beq.w	8003d98 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003b6a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	3310      	adds	r3, #16
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b98:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	441a      	add	r2, r3
 8003ba8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb8:	78db      	ldrb	r3, [r3, #3]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	f040 80a1 	bne.w	8003d02 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc8:	7b1b      	ldrb	r3, [r3, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8092 	beq.w	8003cf4 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d046      	beq.n	8003c68 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bdc:	785b      	ldrb	r3, [r3, #1]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d126      	bne.n	8003c30 <PCD_EP_ISR_Handler+0x50a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	00da      	lsls	r2, r3, #3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4413      	add	r3, r2
 8003c04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	e061      	b.n	8003cf4 <PCD_EP_ISR_Handler+0x5ce>
 8003c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c32:	785b      	ldrb	r3, [r3, #1]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d15d      	bne.n	8003cf4 <PCD_EP_ISR_Handler+0x5ce>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	00da      	lsls	r2, r3, #3
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2200      	movs	r2, #0
 8003c64:	801a      	strh	r2, [r3, #0]
 8003c66:	e045      	b.n	8003cf4 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c70:	785b      	ldrb	r3, [r3, #1]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d126      	bne.n	8003cc4 <PCD_EP_ISR_Handler+0x59e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	4413      	add	r3, r2
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	00da      	lsls	r2, r3, #3
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	4413      	add	r3, r2
 8003c98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	801a      	strh	r2, [r3, #0]
 8003cc2:	e017      	b.n	8003cf4 <PCD_EP_ISR_Handler+0x5ce>
 8003cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc6:	785b      	ldrb	r3, [r3, #1]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d113      	bne.n	8003cf4 <PCD_EP_ISR_Handler+0x5ce>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cda:	4413      	add	r3, r2
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	00da      	lsls	r2, r3, #3
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f006 fe57 	bl	800a9ae <HAL_PCD_DataInStageCallback>
 8003d00:	e04a      	b.n	8003d98 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003d02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d13f      	bne.n	8003d8c <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	4413      	add	r3, r2
 8003d26:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d30:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d906      	bls.n	8003d4a <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003d42:	1ad2      	subs	r2, r2, r3
 8003d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d46:	619a      	str	r2, [r3, #24]
 8003d48:	e002      	b.n	8003d50 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f006 fe25 	bl	800a9ae <HAL_PCD_DataInStageCallback>
 8003d64:	e018      	b.n	8003d98 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003d6c:	441a      	add	r2, r3
 8003d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d70:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003d78:	441a      	add	r2, r3
 8003d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d7c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d84:	4618      	mov	r0, r3
 8003d86:	f003 fcf9 	bl	800777c <USB_EPStartXfer>
 8003d8a:	e005      	b.n	8003d98 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003d8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f917 	bl	8003fc6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	b21b      	sxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f6ff acc3 	blt.w	8003730 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3748      	adds	r7, #72	@ 0x48
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d07c      	beq.n	8003ec6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	4413      	add	r3, r2
 8003de6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003df0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	8b7b      	ldrh	r3, [r7, #26]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d306      	bcc.n	8003e0a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	8b7b      	ldrh	r3, [r7, #26]
 8003e02:	1ad2      	subs	r2, r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	619a      	str	r2, [r3, #24]
 8003e08:	e002      	b.n	8003e10 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d123      	bne.n	8003e60 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e32:	833b      	strh	r3, [r7, #24]
 8003e34:	8b3b      	ldrh	r3, [r7, #24]
 8003e36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e3a:	833b      	strh	r3, [r7, #24]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	441a      	add	r2, r3
 8003e4a:	8b3b      	ldrh	r3, [r7, #24]
 8003e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01f      	beq.n	8003eaa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e84:	82fb      	strh	r3, [r7, #22]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	441a      	add	r2, r3
 8003e94:	8afb      	ldrh	r3, [r7, #22]
 8003e96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ea2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003eaa:	8b7b      	ldrh	r3, [r7, #26]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8085 	beq.w	8003fbc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	6959      	ldr	r1, [r3, #20]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	891a      	ldrh	r2, [r3, #8]
 8003ebe:	8b7b      	ldrh	r3, [r7, #26]
 8003ec0:	f004 fb98 	bl	80085f4 <USB_ReadPMA>
 8003ec4:	e07a      	b.n	8003fbc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	8b7b      	ldrh	r3, [r7, #26]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d306      	bcc.n	8003f04 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	8b7b      	ldrh	r3, [r7, #26]
 8003efc:	1ad2      	subs	r2, r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	619a      	str	r2, [r3, #24]
 8003f02:	e002      	b.n	8003f0a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2200      	movs	r2, #0
 8003f08:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d123      	bne.n	8003f5a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2c:	83fb      	strh	r3, [r7, #30]
 8003f2e:	8bfb      	ldrh	r3, [r7, #30]
 8003f30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f34:	83fb      	strh	r3, [r7, #30]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	441a      	add	r2, r3
 8003f44:	8bfb      	ldrh	r3, [r7, #30]
 8003f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d11f      	bne.n	8003fa4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7e:	83bb      	strh	r3, [r7, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	8bbb      	ldrh	r3, [r7, #28]
 8003f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003fa4:	8b7b      	ldrh	r3, [r7, #26]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6959      	ldr	r1, [r3, #20]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	895a      	ldrh	r2, [r3, #10]
 8003fb6:	8b7b      	ldrh	r3, [r7, #26]
 8003fb8:	f004 fb1c 	bl	80085f4 <USB_ReadPMA>
    }
  }

  return count;
 8003fbc:	8b7b      	ldrh	r3, [r7, #26]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3720      	adds	r7, #32
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b0a6      	sub	sp, #152	@ 0x98
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 81f7 	beq.w	80043ce <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004004:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004010:	429a      	cmp	r2, r3
 8004012:	d907      	bls.n	8004024 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800401c:	1ad2      	subs	r2, r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	619a      	str	r2, [r3, #24]
 8004022:	e002      	b.n	800402a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2200      	movs	r2, #0
 8004028:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f040 80e1 	bne.w	80041f6 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d126      	bne.n	800408a <HAL_PCD_EP_DB_Transmit+0xc4>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	633b      	str	r3, [r7, #48]	@ 0x30
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800404a:	b29b      	uxth	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	4413      	add	r3, r2
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	00da      	lsls	r2, r3, #3
 800405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405c:	4413      	add	r3, r2
 800405e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406e:	b29a      	uxth	r2, r3
 8004070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004072:	801a      	strh	r2, [r3, #0]
 8004074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004082:	b29a      	uxth	r2, r3
 8004084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004086:	801a      	strh	r2, [r3, #0]
 8004088:	e01a      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	785b      	ldrb	r3, [r3, #1]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d116      	bne.n	80040c0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a6:	4413      	add	r3, r2
 80040a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	00da      	lsls	r2, r3, #3
 80040b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b2:	4413      	add	r3, r2
 80040b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040bc:	2200      	movs	r2, #0
 80040be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d126      	bne.n	800411c <HAL_PCD_EP_DB_Transmit+0x156>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040dc:	b29b      	uxth	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	4413      	add	r3, r2
 80040e4:	623b      	str	r3, [r7, #32]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	00da      	lsls	r2, r3, #3
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	4413      	add	r3, r2
 80040f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004100:	b29a      	uxth	r2, r3
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004114:	b29a      	uxth	r2, r3
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	801a      	strh	r2, [r3, #0]
 800411a:	e017      	b.n	800414c <HAL_PCD_EP_DB_Transmit+0x186>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d113      	bne.n	800414c <HAL_PCD_EP_DB_Transmit+0x186>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800412c:	b29b      	uxth	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004132:	4413      	add	r3, r2
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	00da      	lsls	r2, r3, #3
 800413c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413e:	4413      	add	r3, r2
 8004140:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	2200      	movs	r2, #0
 800414a:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	78db      	ldrb	r3, [r3, #3]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d123      	bne.n	800419c <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800416a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800416e:	837b      	strh	r3, [r7, #26]
 8004170:	8b7b      	ldrh	r3, [r7, #26]
 8004172:	f083 0320 	eor.w	r3, r3, #32
 8004176:	837b      	strh	r3, [r7, #26]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	441a      	add	r2, r3
 8004186:	8b7b      	ldrh	r3, [r7, #26]
 8004188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800418c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004198:	b29b      	uxth	r3, r3
 800419a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	4619      	mov	r1, r3
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f006 fc03 	bl	800a9ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01f      	beq.n	80041f2 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041cc:	833b      	strh	r3, [r7, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	441a      	add	r2, r3
 80041dc:	8b3b      	ldrh	r3, [r7, #24]
 80041de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e31f      	b.n	8004836 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d021      	beq.n	8004244 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	441a      	add	r2, r3
 800422c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004230:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004234:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004238:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800423c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004240:	b29b      	uxth	r3, r3
 8004242:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800424a:	2b01      	cmp	r3, #1
 800424c:	f040 82ca 	bne.w	80047e4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004258:	441a      	add	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004266:	441a      	add	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d309      	bcc.n	800428c <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	6a1a      	ldr	r2, [r3, #32]
 8004282:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004284:	1ad2      	subs	r2, r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	621a      	str	r2, [r3, #32]
 800428a:	e015      	b.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d107      	bne.n	80042a4 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8004294:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004298:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042a2:	e009      	b.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2200      	movs	r2, #0
 80042b6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d15f      	bne.n	8004380 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d4:	4413      	add	r3, r2
 80042d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	00da      	lsls	r2, r3, #3
 80042de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e0:	4413      	add	r3, r2
 80042e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_PCD_EP_DB_Transmit+0x34e>
 80042fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430c:	b29a      	uxth	r2, r3
 800430e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e051      	b.n	80043b8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004316:	2b3e      	cmp	r3, #62	@ 0x3e
 8004318:	d816      	bhi.n	8004348 <HAL_PCD_EP_DB_Transmit+0x382>
 800431a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_PCD_EP_DB_Transmit+0x36a>
 800432a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800432c:	3301      	adds	r3, #1
 800432e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29a      	uxth	r2, r3
 8004336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004338:	b29b      	uxth	r3, r3
 800433a:	029b      	lsls	r3, r3, #10
 800433c:	b29b      	uxth	r3, r3
 800433e:	4313      	orrs	r3, r2
 8004340:	b29a      	uxth	r2, r3
 8004342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	e037      	b.n	80043b8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004348:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	653b      	str	r3, [r7, #80]	@ 0x50
 800434e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2b00      	cmp	r3, #0
 8004356:	d102      	bne.n	800435e <HAL_PCD_EP_DB_Transmit+0x398>
 8004358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800435a:	3b01      	subs	r3, #1
 800435c:	653b      	str	r3, [r7, #80]	@ 0x50
 800435e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29a      	uxth	r2, r3
 8004364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004366:	b29b      	uxth	r3, r3
 8004368:	029b      	lsls	r3, r3, #10
 800436a:	b29b      	uxth	r3, r3
 800436c:	4313      	orrs	r3, r2
 800436e:	b29b      	uxth	r3, r3
 8004370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004378:	b29a      	uxth	r2, r3
 800437a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437c:	801a      	strh	r2, [r3, #0]
 800437e:	e01b      	b.n	80043b8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	785b      	ldrb	r3, [r3, #1]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d117      	bne.n	80043b8 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004396:	b29b      	uxth	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800439c:	4413      	add	r3, r2
 800439e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	00da      	lsls	r2, r3, #3
 80043a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043a8:	4413      	add	r3, r2
 80043aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043b6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6959      	ldr	r1, [r3, #20]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	891a      	ldrh	r2, [r3, #8]
 80043c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f004 f8d1 	bl	800856e <USB_WritePMA>
 80043cc:	e20a      	b.n	80047e4 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	6812      	ldr	r2, [r2, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80043fe:	429a      	cmp	r2, r3
 8004400:	d307      	bcc.n	8004412 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800440a:	1ad2      	subs	r2, r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	619a      	str	r2, [r3, #24]
 8004410:	e002      	b.n	8004418 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2200      	movs	r2, #0
 8004416:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 80f6 	bne.w	800460e <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d126      	bne.n	8004478 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004438:	b29b      	uxth	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800443e:	4413      	add	r3, r2
 8004440:	677b      	str	r3, [r7, #116]	@ 0x74
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	00da      	lsls	r2, r3, #3
 8004448:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800444a:	4413      	add	r3, r2
 800444c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004450:	673b      	str	r3, [r7, #112]	@ 0x70
 8004452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445c:	b29a      	uxth	r2, r3
 800445e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004460:	801a      	strh	r2, [r3, #0]
 8004462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800446c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004470:	b29a      	uxth	r2, r3
 8004472:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	e01a      	b.n	80044ae <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d116      	bne.n	80044ae <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800448e:	b29b      	uxth	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004494:	4413      	add	r3, r2
 8004496:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	00da      	lsls	r2, r3, #3
 800449e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044a0:	4413      	add	r3, r2
 80044a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80044a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044aa:	2200      	movs	r2, #0
 80044ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	785b      	ldrb	r3, [r3, #1]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d12f      	bne.n	800451e <HAL_PCD_EP_DB_Transmit+0x558>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044d6:	4413      	add	r3, r2
 80044d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	00da      	lsls	r2, r3, #3
 80044e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044e6:	4413      	add	r3, r2
 80044e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004502:	801a      	strh	r2, [r3, #0]
 8004504:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004514:	b29a      	uxth	r2, r3
 8004516:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	e01c      	b.n	8004558 <HAL_PCD_EP_DB_Transmit+0x592>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d118      	bne.n	8004558 <HAL_PCD_EP_DB_Transmit+0x592>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800452e:	b29b      	uxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004536:	4413      	add	r3, r2
 8004538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	00da      	lsls	r2, r3, #3
 8004542:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004546:	4413      	add	r3, r2
 8004548:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800454c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004550:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004554:	2200      	movs	r2, #0
 8004556:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	78db      	ldrb	r3, [r3, #3]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d127      	bne.n	80045b0 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800457a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800457e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004582:	f083 0320 	eor.w	r3, r3, #32
 8004586:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	441a      	add	r2, r3
 8004598:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800459c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	4619      	mov	r1, r3
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f006 f9f9 	bl	800a9ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d121      	bne.n	800460a <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	e113      	b.n	8004836 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d121      	bne.n	800465c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800462e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004632:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	441a      	add	r2, r3
 8004644:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004648:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800464c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004650:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004658:	b29b      	uxth	r3, r3
 800465a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004662:	2b01      	cmp	r3, #1
 8004664:	f040 80be 	bne.w	80047e4 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004670:	441a      	add	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800467e:	441a      	add	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	429a      	cmp	r2, r3
 800468e:	d309      	bcc.n	80046a4 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6a1a      	ldr	r2, [r3, #32]
 800469a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800469c:	1ad2      	subs	r2, r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	621a      	str	r2, [r3, #32]
 80046a2:	e015      	b.n	80046d0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d107      	bne.n	80046bc <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80046ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80046b0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80046ba:	e009      	b.n	80046d0 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2200      	movs	r2, #0
 80046c6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	785b      	ldrb	r3, [r3, #1]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d15f      	bne.n	800479e <HAL_PCD_EP_DB_Transmit+0x7d8>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046f2:	4413      	add	r3, r2
 80046f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	00da      	lsls	r2, r3, #3
 80046fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046fe:	4413      	add	r3, r2
 8004700:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004704:	667b      	str	r3, [r7, #100]	@ 0x64
 8004706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004710:	b29a      	uxth	r2, r3
 8004712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004714:	801a      	strh	r2, [r3, #0]
 8004716:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10a      	bne.n	8004732 <HAL_PCD_EP_DB_Transmit+0x76c>
 800471c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800472a:	b29a      	uxth	r2, r3
 800472c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800472e:	801a      	strh	r2, [r3, #0]
 8004730:	e04e      	b.n	80047d0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004732:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004734:	2b3e      	cmp	r3, #62	@ 0x3e
 8004736:	d816      	bhi.n	8004766 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004738:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	663b      	str	r3, [r7, #96]	@ 0x60
 800473e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_PCD_EP_DB_Transmit+0x788>
 8004748:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800474a:	3301      	adds	r3, #1
 800474c:	663b      	str	r3, [r7, #96]	@ 0x60
 800474e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29a      	uxth	r2, r3
 8004754:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004756:	b29b      	uxth	r3, r3
 8004758:	029b      	lsls	r3, r3, #10
 800475a:	b29b      	uxth	r3, r3
 800475c:	4313      	orrs	r3, r2
 800475e:	b29a      	uxth	r2, r3
 8004760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004762:	801a      	strh	r2, [r3, #0]
 8004764:	e034      	b.n	80047d0 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	663b      	str	r3, [r7, #96]	@ 0x60
 800476c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004778:	3b01      	subs	r3, #1
 800477a:	663b      	str	r3, [r7, #96]	@ 0x60
 800477c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	b29a      	uxth	r2, r3
 8004782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004784:	b29b      	uxth	r3, r3
 8004786:	029b      	lsls	r3, r3, #10
 8004788:	b29b      	uxth	r3, r3
 800478a:	4313      	orrs	r3, r2
 800478c:	b29b      	uxth	r3, r3
 800478e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004796:	b29a      	uxth	r2, r3
 8004798:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800479a:	801a      	strh	r2, [r3, #0]
 800479c:	e018      	b.n	80047d0 <HAL_PCD_EP_DB_Transmit+0x80a>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d114      	bne.n	80047d0 <HAL_PCD_EP_DB_Transmit+0x80a>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047b4:	4413      	add	r3, r2
 80047b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	00da      	lsls	r2, r3, #3
 80047be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047c0:	4413      	add	r3, r2
 80047c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ce:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	6959      	ldr	r1, [r3, #20]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	895a      	ldrh	r2, [r3, #10]
 80047dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f003 fec5 	bl	800856e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	461a      	mov	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047fe:	82fb      	strh	r3, [r7, #22]
 8004800:	8afb      	ldrh	r3, [r7, #22]
 8004802:	f083 0310 	eor.w	r3, r3, #16
 8004806:	82fb      	strh	r3, [r7, #22]
 8004808:	8afb      	ldrh	r3, [r7, #22]
 800480a:	f083 0320 	eor.w	r3, r3, #32
 800480e:	82fb      	strh	r3, [r7, #22]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	8afb      	ldrh	r3, [r7, #22]
 8004820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800482c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004830:	b29b      	uxth	r3, r3
 8004832:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3798      	adds	r7, #152	@ 0x98
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800483e:	b480      	push	{r7}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	817b      	strh	r3, [r7, #10]
 800484c:	4613      	mov	r3, r2
 800484e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004850:	897b      	ldrh	r3, [r7, #10]
 8004852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800485c:	897b      	ldrh	r3, [r7, #10]
 800485e:	f003 0207 	and.w	r2, r3, #7
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	3310      	adds	r3, #16
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	e009      	b.n	8004888 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004874:	897a      	ldrh	r2, [r7, #10]
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004888:	893b      	ldrh	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d107      	bne.n	800489e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2200      	movs	r2, #0
 8004892:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	b29a      	uxth	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	80da      	strh	r2, [r3, #6]
 800489c:	e00b      	b.n	80048b6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2201      	movs	r2, #1
 80048a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f043 0302 	orr.w	r3, r3, #2
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d141      	bne.n	80049aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004926:	4b4b      	ldr	r3, [pc, #300]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800492e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004932:	d131      	bne.n	8004998 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004934:	4b47      	ldr	r3, [pc, #284]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800493a:	4a46      	ldr	r2, [pc, #280]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004940:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004944:	4b43      	ldr	r3, [pc, #268]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800494c:	4a41      	ldr	r2, [pc, #260]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004952:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004954:	4b40      	ldr	r3, [pc, #256]	@ (8004a58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2232      	movs	r2, #50	@ 0x32
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	4a3f      	ldr	r2, [pc, #252]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	0c9b      	lsrs	r3, r3, #18
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800496a:	e002      	b.n	8004972 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b01      	subs	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004972:	4b38      	ldr	r3, [pc, #224]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497e:	d102      	bne.n	8004986 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f2      	bne.n	800496c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004986:	4b33      	ldr	r3, [pc, #204]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004992:	d158      	bne.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e057      	b.n	8004a48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004998:	4b2e      	ldr	r3, [pc, #184]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800499e:	4a2d      	ldr	r2, [pc, #180]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049a8:	e04d      	b.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b0:	d141      	bne.n	8004a36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049b2:	4b28      	ldr	r3, [pc, #160]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049be:	d131      	bne.n	8004a24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049c0:	4b24      	ldr	r3, [pc, #144]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049c6:	4a23      	ldr	r2, [pc, #140]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049d0:	4b20      	ldr	r3, [pc, #128]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2232      	movs	r2, #50	@ 0x32
 80049e6:	fb02 f303 	mul.w	r3, r2, r3
 80049ea:	4a1c      	ldr	r2, [pc, #112]	@ (8004a5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	0c9b      	lsrs	r3, r3, #18
 80049f2:	3301      	adds	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049f6:	e002      	b.n	80049fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049fe:	4b15      	ldr	r3, [pc, #84]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a0a:	d102      	bne.n	8004a12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f2      	bne.n	80049f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a12:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a1e:	d112      	bne.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e011      	b.n	8004a48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a24:	4b0b      	ldr	r3, [pc, #44]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a34:	e007      	b.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a36:	4b07      	ldr	r3, [pc, #28]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a3e:	4a05      	ldr	r2, [pc, #20]	@ (8004a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40007000 	.word	0x40007000
 8004a58:	20000000 	.word	0x20000000
 8004a5c:	431bde83 	.word	0x431bde83

08004a60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	4a04      	ldr	r2, [pc, #16]	@ (8004a7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a6e:	6093      	str	r3, [r2, #8]
}
 8004a70:	bf00      	nop
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40007000 	.word	0x40007000

08004a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e2fe      	b.n	8005090 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d075      	beq.n	8004b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9e:	4b97      	ldr	r3, [pc, #604]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa8:	4b94      	ldr	r3, [pc, #592]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d102      	bne.n	8004abe <HAL_RCC_OscConfig+0x3e>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d002      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x44>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d10b      	bne.n	8004adc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac4:	4b8d      	ldr	r3, [pc, #564]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d05b      	beq.n	8004b88 <HAL_RCC_OscConfig+0x108>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d157      	bne.n	8004b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e2d9      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae4:	d106      	bne.n	8004af4 <HAL_RCC_OscConfig+0x74>
 8004ae6:	4b85      	ldr	r3, [pc, #532]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a84      	ldr	r2, [pc, #528]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e01d      	b.n	8004b30 <HAL_RCC_OscConfig+0xb0>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCC_OscConfig+0x98>
 8004afe:	4b7f      	ldr	r3, [pc, #508]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7e      	ldr	r2, [pc, #504]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e00b      	b.n	8004b30 <HAL_RCC_OscConfig+0xb0>
 8004b18:	4b78      	ldr	r3, [pc, #480]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a77      	ldr	r2, [pc, #476]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4b75      	ldr	r3, [pc, #468]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a74      	ldr	r2, [pc, #464]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d013      	beq.n	8004b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fc f83e 	bl	8000bb8 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b40:	f7fc f83a 	bl	8000bb8 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	@ 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e29e      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b52:	4b6a      	ldr	r3, [pc, #424]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0xc0>
 8004b5e:	e014      	b.n	8004b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fc f82a 	bl	8000bb8 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b68:	f7fc f826 	bl	8000bb8 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	@ 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e28a      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b7a:	4b60      	ldr	r3, [pc, #384]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0xe8>
 8004b86:	e000      	b.n	8004b8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d075      	beq.n	8004c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b96:	4b59      	ldr	r3, [pc, #356]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ba0:	4b56      	ldr	r3, [pc, #344]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	d102      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x136>
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d002      	beq.n	8004bbc <HAL_RCC_OscConfig+0x13c>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d11f      	bne.n	8004bfc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x154>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e25d      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd4:	4b49      	ldr	r3, [pc, #292]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	061b      	lsls	r3, r3, #24
 8004be2:	4946      	ldr	r1, [pc, #280]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004be8:	4b45      	ldr	r3, [pc, #276]	@ (8004d00 <HAL_RCC_OscConfig+0x280>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fb ff97 	bl	8000b20 <HAL_InitTick>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d043      	beq.n	8004c80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e249      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d023      	beq.n	8004c4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c04:	4b3d      	ldr	r3, [pc, #244]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a3c      	ldr	r2, [pc, #240]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c10:	f7fb ffd2 	bl	8000bb8 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c18:	f7fb ffce 	bl	8000bb8 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e232      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c2a:	4b34      	ldr	r3, [pc, #208]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c36:	4b31      	ldr	r3, [pc, #196]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	061b      	lsls	r3, r3, #24
 8004c44:	492d      	ldr	r1, [pc, #180]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	604b      	str	r3, [r1, #4]
 8004c4a:	e01a      	b.n	8004c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2a      	ldr	r2, [pc, #168]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004c52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fb ffae 	bl	8000bb8 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c60:	f7fb ffaa 	bl	8000bb8 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e20e      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c72:	4b22      	ldr	r3, [pc, #136]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x1e0>
 8004c7e:	e000      	b.n	8004c82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d041      	beq.n	8004d12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c96:	4b19      	ldr	r3, [pc, #100]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c9c:	4a17      	ldr	r2, [pc, #92]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca6:	f7fb ff87 	bl	8000bb8 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cae:	f7fb ff83 	bl	8000bb8 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e1e7      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0ef      	beq.n	8004cae <HAL_RCC_OscConfig+0x22e>
 8004cce:	e020      	b.n	8004d12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd6:	4a09      	ldr	r2, [pc, #36]	@ (8004cfc <HAL_RCC_OscConfig+0x27c>)
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce0:	f7fb ff6a 	bl	8000bb8 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ce6:	e00d      	b.n	8004d04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce8:	f7fb ff66 	bl	8000bb8 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d906      	bls.n	8004d04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e1ca      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d04:	4b8c      	ldr	r3, [pc, #560]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1ea      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80a6 	beq.w	8004e6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d20:	2300      	movs	r3, #0
 8004d22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d24:	4b84      	ldr	r3, [pc, #528]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_RCC_OscConfig+0x2b4>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <HAL_RCC_OscConfig+0x2b6>
 8004d34:	2300      	movs	r3, #0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00d      	beq.n	8004d56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d46:	4b7c      	ldr	r3, [pc, #496]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d52:	2301      	movs	r3, #1
 8004d54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d56:	4b79      	ldr	r3, [pc, #484]	@ (8004f3c <HAL_RCC_OscConfig+0x4bc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d118      	bne.n	8004d94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d62:	4b76      	ldr	r3, [pc, #472]	@ (8004f3c <HAL_RCC_OscConfig+0x4bc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a75      	ldr	r2, [pc, #468]	@ (8004f3c <HAL_RCC_OscConfig+0x4bc>)
 8004d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6e:	f7fb ff23 	bl	8000bb8 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d76:	f7fb ff1f 	bl	8000bb8 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e183      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d88:	4b6c      	ldr	r3, [pc, #432]	@ (8004f3c <HAL_RCC_OscConfig+0x4bc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d108      	bne.n	8004dae <HAL_RCC_OscConfig+0x32e>
 8004d9c:	4b66      	ldr	r3, [pc, #408]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da2:	4a65      	ldr	r2, [pc, #404]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dac:	e024      	b.n	8004df8 <HAL_RCC_OscConfig+0x378>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	d110      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x358>
 8004db6:	4b60      	ldr	r3, [pc, #384]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbc:	4a5e      	ldr	r2, [pc, #376]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004dbe:	f043 0304 	orr.w	r3, r3, #4
 8004dc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dcc:	4a5a      	ldr	r2, [pc, #360]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dd6:	e00f      	b.n	8004df8 <HAL_RCC_OscConfig+0x378>
 8004dd8:	4b57      	ldr	r3, [pc, #348]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dde:	4a56      	ldr	r2, [pc, #344]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004de8:	4b53      	ldr	r3, [pc, #332]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dee:	4a52      	ldr	r2, [pc, #328]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004df0:	f023 0304 	bic.w	r3, r3, #4
 8004df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d016      	beq.n	8004e2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fb feda 	bl	8000bb8 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e06:	e00a      	b.n	8004e1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e08:	f7fb fed6 	bl	8000bb8 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e138      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e1e:	4b46      	ldr	r3, [pc, #280]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ed      	beq.n	8004e08 <HAL_RCC_OscConfig+0x388>
 8004e2c:	e015      	b.n	8004e5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2e:	f7fb fec3 	bl	8000bb8 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e34:	e00a      	b.n	8004e4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e36:	f7fb febf 	bl	8000bb8 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e121      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1ed      	bne.n	8004e36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e5a:	7ffb      	ldrb	r3, [r7, #31]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e60:	4b35      	ldr	r3, [pc, #212]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e64:	4a34      	ldr	r2, [pc, #208]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d03c      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01c      	beq.n	8004eba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e80:	4b2d      	ldr	r3, [pc, #180]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e86:	4a2c      	ldr	r2, [pc, #176]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e90:	f7fb fe92 	bl	8000bb8 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e98:	f7fb fe8e 	bl	8000bb8 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e0f2      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eaa:	4b23      	ldr	r3, [pc, #140]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0ef      	beq.n	8004e98 <HAL_RCC_OscConfig+0x418>
 8004eb8:	e01b      	b.n	8004ef2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eba:	4b1f      	ldr	r3, [pc, #124]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eca:	f7fb fe75 	bl	8000bb8 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ed2:	f7fb fe71 	bl	8000bb8 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e0d5      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ee4:	4b14      	ldr	r3, [pc, #80]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1ef      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 80c9 	beq.w	800508e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004efc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 030c 	and.w	r3, r3, #12
 8004f04:	2b0c      	cmp	r3, #12
 8004f06:	f000 8083 	beq.w	8005010 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d15e      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f12:	4b09      	ldr	r3, [pc, #36]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a08      	ldr	r2, [pc, #32]	@ (8004f38 <HAL_RCC_OscConfig+0x4b8>)
 8004f18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7fb fe4b 	bl	8000bb8 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f24:	e00c      	b.n	8004f40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f26:	f7fb fe47 	bl	8000bb8 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d905      	bls.n	8004f40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e0ab      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f40:	4b55      	ldr	r3, [pc, #340]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ec      	bne.n	8004f26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f4c:	4b52      	ldr	r3, [pc, #328]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	4b52      	ldr	r3, [pc, #328]	@ (800509c <HAL_RCC_OscConfig+0x61c>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6a11      	ldr	r1, [r2, #32]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f5c:	3a01      	subs	r2, #1
 8004f5e:	0112      	lsls	r2, r2, #4
 8004f60:	4311      	orrs	r1, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f66:	0212      	lsls	r2, r2, #8
 8004f68:	4311      	orrs	r1, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f6e:	0852      	lsrs	r2, r2, #1
 8004f70:	3a01      	subs	r2, #1
 8004f72:	0552      	lsls	r2, r2, #21
 8004f74:	4311      	orrs	r1, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f7a:	0852      	lsrs	r2, r2, #1
 8004f7c:	3a01      	subs	r2, #1
 8004f7e:	0652      	lsls	r2, r2, #25
 8004f80:	4311      	orrs	r1, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f86:	06d2      	lsls	r2, r2, #27
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	4943      	ldr	r1, [pc, #268]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f90:	4b41      	ldr	r3, [pc, #260]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a40      	ldr	r2, [pc, #256]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8004f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4a3d      	ldr	r2, [pc, #244]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8004fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fa6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fb fe06 	bl	8000bb8 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fb fe02 	bl	8000bb8 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e066      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc2:	4b35      	ldr	r3, [pc, #212]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x530>
 8004fce:	e05e      	b.n	800508e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd0:	4b31      	ldr	r3, [pc, #196]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a30      	ldr	r2, [pc, #192]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8004fd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fb fdec 	bl	8000bb8 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fb fde8 	bl	8000bb8 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e04c      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff6:	4b28      	ldr	r3, [pc, #160]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005002:	4b25      	ldr	r3, [pc, #148]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	4924      	ldr	r1, [pc, #144]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 8005008:	4b25      	ldr	r3, [pc, #148]	@ (80050a0 <HAL_RCC_OscConfig+0x620>)
 800500a:	4013      	ands	r3, r2
 800500c:	60cb      	str	r3, [r1, #12]
 800500e:	e03e      	b.n	800508e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e039      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800501c:	4b1e      	ldr	r3, [pc, #120]	@ (8005098 <HAL_RCC_OscConfig+0x618>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f003 0203 	and.w	r2, r3, #3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	429a      	cmp	r2, r3
 800502e:	d12c      	bne.n	800508a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503a:	3b01      	subs	r3, #1
 800503c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503e:	429a      	cmp	r2, r3
 8005040:	d123      	bne.n	800508a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800504e:	429a      	cmp	r2, r3
 8005050:	d11b      	bne.n	800508a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800505e:	429a      	cmp	r2, r3
 8005060:	d113      	bne.n	800508a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	3b01      	subs	r3, #1
 8005070:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d109      	bne.n	800508a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	3b01      	subs	r3, #1
 8005084:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d001      	beq.n	800508e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000
 800509c:	019f800c 	.word	0x019f800c
 80050a0:	feeefffc 	.word	0xfeeefffc

080050a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e11e      	b.n	80052fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050bc:	4b91      	ldr	r3, [pc, #580]	@ (8005304 <HAL_RCC_ClockConfig+0x260>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d910      	bls.n	80050ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ca:	4b8e      	ldr	r3, [pc, #568]	@ (8005304 <HAL_RCC_ClockConfig+0x260>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 020f 	bic.w	r2, r3, #15
 80050d2:	498c      	ldr	r1, [pc, #560]	@ (8005304 <HAL_RCC_ClockConfig+0x260>)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b8a      	ldr	r3, [pc, #552]	@ (8005304 <HAL_RCC_ClockConfig+0x260>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e106      	b.n	80052fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d073      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d129      	bne.n	8005154 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005100:	4b81      	ldr	r3, [pc, #516]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0f4      	b.n	80052fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005110:	f000 f964 	bl	80053dc <RCC_GetSysClockFreqFromPLLSource>
 8005114:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4a7c      	ldr	r2, [pc, #496]	@ (800530c <HAL_RCC_ClockConfig+0x268>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d93f      	bls.n	800519e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800511e:	4b7a      	ldr	r3, [pc, #488]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005132:	2b00      	cmp	r3, #0
 8005134:	d033      	beq.n	800519e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800513a:	2b00      	cmp	r3, #0
 800513c:	d12f      	bne.n	800519e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800513e:	4b72      	ldr	r3, [pc, #456]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005146:	4a70      	ldr	r2, [pc, #448]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 8005148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800514e:	2380      	movs	r3, #128	@ 0x80
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	e024      	b.n	800519e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d107      	bne.n	800516c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800515c:	4b6a      	ldr	r3, [pc, #424]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d109      	bne.n	800517c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e0c6      	b.n	80052fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800516c:	4b66      	ldr	r3, [pc, #408]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0be      	b.n	80052fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800517c:	f000 f8ce 	bl	800531c <HAL_RCC_GetSysClockFreq>
 8005180:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4a61      	ldr	r2, [pc, #388]	@ (800530c <HAL_RCC_ClockConfig+0x268>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d909      	bls.n	800519e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800518a:	4b5f      	ldr	r3, [pc, #380]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005192:	4a5d      	ldr	r2, [pc, #372]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 8005194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005198:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800519a:	2380      	movs	r3, #128	@ 0x80
 800519c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800519e:	4b5a      	ldr	r3, [pc, #360]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f023 0203 	bic.w	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	4957      	ldr	r1, [pc, #348]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b0:	f7fb fd02 	bl	8000bb8 <HAL_GetTick>
 80051b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b6:	e00a      	b.n	80051ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b8:	f7fb fcfe 	bl	8000bb8 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e095      	b.n	80052fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ce:	4b4e      	ldr	r3, [pc, #312]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 020c 	and.w	r2, r3, #12
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	429a      	cmp	r2, r3
 80051de:	d1eb      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d023      	beq.n	8005234 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051f8:	4b43      	ldr	r3, [pc, #268]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	4a42      	ldr	r2, [pc, #264]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 80051fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005202:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005210:	4b3d      	ldr	r3, [pc, #244]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005218:	4a3b      	ldr	r2, [pc, #236]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 800521a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800521e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005220:	4b39      	ldr	r3, [pc, #228]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	4936      	ldr	r1, [pc, #216]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
 8005232:	e008      	b.n	8005246 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b80      	cmp	r3, #128	@ 0x80
 8005238:	d105      	bne.n	8005246 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800523a:	4b33      	ldr	r3, [pc, #204]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	4a32      	ldr	r2, [pc, #200]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 8005240:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005244:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005246:	4b2f      	ldr	r3, [pc, #188]	@ (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d21d      	bcs.n	8005290 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005254:	4b2b      	ldr	r3, [pc, #172]	@ (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f023 020f 	bic.w	r2, r3, #15
 800525c:	4929      	ldr	r1, [pc, #164]	@ (8005304 <HAL_RCC_ClockConfig+0x260>)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	4313      	orrs	r3, r2
 8005262:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005264:	f7fb fca8 	bl	8000bb8 <HAL_GetTick>
 8005268:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800526a:	e00a      	b.n	8005282 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800526c:	f7fb fca4 	bl	8000bb8 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e03b      	b.n	80052fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005282:	4b20      	ldr	r3, [pc, #128]	@ (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d1ed      	bne.n	800526c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d008      	beq.n	80052ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800529c:	4b1a      	ldr	r3, [pc, #104]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4917      	ldr	r1, [pc, #92]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ba:	4b13      	ldr	r3, [pc, #76]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	490f      	ldr	r1, [pc, #60]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052ce:	f000 f825 	bl	800531c <HAL_RCC_GetSysClockFreq>
 80052d2:	4602      	mov	r2, r0
 80052d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <HAL_RCC_ClockConfig+0x264>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	490c      	ldr	r1, [pc, #48]	@ (8005310 <HAL_RCC_ClockConfig+0x26c>)
 80052e0:	5ccb      	ldrb	r3, [r1, r3]
 80052e2:	f003 031f 	and.w	r3, r3, #31
 80052e6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005314 <HAL_RCC_ClockConfig+0x270>)
 80052ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005318 <HAL_RCC_ClockConfig+0x274>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fb fc14 	bl	8000b20 <HAL_InitTick>
 80052f8:	4603      	mov	r3, r0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40022000 	.word	0x40022000
 8005308:	40021000 	.word	0x40021000
 800530c:	04c4b400 	.word	0x04c4b400
 8005310:	0800afa4 	.word	0x0800afa4
 8005314:	20000000 	.word	0x20000000
 8005318:	20000004 	.word	0x20000004

0800531c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005322:	4b2c      	ldr	r3, [pc, #176]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b04      	cmp	r3, #4
 800532c:	d102      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800532e:	4b2a      	ldr	r3, [pc, #168]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e047      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005334:	4b27      	ldr	r3, [pc, #156]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 030c 	and.w	r3, r3, #12
 800533c:	2b08      	cmp	r3, #8
 800533e:	d102      	bne.n	8005346 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005340:	4b25      	ldr	r3, [pc, #148]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	e03e      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005346:	4b23      	ldr	r3, [pc, #140]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b0c      	cmp	r3, #12
 8005350:	d136      	bne.n	80053c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005352:	4b20      	ldr	r3, [pc, #128]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800535c:	4b1d      	ldr	r3, [pc, #116]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	3301      	adds	r3, #1
 8005368:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b03      	cmp	r3, #3
 800536e:	d10c      	bne.n	800538a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005370:	4a19      	ldr	r2, [pc, #100]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	4a16      	ldr	r2, [pc, #88]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800537a:	68d2      	ldr	r2, [r2, #12]
 800537c:	0a12      	lsrs	r2, r2, #8
 800537e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	617b      	str	r3, [r7, #20]
      break;
 8005388:	e00c      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800538a:	4a13      	ldr	r2, [pc, #76]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005392:	4a10      	ldr	r2, [pc, #64]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005394:	68d2      	ldr	r2, [r2, #12]
 8005396:	0a12      	lsrs	r2, r2, #8
 8005398:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800539c:	fb02 f303 	mul.w	r3, r2, r3
 80053a0:	617b      	str	r3, [r7, #20]
      break;
 80053a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	0e5b      	lsrs	r3, r3, #25
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	3301      	adds	r3, #1
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	e001      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053c4:	693b      	ldr	r3, [r7, #16]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40021000 	.word	0x40021000
 80053d8:	00f42400 	.word	0x00f42400

080053dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053e2:	4b1e      	ldr	r3, [pc, #120]	@ (800545c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053ec:	4b1b      	ldr	r3, [pc, #108]	@ (800545c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	3301      	adds	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d10c      	bne.n	800541a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005400:	4a17      	ldr	r2, [pc, #92]	@ (8005460 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	fbb2 f3f3 	udiv	r3, r2, r3
 8005408:	4a14      	ldr	r2, [pc, #80]	@ (800545c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800540a:	68d2      	ldr	r2, [r2, #12]
 800540c:	0a12      	lsrs	r2, r2, #8
 800540e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005412:	fb02 f303 	mul.w	r3, r2, r3
 8005416:	617b      	str	r3, [r7, #20]
    break;
 8005418:	e00c      	b.n	8005434 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800541a:	4a11      	ldr	r2, [pc, #68]	@ (8005460 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005422:	4a0e      	ldr	r2, [pc, #56]	@ (800545c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005424:	68d2      	ldr	r2, [r2, #12]
 8005426:	0a12      	lsrs	r2, r2, #8
 8005428:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800542c:	fb02 f303 	mul.w	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]
    break;
 8005432:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005434:	4b09      	ldr	r3, [pc, #36]	@ (800545c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	0e5b      	lsrs	r3, r3, #25
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	3301      	adds	r3, #1
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	fbb2 f3f3 	udiv	r3, r2, r3
 800544c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800544e:	687b      	ldr	r3, [r7, #4]
}
 8005450:	4618      	mov	r0, r3
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40021000 	.word	0x40021000
 8005460:	00f42400 	.word	0x00f42400

08005464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800546c:	2300      	movs	r3, #0
 800546e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005470:	2300      	movs	r3, #0
 8005472:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8098 	beq.w	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005482:	2300      	movs	r3, #0
 8005484:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005486:	4b43      	ldr	r3, [pc, #268]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10d      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005492:	4b40      	ldr	r3, [pc, #256]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005496:	4a3f      	ldr	r2, [pc, #252]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549c:	6593      	str	r3, [r2, #88]	@ 0x58
 800549e:	4b3d      	ldr	r3, [pc, #244]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054aa:	2301      	movs	r3, #1
 80054ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a39      	ldr	r2, [pc, #228]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054ba:	f7fb fb7d 	bl	8000bb8 <HAL_GetTick>
 80054be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054c0:	e009      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c2:	f7fb fb79 	bl	8000bb8 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d902      	bls.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	74fb      	strb	r3, [r7, #19]
        break;
 80054d4:	e005      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054d6:	4b30      	ldr	r3, [pc, #192]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0ef      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d159      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054e8:	4b2a      	ldr	r3, [pc, #168]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01e      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	429a      	cmp	r2, r3
 8005502:	d019      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005504:	4b23      	ldr	r3, [pc, #140]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800550e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005510:	4b20      	ldr	r3, [pc, #128]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005516:	4a1f      	ldr	r2, [pc, #124]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800551c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005520:	4b1c      	ldr	r3, [pc, #112]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005526:	4a1b      	ldr	r2, [pc, #108]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800552c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005530:	4a18      	ldr	r2, [pc, #96]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d016      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005542:	f7fb fb39 	bl	8000bb8 <HAL_GetTick>
 8005546:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005548:	e00b      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554a:	f7fb fb35 	bl	8000bb8 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005558:	4293      	cmp	r3, r2
 800555a:	d902      	bls.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	74fb      	strb	r3, [r7, #19]
            break;
 8005560:	e006      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005562:	4b0c      	ldr	r3, [pc, #48]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0ec      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10b      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005576:	4b07      	ldr	r3, [pc, #28]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005584:	4903      	ldr	r1, [pc, #12]	@ (8005594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800558c:	e008      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	74bb      	strb	r3, [r7, #18]
 8005592:	e005      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005594:	40021000 	.word	0x40021000
 8005598:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055a0:	7c7b      	ldrb	r3, [r7, #17]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d105      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a6:	4ba6      	ldr	r3, [pc, #664]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055aa:	4aa5      	ldr	r2, [pc, #660]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055be:	4ba0      	ldr	r3, [pc, #640]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c4:	f023 0203 	bic.w	r2, r3, #3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	499c      	ldr	r1, [pc, #624]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055e0:	4b97      	ldr	r3, [pc, #604]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e6:	f023 020c 	bic.w	r2, r3, #12
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	4994      	ldr	r1, [pc, #592]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005602:	4b8f      	ldr	r3, [pc, #572]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005608:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	498b      	ldr	r1, [pc, #556]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005624:	4b86      	ldr	r3, [pc, #536]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	4983      	ldr	r1, [pc, #524]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005646:	4b7e      	ldr	r3, [pc, #504]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	497a      	ldr	r1, [pc, #488]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005668:	4b75      	ldr	r3, [pc, #468]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	4972      	ldr	r1, [pc, #456]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800568a:	4b6d      	ldr	r3, [pc, #436]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005690:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	4969      	ldr	r1, [pc, #420]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056ac:	4b64      	ldr	r3, [pc, #400]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	4961      	ldr	r1, [pc, #388]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056dc:	4958      	ldr	r1, [pc, #352]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d015      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056f0:	4b53      	ldr	r3, [pc, #332]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fe:	4950      	ldr	r1, [pc, #320]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800570e:	d105      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005710:	4b4b      	ldr	r3, [pc, #300]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4a4a      	ldr	r2, [pc, #296]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800571a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005724:	2b00      	cmp	r3, #0
 8005726:	d015      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005728:	4b45      	ldr	r3, [pc, #276]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005736:	4942      	ldr	r1, [pc, #264]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005746:	d105      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005748:	4b3d      	ldr	r3, [pc, #244]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4a3c      	ldr	r2, [pc, #240]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005752:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d015      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005760:	4b37      	ldr	r3, [pc, #220]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005766:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576e:	4934      	ldr	r1, [pc, #208]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800577e:	d105      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005780:	4b2f      	ldr	r3, [pc, #188]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4a2e      	ldr	r2, [pc, #184]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800578a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d015      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005798:	4b29      	ldr	r3, [pc, #164]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a6:	4926      	ldr	r1, [pc, #152]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057b6:	d105      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057b8:	4b21      	ldr	r3, [pc, #132]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	4a20      	ldr	r2, [pc, #128]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d015      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057de:	4918      	ldr	r1, [pc, #96]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ee:	d105      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f0:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a12      	ldr	r2, [pc, #72]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d015      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005808:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005816:	490a      	ldr	r1, [pc, #40]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005826:	d105      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005828:	4b05      	ldr	r3, [pc, #20]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	4a04      	ldr	r2, [pc, #16]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800582e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005832:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005834:	7cbb      	ldrb	r3, [r7, #18]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000

08005844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e049      	b.n	80058ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fa ffe2 	bl	8000834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f000 fd26 	bl	80062d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e049      	b.n	8005998 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d106      	bne.n	800591e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f841 	bl	80059a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f000 fccf 	bl	80062d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d109      	bne.n	80059d8 <HAL_TIM_PWM_Start+0x24>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	bf14      	ite	ne
 80059d0:	2301      	movne	r3, #1
 80059d2:	2300      	moveq	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	e03c      	b.n	8005a52 <HAL_TIM_PWM_Start+0x9e>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d109      	bne.n	80059f2 <HAL_TIM_PWM_Start+0x3e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	bf14      	ite	ne
 80059ea:	2301      	movne	r3, #1
 80059ec:	2300      	moveq	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	e02f      	b.n	8005a52 <HAL_TIM_PWM_Start+0x9e>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d109      	bne.n	8005a0c <HAL_TIM_PWM_Start+0x58>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	bf14      	ite	ne
 8005a04:	2301      	movne	r3, #1
 8005a06:	2300      	moveq	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	e022      	b.n	8005a52 <HAL_TIM_PWM_Start+0x9e>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b0c      	cmp	r3, #12
 8005a10:	d109      	bne.n	8005a26 <HAL_TIM_PWM_Start+0x72>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	bf14      	ite	ne
 8005a1e:	2301      	movne	r3, #1
 8005a20:	2300      	moveq	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	e015      	b.n	8005a52 <HAL_TIM_PWM_Start+0x9e>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d109      	bne.n	8005a40 <HAL_TIM_PWM_Start+0x8c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	bf14      	ite	ne
 8005a38:	2301      	movne	r3, #1
 8005a3a:	2300      	moveq	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	e008      	b.n	8005a52 <HAL_TIM_PWM_Start+0x9e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	bf14      	ite	ne
 8005a4c:	2301      	movne	r3, #1
 8005a4e:	2300      	moveq	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e097      	b.n	8005b8a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIM_PWM_Start+0xb6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a68:	e023      	b.n	8005ab2 <HAL_TIM_PWM_Start+0xfe>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d104      	bne.n	8005a7a <HAL_TIM_PWM_Start+0xc6>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a78:	e01b      	b.n	8005ab2 <HAL_TIM_PWM_Start+0xfe>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d104      	bne.n	8005a8a <HAL_TIM_PWM_Start+0xd6>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a88:	e013      	b.n	8005ab2 <HAL_TIM_PWM_Start+0xfe>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b0c      	cmp	r3, #12
 8005a8e:	d104      	bne.n	8005a9a <HAL_TIM_PWM_Start+0xe6>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a98:	e00b      	b.n	8005ab2 <HAL_TIM_PWM_Start+0xfe>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIM_PWM_Start+0xf6>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aa8:	e003      	b.n	8005ab2 <HAL_TIM_PWM_Start+0xfe>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2202      	movs	r2, #2
 8005aae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 f838 	bl	8006b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a33      	ldr	r2, [pc, #204]	@ (8005b94 <HAL_TIM_PWM_Start+0x1e0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d013      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x13e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a32      	ldr	r2, [pc, #200]	@ (8005b98 <HAL_TIM_PWM_Start+0x1e4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00e      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x13e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a30      	ldr	r2, [pc, #192]	@ (8005b9c <HAL_TIM_PWM_Start+0x1e8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d009      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x13e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba0 <HAL_TIM_PWM_Start+0x1ec>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d004      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x13e>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a2d      	ldr	r2, [pc, #180]	@ (8005ba4 <HAL_TIM_PWM_Start+0x1f0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d101      	bne.n	8005af6 <HAL_TIM_PWM_Start+0x142>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <HAL_TIM_PWM_Start+0x144>
 8005af6:	2300      	movs	r3, #0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a20      	ldr	r2, [pc, #128]	@ (8005b94 <HAL_TIM_PWM_Start+0x1e0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d018      	beq.n	8005b48 <HAL_TIM_PWM_Start+0x194>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1e:	d013      	beq.n	8005b48 <HAL_TIM_PWM_Start+0x194>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a20      	ldr	r2, [pc, #128]	@ (8005ba8 <HAL_TIM_PWM_Start+0x1f4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00e      	beq.n	8005b48 <HAL_TIM_PWM_Start+0x194>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bac <HAL_TIM_PWM_Start+0x1f8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d009      	beq.n	8005b48 <HAL_TIM_PWM_Start+0x194>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a17      	ldr	r2, [pc, #92]	@ (8005b98 <HAL_TIM_PWM_Start+0x1e4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_TIM_PWM_Start+0x194>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a16      	ldr	r2, [pc, #88]	@ (8005b9c <HAL_TIM_PWM_Start+0x1e8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d115      	bne.n	8005b74 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	4b18      	ldr	r3, [pc, #96]	@ (8005bb0 <HAL_TIM_PWM_Start+0x1fc>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b06      	cmp	r3, #6
 8005b58:	d015      	beq.n	8005b86 <HAL_TIM_PWM_Start+0x1d2>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b60:	d011      	beq.n	8005b86 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0201 	orr.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b72:	e008      	b.n	8005b86 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e000      	b.n	8005b88 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40012c00 	.word	0x40012c00
 8005b98:	40013400 	.word	0x40013400
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40014400 	.word	0x40014400
 8005ba4:	40014800 	.word	0x40014800
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	40000800 	.word	0x40000800
 8005bb0:	00010007 	.word	0x00010007

08005bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d020      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01b      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0202 	mvn.w	r2, #2
 8005be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fb4a 	bl	8006298 <HAL_TIM_IC_CaptureCallback>
 8005c04:	e005      	b.n	8005c12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fb3c 	bl	8006284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fb4d 	bl	80062ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d020      	beq.n	8005c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01b      	beq.n	8005c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0204 	mvn.w	r2, #4
 8005c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fb24 	bl	8006298 <HAL_TIM_IC_CaptureCallback>
 8005c50:	e005      	b.n	8005c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fb16 	bl	8006284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fb27 	bl	80062ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d020      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01b      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0208 	mvn.w	r2, #8
 8005c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2204      	movs	r2, #4
 8005c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fafe 	bl	8006298 <HAL_TIM_IC_CaptureCallback>
 8005c9c:	e005      	b.n	8005caa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 faf0 	bl	8006284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fb01 	bl	80062ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 0310 	and.w	r3, r3, #16
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d020      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01b      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0210 	mvn.w	r2, #16
 8005ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fad8 	bl	8006298 <HAL_TIM_IC_CaptureCallback>
 8005ce8:	e005      	b.n	8005cf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 faca 	bl	8006284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fadb 	bl	80062ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00c      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0201 	mvn.w	r2, #1
 8005d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 faa8 	bl	8006270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d104      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00c      	beq.n	8005d4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 ffa3 	bl	8006c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00c      	beq.n	8005d72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 ff9b 	bl	8006ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00c      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fa95 	bl	80062c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00c      	beq.n	8005dba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f06f 0220 	mvn.w	r2, #32
 8005db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 ff63 	bl	8006c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 ff6f 	bl	8006cbc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00c      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 ff67 	bl	8006cd0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00c      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 ff5f 	bl	8006ce4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00c      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 ff57 	bl	8006cf8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e4a:	bf00      	nop
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e0ff      	b.n	8006072 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b14      	cmp	r3, #20
 8005e7e:	f200 80f0 	bhi.w	8006062 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e82:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005edd 	.word	0x08005edd
 8005e8c:	08006063 	.word	0x08006063
 8005e90:	08006063 	.word	0x08006063
 8005e94:	08006063 	.word	0x08006063
 8005e98:	08005f1d 	.word	0x08005f1d
 8005e9c:	08006063 	.word	0x08006063
 8005ea0:	08006063 	.word	0x08006063
 8005ea4:	08006063 	.word	0x08006063
 8005ea8:	08005f5f 	.word	0x08005f5f
 8005eac:	08006063 	.word	0x08006063
 8005eb0:	08006063 	.word	0x08006063
 8005eb4:	08006063 	.word	0x08006063
 8005eb8:	08005f9f 	.word	0x08005f9f
 8005ebc:	08006063 	.word	0x08006063
 8005ec0:	08006063 	.word	0x08006063
 8005ec4:	08006063 	.word	0x08006063
 8005ec8:	08005fe1 	.word	0x08005fe1
 8005ecc:	08006063 	.word	0x08006063
 8005ed0:	08006063 	.word	0x08006063
 8005ed4:	08006063 	.word	0x08006063
 8005ed8:	08006021 	.word	0x08006021
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fa92 	bl	800640c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0208 	orr.w	r2, r2, #8
 8005ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0204 	bic.w	r2, r2, #4
 8005f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6999      	ldr	r1, [r3, #24]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	619a      	str	r2, [r3, #24]
      break;
 8005f1a:	e0a5      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fb02 	bl	800652c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6999      	ldr	r1, [r3, #24]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	619a      	str	r2, [r3, #24]
      break;
 8005f5c:	e084      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fb6b 	bl	8006640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0208 	orr.w	r2, r2, #8
 8005f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0204 	bic.w	r2, r2, #4
 8005f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69d9      	ldr	r1, [r3, #28]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	61da      	str	r2, [r3, #28]
      break;
 8005f9c:	e064      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fbd3 	bl	8006750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69d9      	ldr	r1, [r3, #28]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	021a      	lsls	r2, r3, #8
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	61da      	str	r2, [r3, #28]
      break;
 8005fde:	e043      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fc3c 	bl	8006864 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0204 	bic.w	r2, r2, #4
 800600a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800601e:	e023      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fc80 	bl	800692c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800603a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800604a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	021a      	lsls	r2, r3, #8
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006060:	e002      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
      break;
 8006066:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006070:	7dfb      	ldrb	r3, [r7, #23]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop

0800607c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_TIM_ConfigClockSource+0x1c>
 8006094:	2302      	movs	r3, #2
 8006096:	e0de      	b.n	8006256 <HAL_TIM_ConfigClockSource+0x1da>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80060b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a63      	ldr	r2, [pc, #396]	@ (8006260 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	f000 80a9 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1ae>
 80060d8:	4a61      	ldr	r2, [pc, #388]	@ (8006260 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	f200 80ae 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 80060e0:	4a60      	ldr	r2, [pc, #384]	@ (8006264 <HAL_TIM_ConfigClockSource+0x1e8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	f000 80a1 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1ae>
 80060e8:	4a5e      	ldr	r2, [pc, #376]	@ (8006264 <HAL_TIM_ConfigClockSource+0x1e8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	f200 80a6 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 80060f0:	4a5d      	ldr	r2, [pc, #372]	@ (8006268 <HAL_TIM_ConfigClockSource+0x1ec>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	f000 8099 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1ae>
 80060f8:	4a5b      	ldr	r2, [pc, #364]	@ (8006268 <HAL_TIM_ConfigClockSource+0x1ec>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	f200 809e 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 8006100:	4a5a      	ldr	r2, [pc, #360]	@ (800626c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	f000 8091 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1ae>
 8006108:	4a58      	ldr	r2, [pc, #352]	@ (800626c <HAL_TIM_ConfigClockSource+0x1f0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	f200 8096 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 8006110:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006114:	f000 8089 	beq.w	800622a <HAL_TIM_ConfigClockSource+0x1ae>
 8006118:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800611c:	f200 808e 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006124:	d03e      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0x128>
 8006126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800612a:	f200 8087 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 800612e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006132:	f000 8086 	beq.w	8006242 <HAL_TIM_ConfigClockSource+0x1c6>
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613a:	d87f      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 800613c:	2b70      	cmp	r3, #112	@ 0x70
 800613e:	d01a      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0xfa>
 8006140:	2b70      	cmp	r3, #112	@ 0x70
 8006142:	d87b      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 8006144:	2b60      	cmp	r3, #96	@ 0x60
 8006146:	d050      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x16e>
 8006148:	2b60      	cmp	r3, #96	@ 0x60
 800614a:	d877      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 800614c:	2b50      	cmp	r3, #80	@ 0x50
 800614e:	d03c      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x14e>
 8006150:	2b50      	cmp	r3, #80	@ 0x50
 8006152:	d873      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 8006154:	2b40      	cmp	r3, #64	@ 0x40
 8006156:	d058      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x18e>
 8006158:	2b40      	cmp	r3, #64	@ 0x40
 800615a:	d86f      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 800615c:	2b30      	cmp	r3, #48	@ 0x30
 800615e:	d064      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x1ae>
 8006160:	2b30      	cmp	r3, #48	@ 0x30
 8006162:	d86b      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 8006164:	2b20      	cmp	r3, #32
 8006166:	d060      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x1ae>
 8006168:	2b20      	cmp	r3, #32
 800616a:	d867      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x1c0>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d05c      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x1ae>
 8006170:	2b10      	cmp	r3, #16
 8006172:	d05a      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x1ae>
 8006174:	e062      	b.n	800623c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006186:	f000 fcb3 	bl	8006af0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	609a      	str	r2, [r3, #8]
      break;
 80061a2:	e04f      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b4:	f000 fc9c 	bl	8006af0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061c6:	609a      	str	r2, [r3, #8]
      break;
 80061c8:	e03c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 fc0e 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2150      	movs	r1, #80	@ 0x50
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fc67 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 80061e8:	e02c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061f6:	461a      	mov	r2, r3
 80061f8:	f000 fc2d 	bl	8006a56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2160      	movs	r1, #96	@ 0x60
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fc57 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 8006208:	e01c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006216:	461a      	mov	r2, r3
 8006218:	f000 fbee 	bl	80069f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2140      	movs	r1, #64	@ 0x40
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fc47 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 8006228:	e00c      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f000 fc3e 	bl	8006ab6 <TIM_ITRx_SetConfig>
      break;
 800623a:	e003      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
      break;
 8006240:	e000      	b.n	8006244 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	00100070 	.word	0x00100070
 8006264:	00100040 	.word	0x00100040
 8006268:	00100030 	.word	0x00100030
 800626c:	00100020 	.word	0x00100020

08006270 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a42      	ldr	r2, [pc, #264]	@ (80063f0 <TIM_Base_SetConfig+0x11c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00f      	beq.n	800630c <TIM_Base_SetConfig+0x38>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f2:	d00b      	beq.n	800630c <TIM_Base_SetConfig+0x38>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a3f      	ldr	r2, [pc, #252]	@ (80063f4 <TIM_Base_SetConfig+0x120>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d007      	beq.n	800630c <TIM_Base_SetConfig+0x38>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a3e      	ldr	r2, [pc, #248]	@ (80063f8 <TIM_Base_SetConfig+0x124>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_Base_SetConfig+0x38>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a3d      	ldr	r2, [pc, #244]	@ (80063fc <TIM_Base_SetConfig+0x128>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d108      	bne.n	800631e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a33      	ldr	r2, [pc, #204]	@ (80063f0 <TIM_Base_SetConfig+0x11c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01b      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800632c:	d017      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a30      	ldr	r2, [pc, #192]	@ (80063f4 <TIM_Base_SetConfig+0x120>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d013      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2f      	ldr	r2, [pc, #188]	@ (80063f8 <TIM_Base_SetConfig+0x124>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00f      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a2e      	ldr	r2, [pc, #184]	@ (80063fc <TIM_Base_SetConfig+0x128>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00b      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2d      	ldr	r2, [pc, #180]	@ (8006400 <TIM_Base_SetConfig+0x12c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2c      	ldr	r2, [pc, #176]	@ (8006404 <TIM_Base_SetConfig+0x130>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_Base_SetConfig+0x8a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2b      	ldr	r2, [pc, #172]	@ (8006408 <TIM_Base_SetConfig+0x134>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d108      	bne.n	8006370 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a16      	ldr	r2, [pc, #88]	@ (80063f0 <TIM_Base_SetConfig+0x11c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00f      	beq.n	80063bc <TIM_Base_SetConfig+0xe8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a17      	ldr	r2, [pc, #92]	@ (80063fc <TIM_Base_SetConfig+0x128>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00b      	beq.n	80063bc <TIM_Base_SetConfig+0xe8>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a16      	ldr	r2, [pc, #88]	@ (8006400 <TIM_Base_SetConfig+0x12c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d007      	beq.n	80063bc <TIM_Base_SetConfig+0xe8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a15      	ldr	r2, [pc, #84]	@ (8006404 <TIM_Base_SetConfig+0x130>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_Base_SetConfig+0xe8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a14      	ldr	r2, [pc, #80]	@ (8006408 <TIM_Base_SetConfig+0x134>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d103      	bne.n	80063c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d105      	bne.n	80063e2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f023 0201 	bic.w	r2, r3, #1
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	611a      	str	r2, [r3, #16]
  }
}
 80063e2:	bf00      	nop
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40012c00 	.word	0x40012c00
 80063f4:	40000400 	.word	0x40000400
 80063f8:	40000800 	.word	0x40000800
 80063fc:	40013400 	.word	0x40013400
 8006400:	40014000 	.word	0x40014000
 8006404:	40014400 	.word	0x40014400
 8006408:	40014800 	.word	0x40014800

0800640c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	f023 0201 	bic.w	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800643a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f023 0302 	bic.w	r3, r3, #2
 8006458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a2c      	ldr	r2, [pc, #176]	@ (8006518 <TIM_OC1_SetConfig+0x10c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00f      	beq.n	800648c <TIM_OC1_SetConfig+0x80>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a2b      	ldr	r2, [pc, #172]	@ (800651c <TIM_OC1_SetConfig+0x110>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00b      	beq.n	800648c <TIM_OC1_SetConfig+0x80>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a2a      	ldr	r2, [pc, #168]	@ (8006520 <TIM_OC1_SetConfig+0x114>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d007      	beq.n	800648c <TIM_OC1_SetConfig+0x80>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a29      	ldr	r2, [pc, #164]	@ (8006524 <TIM_OC1_SetConfig+0x118>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_OC1_SetConfig+0x80>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a28      	ldr	r2, [pc, #160]	@ (8006528 <TIM_OC1_SetConfig+0x11c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d10c      	bne.n	80064a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f023 0308 	bic.w	r3, r3, #8
 8006492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f023 0304 	bic.w	r3, r3, #4
 80064a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006518 <TIM_OC1_SetConfig+0x10c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00f      	beq.n	80064ce <TIM_OC1_SetConfig+0xc2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a1a      	ldr	r2, [pc, #104]	@ (800651c <TIM_OC1_SetConfig+0x110>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00b      	beq.n	80064ce <TIM_OC1_SetConfig+0xc2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a19      	ldr	r2, [pc, #100]	@ (8006520 <TIM_OC1_SetConfig+0x114>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d007      	beq.n	80064ce <TIM_OC1_SetConfig+0xc2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a18      	ldr	r2, [pc, #96]	@ (8006524 <TIM_OC1_SetConfig+0x118>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d003      	beq.n	80064ce <TIM_OC1_SetConfig+0xc2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a17      	ldr	r2, [pc, #92]	@ (8006528 <TIM_OC1_SetConfig+0x11c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d111      	bne.n	80064f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	621a      	str	r2, [r3, #32]
}
 800650c:	bf00      	nop
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	40012c00 	.word	0x40012c00
 800651c:	40013400 	.word	0x40013400
 8006520:	40014000 	.word	0x40014000
 8006524:	40014400 	.word	0x40014400
 8006528:	40014800 	.word	0x40014800

0800652c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f023 0210 	bic.w	r2, r3, #16
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800655a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800655e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0320 	bic.w	r3, r3, #32
 800657a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a28      	ldr	r2, [pc, #160]	@ (800662c <TIM_OC2_SetConfig+0x100>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_OC2_SetConfig+0x6c>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a27      	ldr	r2, [pc, #156]	@ (8006630 <TIM_OC2_SetConfig+0x104>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d10d      	bne.n	80065b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800659e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a1d      	ldr	r2, [pc, #116]	@ (800662c <TIM_OC2_SetConfig+0x100>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00f      	beq.n	80065dc <TIM_OC2_SetConfig+0xb0>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a1c      	ldr	r2, [pc, #112]	@ (8006630 <TIM_OC2_SetConfig+0x104>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00b      	beq.n	80065dc <TIM_OC2_SetConfig+0xb0>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006634 <TIM_OC2_SetConfig+0x108>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d007      	beq.n	80065dc <TIM_OC2_SetConfig+0xb0>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006638 <TIM_OC2_SetConfig+0x10c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d003      	beq.n	80065dc <TIM_OC2_SetConfig+0xb0>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a19      	ldr	r2, [pc, #100]	@ (800663c <TIM_OC2_SetConfig+0x110>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d113      	bne.n	8006604 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40012c00 	.word	0x40012c00
 8006630:	40013400 	.word	0x40013400
 8006634:	40014000 	.word	0x40014000
 8006638:	40014400 	.word	0x40014400
 800663c:	40014800 	.word	0x40014800

08006640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800666e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800668c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a27      	ldr	r2, [pc, #156]	@ (800673c <TIM_OC3_SetConfig+0xfc>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d003      	beq.n	80066aa <TIM_OC3_SetConfig+0x6a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a26      	ldr	r2, [pc, #152]	@ (8006740 <TIM_OC3_SetConfig+0x100>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10d      	bne.n	80066c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1c      	ldr	r2, [pc, #112]	@ (800673c <TIM_OC3_SetConfig+0xfc>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00f      	beq.n	80066ee <TIM_OC3_SetConfig+0xae>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006740 <TIM_OC3_SetConfig+0x100>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d00b      	beq.n	80066ee <TIM_OC3_SetConfig+0xae>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006744 <TIM_OC3_SetConfig+0x104>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d007      	beq.n	80066ee <TIM_OC3_SetConfig+0xae>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a19      	ldr	r2, [pc, #100]	@ (8006748 <TIM_OC3_SetConfig+0x108>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d003      	beq.n	80066ee <TIM_OC3_SetConfig+0xae>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a18      	ldr	r2, [pc, #96]	@ (800674c <TIM_OC3_SetConfig+0x10c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d113      	bne.n	8006716 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	621a      	str	r2, [r3, #32]
}
 8006730:	bf00      	nop
 8006732:	371c      	adds	r7, #28
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	40012c00 	.word	0x40012c00
 8006740:	40013400 	.word	0x40013400
 8006744:	40014000 	.word	0x40014000
 8006748:	40014400 	.word	0x40014400
 800674c:	40014800 	.word	0x40014800

08006750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800677e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800679e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	031b      	lsls	r3, r3, #12
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a28      	ldr	r2, [pc, #160]	@ (8006850 <TIM_OC4_SetConfig+0x100>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d003      	beq.n	80067bc <TIM_OC4_SetConfig+0x6c>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a27      	ldr	r2, [pc, #156]	@ (8006854 <TIM_OC4_SetConfig+0x104>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d10d      	bne.n	80067d8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	031b      	lsls	r3, r3, #12
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a1d      	ldr	r2, [pc, #116]	@ (8006850 <TIM_OC4_SetConfig+0x100>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_OC4_SetConfig+0xb0>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006854 <TIM_OC4_SetConfig+0x104>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_OC4_SetConfig+0xb0>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006858 <TIM_OC4_SetConfig+0x108>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_OC4_SetConfig+0xb0>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a1a      	ldr	r2, [pc, #104]	@ (800685c <TIM_OC4_SetConfig+0x10c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_OC4_SetConfig+0xb0>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a19      	ldr	r2, [pc, #100]	@ (8006860 <TIM_OC4_SetConfig+0x110>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d113      	bne.n	8006828 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006806:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800680e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	019b      	lsls	r3, r3, #6
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	019b      	lsls	r3, r3, #6
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40013400 	.word	0x40013400
 8006858:	40014000 	.word	0x40014000
 800685c:	40014400 	.word	0x40014400
 8006860:	40014800 	.word	0x40014800

08006864 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	041b      	lsls	r3, r3, #16
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a17      	ldr	r2, [pc, #92]	@ (8006918 <TIM_OC5_SetConfig+0xb4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00f      	beq.n	80068de <TIM_OC5_SetConfig+0x7a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a16      	ldr	r2, [pc, #88]	@ (800691c <TIM_OC5_SetConfig+0xb8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00b      	beq.n	80068de <TIM_OC5_SetConfig+0x7a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a15      	ldr	r2, [pc, #84]	@ (8006920 <TIM_OC5_SetConfig+0xbc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d007      	beq.n	80068de <TIM_OC5_SetConfig+0x7a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a14      	ldr	r2, [pc, #80]	@ (8006924 <TIM_OC5_SetConfig+0xc0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d003      	beq.n	80068de <TIM_OC5_SetConfig+0x7a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a13      	ldr	r2, [pc, #76]	@ (8006928 <TIM_OC5_SetConfig+0xc4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d109      	bne.n	80068f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	621a      	str	r2, [r3, #32]
}
 800690c:	bf00      	nop
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40013400 	.word	0x40013400
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800

0800692c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	051b      	lsls	r3, r3, #20
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a18      	ldr	r2, [pc, #96]	@ (80069e4 <TIM_OC6_SetConfig+0xb8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00f      	beq.n	80069a8 <TIM_OC6_SetConfig+0x7c>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a17      	ldr	r2, [pc, #92]	@ (80069e8 <TIM_OC6_SetConfig+0xbc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00b      	beq.n	80069a8 <TIM_OC6_SetConfig+0x7c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a16      	ldr	r2, [pc, #88]	@ (80069ec <TIM_OC6_SetConfig+0xc0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d007      	beq.n	80069a8 <TIM_OC6_SetConfig+0x7c>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a15      	ldr	r2, [pc, #84]	@ (80069f0 <TIM_OC6_SetConfig+0xc4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_OC6_SetConfig+0x7c>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a14      	ldr	r2, [pc, #80]	@ (80069f4 <TIM_OC6_SetConfig+0xc8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d109      	bne.n	80069bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	029b      	lsls	r3, r3, #10
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	621a      	str	r2, [r3, #32]
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40012c00 	.word	0x40012c00
 80069e8:	40013400 	.word	0x40013400
 80069ec:	40014000 	.word	0x40014000
 80069f0:	40014400 	.word	0x40014400
 80069f4:	40014800 	.word	0x40014800

080069f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f023 030a 	bic.w	r3, r3, #10
 8006a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b087      	sub	sp, #28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f023 0210 	bic.w	r2, r3, #16
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	031b      	lsls	r3, r3, #12
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f043 0307 	orr.w	r3, r3, #7
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	609a      	str	r2, [r3, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	021a      	lsls	r2, r3, #8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	609a      	str	r2, [r3, #8]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	2201      	movs	r2, #1
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1a      	ldr	r2, [r3, #32]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	43db      	mvns	r3, r3
 8006b52:	401a      	ands	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1a      	ldr	r2, [r3, #32]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	fa01 f303 	lsl.w	r3, r1, r3
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e065      	b.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d108      	bne.n	8006bda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006bce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d018      	beq.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c0a:	d013      	beq.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a18      	ldr	r2, [pc, #96]	@ (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00e      	beq.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a17      	ldr	r2, [pc, #92]	@ (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a12      	ldr	r2, [pc, #72]	@ (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d004      	beq.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a13      	ldr	r2, [pc, #76]	@ (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d10c      	bne.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	40012c00 	.word	0x40012c00
 8006c70:	40013400 	.word	0x40013400
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40014000 	.word	0x40014000

08006c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d1c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006d20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d42:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006d46:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	43db      	mvns	r3, r3
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	4013      	ands	r3, r2
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	1d3b      	adds	r3, r7, #4
 8006d7a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b0a7      	sub	sp, #156	@ 0x9c
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dd2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	78db      	ldrb	r3, [r3, #3]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d81f      	bhi.n	8006e1e <USB_ActivateEndpoint+0x72>
 8006dde:	a201      	add	r2, pc, #4	@ (adr r2, 8006de4 <USB_ActivateEndpoint+0x38>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006e11 	.word	0x08006e11
 8006dec:	08006e27 	.word	0x08006e27
 8006df0:	08006e03 	.word	0x08006e03
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006df4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006df8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006dfc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006e00:	e012      	b.n	8006e28 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006e02:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006e06:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006e0a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006e0e:	e00b      	b.n	8006e28 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006e10:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006e14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e18:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006e1c:	e004      	b.n	8006e28 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8006e24:	e000      	b.n	8006e28 <USB_ActivateEndpoint+0x7c>
      break;
 8006e26:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	441a      	add	r2, r3
 8006e32:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006e36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	b21b      	sxth	r3, r3
 8006e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e62:	b21a      	sxth	r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	b21b      	sxth	r3, r3
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	b21b      	sxth	r3, r3
 8006e6e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	441a      	add	r2, r3
 8006e7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	7b1b      	ldrb	r3, [r3, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f040 8180 	bne.w	800719e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8084 	beq.w	8006fb0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	4413      	add	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	00da      	lsls	r2, r3, #3
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	88db      	ldrh	r3, [r3, #6]
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	827b      	strh	r3, [r7, #18]
 8006eea:	8a7b      	ldrh	r3, [r7, #18]
 8006eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d01b      	beq.n	8006f2c <USB_ActivateEndpoint+0x180>
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f0a:	823b      	strh	r3, [r7, #16]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	441a      	add	r2, r3
 8006f16:	8a3b      	ldrh	r3, [r7, #16]
 8006f18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	78db      	ldrb	r3, [r3, #3]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d020      	beq.n	8006f76 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f4a:	81bb      	strh	r3, [r7, #12]
 8006f4c:	89bb      	ldrh	r3, [r7, #12]
 8006f4e:	f083 0320 	eor.w	r3, r3, #32
 8006f52:	81bb      	strh	r3, [r7, #12]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	441a      	add	r2, r3
 8006f5e:	89bb      	ldrh	r3, [r7, #12]
 8006f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	8013      	strh	r3, [r2, #0]
 8006f74:	e3f9      	b.n	800776a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f8c:	81fb      	strh	r3, [r7, #14]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	441a      	add	r2, r3
 8006f98:	89fb      	ldrh	r3, [r7, #14]
 8006f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	8013      	strh	r3, [r2, #0]
 8006fae:	e3dc      	b.n	800776a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc0:	4413      	add	r3, r2
 8006fc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	00da      	lsls	r2, r3, #3
 8006fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fcc:	4413      	add	r3, r2
 8006fce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	88db      	ldrh	r3, [r3, #6]
 8006fd8:	085b      	lsrs	r3, r3, #1
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff4:	4413      	add	r3, r2
 8006ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	00da      	lsls	r2, r3, #3
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	4413      	add	r3, r2
 8007002:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007006:	627b      	str	r3, [r7, #36]	@ 0x24
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007012:	b29a      	uxth	r2, r3
 8007014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007016:	801a      	strh	r2, [r3, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10a      	bne.n	8007036 <USB_ActivateEndpoint+0x28a>
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800702a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702e:	b29a      	uxth	r2, r3
 8007030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007032:	801a      	strh	r2, [r3, #0]
 8007034:	e041      	b.n	80070ba <USB_ActivateEndpoint+0x30e>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b3e      	cmp	r3, #62	@ 0x3e
 800703c:	d81c      	bhi.n	8007078 <USB_ActivateEndpoint+0x2cc>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d004      	beq.n	800705e <USB_ActivateEndpoint+0x2b2>
 8007054:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007058:	3301      	adds	r3, #1
 800705a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29a      	uxth	r2, r3
 8007064:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007068:	b29b      	uxth	r3, r3
 800706a:	029b      	lsls	r3, r3, #10
 800706c:	b29b      	uxth	r3, r3
 800706e:	4313      	orrs	r3, r2
 8007070:	b29a      	uxth	r2, r3
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	801a      	strh	r2, [r3, #0]
 8007076:	e020      	b.n	80070ba <USB_ActivateEndpoint+0x30e>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	2b00      	cmp	r3, #0
 800708c:	d104      	bne.n	8007098 <USB_ActivateEndpoint+0x2ec>
 800708e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007092:	3b01      	subs	r3, #1
 8007094:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29a      	uxth	r2, r3
 800709e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	4313      	orrs	r3, r2
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80070c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80070ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01b      	beq.n	800710a <USB_ActivateEndpoint+0x35e>
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e8:	843b      	strh	r3, [r7, #32]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	441a      	add	r2, r3
 80070f4:	8c3b      	ldrh	r3, [r7, #32]
 80070f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007106:	b29b      	uxth	r3, r3
 8007108:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d124      	bne.n	800715c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29b      	uxth	r3, r3
 8007120:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007128:	83bb      	strh	r3, [r7, #28]
 800712a:	8bbb      	ldrh	r3, [r7, #28]
 800712c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007130:	83bb      	strh	r3, [r7, #28]
 8007132:	8bbb      	ldrh	r3, [r7, #28]
 8007134:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007138:	83bb      	strh	r3, [r7, #28]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	441a      	add	r2, r3
 8007144:	8bbb      	ldrh	r3, [r7, #28]
 8007146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800714a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800714e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007156:	b29b      	uxth	r3, r3
 8007158:	8013      	strh	r3, [r2, #0]
 800715a:	e306      	b.n	800776a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800716e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007172:	83fb      	strh	r3, [r7, #30]
 8007174:	8bfb      	ldrh	r3, [r7, #30]
 8007176:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800717a:	83fb      	strh	r3, [r7, #30]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	8bfb      	ldrh	r3, [r7, #30]
 8007188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800718c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007198:	b29b      	uxth	r3, r3
 800719a:	8013      	strh	r3, [r2, #0]
 800719c:	e2e5      	b.n	800776a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	78db      	ldrb	r3, [r3, #3]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d11e      	bne.n	80071e4 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071bc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80071ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071d6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80071da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071de:	b29b      	uxth	r3, r3
 80071e0:	8013      	strh	r3, [r2, #0]
 80071e2:	e01d      	b.n	8007220 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80071f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071fa:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	441a      	add	r2, r3
 8007208:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800720c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007210:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800721c:	b29b      	uxth	r3, r3
 800721e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800722a:	b29b      	uxth	r3, r3
 800722c:	461a      	mov	r2, r3
 800722e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007230:	4413      	add	r3, r2
 8007232:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	00da      	lsls	r2, r3, #3
 800723a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800723c:	4413      	add	r3, r2
 800723e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007242:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	891b      	ldrh	r3, [r3, #8]
 8007248:	085b      	lsrs	r3, r3, #1
 800724a:	b29b      	uxth	r3, r3
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007252:	801a      	strh	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	677b      	str	r3, [r7, #116]	@ 0x74
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800725e:	b29b      	uxth	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007264:	4413      	add	r3, r2
 8007266:	677b      	str	r3, [r7, #116]	@ 0x74
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	00da      	lsls	r2, r3, #3
 800726e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007270:	4413      	add	r3, r2
 8007272:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007276:	673b      	str	r3, [r7, #112]	@ 0x70
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	895b      	ldrh	r3, [r3, #10]
 800727c:	085b      	lsrs	r3, r3, #1
 800727e:	b29b      	uxth	r3, r3
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007286:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	785b      	ldrb	r3, [r3, #1]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f040 81af 	bne.w	80075f0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80072a2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80072a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d01d      	beq.n	80072ea <USB_ActivateEndpoint+0x53e>
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072c4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	441a      	add	r2, r3
 80072d2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80072d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80072fa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80072fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01d      	beq.n	8007342 <USB_ActivateEndpoint+0x596>
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800731c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	441a      	add	r2, r3
 800732a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800732e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007332:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800733a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d16b      	bne.n	8007422 <USB_ActivateEndpoint+0x676>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007354:	b29b      	uxth	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800735a:	4413      	add	r3, r2
 800735c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	00da      	lsls	r2, r3, #3
 8007364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007366:	4413      	add	r3, r2
 8007368:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800736c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800736e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	b29b      	uxth	r3, r3
 8007374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007378:	b29a      	uxth	r2, r3
 800737a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800737c:	801a      	strh	r2, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <USB_ActivateEndpoint+0x5f0>
 8007386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007394:	b29a      	uxth	r2, r3
 8007396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007398:	801a      	strh	r2, [r3, #0]
 800739a:	e05d      	b.n	8007458 <USB_ActivateEndpoint+0x6ac>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80073a2:	d81c      	bhi.n	80073de <USB_ActivateEndpoint+0x632>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	085b      	lsrs	r3, r3, #1
 80073aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d004      	beq.n	80073c4 <USB_ActivateEndpoint+0x618>
 80073ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073be:	3301      	adds	r3, #1
 80073c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	029b      	lsls	r3, r3, #10
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	4313      	orrs	r3, r2
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073da:	801a      	strh	r2, [r3, #0]
 80073dc:	e03c      	b.n	8007458 <USB_ActivateEndpoint+0x6ac>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	f003 031f 	and.w	r3, r3, #31
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <USB_ActivateEndpoint+0x652>
 80073f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073f8:	3b01      	subs	r3, #1
 80073fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29a      	uxth	r2, r3
 8007404:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007408:	b29b      	uxth	r3, r3
 800740a:	029b      	lsls	r3, r3, #10
 800740c:	b29b      	uxth	r3, r3
 800740e:	4313      	orrs	r3, r2
 8007410:	b29b      	uxth	r3, r3
 8007412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741a:	b29a      	uxth	r2, r3
 800741c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	e01a      	b.n	8007458 <USB_ActivateEndpoint+0x6ac>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d116      	bne.n	8007458 <USB_ActivateEndpoint+0x6ac>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	657b      	str	r3, [r7, #84]	@ 0x54
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007434:	b29b      	uxth	r3, r3
 8007436:	461a      	mov	r2, r3
 8007438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800743a:	4413      	add	r3, r2
 800743c:	657b      	str	r3, [r7, #84]	@ 0x54
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	00da      	lsls	r2, r3, #3
 8007444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007446:	4413      	add	r3, r2
 8007448:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800744c:	653b      	str	r3, [r7, #80]	@ 0x50
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	b29a      	uxth	r2, r3
 8007454:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	647b      	str	r3, [r7, #68]	@ 0x44
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d16b      	bne.n	800753c <USB_ActivateEndpoint+0x790>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800746e:	b29b      	uxth	r3, r3
 8007470:	461a      	mov	r2, r3
 8007472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007474:	4413      	add	r3, r2
 8007476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	00da      	lsls	r2, r3, #3
 800747e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007480:	4413      	add	r3, r2
 8007482:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007486:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
 800748e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007492:	b29a      	uxth	r2, r3
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	801a      	strh	r2, [r3, #0]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <USB_ActivateEndpoint+0x70a>
 80074a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e05b      	b.n	800756e <USB_ActivateEndpoint+0x7c2>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80074bc:	d81c      	bhi.n	80074f8 <USB_ActivateEndpoint+0x74c>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d004      	beq.n	80074de <USB_ActivateEndpoint+0x732>
 80074d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80074d8:	3301      	adds	r3, #1
 80074da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	029b      	lsls	r3, r3, #10
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	e03a      	b.n	800756e <USB_ActivateEndpoint+0x7c2>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	095b      	lsrs	r3, r3, #5
 80074fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f003 031f 	and.w	r3, r3, #31
 800750a:	2b00      	cmp	r3, #0
 800750c:	d104      	bne.n	8007518 <USB_ActivateEndpoint+0x76c>
 800750e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007512:	3b01      	subs	r3, #1
 8007514:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29a      	uxth	r2, r3
 800751e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007522:	b29b      	uxth	r3, r3
 8007524:	029b      	lsls	r3, r3, #10
 8007526:	b29b      	uxth	r3, r3
 8007528:	4313      	orrs	r3, r2
 800752a:	b29b      	uxth	r3, r3
 800752c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007534:	b29a      	uxth	r2, r3
 8007536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007538:	801a      	strh	r2, [r3, #0]
 800753a:	e018      	b.n	800756e <USB_ActivateEndpoint+0x7c2>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d114      	bne.n	800756e <USB_ActivateEndpoint+0x7c2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800754a:	b29b      	uxth	r3, r3
 800754c:	461a      	mov	r2, r3
 800754e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007550:	4413      	add	r3, r2
 8007552:	647b      	str	r3, [r7, #68]	@ 0x44
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	00da      	lsls	r2, r3, #3
 800755a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800755c:	4413      	add	r3, r2
 800755e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007562:	643b      	str	r3, [r7, #64]	@ 0x40
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	b29a      	uxth	r2, r3
 800756a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800756c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007584:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007586:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007588:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800758c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800758e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007590:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007594:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	441a      	add	r2, r3
 80075a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80075a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075cc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	441a      	add	r2, r3
 80075d8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80075da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	8013      	strh	r3, [r2, #0]
 80075ee:	e0bc      	b.n	800776a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007600:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01d      	beq.n	8007648 <USB_ActivateEndpoint+0x89c>
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800761e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007622:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	441a      	add	r2, r3
 8007630:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800763c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007658:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800765c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01d      	beq.n	80076a0 <USB_ActivateEndpoint+0x8f4>
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800767a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	441a      	add	r2, r3
 8007688:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800768c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007698:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800769c:	b29b      	uxth	r3, r3
 800769e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	78db      	ldrb	r3, [r3, #3]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d024      	beq.n	80076f2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076be:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80076c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80076c6:	f083 0320 	eor.w	r3, r3, #32
 80076ca:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	441a      	add	r2, r3
 80076d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80076dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	8013      	strh	r3, [r2, #0]
 80076f0:	e01d      	b.n	800772e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007708:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	441a      	add	r2, r3
 8007716:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800771a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800771e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800772a:	b29b      	uxth	r3, r3
 800772c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007744:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	441a      	add	r2, r3
 8007752:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800775a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800775e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007766:	b29b      	uxth	r3, r3
 8007768:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800776a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800776e:	4618      	mov	r0, r3
 8007770:	379c      	adds	r7, #156	@ 0x9c
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop

0800777c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b0ac      	sub	sp, #176	@ 0xb0
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	785b      	ldrb	r3, [r3, #1]
 800778a:	2b01      	cmp	r3, #1
 800778c:	f040 84ca 	bne.w	8008124 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	429a      	cmp	r2, r3
 800779a:	d904      	bls.n	80077a6 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077a4:	e003      	b.n	80077ae <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	7b1b      	ldrb	r3, [r3, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d122      	bne.n	80077fc <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	6959      	ldr	r1, [r3, #20]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	88da      	ldrh	r2, [r3, #6]
 80077be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fed2 	bl	800856e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	461a      	mov	r2, r3
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	4413      	add	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	00da      	lsls	r2, r3, #3
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	4413      	add	r3, r2
 80077e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	801a      	strh	r2, [r3, #0]
 80077f8:	f000 bc6f 	b.w	80080da <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	78db      	ldrb	r3, [r3, #3]
 8007800:	2b02      	cmp	r3, #2
 8007802:	f040 831e 	bne.w	8007e42 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	6a1a      	ldr	r2, [r3, #32]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	429a      	cmp	r2, r3
 8007810:	f240 82cf 	bls.w	8007db2 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	441a      	add	r2, r3
 8007838:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800783c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007844:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800784c:	b29b      	uxth	r3, r3
 800784e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	6a1a      	ldr	r2, [r3, #32]
 8007854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007858:	1ad2      	subs	r2, r2, r3
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 814f 	beq.w	8007b14 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	633b      	str	r3, [r7, #48]	@ 0x30
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	785b      	ldrb	r3, [r3, #1]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d16b      	bne.n	800795a <USB_EPStartXfer+0x1de>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800788c:	b29b      	uxth	r3, r3
 800788e:	461a      	mov	r2, r3
 8007890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007892:	4413      	add	r3, r2
 8007894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	00da      	lsls	r2, r3, #3
 800789c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789e:	4413      	add	r3, r2
 80078a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	801a      	strh	r2, [r3, #0]
 80078b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <USB_EPStartXfer+0x158>
 80078be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	801a      	strh	r2, [r3, #0]
 80078d2:	e05b      	b.n	800798c <USB_EPStartXfer+0x210>
 80078d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80078da:	d81c      	bhi.n	8007916 <USB_EPStartXfer+0x19a>
 80078dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078e0:	085b      	lsrs	r3, r3, #1
 80078e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <USB_EPStartXfer+0x180>
 80078f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078f6:	3301      	adds	r3, #1
 80078f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	b29a      	uxth	r2, r3
 8007902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007906:	b29b      	uxth	r3, r3
 8007908:	029b      	lsls	r3, r3, #10
 800790a:	b29b      	uxth	r3, r3
 800790c:	4313      	orrs	r3, r2
 800790e:	b29a      	uxth	r2, r3
 8007910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007912:	801a      	strh	r2, [r3, #0]
 8007914:	e03a      	b.n	800798c <USB_EPStartXfer+0x210>
 8007916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800791a:	095b      	lsrs	r3, r3, #5
 800791c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	2b00      	cmp	r3, #0
 800792a:	d104      	bne.n	8007936 <USB_EPStartXfer+0x1ba>
 800792c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007930:	3b01      	subs	r3, #1
 8007932:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29a      	uxth	r2, r3
 800793c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007940:	b29b      	uxth	r3, r3
 8007942:	029b      	lsls	r3, r3, #10
 8007944:	b29b      	uxth	r3, r3
 8007946:	4313      	orrs	r3, r2
 8007948:	b29b      	uxth	r3, r3
 800794a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007952:	b29a      	uxth	r2, r3
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	e018      	b.n	800798c <USB_EPStartXfer+0x210>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d114      	bne.n	800798c <USB_EPStartXfer+0x210>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007968:	b29b      	uxth	r3, r3
 800796a:	461a      	mov	r2, r3
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	4413      	add	r3, r2
 8007970:	633b      	str	r3, [r7, #48]	@ 0x30
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	00da      	lsls	r2, r3, #3
 8007978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797a:	4413      	add	r3, r2
 800797c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007986:	b29a      	uxth	r2, r3
 8007988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	895b      	ldrh	r3, [r3, #10]
 8007990:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	6959      	ldr	r1, [r3, #20]
 8007998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800799c:	b29b      	uxth	r3, r3
 800799e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fde3 	bl	800856e <USB_WritePMA>
            ep->xfer_buff += len;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695a      	ldr	r2, [r3, #20]
 80079ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079b0:	441a      	add	r2, r3
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	6a1a      	ldr	r2, [r3, #32]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d907      	bls.n	80079d2 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	6a1a      	ldr	r2, [r3, #32]
 80079c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ca:	1ad2      	subs	r2, r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	621a      	str	r2, [r3, #32]
 80079d0:	e006      	b.n	80079e0 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2200      	movs	r2, #0
 80079de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d16b      	bne.n	8007ac0 <USB_EPStartXfer+0x344>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	461a      	mov	r2, r3
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	4413      	add	r3, r2
 80079fa:	61bb      	str	r3, [r7, #24]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	00da      	lsls	r2, r3, #3
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	4413      	add	r3, r2
 8007a06:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10a      	bne.n	8007a3a <USB_EPStartXfer+0x2be>
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	801a      	strh	r2, [r3, #0]
 8007a38:	e05d      	b.n	8007af6 <USB_EPStartXfer+0x37a>
 8007a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a40:	d81c      	bhi.n	8007a7c <USB_EPStartXfer+0x300>
 8007a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <USB_EPStartXfer+0x2e6>
 8007a58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	029b      	lsls	r3, r3, #10
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	4313      	orrs	r3, r2
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	e03c      	b.n	8007af6 <USB_EPStartXfer+0x37a>
 8007a7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a80:	095b      	lsrs	r3, r3, #5
 8007a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a8a:	f003 031f 	and.w	r3, r3, #31
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d104      	bne.n	8007a9c <USB_EPStartXfer+0x320>
 8007a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a96:	3b01      	subs	r3, #1
 8007a98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	029b      	lsls	r3, r3, #10
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	4313      	orrs	r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	801a      	strh	r2, [r3, #0]
 8007abe:	e01a      	b.n	8007af6 <USB_EPStartXfer+0x37a>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	785b      	ldrb	r3, [r3, #1]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d116      	bne.n	8007af6 <USB_EPStartXfer+0x37a>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	623b      	str	r3, [r7, #32]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	4413      	add	r3, r2
 8007ada:	623b      	str	r3, [r7, #32]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	00da      	lsls	r2, r3, #3
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007aea:	61fb      	str	r3, [r7, #28]
 8007aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	891b      	ldrh	r3, [r3, #8]
 8007afa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	6959      	ldr	r1, [r3, #20]
 8007b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fd2e 	bl	800856e <USB_WritePMA>
 8007b12:	e2e2      	b.n	80080da <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d16b      	bne.n	8007bf4 <USB_EPStartXfer+0x478>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b2c:	4413      	add	r3, r2
 8007b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	00da      	lsls	r2, r3, #3
 8007b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b38:	4413      	add	r3, r2
 8007b3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <USB_EPStartXfer+0x3f2>
 8007b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b6a:	801a      	strh	r2, [r3, #0]
 8007b6c:	e05d      	b.n	8007c2a <USB_EPStartXfer+0x4ae>
 8007b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b72:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b74:	d81c      	bhi.n	8007bb0 <USB_EPStartXfer+0x434>
 8007b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d004      	beq.n	8007b96 <USB_EPStartXfer+0x41a>
 8007b8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b90:	3301      	adds	r3, #1
 8007b92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	029b      	lsls	r3, r3, #10
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bac:	801a      	strh	r2, [r3, #0]
 8007bae:	e03c      	b.n	8007c2a <USB_EPStartXfer+0x4ae>
 8007bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bb4:	095b      	lsrs	r3, r3, #5
 8007bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bbe:	f003 031f 	and.w	r3, r3, #31
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d104      	bne.n	8007bd0 <USB_EPStartXfer+0x454>
 8007bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	029b      	lsls	r3, r3, #10
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4313      	orrs	r3, r2
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e01a      	b.n	8007c2a <USB_EPStartXfer+0x4ae>
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d116      	bne.n	8007c2a <USB_EPStartXfer+0x4ae>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	461a      	mov	r2, r3
 8007c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c0c:	4413      	add	r3, r2
 8007c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	00da      	lsls	r2, r3, #3
 8007c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c18:	4413      	add	r3, r2
 8007c1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	891b      	ldrh	r3, [r3, #8]
 8007c2e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	6959      	ldr	r1, [r3, #20]
 8007c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fc94 	bl	800856e <USB_WritePMA>
            ep->xfer_buff += len;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	695a      	ldr	r2, [r3, #20]
 8007c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c4e:	441a      	add	r2, r3
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	6a1a      	ldr	r2, [r3, #32]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d907      	bls.n	8007c70 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	6a1a      	ldr	r2, [r3, #32]
 8007c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c68:	1ad2      	subs	r2, r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	621a      	str	r2, [r3, #32]
 8007c6e:	e006      	b.n	8007c7e <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d16b      	bne.n	8007d62 <USB_EPStartXfer+0x5e6>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	461a      	mov	r2, r3
 8007c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9a:	4413      	add	r3, r2
 8007c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	00da      	lsls	r2, r3, #3
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cbc:	801a      	strh	r2, [r3, #0]
 8007cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <USB_EPStartXfer+0x560>
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd8:	801a      	strh	r2, [r3, #0]
 8007cda:	e05b      	b.n	8007d94 <USB_EPStartXfer+0x618>
 8007cdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ce0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ce2:	d81c      	bhi.n	8007d1e <USB_EPStartXfer+0x5a2>
 8007ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ce8:	085b      	lsrs	r3, r3, #1
 8007cea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d004      	beq.n	8007d04 <USB_EPStartXfer+0x588>
 8007cfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cfe:	3301      	adds	r3, #1
 8007d00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	029b      	lsls	r3, r3, #10
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	4313      	orrs	r3, r2
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d1a:	801a      	strh	r2, [r3, #0]
 8007d1c:	e03a      	b.n	8007d94 <USB_EPStartXfer+0x618>
 8007d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d22:	095b      	lsrs	r3, r3, #5
 8007d24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d2c:	f003 031f 	and.w	r3, r3, #31
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <USB_EPStartXfer+0x5c2>
 8007d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	029b      	lsls	r3, r3, #10
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5e:	801a      	strh	r2, [r3, #0]
 8007d60:	e018      	b.n	8007d94 <USB_EPStartXfer+0x618>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d114      	bne.n	8007d94 <USB_EPStartXfer+0x618>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	461a      	mov	r2, r3
 8007d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d76:	4413      	add	r3, r2
 8007d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	00da      	lsls	r2, r3, #3
 8007d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d82:	4413      	add	r3, r2
 8007d84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	895b      	ldrh	r3, [r3, #10]
 8007d98:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	6959      	ldr	r1, [r3, #20]
 8007da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fbdf 	bl	800856e <USB_WritePMA>
 8007db0:	e193      	b.n	80080da <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	441a      	add	r2, r3
 8007dde:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e06:	4413      	add	r3, r2
 8007e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	00da      	lsls	r2, r3, #3
 8007e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e12:	4413      	add	r3, r2
 8007e14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	891b      	ldrh	r3, [r3, #8]
 8007e28:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	6959      	ldr	r1, [r3, #20]
 8007e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fb97 	bl	800856e <USB_WritePMA>
 8007e40:	e14b      	b.n	80080da <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6a1a      	ldr	r2, [r3, #32]
 8007e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 809a 	beq.w	8007f9c <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	785b      	ldrb	r3, [r3, #1]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d16b      	bne.n	8007f4c <USB_EPStartXfer+0x7d0>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e84:	4413      	add	r3, r2
 8007e86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	00da      	lsls	r2, r3, #3
 8007e8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e90:	4413      	add	r3, r2
 8007e92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e96:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ea6:	801a      	strh	r2, [r3, #0]
 8007ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10a      	bne.n	8007ec6 <USB_EPStartXfer+0x74a>
 8007eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ec2:	801a      	strh	r2, [r3, #0]
 8007ec4:	e05b      	b.n	8007f7e <USB_EPStartXfer+0x802>
 8007ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eca:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ecc:	d81c      	bhi.n	8007f08 <USB_EPStartXfer+0x78c>
 8007ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ed2:	085b      	lsrs	r3, r3, #1
 8007ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d004      	beq.n	8007eee <USB_EPStartXfer+0x772>
 8007ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ee8:	3301      	adds	r3, #1
 8007eea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	029b      	lsls	r3, r3, #10
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	4313      	orrs	r3, r2
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f04:	801a      	strh	r2, [r3, #0]
 8007f06:	e03a      	b.n	8007f7e <USB_EPStartXfer+0x802>
 8007f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f0c:	095b      	lsrs	r3, r3, #5
 8007f0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f16:	f003 031f 	and.w	r3, r3, #31
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d104      	bne.n	8007f28 <USB_EPStartXfer+0x7ac>
 8007f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f22:	3b01      	subs	r3, #1
 8007f24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	029b      	lsls	r3, r3, #10
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f48:	801a      	strh	r2, [r3, #0]
 8007f4a:	e018      	b.n	8007f7e <USB_EPStartXfer+0x802>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	785b      	ldrb	r3, [r3, #1]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d114      	bne.n	8007f7e <USB_EPStartXfer+0x802>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f60:	4413      	add	r3, r2
 8007f62:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	00da      	lsls	r2, r3, #3
 8007f6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	895b      	ldrh	r3, [r3, #10]
 8007f82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	6959      	ldr	r1, [r3, #20]
 8007f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 faea 	bl	800856e <USB_WritePMA>
 8007f9a:	e09e      	b.n	80080da <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d16b      	bne.n	800807c <USB_EPStartXfer+0x900>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fb4:	4413      	add	r3, r2
 8007fb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	00da      	lsls	r2, r3, #3
 8007fbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007fc6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fd6:	801a      	strh	r2, [r3, #0]
 8007fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <USB_EPStartXfer+0x87a>
 8007fe0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ff2:	801a      	strh	r2, [r3, #0]
 8007ff4:	e063      	b.n	80080be <USB_EPStartXfer+0x942>
 8007ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ffa:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ffc:	d81c      	bhi.n	8008038 <USB_EPStartXfer+0x8bc>
 8007ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008002:	085b      	lsrs	r3, r3, #1
 8008004:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d004      	beq.n	800801e <USB_EPStartXfer+0x8a2>
 8008014:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008018:	3301      	adds	r3, #1
 800801a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800801e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29a      	uxth	r2, r3
 8008024:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008028:	b29b      	uxth	r3, r3
 800802a:	029b      	lsls	r3, r3, #10
 800802c:	b29b      	uxth	r3, r3
 800802e:	4313      	orrs	r3, r2
 8008030:	b29a      	uxth	r2, r3
 8008032:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008034:	801a      	strh	r2, [r3, #0]
 8008036:	e042      	b.n	80080be <USB_EPStartXfer+0x942>
 8008038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800803c:	095b      	lsrs	r3, r3, #5
 800803e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008046:	f003 031f 	and.w	r3, r3, #31
 800804a:	2b00      	cmp	r3, #0
 800804c:	d104      	bne.n	8008058 <USB_EPStartXfer+0x8dc>
 800804e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008052:	3b01      	subs	r3, #1
 8008054:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29a      	uxth	r2, r3
 800805e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008062:	b29b      	uxth	r3, r3
 8008064:	029b      	lsls	r3, r3, #10
 8008066:	b29b      	uxth	r3, r3
 8008068:	4313      	orrs	r3, r2
 800806a:	b29b      	uxth	r3, r3
 800806c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008074:	b29a      	uxth	r2, r3
 8008076:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	e020      	b.n	80080be <USB_EPStartXfer+0x942>
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	785b      	ldrb	r3, [r3, #1]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d11c      	bne.n	80080be <USB_EPStartXfer+0x942>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008090:	b29b      	uxth	r3, r3
 8008092:	461a      	mov	r2, r3
 8008094:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008098:	4413      	add	r3, r2
 800809a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	00da      	lsls	r2, r3, #3
 80080a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080a8:	4413      	add	r3, r2
 80080aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80080bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	891b      	ldrh	r3, [r3, #8]
 80080c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6959      	ldr	r1, [r3, #20]
 80080ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa4a 	bl	800856e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080f0:	817b      	strh	r3, [r7, #10]
 80080f2:	897b      	ldrh	r3, [r7, #10]
 80080f4:	f083 0310 	eor.w	r3, r3, #16
 80080f8:	817b      	strh	r3, [r7, #10]
 80080fa:	897b      	ldrh	r3, [r7, #10]
 80080fc:	f083 0320 	eor.w	r3, r3, #32
 8008100:	817b      	strh	r3, [r7, #10]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	441a      	add	r2, r3
 800810c:	897b      	ldrh	r3, [r7, #10]
 800810e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800811a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800811e:	b29b      	uxth	r3, r3
 8008120:	8013      	strh	r3, [r2, #0]
 8008122:	e0d5      	b.n	80082d0 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	7b1b      	ldrb	r3, [r3, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d156      	bne.n	80081da <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d122      	bne.n	800817a <USB_EPStartXfer+0x9fe>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	78db      	ldrb	r3, [r3, #3]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d11e      	bne.n	800817a <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b29b      	uxth	r3, r3
 800814a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800814e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008152:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	441a      	add	r2, r3
 8008160:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008164:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008168:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800816c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008174:	b29b      	uxth	r3, r3
 8008176:	8013      	strh	r3, [r2, #0]
 8008178:	e01d      	b.n	80081b6 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	b29b      	uxth	r3, r3
 8008188:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800818c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008190:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	441a      	add	r2, r3
 800819e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80081a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	699a      	ldr	r2, [r3, #24]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d907      	bls.n	80081d2 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	699a      	ldr	r2, [r3, #24]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	1ad2      	subs	r2, r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	619a      	str	r2, [r3, #24]
 80081d0:	e054      	b.n	800827c <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2200      	movs	r2, #0
 80081d6:	619a      	str	r2, [r3, #24]
 80081d8:	e050      	b.n	800827c <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	78db      	ldrb	r3, [r3, #3]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d142      	bne.n	8008268 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d048      	beq.n	800827c <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80081fa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80081fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <USB_EPStartXfer+0xa96>
 8008206:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800820a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10b      	bne.n	800822a <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008212:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800821a:	2b00      	cmp	r3, #0
 800821c:	d12e      	bne.n	800827c <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800821e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008226:	2b00      	cmp	r3, #0
 8008228:	d128      	bne.n	800827c <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800823c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008240:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	441a      	add	r2, r3
 800824e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8008252:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008256:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800825a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800825e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008262:	b29b      	uxth	r3, r3
 8008264:	8013      	strh	r3, [r2, #0]
 8008266:	e009      	b.n	800827c <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	78db      	ldrb	r3, [r3, #3]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d103      	bne.n	8008278 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2200      	movs	r2, #0
 8008274:	619a      	str	r2, [r3, #24]
 8008276:	e001      	b.n	800827c <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e02a      	b.n	80082d2 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	b29b      	uxth	r3, r3
 800828a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800828e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008292:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008296:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800829a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800829e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082aa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	441a      	add	r2, r3
 80082b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	37b0      	adds	r7, #176	@ 0xb0
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082da:	b480      	push	{r7}
 80082dc:	b085      	sub	sp, #20
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d020      	beq.n	800832e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008302:	81bb      	strh	r3, [r7, #12]
 8008304:	89bb      	ldrh	r3, [r7, #12]
 8008306:	f083 0310 	eor.w	r3, r3, #16
 800830a:	81bb      	strh	r3, [r7, #12]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	441a      	add	r2, r3
 8008316:	89bb      	ldrh	r3, [r7, #12]
 8008318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800831c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008328:	b29b      	uxth	r3, r3
 800832a:	8013      	strh	r3, [r2, #0]
 800832c:	e01f      	b.n	800836e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008344:	81fb      	strh	r3, [r7, #14]
 8008346:	89fb      	ldrh	r3, [r7, #14]
 8008348:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800834c:	81fb      	strh	r3, [r7, #14]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	441a      	add	r2, r3
 8008358:	89fb      	ldrh	r3, [r7, #14]
 800835a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800835e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800836a:	b29b      	uxth	r3, r3
 800836c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	785b      	ldrb	r3, [r3, #1]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d04c      	beq.n	8008428 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	823b      	strh	r3, [r7, #16]
 800839c:	8a3b      	ldrh	r3, [r7, #16]
 800839e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d01b      	beq.n	80083de <USB_EPClearStall+0x62>
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083bc:	81fb      	strh	r3, [r7, #14]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	441a      	add	r2, r3
 80083c8:	89fb      	ldrh	r3, [r7, #14]
 80083ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083da:	b29b      	uxth	r3, r3
 80083dc:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	78db      	ldrb	r3, [r3, #3]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d06c      	beq.n	80084c0 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083fc:	81bb      	strh	r3, [r7, #12]
 80083fe:	89bb      	ldrh	r3, [r7, #12]
 8008400:	f083 0320 	eor.w	r3, r3, #32
 8008404:	81bb      	strh	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	441a      	add	r2, r3
 8008410:	89bb      	ldrh	r3, [r7, #12]
 8008412:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008416:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800841a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800841e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008422:	b29b      	uxth	r3, r3
 8008424:	8013      	strh	r3, [r2, #0]
 8008426:	e04b      	b.n	80084c0 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	82fb      	strh	r3, [r7, #22]
 8008436:	8afb      	ldrh	r3, [r7, #22]
 8008438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01b      	beq.n	8008478 <USB_EPClearStall+0xfc>
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b29b      	uxth	r3, r3
 800844e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008456:	82bb      	strh	r3, [r7, #20]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	441a      	add	r2, r3
 8008462:	8abb      	ldrh	r3, [r7, #20]
 8008464:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008468:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800846c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008474:	b29b      	uxth	r3, r3
 8008476:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	b29b      	uxth	r3, r3
 8008486:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800848a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848e:	827b      	strh	r3, [r7, #18]
 8008490:	8a7b      	ldrh	r3, [r7, #18]
 8008492:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008496:	827b      	strh	r3, [r7, #18]
 8008498:	8a7b      	ldrh	r3, [r7, #18]
 800849a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800849e:	827b      	strh	r3, [r7, #18]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	441a      	add	r2, r3
 80084aa:	8a7b      	ldrh	r3, [r7, #18]
 80084ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084bc:	b29b      	uxth	r3, r3
 80084be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	460b      	mov	r3, r1
 80084d8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2280      	movs	r2, #128	@ 0x80
 80084e4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008504:	b29b      	uxth	r3, r3
 8008506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800850e:	b29a      	uxth	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008532:	b29b      	uxth	r3, r3
 8008534:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008538:	b29a      	uxth	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800855c:	b29b      	uxth	r3, r3
 800855e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008560:	68fb      	ldr	r3, [r7, #12]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800856e:	b480      	push	{r7}
 8008570:	b08b      	sub	sp, #44	@ 0x2c
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	4611      	mov	r1, r2
 800857a:	461a      	mov	r2, r3
 800857c:	460b      	mov	r3, r1
 800857e:	80fb      	strh	r3, [r7, #6]
 8008580:	4613      	mov	r3, r2
 8008582:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008584:	88bb      	ldrh	r3, [r7, #4]
 8008586:	3301      	adds	r3, #1
 8008588:	085b      	lsrs	r3, r3, #1
 800858a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008594:	88fa      	ldrh	r2, [r7, #6]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	4413      	add	r3, r2
 800859a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800859e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085a4:	e01c      	b.n	80085e0 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	3301      	adds	r3, #1
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	b21b      	sxth	r3, r3
 80085b4:	021b      	lsls	r3, r3, #8
 80085b6:	b21a      	sxth	r2, r3
 80085b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085bc:	4313      	orrs	r3, r2
 80085be:	b21b      	sxth	r3, r3
 80085c0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	8a7a      	ldrh	r2, [r7, #18]
 80085c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	3302      	adds	r3, #2
 80085cc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	3301      	adds	r3, #1
 80085d2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	3301      	adds	r3, #1
 80085d8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	3b01      	subs	r3, #1
 80085de:	627b      	str	r3, [r7, #36]	@ 0x24
 80085e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1df      	bne.n	80085a6 <USB_WritePMA+0x38>
  }
}
 80085e6:	bf00      	nop
 80085e8:	bf00      	nop
 80085ea:	372c      	adds	r7, #44	@ 0x2c
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b08b      	sub	sp, #44	@ 0x2c
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	4611      	mov	r1, r2
 8008600:	461a      	mov	r2, r3
 8008602:	460b      	mov	r3, r1
 8008604:	80fb      	strh	r3, [r7, #6]
 8008606:	4613      	mov	r3, r2
 8008608:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800860a:	88bb      	ldrh	r3, [r7, #4]
 800860c:	085b      	lsrs	r3, r3, #1
 800860e:	b29b      	uxth	r3, r3
 8008610:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800861a:	88fa      	ldrh	r2, [r7, #6]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008624:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	627b      	str	r3, [r7, #36]	@ 0x24
 800862a:	e018      	b.n	800865e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	b29b      	uxth	r3, r3
 8008632:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	3302      	adds	r3, #2
 8008638:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	b2da      	uxtb	r2, r3
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	3301      	adds	r3, #1
 8008646:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	0a1b      	lsrs	r3, r3, #8
 800864c:	b2da      	uxtb	r2, r3
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	3301      	adds	r3, #1
 8008656:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865a:	3b01      	subs	r3, #1
 800865c:	627b      	str	r3, [r7, #36]	@ 0x24
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e3      	bne.n	800862c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008664:	88bb      	ldrh	r3, [r7, #4]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	b29b      	uxth	r3, r3
 800866c:	2b00      	cmp	r3, #0
 800866e:	d007      	beq.n	8008680 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	b29b      	uxth	r3, r3
 8008676:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	b2da      	uxtb	r2, r3
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	701a      	strb	r2, [r3, #0]
  }
}
 8008680:	bf00      	nop
 8008682:	372c      	adds	r7, #44	@ 0x2c
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <__NVIC_SystemReset>:
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008690:	f3bf 8f4f 	dsb	sy
}
 8008694:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008696:	4b06      	ldr	r3, [pc, #24]	@ (80086b0 <__NVIC_SystemReset+0x24>)
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800869e:	4904      	ldr	r1, [pc, #16]	@ (80086b0 <__NVIC_SystemReset+0x24>)
 80086a0:	4b04      	ldr	r3, [pc, #16]	@ (80086b4 <__NVIC_SystemReset+0x28>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80086a6:	f3bf 8f4f 	dsb	sy
}
 80086aa:	bf00      	nop
    __NOP();
 80086ac:	bf00      	nop
 80086ae:	e7fd      	b.n	80086ac <__NVIC_SystemReset+0x20>
 80086b0:	e000ed00 	.word	0xe000ed00
 80086b4:	05fa0004 	.word	0x05fa0004

080086b8 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80086c4:	f240 401c 	movw	r0, #1052	@ 0x41c
 80086c8:	f002 fb92 	bl	800adf0 <USBD_static_malloc>
 80086cc:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d105      	bne.n	80086e0 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80086dc:	2302      	movs	r3, #2
 80086de:	e03f      	b.n	8008760 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80086f6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2202      	movs	r2, #2
 8008716:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2202      	movs	r2, #2
 800873e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	4798      	blx	r3
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800875a:	2303      	movs	r3, #3
 800875c:	e000      	b.n	8008760 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800877e:	2302      	movs	r3, #2
 8008780:	e027      	b.n	80087d2 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008788:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2202      	movs	r2, #2
 800879e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2202      	movs	r2, #2
 80087ae:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087c2:	4618      	mov	r0, r3
 80087c4:	f002 fb22 	bl	800ae0c <USBD_static_free>
  pdev->pClassData = NULL;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087ec:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008804:	2303      	movs	r3, #3
 8008806:	e0d5      	b.n	80089b4 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008810:	2b00      	cmp	r3, #0
 8008812:	d03e      	beq.n	8008892 <USBD_DFU_Setup+0xb6>
 8008814:	2b20      	cmp	r3, #32
 8008816:	f040 80c5 	bne.w	80089a4 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	2b06      	cmp	r3, #6
 8008820:	d82f      	bhi.n	8008882 <USBD_DFU_Setup+0xa6>
 8008822:	a201      	add	r2, pc, #4	@ (adr r2, 8008828 <USBD_DFU_Setup+0x4c>)
 8008824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008828:	08008879 	.word	0x08008879
 800882c:	08008845 	.word	0x08008845
 8008830:	0800884f 	.word	0x0800884f
 8008834:	08008859 	.word	0x08008859
 8008838:	08008861 	.word	0x08008861
 800883c:	08008869 	.word	0x08008869
 8008840:	08008871 	.word	0x08008871
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa6c 	bl	8008d24 <DFU_Download>
          break;
 800884c:	e020      	b.n	8008890 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fad3 	bl	8008dfc <DFU_Upload>
          break;
 8008856:	e01b      	b.n	8008890 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fba9 	bl	8008fb0 <DFU_GetStatus>
          break;
 800885e:	e017      	b.n	8008890 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fc5b 	bl	800911c <DFU_ClearStatus>
          break;
 8008866:	e013      	b.n	8008890 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fcab 	bl	80091c4 <DFU_GetState>
          break;
 800886e:	e00f      	b.n	8008890 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fcbf 	bl	80091f4 <DFU_Abort>
          break;
 8008876:	e00b      	b.n	8008890 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f9ee 	bl	8008c5c <DFU_Detach>
          break;
 8008880:	e006      	b.n	8008890 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 fdb1 	bl	800a3ec <USBD_CtlError>
          ret = USBD_FAIL;
 800888a:	2303      	movs	r3, #3
 800888c:	77fb      	strb	r3, [r7, #31]
          break;
 800888e:	bf00      	nop
      }
      break;
 8008890:	e08f      	b.n	80089b2 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	785b      	ldrb	r3, [r3, #1]
 8008896:	2b0b      	cmp	r3, #11
 8008898:	d87b      	bhi.n	8008992 <USBD_DFU_Setup+0x1b6>
 800889a:	a201      	add	r2, pc, #4	@ (adr r2, 80088a0 <USBD_DFU_Setup+0xc4>)
 800889c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a0:	080088d1 	.word	0x080088d1
 80088a4:	080089a1 	.word	0x080089a1
 80088a8:	08008993 	.word	0x08008993
 80088ac:	08008993 	.word	0x08008993
 80088b0:	08008993 	.word	0x08008993
 80088b4:	08008993 	.word	0x08008993
 80088b8:	080088fb 	.word	0x080088fb
 80088bc:	08008993 	.word	0x08008993
 80088c0:	08008993 	.word	0x08008993
 80088c4:	08008993 	.word	0x08008993
 80088c8:	08008925 	.word	0x08008925
 80088cc:	08008951 	.word	0x08008951
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d107      	bne.n	80088ec <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088dc:	f107 030e 	add.w	r3, r7, #14
 80088e0:	2202      	movs	r2, #2
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 fdf2 	bl	800a4ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088ea:	e05a      	b.n	80089a2 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fd7c 	bl	800a3ec <USBD_CtlError>
            ret = USBD_FAIL;
 80088f4:	2303      	movs	r3, #3
 80088f6:	77fb      	strb	r3, [r7, #31]
          break;
 80088f8:	e053      	b.n	80089a2 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	885b      	ldrh	r3, [r3, #2]
 80088fe:	0a1b      	lsrs	r3, r3, #8
 8008900:	b29b      	uxth	r3, r3
 8008902:	2b21      	cmp	r3, #33	@ 0x21
 8008904:	d107      	bne.n	8008916 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8008906:	4b2d      	ldr	r3, [pc, #180]	@ (80089bc <USBD_DFU_Setup+0x1e0>)
 8008908:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	88db      	ldrh	r3, [r3, #6]
 800890e:	2b09      	cmp	r3, #9
 8008910:	bf28      	it	cs
 8008912:	2309      	movcs	r3, #9
 8008914:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008916:	8afb      	ldrh	r3, [r7, #22]
 8008918:	461a      	mov	r2, r3
 800891a:	69b9      	ldr	r1, [r7, #24]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 fdd6 	bl	800a4ce <USBD_CtlSendData>
          break;
 8008922:	e03e      	b.n	80089a2 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b03      	cmp	r3, #3
 800892e:	d108      	bne.n	8008942 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008936:	2201      	movs	r2, #1
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 fdc7 	bl	800a4ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008940:	e02f      	b.n	80089a2 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f001 fd51 	bl	800a3ec <USBD_CtlError>
            ret = USBD_FAIL;
 800894a:	2303      	movs	r3, #3
 800894c:	77fb      	strb	r3, [r7, #31]
          break;
 800894e:	e028      	b.n	80089a2 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	885b      	ldrh	r3, [r3, #2]
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d114      	bne.n	8008984 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b03      	cmp	r3, #3
 8008964:	d107      	bne.n	8008976 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	885b      	ldrh	r3, [r3, #2]
 800896a:	b2db      	uxtb	r3, r3
 800896c:	461a      	mov	r2, r3
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008974:	e015      	b.n	80089a2 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 fd37 	bl	800a3ec <USBD_CtlError>
              ret = USBD_FAIL;
 800897e:	2303      	movs	r3, #3
 8008980:	77fb      	strb	r3, [r7, #31]
          break;
 8008982:	e00e      	b.n	80089a2 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 fd30 	bl	800a3ec <USBD_CtlError>
            ret = USBD_FAIL;
 800898c:	2303      	movs	r3, #3
 800898e:	77fb      	strb	r3, [r7, #31]
          break;
 8008990:	e007      	b.n	80089a2 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 fd29 	bl	800a3ec <USBD_CtlError>
          ret = USBD_FAIL;
 800899a:	2303      	movs	r3, #3
 800899c:	77fb      	strb	r3, [r7, #31]
          break;
 800899e:	e000      	b.n	80089a2 <USBD_DFU_Setup+0x1c6>
          break;
 80089a0:	bf00      	nop
      }
      break;
 80089a2:	e006      	b.n	80089b2 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 fd20 	bl	800a3ec <USBD_CtlError>
      ret = USBD_FAIL;
 80089ac:	2303      	movs	r3, #3
 80089ae:	77fb      	strb	r3, [r7, #31]
      break;
 80089b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80089b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3720      	adds	r7, #32
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	2000005a 	.word	0x2000005a

080089c0 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	221b      	movs	r2, #27
 80089cc:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 80089ce:	4b03      	ldr	r3, [pc, #12]	@ (80089dc <USBD_DFU_GetCfgDesc+0x1c>)
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	20000048 	.word	0x20000048

080089e0 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b088      	sub	sp, #32
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a04:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a0c:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e0ce      	b.n	8008bb6 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	f040 80bd 	bne.w	8008b9e <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d17c      	bne.n	8008b28 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	f000 8093 	beq.w	8008b60 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008a40:	2b05      	cmp	r3, #5
 8008a42:	d15e      	bne.n	8008b02 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b21      	cmp	r3, #33	@ 0x21
 8008a4a:	d124      	bne.n	8008a96 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	785b      	ldrb	r3, [r3, #1]
 8008a50:	461a      	mov	r2, r3
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	789b      	ldrb	r3, [r3, #2]
 8008a62:	021b      	lsls	r3, r3, #8
 8008a64:	441a      	add	r2, r3
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	78db      	ldrb	r3, [r3, #3]
 8008a76:	041b      	lsls	r3, r3, #16
 8008a78:	441a      	add	r2, r3
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	791b      	ldrb	r3, [r3, #4]
 8008a8a:	061b      	lsls	r3, r3, #24
 8008a8c:	441a      	add	r2, r3
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8008a94:	e064      	b.n	8008b60 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	2b41      	cmp	r3, #65	@ 0x41
 8008a9c:	d12f      	bne.n	8008afe <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	785b      	ldrb	r3, [r3, #1]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	789b      	ldrb	r3, [r3, #2]
 8008ab4:	021b      	lsls	r3, r3, #8
 8008ab6:	441a      	add	r2, r3
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	78db      	ldrb	r3, [r3, #3]
 8008ac8:	041b      	lsls	r3, r3, #16
 8008aca:	441a      	add	r2, r3
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	791b      	ldrb	r3, [r3, #4]
 8008adc:	061b      	lsls	r3, r3, #24
 8008ade:	441a      	add	r2, r3
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d032      	beq.n	8008b60 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e05b      	b.n	8008bb6 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e059      	b.n	8008bb6 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8008b16:	2301      	movs	r3, #1
 8008b18:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8008b1a:	f107 030c 	add.w	r3, r7, #12
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 fc63 	bl	800a3ec <USBD_CtlError>
 8008b26:	e01b      	b.n	8008b60 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d916      	bls.n	8008b60 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008b38:	3b02      	subs	r3, #2
 8008b3a:	029a      	lsls	r2, r3, #10
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8008b42:	4413      	add	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	69f8      	ldr	r0, [r7, #28]
 8008b4c:	6979      	ldr	r1, [r7, #20]
 8008b4e:	69fa      	ldr	r2, [r7, #28]
 8008b50:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8008b54:	4798      	blx	r3
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e02a      	b.n	8008bb6 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	2203      	movs	r2, #3
 8008b74:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008b9c:	e00a      	b.n	8008bb4 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008ba4:	2b07      	cmp	r3, #7
 8008ba6:	d103      	bne.n	8008bb0 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fb75 	bl	8009298 <DFU_Leave>
 8008bae:	e001      	b.n	8008bb4 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e000      	b.n	8008bb6 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3720      	adds	r7, #32
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	220a      	movs	r2, #10
 8008be0:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8008be2:	4b03      	ldr	r3, [pc, #12]	@ (8008bf0 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	20000064 	.word	0x20000064

08008bf4 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c08:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8008c0a:	7afb      	ldrb	r3, [r7, #11]
 8008c0c:	2b06      	cmp	r3, #6
 8008c0e:	d808      	bhi.n	8008c22 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	4905      	ldr	r1, [pc, #20]	@ (8008c2c <USBD_DFU_GetUsrStringDesc+0x38>)
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f001 fbf8 	bl	800a40e <USBD_GetString>
    return USBD_StrDesc;
 8008c1e:	4b03      	ldr	r3, [pc, #12]	@ (8008c2c <USBD_DFU_GetUsrStringDesc+0x38>)
 8008c20:	e000      	b.n	8008c24 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8008c22:	2300      	movs	r3, #0
  }
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20000270 	.word	0x20000270

08008c30 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e004      	b.n	8008c4e <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
	...

08008c5c <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c6c:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d051      	beq.n	8008d18 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d013      	beq.n	8008ca6 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d00e      	beq.n	8008ca6 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008c8e:	2b05      	cmp	r3, #5
 8008c90:	d009      	beq.n	8008ca6 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008c98:	2b06      	cmp	r3, #6
 8008c9a:	d004      	beq.n	8008ca6 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008ca2:	2b09      	cmp	r3, #9
 8008ca4:	d125      	bne.n	8008cf2 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8008cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8008d20 <DFU_Detach+0xc4>)
 8008cf4:	7d5b      	ldrb	r3, [r3, #21]
 8008cf6:	f003 0310 	and.w	r3, r3, #16
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d006      	beq.n	8008d0c <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fb7b 	bl	80093fa <USBD_Stop>
    (void)USBD_Start(pdev);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fb6c 	bl	80093e2 <USBD_Start>
 8008d0a:	e006      	b.n	8008d1a <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	885b      	ldrh	r3, [r3, #2]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7f7 ff5d 	bl	8000bd0 <HAL_Delay>
 8008d16:	e000      	b.n	8008d1a <DFU_Detach+0xbe>
    return;
 8008d18:	bf00      	nop
  }
}
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	20000048 	.word	0x20000048

08008d24 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d34:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d05b      	beq.n	8008df4 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	88db      	ldrh	r3, [r3, #6]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d02d      	beq.n	8008da0 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d004      	beq.n	8008d58 <DFU_Download+0x34>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008d54:	2b05      	cmp	r3, #5
 8008d56:	d11e      	bne.n	8008d96 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	885b      	ldrh	r3, [r3, #2]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	88db      	ldrh	r3, [r3, #6]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2203      	movs	r2, #3
 8008d74:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008d84:	68f9      	ldr	r1, [r7, #12]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 fbc9 	bl	800a526 <USBD_CtlPrepareRx>
 8008d94:	e02f      	b.n	8008df6 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 fb27 	bl	800a3ec <USBD_CtlError>
 8008d9e:	e02a      	b.n	8008df6 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008da6:	2b05      	cmp	r3, #5
 8008da8:	d004      	beq.n	8008db4 <DFU_Download+0x90>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d11a      	bne.n	8008dea <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2206      	movs	r2, #6
 8008dc0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008de8:	e005      	b.n	8008df6 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 fafd 	bl	800a3ec <USBD_CtlError>
 8008df2:	e000      	b.n	8008df6 <DFU_Download+0xd2>
    return;
 8008df4:	bf00      	nop
    }
  }
}
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e0c:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e14:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 80c4 	beq.w	8008fa6 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	88db      	ldrh	r3, [r3, #6]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 80a8 	beq.w	8008f78 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d005      	beq.n	8008e3e <DFU_Upload+0x42>
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008e38:	2b09      	cmp	r3, #9
 8008e3a:	f040 8090 	bne.w	8008f5e <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	885b      	ldrh	r3, [r3, #2]
 8008e42:	461a      	mov	r2, r3
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	88db      	ldrh	r3, [r3, #6]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d12c      	bne.n	8008eba <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d901      	bls.n	8008e6e <DFU_Upload+0x72>
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	e000      	b.n	8008e70 <DFU_Upload+0x74>
 8008e6e:	2209      	movs	r2, #9
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2221      	movs	r2, #33	@ 0x21
 8008ea4:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2241      	movs	r2, #65	@ 0x41
 8008eaa:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	2203      	movs	r2, #3
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 fb0b 	bl	800a4ce <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008eb8:	e076      	b.n	8008fa8 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d931      	bls.n	8008f28 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2209      	movs	r2, #9
 8008ec8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008ef6:	3b02      	subs	r3, #2
 8008ef8:	029a      	lsls	r2, r3, #10
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8008f00:	4413      	add	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	6979      	ldr	r1, [r7, #20]
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8008f12:	4798      	blx	r3
 8008f14:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	68b9      	ldr	r1, [r7, #8]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 fad4 	bl	800a4ce <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008f26:	e03f      	b.n	8008fa8 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	220f      	movs	r2, #15
 8008f2c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 fa48 	bl	800a3ec <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8008f5c:	e024      	b.n	8008fa8 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 fa3b 	bl	800a3ec <USBD_CtlError>
 8008f76:	e017      	b.n	8008fa8 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008fa4:	e000      	b.n	8008fa8 <DFU_Upload+0x1ac>
    return;
 8008fa6:	bf00      	nop
  }
}
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fbe:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fc6:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 80a0 	beq.w	8009110 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d002      	beq.n	8008fe0 <DFU_GetStatus+0x30>
 8008fda:	2b06      	cmp	r3, #6
 8008fdc:	d051      	beq.n	8009082 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 8008fde:	e08e      	b.n	80090fe <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d034      	beq.n	8009054 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2204      	movs	r2, #4
 8008fee:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10e      	bne.n	800903e <DFU_GetStatus+0x8e>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b41      	cmp	r3, #65	@ 0x41
 8009026:	d10a      	bne.n	800903e <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8009038:	2100      	movs	r1, #0
 800903a:	4798      	blx	r3
      break;
 800903c:	e05f      	b.n	80090fe <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800904e:	2101      	movs	r1, #1
 8009050:	4798      	blx	r3
      break;
 8009052:	e054      	b.n	80090fe <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2205      	movs	r2, #5
 8009058:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8009080:	e03d      	b.n	80090fe <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8009088:	2b01      	cmp	r3, #1
 800908a:	d116      	bne.n	80090ba <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2207      	movs	r2, #7
 8009090:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80090b8:	e020      	b.n	80090fc <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d11b      	bne.n	80090fc <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 80090c4:	4b14      	ldr	r3, [pc, #80]	@ (8009118 <DFU_GetStatus+0x168>)
 80090c6:	7d1b      	ldrb	r3, [r3, #20]
 80090c8:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d015      	beq.n	80090fc <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2202      	movs	r2, #2
 80090d4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80090fc:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8009104:	2206      	movs	r2, #6
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f001 f9e0 	bl	800a4ce <USBD_CtlSendData>
 800910e:	e000      	b.n	8009112 <DFU_GetStatus+0x162>
    return;
 8009110:	bf00      	nop
}
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20000048 	.word	0x20000048

0800911c <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800912a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d042      	beq.n	80091b8 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009138:	2b0a      	cmp	r3, #10
 800913a:	d11e      	bne.n	800917a <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8009178:	e01f      	b.n	80091ba <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	220a      	movs	r2, #10
 800917e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	220e      	movs	r2, #14
 8009186:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 80091b6:	e000      	b.n	80091ba <DFU_ClearStatus+0x9e>
    return;
 80091b8:	bf00      	nop
  }
}
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091d2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d008      	beq.n	80091ec <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80091e0:	2201      	movs	r2, #1
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 f972 	bl	800a4ce <USBD_CtlSendData>
 80091ea:	e000      	b.n	80091ee <DFU_GetState+0x2a>
    return;
 80091ec:	bf00      	nop
}
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009202:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d03f      	beq.n	800928a <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009210:	2b02      	cmp	r3, #2
 8009212:	d013      	beq.n	800923c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800921a:	2b03      	cmp	r3, #3
 800921c:	d00e      	beq.n	800923c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009224:	2b05      	cmp	r3, #5
 8009226:	d009      	beq.n	800923c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800922e:	2b06      	cmp	r3, #6
 8009230:	d004      	beq.n	800923c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8009238:	2b09      	cmp	r3, #9
 800923a:	d127      	bne.n	800928c <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2202      	movs	r2, #2
 8009240:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8009288:	e000      	b.n	800928c <DFU_Abort+0x98>
    return;
 800928a:	bf00      	nop
  }
}
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
	...

08009298 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092a6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d03b      	beq.n	8009326 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 80092b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009330 <DFU_Leave+0x98>)
 80092b8:	7d1b      	ldrb	r3, [r3, #20]
 80092ba:	f003 0304 	and.w	r3, r3, #4
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d016      	beq.n	80092f0 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2206      	movs	r2, #6
 80092c6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 80092ee:	e01b      	b.n	8009328 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2208      	movs	r2, #8
 80092f4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f86c 	bl	80093fa <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8009322:	f7ff f9b3 	bl	800868c <__NVIC_SystemReset>
    return;
 8009326:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20000048 	.word	0x20000048

08009334 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	4613      	mov	r3, r2
 8009340:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009348:	2303      	movs	r3, #3
 800934a:	e01f      	b.n	800938c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	79fa      	ldrb	r2, [r7, #7]
 800937e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f001 fb91 	bl	800aaa8 <USBD_LL_Init>
 8009386:	4603      	mov	r3, r0
 8009388:	75fb      	strb	r3, [r7, #23]

  return ret;
 800938a:	7dfb      	ldrb	r3, [r7, #23]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e016      	b.n	80093da <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00b      	beq.n	80093d8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c8:	f107 020e 	add.w	r2, r7, #14
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	4602      	mov	r2, r0
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b082      	sub	sp, #8
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f001 fba2 	bl	800ab34 <USBD_LL_Start>
 80093f0:	4603      	mov	r3, r0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f001 fbb1 	bl	800ab6a <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800940e:	2b00      	cmp	r3, #0
 8009410:	d009      	beq.n	8009426 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	6852      	ldr	r2, [r2, #4]
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	4611      	mov	r1, r2
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	4798      	blx	r3
  }

  return USBD_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009452:	2303      	movs	r3, #3
 8009454:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800945c:	2b00      	cmp	r3, #0
 800945e:	d009      	beq.n	8009474 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	78fa      	ldrb	r2, [r7, #3]
 800946a:	4611      	mov	r1, r2
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	4798      	blx	r3
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009474:	7bfb      	ldrb	r3, [r7, #15]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	460b      	mov	r3, r1
 8009488:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d007      	beq.n	80094a4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	78fa      	ldrb	r2, [r7, #3]
 800949e:	4611      	mov	r1, r2
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	4798      	blx	r3
  }

  return USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 ff59 	bl	800a378 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80094d4:	461a      	mov	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80094e2:	f003 031f 	and.w	r3, r3, #31
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d01a      	beq.n	8009520 <USBD_LL_SetupStage+0x72>
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d822      	bhi.n	8009534 <USBD_LL_SetupStage+0x86>
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <USBD_LL_SetupStage+0x4a>
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d00a      	beq.n	800950c <USBD_LL_SetupStage+0x5e>
 80094f6:	e01d      	b.n	8009534 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f9ef 	bl	80098e4 <USBD_StdDevReq>
 8009506:	4603      	mov	r3, r0
 8009508:	73fb      	strb	r3, [r7, #15]
      break;
 800950a:	e020      	b.n	800954e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009512:	4619      	mov	r1, r3
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fa53 	bl	80099c0 <USBD_StdItfReq>
 800951a:	4603      	mov	r3, r0
 800951c:	73fb      	strb	r3, [r7, #15]
      break;
 800951e:	e016      	b.n	800954e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fa92 	bl	8009a52 <USBD_StdEPReq>
 800952e:	4603      	mov	r3, r0
 8009530:	73fb      	strb	r3, [r7, #15]
      break;
 8009532:	e00c      	b.n	800954e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800953a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800953e:	b2db      	uxtb	r3, r3
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f001 fb52 	bl	800abec <USBD_LL_StallEP>
 8009548:	4603      	mov	r3, r0
 800954a:	73fb      	strb	r3, [r7, #15]
      break;
 800954c:	bf00      	nop
  }

  return ret;
 800954e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	460b      	mov	r3, r1
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009566:	7afb      	ldrb	r3, [r7, #11]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d138      	bne.n	80095de <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009572:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800957a:	2b03      	cmp	r3, #3
 800957c:	d14a      	bne.n	8009614 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	689a      	ldr	r2, [r3, #8]
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	429a      	cmp	r2, r3
 8009588:	d913      	bls.n	80095b2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	689a      	ldr	r2, [r3, #8]
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	1ad2      	subs	r2, r2, r3
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	4293      	cmp	r3, r2
 80095a2:	bf28      	it	cs
 80095a4:	4613      	movcs	r3, r2
 80095a6:	461a      	mov	r2, r3
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 ffd8 	bl	800a560 <USBD_CtlContinueRx>
 80095b0:	e030      	b.n	8009614 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d10b      	bne.n	80095d6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d005      	beq.n	80095d6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 ffd3 	bl	800a582 <USBD_CtlSendStatus>
 80095dc:	e01a      	b.n	8009614 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d114      	bne.n	8009614 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00e      	beq.n	8009614 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	7afa      	ldrb	r2, [r7, #11]
 8009600:	4611      	mov	r1, r2
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	4798      	blx	r3
 8009606:	4603      	mov	r3, r0
 8009608:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	e000      	b.n	8009616 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b086      	sub	sp, #24
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	460b      	mov	r3, r1
 8009628:	607a      	str	r2, [r7, #4]
 800962a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800962c:	7afb      	ldrb	r3, [r7, #11]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d16b      	bne.n	800970a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3314      	adds	r3, #20
 8009636:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800963e:	2b02      	cmp	r3, #2
 8009640:	d156      	bne.n	80096f0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	429a      	cmp	r2, r3
 800964c:	d914      	bls.n	8009678 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	1ad2      	subs	r2, r2, r3
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	461a      	mov	r2, r3
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 ff4d 	bl	800a504 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800966a:	2300      	movs	r3, #0
 800966c:	2200      	movs	r2, #0
 800966e:	2100      	movs	r1, #0
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f001 fb65 	bl	800ad40 <USBD_LL_PrepareReceive>
 8009676:	e03b      	b.n	80096f0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	429a      	cmp	r2, r3
 8009682:	d11c      	bne.n	80096be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800968c:	429a      	cmp	r2, r3
 800968e:	d316      	bcc.n	80096be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800969a:	429a      	cmp	r2, r3
 800969c:	d20f      	bcs.n	80096be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800969e:	2200      	movs	r2, #0
 80096a0:	2100      	movs	r1, #0
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f000 ff2e 	bl	800a504 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096b0:	2300      	movs	r3, #0
 80096b2:	2200      	movs	r2, #0
 80096b4:	2100      	movs	r1, #0
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f001 fb42 	bl	800ad40 <USBD_LL_PrepareReceive>
 80096bc:	e018      	b.n	80096f0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d10b      	bne.n	80096e2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d005      	beq.n	80096e2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096e2:	2180      	movs	r1, #128	@ 0x80
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f001 fa81 	bl	800abec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f000 ff5c 	bl	800a5a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d122      	bne.n	8009740 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f7ff fe98 	bl	8009430 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009708:	e01a      	b.n	8009740 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b03      	cmp	r3, #3
 8009714:	d114      	bne.n	8009740 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00e      	beq.n	8009740 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	7afa      	ldrb	r2, [r7, #11]
 800972c:	4611      	mov	r1, r2
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	4798      	blx	r3
 8009732:	4603      	mov	r3, r0
 8009734:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800973c:	7dfb      	ldrb	r3, [r7, #23]
 800973e:	e000      	b.n	8009742 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b082      	sub	sp, #8
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800977a:	2303      	movs	r3, #3
 800977c:	e02f      	b.n	80097de <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00f      	beq.n	80097a8 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d009      	beq.n	80097a8 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6852      	ldr	r2, [r2, #4]
 80097a0:	b2d2      	uxtb	r2, r2
 80097a2:	4611      	mov	r1, r2
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097a8:	2340      	movs	r3, #64	@ 0x40
 80097aa:	2200      	movs	r2, #0
 80097ac:	2100      	movs	r1, #0
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f001 f9f6 	bl	800aba0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2240      	movs	r2, #64	@ 0x40
 80097c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097c4:	2340      	movs	r3, #64	@ 0x40
 80097c6:	2200      	movs	r2, #0
 80097c8:	2180      	movs	r1, #128	@ 0x80
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 f9e8 	bl	800aba0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2240      	movs	r2, #64	@ 0x40
 80097da:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b083      	sub	sp, #12
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	460b      	mov	r3, r1
 80097f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	78fa      	ldrb	r2, [r7, #3]
 80097f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009814:	b2da      	uxtb	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2204      	movs	r2, #4
 8009820:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b04      	cmp	r3, #4
 8009844:	d106      	bne.n	8009854 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800984c:	b2da      	uxtb	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009874:	2303      	movs	r3, #3
 8009876:	e012      	b.n	800989e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b03      	cmp	r3, #3
 8009882:	d10b      	bne.n	800989c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800988a:	69db      	ldr	r3, [r3, #28]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d005      	beq.n	800989c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009896:	69db      	ldr	r3, [r3, #28]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b087      	sub	sp, #28
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	3301      	adds	r3, #1
 80098bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80098c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80098c8:	021b      	lsls	r3, r3, #8
 80098ca:	b21a      	sxth	r2, r3
 80098cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	b21b      	sxth	r3, r3
 80098d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098d6:	89fb      	ldrh	r3, [r7, #14]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	371c      	adds	r7, #28
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098fa:	2b40      	cmp	r3, #64	@ 0x40
 80098fc:	d005      	beq.n	800990a <USBD_StdDevReq+0x26>
 80098fe:	2b40      	cmp	r3, #64	@ 0x40
 8009900:	d853      	bhi.n	80099aa <USBD_StdDevReq+0xc6>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00b      	beq.n	800991e <USBD_StdDevReq+0x3a>
 8009906:	2b20      	cmp	r3, #32
 8009908:	d14f      	bne.n	80099aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]
      break;
 800991c:	e04a      	b.n	80099b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	785b      	ldrb	r3, [r3, #1]
 8009922:	2b09      	cmp	r3, #9
 8009924:	d83b      	bhi.n	800999e <USBD_StdDevReq+0xba>
 8009926:	a201      	add	r2, pc, #4	@ (adr r2, 800992c <USBD_StdDevReq+0x48>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	08009981 	.word	0x08009981
 8009930:	08009995 	.word	0x08009995
 8009934:	0800999f 	.word	0x0800999f
 8009938:	0800998b 	.word	0x0800998b
 800993c:	0800999f 	.word	0x0800999f
 8009940:	0800995f 	.word	0x0800995f
 8009944:	08009955 	.word	0x08009955
 8009948:	0800999f 	.word	0x0800999f
 800994c:	08009977 	.word	0x08009977
 8009950:	08009969 	.word	0x08009969
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f9de 	bl	8009d18 <USBD_GetDescriptor>
          break;
 800995c:	e024      	b.n	80099a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fb7f 	bl	800a064 <USBD_SetAddress>
          break;
 8009966:	e01f      	b.n	80099a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fbbe 	bl	800a0ec <USBD_SetConfig>
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]
          break;
 8009974:	e018      	b.n	80099a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fc5d 	bl	800a238 <USBD_GetConfig>
          break;
 800997e:	e013      	b.n	80099a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fc8e 	bl	800a2a4 <USBD_GetStatus>
          break;
 8009988:	e00e      	b.n	80099a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fcbd 	bl	800a30c <USBD_SetFeature>
          break;
 8009992:	e009      	b.n	80099a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fccc 	bl	800a334 <USBD_ClrFeature>
          break;
 800999c:	e004      	b.n	80099a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fd23 	bl	800a3ec <USBD_CtlError>
          break;
 80099a6:	bf00      	nop
      }
      break;
 80099a8:	e004      	b.n	80099b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fd1d 	bl	800a3ec <USBD_CtlError>
      break;
 80099b2:	bf00      	nop
  }

  return ret;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop

080099c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099d6:	2b40      	cmp	r3, #64	@ 0x40
 80099d8:	d005      	beq.n	80099e6 <USBD_StdItfReq+0x26>
 80099da:	2b40      	cmp	r3, #64	@ 0x40
 80099dc:	d82f      	bhi.n	8009a3e <USBD_StdItfReq+0x7e>
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <USBD_StdItfReq+0x26>
 80099e2:	2b20      	cmp	r3, #32
 80099e4:	d12b      	bne.n	8009a3e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	3b01      	subs	r3, #1
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d81d      	bhi.n	8009a30 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	889b      	ldrh	r3, [r3, #4]
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d813      	bhi.n	8009a26 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	4798      	blx	r3
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	88db      	ldrh	r3, [r3, #6]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d110      	bne.n	8009a3a <USBD_StdItfReq+0x7a>
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10d      	bne.n	8009a3a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fdaf 	bl	800a582 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a24:	e009      	b.n	8009a3a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fcdf 	bl	800a3ec <USBD_CtlError>
          break;
 8009a2e:	e004      	b.n	8009a3a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fcda 	bl	800a3ec <USBD_CtlError>
          break;
 8009a38:	e000      	b.n	8009a3c <USBD_StdItfReq+0x7c>
          break;
 8009a3a:	bf00      	nop
      }
      break;
 8009a3c:	e004      	b.n	8009a48 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fcd3 	bl	800a3ec <USBD_CtlError>
      break;
 8009a46:	bf00      	nop
  }

  return ret;
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	889b      	ldrh	r3, [r3, #4]
 8009a64:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a6e:	2b40      	cmp	r3, #64	@ 0x40
 8009a70:	d007      	beq.n	8009a82 <USBD_StdEPReq+0x30>
 8009a72:	2b40      	cmp	r3, #64	@ 0x40
 8009a74:	f200 8145 	bhi.w	8009d02 <USBD_StdEPReq+0x2b0>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00c      	beq.n	8009a96 <USBD_StdEPReq+0x44>
 8009a7c:	2b20      	cmp	r3, #32
 8009a7e:	f040 8140 	bne.w	8009d02 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	4798      	blx	r3
 8009a90:	4603      	mov	r3, r0
 8009a92:	73fb      	strb	r3, [r7, #15]
      break;
 8009a94:	e13a      	b.n	8009d0c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	785b      	ldrb	r3, [r3, #1]
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d007      	beq.n	8009aae <USBD_StdEPReq+0x5c>
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	f300 8129 	bgt.w	8009cf6 <USBD_StdEPReq+0x2a4>
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d07f      	beq.n	8009ba8 <USBD_StdEPReq+0x156>
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d03c      	beq.n	8009b26 <USBD_StdEPReq+0xd4>
 8009aac:	e123      	b.n	8009cf6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d002      	beq.n	8009ac0 <USBD_StdEPReq+0x6e>
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d016      	beq.n	8009aec <USBD_StdEPReq+0x9a>
 8009abe:	e02c      	b.n	8009b1a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00d      	beq.n	8009ae2 <USBD_StdEPReq+0x90>
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	2b80      	cmp	r3, #128	@ 0x80
 8009aca:	d00a      	beq.n	8009ae2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f001 f88b 	bl	800abec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ad6:	2180      	movs	r1, #128	@ 0x80
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 f887 	bl	800abec <USBD_LL_StallEP>
 8009ade:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ae0:	e020      	b.n	8009b24 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fc81 	bl	800a3ec <USBD_CtlError>
              break;
 8009aea:	e01b      	b.n	8009b24 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	885b      	ldrh	r3, [r3, #2]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10e      	bne.n	8009b12 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00b      	beq.n	8009b12 <USBD_StdEPReq+0xc0>
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	2b80      	cmp	r3, #128	@ 0x80
 8009afe:	d008      	beq.n	8009b12 <USBD_StdEPReq+0xc0>
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	88db      	ldrh	r3, [r3, #6]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d104      	bne.n	8009b12 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f001 f86d 	bl	800abec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fd35 	bl	800a582 <USBD_CtlSendStatus>

              break;
 8009b18:	e004      	b.n	8009b24 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fc65 	bl	800a3ec <USBD_CtlError>
              break;
 8009b22:	bf00      	nop
          }
          break;
 8009b24:	e0ec      	b.n	8009d00 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d002      	beq.n	8009b38 <USBD_StdEPReq+0xe6>
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d016      	beq.n	8009b64 <USBD_StdEPReq+0x112>
 8009b36:	e030      	b.n	8009b9a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00d      	beq.n	8009b5a <USBD_StdEPReq+0x108>
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	2b80      	cmp	r3, #128	@ 0x80
 8009b42:	d00a      	beq.n	8009b5a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b44:	7bbb      	ldrb	r3, [r7, #14]
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f001 f84f 	bl	800abec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b4e:	2180      	movs	r1, #128	@ 0x80
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 f84b 	bl	800abec <USBD_LL_StallEP>
 8009b56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b58:	e025      	b.n	8009ba6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fc45 	bl	800a3ec <USBD_CtlError>
              break;
 8009b62:	e020      	b.n	8009ba6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	885b      	ldrh	r3, [r3, #2]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d11b      	bne.n	8009ba4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b6c:	7bbb      	ldrb	r3, [r7, #14]
 8009b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d004      	beq.n	8009b80 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f001 f855 	bl	800ac2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fcfe 	bl	800a582 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	4798      	blx	r3
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009b98:	e004      	b.n	8009ba4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fc25 	bl	800a3ec <USBD_CtlError>
              break;
 8009ba2:	e000      	b.n	8009ba6 <USBD_StdEPReq+0x154>
              break;
 8009ba4:	bf00      	nop
          }
          break;
 8009ba6:	e0ab      	b.n	8009d00 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d002      	beq.n	8009bba <USBD_StdEPReq+0x168>
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d032      	beq.n	8009c1e <USBD_StdEPReq+0x1cc>
 8009bb8:	e097      	b.n	8009cea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d007      	beq.n	8009bd0 <USBD_StdEPReq+0x17e>
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	2b80      	cmp	r3, #128	@ 0x80
 8009bc4:	d004      	beq.n	8009bd0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fc0f 	bl	800a3ec <USBD_CtlError>
                break;
 8009bce:	e091      	b.n	8009cf4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	da0b      	bge.n	8009bf0 <USBD_StdEPReq+0x19e>
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bde:	4613      	mov	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	3310      	adds	r3, #16
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	4413      	add	r3, r2
 8009bec:	3304      	adds	r3, #4
 8009bee:	e00b      	b.n	8009c08 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	4413      	add	r3, r2
 8009c06:	3304      	adds	r3, #4
 8009c08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	2202      	movs	r2, #2
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fc59 	bl	800a4ce <USBD_CtlSendData>
              break;
 8009c1c:	e06a      	b.n	8009cf4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	da11      	bge.n	8009c4a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	f003 020f 	and.w	r2, r3, #15
 8009c2c:	6879      	ldr	r1, [r7, #4]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	440b      	add	r3, r1
 8009c38:	3324      	adds	r3, #36	@ 0x24
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d117      	bne.n	8009c70 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fbd2 	bl	800a3ec <USBD_CtlError>
                  break;
 8009c48:	e054      	b.n	8009cf4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	f003 020f 	and.w	r2, r3, #15
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	4613      	mov	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	440b      	add	r3, r1
 8009c5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d104      	bne.n	8009c70 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fbbf 	bl	800a3ec <USBD_CtlError>
                  break;
 8009c6e:	e041      	b.n	8009cf4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	da0b      	bge.n	8009c90 <USBD_StdEPReq+0x23e>
 8009c78:	7bbb      	ldrb	r3, [r7, #14]
 8009c7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	3310      	adds	r3, #16
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	e00b      	b.n	8009ca8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c90:	7bbb      	ldrb	r3, [r7, #14]
 8009c92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c96:	4613      	mov	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009caa:	7bbb      	ldrb	r3, [r7, #14]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <USBD_StdEPReq+0x264>
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	2b80      	cmp	r3, #128	@ 0x80
 8009cb4:	d103      	bne.n	8009cbe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	e00e      	b.n	8009cdc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 ffd0 	bl	800ac68 <USBD_LL_IsStallEP>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	601a      	str	r2, [r3, #0]
 8009cd4:	e002      	b.n	8009cdc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fbf3 	bl	800a4ce <USBD_CtlSendData>
              break;
 8009ce8:	e004      	b.n	8009cf4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fb7d 	bl	800a3ec <USBD_CtlError>
              break;
 8009cf2:	bf00      	nop
          }
          break;
 8009cf4:	e004      	b.n	8009d00 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fb77 	bl	800a3ec <USBD_CtlError>
          break;
 8009cfe:	bf00      	nop
      }
      break;
 8009d00:	e004      	b.n	8009d0c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fb71 	bl	800a3ec <USBD_CtlError>
      break;
 8009d0a:	bf00      	nop
  }

  return ret;
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d26:	2300      	movs	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	885b      	ldrh	r3, [r3, #2]
 8009d32:	0a1b      	lsrs	r3, r3, #8
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	3b01      	subs	r3, #1
 8009d38:	2b0e      	cmp	r3, #14
 8009d3a:	f200 8165 	bhi.w	800a008 <USBD_GetDescriptor+0x2f0>
 8009d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d44 <USBD_GetDescriptor+0x2c>)
 8009d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d44:	08009db5 	.word	0x08009db5
 8009d48:	08009dcd 	.word	0x08009dcd
 8009d4c:	08009e0d 	.word	0x08009e0d
 8009d50:	0800a009 	.word	0x0800a009
 8009d54:	0800a009 	.word	0x0800a009
 8009d58:	08009fa9 	.word	0x08009fa9
 8009d5c:	08009fd5 	.word	0x08009fd5
 8009d60:	0800a009 	.word	0x0800a009
 8009d64:	0800a009 	.word	0x0800a009
 8009d68:	0800a009 	.word	0x0800a009
 8009d6c:	0800a009 	.word	0x0800a009
 8009d70:	0800a009 	.word	0x0800a009
 8009d74:	0800a009 	.word	0x0800a009
 8009d78:	0800a009 	.word	0x0800a009
 8009d7c:	08009d81 	.word	0x08009d81
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	7c12      	ldrb	r2, [r2, #16]
 8009d98:	f107 0108 	add.w	r1, r7, #8
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4798      	blx	r3
 8009da0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009da2:	e139      	b.n	800a018 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fb20 	bl	800a3ec <USBD_CtlError>
        err++;
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	3301      	adds	r3, #1
 8009db0:	72fb      	strb	r3, [r7, #11]
      break;
 8009db2:	e131      	b.n	800a018 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	7c12      	ldrb	r2, [r2, #16]
 8009dc0:	f107 0108 	add.w	r1, r7, #8
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4798      	blx	r3
 8009dc8:	60f8      	str	r0, [r7, #12]
      break;
 8009dca:	e125      	b.n	800a018 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	7c1b      	ldrb	r3, [r3, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10d      	bne.n	8009df0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ddc:	f107 0208 	add.w	r2, r7, #8
 8009de0:	4610      	mov	r0, r2
 8009de2:	4798      	blx	r3
 8009de4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3301      	adds	r3, #1
 8009dea:	2202      	movs	r2, #2
 8009dec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dee:	e113      	b.n	800a018 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df8:	f107 0208 	add.w	r2, r7, #8
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	4798      	blx	r3
 8009e00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3301      	adds	r3, #1
 8009e06:	2202      	movs	r2, #2
 8009e08:	701a      	strb	r2, [r3, #0]
      break;
 8009e0a:	e105      	b.n	800a018 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	885b      	ldrh	r3, [r3, #2]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b05      	cmp	r3, #5
 8009e14:	f200 80ac 	bhi.w	8009f70 <USBD_GetDescriptor+0x258>
 8009e18:	a201      	add	r2, pc, #4	@ (adr r2, 8009e20 <USBD_GetDescriptor+0x108>)
 8009e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1e:	bf00      	nop
 8009e20:	08009e39 	.word	0x08009e39
 8009e24:	08009e6d 	.word	0x08009e6d
 8009e28:	08009ea1 	.word	0x08009ea1
 8009e2c:	08009ed5 	.word	0x08009ed5
 8009e30:	08009f09 	.word	0x08009f09
 8009e34:	08009f3d 	.word	0x08009f3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	7c12      	ldrb	r2, [r2, #16]
 8009e50:	f107 0108 	add.w	r1, r7, #8
 8009e54:	4610      	mov	r0, r2
 8009e56:	4798      	blx	r3
 8009e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e5a:	e0a4      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fac4 	bl	800a3ec <USBD_CtlError>
            err++;
 8009e64:	7afb      	ldrb	r3, [r7, #11]
 8009e66:	3301      	adds	r3, #1
 8009e68:	72fb      	strb	r3, [r7, #11]
          break;
 8009e6a:	e09c      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	7c12      	ldrb	r2, [r2, #16]
 8009e84:	f107 0108 	add.w	r1, r7, #8
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4798      	blx	r3
 8009e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e8e:	e08a      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 faaa 	bl	800a3ec <USBD_CtlError>
            err++;
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e9e:	e082      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	7c12      	ldrb	r2, [r2, #16]
 8009eb8:	f107 0108 	add.w	r1, r7, #8
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4798      	blx	r3
 8009ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ec2:	e070      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa90 	bl	800a3ec <USBD_CtlError>
            err++;
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ed2:	e068      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	7c12      	ldrb	r2, [r2, #16]
 8009eec:	f107 0108 	add.w	r1, r7, #8
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4798      	blx	r3
 8009ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef6:	e056      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fa76 	bl	800a3ec <USBD_CtlError>
            err++;
 8009f00:	7afb      	ldrb	r3, [r7, #11]
 8009f02:	3301      	adds	r3, #1
 8009f04:	72fb      	strb	r3, [r7, #11]
          break;
 8009f06:	e04e      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f1a:	695b      	ldr	r3, [r3, #20]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	7c12      	ldrb	r2, [r2, #16]
 8009f20:	f107 0108 	add.w	r1, r7, #8
 8009f24:	4610      	mov	r0, r2
 8009f26:	4798      	blx	r3
 8009f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2a:	e03c      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fa5c 	bl	800a3ec <USBD_CtlError>
            err++;
 8009f34:	7afb      	ldrb	r3, [r7, #11]
 8009f36:	3301      	adds	r3, #1
 8009f38:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3a:	e034      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00b      	beq.n	8009f60 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	7c12      	ldrb	r2, [r2, #16]
 8009f54:	f107 0108 	add.w	r1, r7, #8
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4798      	blx	r3
 8009f5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f5e:	e022      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fa42 	bl	800a3ec <USBD_CtlError>
            err++;
 8009f68:	7afb      	ldrb	r3, [r7, #11]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f6e:	e01a      	b.n	8009fa6 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00c      	beq.n	8009f96 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	8852      	ldrh	r2, [r2, #2]
 8009f88:	b2d1      	uxtb	r1, r2
 8009f8a:	f107 0208 	add.w	r2, r7, #8
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	4798      	blx	r3
 8009f92:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8009f94:	e006      	b.n	8009fa4 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fa27 	bl	800a3ec <USBD_CtlError>
            err++;
 8009f9e:	7afb      	ldrb	r3, [r7, #11]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	72fb      	strb	r3, [r7, #11]
          break;
 8009fa4:	bf00      	nop
      }
      break;
 8009fa6:	e037      	b.n	800a018 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	7c1b      	ldrb	r3, [r3, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d109      	bne.n	8009fc4 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb8:	f107 0208 	add.w	r2, r7, #8
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	4798      	blx	r3
 8009fc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fc2:	e029      	b.n	800a018 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fa10 	bl	800a3ec <USBD_CtlError>
        err++;
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	72fb      	strb	r3, [r7, #11]
      break;
 8009fd2:	e021      	b.n	800a018 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7c1b      	ldrb	r3, [r3, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10d      	bne.n	8009ff8 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fe4:	f107 0208 	add.w	r2, r7, #8
 8009fe8:	4610      	mov	r0, r2
 8009fea:	4798      	blx	r3
 8009fec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	2207      	movs	r2, #7
 8009ff4:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ff6:	e00f      	b.n	800a018 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f9f6 	bl	800a3ec <USBD_CtlError>
        err++;
 800a000:	7afb      	ldrb	r3, [r7, #11]
 800a002:	3301      	adds	r3, #1
 800a004:	72fb      	strb	r3, [r7, #11]
      break;
 800a006:	e007      	b.n	800a018 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f9ee 	bl	800a3ec <USBD_CtlError>
      err++;
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	3301      	adds	r3, #1
 800a014:	72fb      	strb	r3, [r7, #11]
      break;
 800a016:	bf00      	nop
  }

  if (err != 0U)
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d11e      	bne.n	800a05c <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	88db      	ldrh	r3, [r3, #6]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d016      	beq.n	800a054 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 800a026:	893b      	ldrh	r3, [r7, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00e      	beq.n	800a04a <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	88da      	ldrh	r2, [r3, #6]
 800a030:	893b      	ldrh	r3, [r7, #8]
 800a032:	4293      	cmp	r3, r2
 800a034:	bf28      	it	cs
 800a036:	4613      	movcs	r3, r2
 800a038:	b29b      	uxth	r3, r3
 800a03a:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a03c:	893b      	ldrh	r3, [r7, #8]
 800a03e:	461a      	mov	r2, r3
 800a040:	68f9      	ldr	r1, [r7, #12]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fa43 	bl	800a4ce <USBD_CtlSendData>
 800a048:	e009      	b.n	800a05e <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f9cd 	bl	800a3ec <USBD_CtlError>
 800a052:	e004      	b.n	800a05e <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fa94 	bl	800a582 <USBD_CtlSendStatus>
 800a05a:	e000      	b.n	800a05e <USBD_GetDescriptor+0x346>
    return;
 800a05c:	bf00      	nop
  }
}
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	889b      	ldrh	r3, [r3, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d131      	bne.n	800a0da <USBD_SetAddress+0x76>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	88db      	ldrh	r3, [r3, #6]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d12d      	bne.n	800a0da <USBD_SetAddress+0x76>
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	885b      	ldrh	r3, [r3, #2]
 800a082:	2b7f      	cmp	r3, #127	@ 0x7f
 800a084:	d829      	bhi.n	800a0da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	885b      	ldrh	r3, [r3, #2]
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a090:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d104      	bne.n	800a0a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f9a3 	bl	800a3ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a6:	e01d      	b.n	800a0e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	7bfa      	ldrb	r2, [r7, #15]
 800a0ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fe03 	bl	800acc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fa61 	bl	800a582 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d004      	beq.n	800a0d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ce:	e009      	b.n	800a0e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d8:	e004      	b.n	800a0e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f985 	bl	800a3ec <USBD_CtlError>
  }
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	4b4c      	ldr	r3, [pc, #304]	@ (800a234 <USBD_SetConfig+0x148>)
 800a102:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a104:	4b4b      	ldr	r3, [pc, #300]	@ (800a234 <USBD_SetConfig+0x148>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d905      	bls.n	800a118 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f96c 	bl	800a3ec <USBD_CtlError>
    return USBD_FAIL;
 800a114:	2303      	movs	r3, #3
 800a116:	e088      	b.n	800a22a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b02      	cmp	r3, #2
 800a122:	d002      	beq.n	800a12a <USBD_SetConfig+0x3e>
 800a124:	2b03      	cmp	r3, #3
 800a126:	d025      	beq.n	800a174 <USBD_SetConfig+0x88>
 800a128:	e071      	b.n	800a20e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a12a:	4b42      	ldr	r3, [pc, #264]	@ (800a234 <USBD_SetConfig+0x148>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d01c      	beq.n	800a16c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a132:	4b40      	ldr	r3, [pc, #256]	@ (800a234 <USBD_SetConfig+0x148>)
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a13c:	4b3d      	ldr	r3, [pc, #244]	@ (800a234 <USBD_SetConfig+0x148>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff f97f 	bl	8009446 <USBD_SetClassConfig>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d004      	beq.n	800a15c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f949 	bl	800a3ec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a15a:	e065      	b.n	800a228 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fa10 	bl	800a582 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2203      	movs	r2, #3
 800a166:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a16a:	e05d      	b.n	800a228 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fa08 	bl	800a582 <USBD_CtlSendStatus>
      break;
 800a172:	e059      	b.n	800a228 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a174:	4b2f      	ldr	r3, [pc, #188]	@ (800a234 <USBD_SetConfig+0x148>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d112      	bne.n	800a1a2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2202      	movs	r2, #2
 800a180:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a184:	4b2b      	ldr	r3, [pc, #172]	@ (800a234 <USBD_SetConfig+0x148>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a18e:	4b29      	ldr	r3, [pc, #164]	@ (800a234 <USBD_SetConfig+0x148>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff f972 	bl	800947e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f9f1 	bl	800a582 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1a0:	e042      	b.n	800a228 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a1a2:	4b24      	ldr	r3, [pc, #144]	@ (800a234 <USBD_SetConfig+0x148>)
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d02a      	beq.n	800a206 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff f960 	bl	800947e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a1be:	4b1d      	ldr	r3, [pc, #116]	@ (800a234 <USBD_SetConfig+0x148>)
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1c8:	4b1a      	ldr	r3, [pc, #104]	@ (800a234 <USBD_SetConfig+0x148>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7ff f939 	bl	8009446 <USBD_SetClassConfig>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00f      	beq.n	800a1fe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f903 	bl	800a3ec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff f945 	bl	800947e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a1fc:	e014      	b.n	800a228 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f9bf 	bl	800a582 <USBD_CtlSendStatus>
      break;
 800a204:	e010      	b.n	800a228 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f9bb 	bl	800a582 <USBD_CtlSendStatus>
      break;
 800a20c:	e00c      	b.n	800a228 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f8eb 	bl	800a3ec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a216:	4b07      	ldr	r3, [pc, #28]	@ (800a234 <USBD_SetConfig+0x148>)
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7ff f92e 	bl	800947e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a222:	2303      	movs	r3, #3
 800a224:	73fb      	strb	r3, [r7, #15]
      break;
 800a226:	bf00      	nop
  }

  return ret;
 800a228:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	2000036f 	.word	0x2000036f

0800a238 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	88db      	ldrh	r3, [r3, #6]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d004      	beq.n	800a254 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a24a:	6839      	ldr	r1, [r7, #0]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f8cd 	bl	800a3ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a252:	e023      	b.n	800a29c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	dc02      	bgt.n	800a266 <USBD_GetConfig+0x2e>
 800a260:	2b00      	cmp	r3, #0
 800a262:	dc03      	bgt.n	800a26c <USBD_GetConfig+0x34>
 800a264:	e015      	b.n	800a292 <USBD_GetConfig+0x5a>
 800a266:	2b03      	cmp	r3, #3
 800a268:	d00b      	beq.n	800a282 <USBD_GetConfig+0x4a>
 800a26a:	e012      	b.n	800a292 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	3308      	adds	r3, #8
 800a276:	2201      	movs	r2, #1
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f927 	bl	800a4ce <USBD_CtlSendData>
        break;
 800a280:	e00c      	b.n	800a29c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	3304      	adds	r3, #4
 800a286:	2201      	movs	r2, #1
 800a288:	4619      	mov	r1, r3
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f91f 	bl	800a4ce <USBD_CtlSendData>
        break;
 800a290:	e004      	b.n	800a29c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f8a9 	bl	800a3ec <USBD_CtlError>
        break;
 800a29a:	bf00      	nop
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d81e      	bhi.n	800a2fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	88db      	ldrh	r3, [r3, #6]
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d004      	beq.n	800a2ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f890 	bl	800a3ec <USBD_CtlError>
        break;
 800a2cc:	e01a      	b.n	800a304 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d005      	beq.n	800a2ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	f043 0202 	orr.w	r2, r3, #2
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	330c      	adds	r3, #12
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f8eb 	bl	800a4ce <USBD_CtlSendData>
      break;
 800a2f8:	e004      	b.n	800a304 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f875 	bl	800a3ec <USBD_CtlError>
      break;
 800a302:	bf00      	nop
  }
}
 800a304:	bf00      	nop
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	885b      	ldrh	r3, [r3, #2]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d106      	bne.n	800a32c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f92b 	bl	800a582 <USBD_CtlSendStatus>
  }
}
 800a32c:	bf00      	nop
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a344:	b2db      	uxtb	r3, r3
 800a346:	3b01      	subs	r3, #1
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d80b      	bhi.n	800a364 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	885b      	ldrh	r3, [r3, #2]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d10c      	bne.n	800a36e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f910 	bl	800a582 <USBD_CtlSendStatus>
      }
      break;
 800a362:	e004      	b.n	800a36e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f840 	bl	800a3ec <USBD_CtlError>
      break;
 800a36c:	e000      	b.n	800a370 <USBD_ClrFeature+0x3c>
      break;
 800a36e:	bf00      	nop
  }
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	781a      	ldrb	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3301      	adds	r3, #1
 800a392:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	781a      	ldrb	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f7ff fa7f 	bl	80098a6 <SWAPBYTE>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f7ff fa72 	bl	80098a6 <SWAPBYTE>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f7ff fa65 	bl	80098a6 <SWAPBYTE>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	461a      	mov	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	80da      	strh	r2, [r3, #6]
}
 800a3e4:	bf00      	nop
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3f6:	2180      	movs	r1, #128	@ 0x80
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fbf7 	bl	800abec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a3fe:	2100      	movs	r1, #0
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fbf3 	bl	800abec <USBD_LL_StallEP>
}
 800a406:	bf00      	nop
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b086      	sub	sp, #24
 800a412:	af00      	add	r7, sp, #0
 800a414:	60f8      	str	r0, [r7, #12]
 800a416:	60b9      	str	r1, [r7, #8]
 800a418:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a41a:	2300      	movs	r3, #0
 800a41c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d036      	beq.n	800a492 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a428:	6938      	ldr	r0, [r7, #16]
 800a42a:	f000 f836 	bl	800a49a <USBD_GetLen>
 800a42e:	4603      	mov	r3, r0
 800a430:	3301      	adds	r3, #1
 800a432:	b29b      	uxth	r3, r3
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	b29a      	uxth	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	4413      	add	r3, r2
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	7812      	ldrb	r2, [r2, #0]
 800a446:	701a      	strb	r2, [r3, #0]
  idx++;
 800a448:	7dfb      	ldrb	r3, [r7, #23]
 800a44a:	3301      	adds	r3, #1
 800a44c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	4413      	add	r3, r2
 800a454:	2203      	movs	r2, #3
 800a456:	701a      	strb	r2, [r3, #0]
  idx++;
 800a458:	7dfb      	ldrb	r3, [r7, #23]
 800a45a:	3301      	adds	r3, #1
 800a45c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a45e:	e013      	b.n	800a488 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	4413      	add	r3, r2
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	7812      	ldrb	r2, [r2, #0]
 800a46a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	3301      	adds	r3, #1
 800a470:	613b      	str	r3, [r7, #16]
    idx++;
 800a472:	7dfb      	ldrb	r3, [r7, #23]
 800a474:	3301      	adds	r3, #1
 800a476:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	4413      	add	r3, r2
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
    idx++;
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	3301      	adds	r3, #1
 800a486:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1e7      	bne.n	800a460 <USBD_GetString+0x52>
 800a490:	e000      	b.n	800a494 <USBD_GetString+0x86>
    return;
 800a492:	bf00      	nop
  }
}
 800a494:	3718      	adds	r7, #24
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b085      	sub	sp, #20
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a4aa:	e005      	b.n	800a4b8 <USBD_GetLen+0x1e>
  {
    len++;
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1f5      	bne.n	800a4ac <USBD_GetLen+0x12>
  }

  return len;
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2202      	movs	r2, #2
 800a4de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 fc02 	bl	800acfe <USBD_LL_Transmit>

  return USBD_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	2100      	movs	r1, #0
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fbf1 	bl	800acfe <USBD_LL_Transmit>

  return USBD_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b084      	sub	sp, #16
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	60f8      	str	r0, [r7, #12]
 800a52e:	60b9      	str	r1, [r7, #8]
 800a530:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2203      	movs	r2, #3
 800a536:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	2100      	movs	r1, #0
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 fbf5 	bl	800ad40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	2100      	movs	r1, #0
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fbe4 	bl	800ad40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b082      	sub	sp, #8
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2204      	movs	r2, #4
 800a58e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a592:	2300      	movs	r3, #0
 800a594:	2200      	movs	r2, #0
 800a596:	2100      	movs	r1, #0
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fbb0 	bl	800acfe <USBD_LL_Transmit>

  return USBD_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2205      	movs	r2, #5
 800a5b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2100      	movs	r1, #0
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fbbe 	bl	800ad40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	4912      	ldr	r1, [pc, #72]	@ (800a620 <MX_USB_Device_Init+0x50>)
 800a5d8:	4812      	ldr	r0, [pc, #72]	@ (800a624 <MX_USB_Device_Init+0x54>)
 800a5da:	f7fe feab 	bl	8009334 <USBD_Init>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a5e4:	f7f6 f894 	bl	8000710 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 800a5e8:	490f      	ldr	r1, [pc, #60]	@ (800a628 <MX_USB_Device_Init+0x58>)
 800a5ea:	480e      	ldr	r0, [pc, #56]	@ (800a624 <MX_USB_Device_Init+0x54>)
 800a5ec:	f7fe fed2 	bl	8009394 <USBD_RegisterClass>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a5f6:	f7f6 f88b 	bl	8000710 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 800a5fa:	490c      	ldr	r1, [pc, #48]	@ (800a62c <MX_USB_Device_Init+0x5c>)
 800a5fc:	4809      	ldr	r0, [pc, #36]	@ (800a624 <MX_USB_Device_Init+0x54>)
 800a5fe:	f7fe fb17 	bl	8008c30 <USBD_DFU_RegisterMedia>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a608:	f7f6 f882 	bl	8000710 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a60c:	4805      	ldr	r0, [pc, #20]	@ (800a624 <MX_USB_Device_Init+0x54>)
 800a60e:	f7fe fee8 	bl	80093e2 <USBD_Start>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a618:	f7f6 f87a 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a61c:	bf00      	nop
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	20000070 	.word	0x20000070
 800a624:	20000370 	.word	0x20000370
 800a628:	2000000c 	.word	0x2000000c
 800a62c:	200000c4 	.word	0x200000c4

0800a630 <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	6039      	str	r1, [r7, #0]
 800a63a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2212      	movs	r2, #18
 800a640:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 800a642:	4b03      	ldr	r3, [pc, #12]	@ (800a650 <USBD_DFU_DeviceDescriptor+0x20>)
}
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	20000090 	.word	0x20000090

0800a654 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	6039      	str	r1, [r7, #0]
 800a65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	2204      	movs	r2, #4
 800a664:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a666:	4b03      	ldr	r3, [pc, #12]	@ (800a674 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 800a668:	4618      	mov	r0, r3
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	200000a4 	.word	0x200000a4

0800a678 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	6039      	str	r1, [r7, #0]
 800a682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d105      	bne.n	800a696 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	4907      	ldr	r1, [pc, #28]	@ (800a6ac <USBD_DFU_ProductStrDescriptor+0x34>)
 800a68e:	4808      	ldr	r0, [pc, #32]	@ (800a6b0 <USBD_DFU_ProductStrDescriptor+0x38>)
 800a690:	f7ff febd 	bl	800a40e <USBD_GetString>
 800a694:	e004      	b.n	800a6a0 <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	4904      	ldr	r1, [pc, #16]	@ (800a6ac <USBD_DFU_ProductStrDescriptor+0x34>)
 800a69a:	4805      	ldr	r0, [pc, #20]	@ (800a6b0 <USBD_DFU_ProductStrDescriptor+0x38>)
 800a69c:	f7ff feb7 	bl	800a40e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6a0:	4b02      	ldr	r3, [pc, #8]	@ (800a6ac <USBD_DFU_ProductStrDescriptor+0x34>)
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20000640 	.word	0x20000640
 800a6b0:	0800aef4 	.word	0x0800aef4

0800a6b4 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	6039      	str	r1, [r7, #0]
 800a6be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	4904      	ldr	r1, [pc, #16]	@ (800a6d4 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 800a6c4:	4804      	ldr	r0, [pc, #16]	@ (800a6d8 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 800a6c6:	f7ff fea2 	bl	800a40e <USBD_GetString>
  return USBD_StrDesc;
 800a6ca:	4b02      	ldr	r3, [pc, #8]	@ (800a6d4 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	20000640 	.word	0x20000640
 800a6d8:	0800af14 	.word	0x0800af14

0800a6dc <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	6039      	str	r1, [r7, #0]
 800a6e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	221a      	movs	r2, #26
 800a6ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6ee:	f000 f843 	bl	800a778 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a6f2:	4b02      	ldr	r3, [pc, #8]	@ (800a6fc <USBD_DFU_SerialStrDescriptor+0x20>)
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	200000a8 	.word	0x200000a8

0800a700 <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	4603      	mov	r3, r0
 800a708:	6039      	str	r1, [r7, #0]
 800a70a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a70c:	79fb      	ldrb	r3, [r7, #7]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d105      	bne.n	800a71e <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	4907      	ldr	r1, [pc, #28]	@ (800a734 <USBD_DFU_ConfigStrDescriptor+0x34>)
 800a716:	4808      	ldr	r0, [pc, #32]	@ (800a738 <USBD_DFU_ConfigStrDescriptor+0x38>)
 800a718:	f7ff fe79 	bl	800a40e <USBD_GetString>
 800a71c:	e004      	b.n	800a728 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	4904      	ldr	r1, [pc, #16]	@ (800a734 <USBD_DFU_ConfigStrDescriptor+0x34>)
 800a722:	4805      	ldr	r0, [pc, #20]	@ (800a738 <USBD_DFU_ConfigStrDescriptor+0x38>)
 800a724:	f7ff fe73 	bl	800a40e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a728:	4b02      	ldr	r3, [pc, #8]	@ (800a734 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	20000640 	.word	0x20000640
 800a738:	0800af28 	.word	0x0800af28

0800a73c <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	4603      	mov	r3, r0
 800a744:	6039      	str	r1, [r7, #0]
 800a746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a748:	79fb      	ldrb	r3, [r7, #7]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d105      	bne.n	800a75a <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a74e:	683a      	ldr	r2, [r7, #0]
 800a750:	4907      	ldr	r1, [pc, #28]	@ (800a770 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 800a752:	4808      	ldr	r0, [pc, #32]	@ (800a774 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 800a754:	f7ff fe5b 	bl	800a40e <USBD_GetString>
 800a758:	e004      	b.n	800a764 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	4904      	ldr	r1, [pc, #16]	@ (800a770 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 800a75e:	4805      	ldr	r0, [pc, #20]	@ (800a774 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 800a760:	f7ff fe55 	bl	800a40e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a764:	4b02      	ldr	r3, [pc, #8]	@ (800a770 <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	20000640 	.word	0x20000640
 800a774:	0800af34 	.word	0x0800af34

0800a778 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a77e:	4b0f      	ldr	r3, [pc, #60]	@ (800a7bc <Get_SerialNum+0x44>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a784:	4b0e      	ldr	r3, [pc, #56]	@ (800a7c0 <Get_SerialNum+0x48>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a78a:	4b0e      	ldr	r3, [pc, #56]	@ (800a7c4 <Get_SerialNum+0x4c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4413      	add	r3, r2
 800a796:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d009      	beq.n	800a7b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a79e:	2208      	movs	r2, #8
 800a7a0:	4909      	ldr	r1, [pc, #36]	@ (800a7c8 <Get_SerialNum+0x50>)
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 f814 	bl	800a7d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7a8:	2204      	movs	r2, #4
 800a7aa:	4908      	ldr	r1, [pc, #32]	@ (800a7cc <Get_SerialNum+0x54>)
 800a7ac:	68b8      	ldr	r0, [r7, #8]
 800a7ae:	f000 f80f 	bl	800a7d0 <IntToUnicode>
  }
}
 800a7b2:	bf00      	nop
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	1fff7590 	.word	0x1fff7590
 800a7c0:	1fff7594 	.word	0x1fff7594
 800a7c4:	1fff7598 	.word	0x1fff7598
 800a7c8:	200000aa 	.word	0x200000aa
 800a7cc:	200000ba 	.word	0x200000ba

0800a7d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	75fb      	strb	r3, [r7, #23]
 800a7e6:	e027      	b.n	800a838 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	0f1b      	lsrs	r3, r3, #28
 800a7ec:	2b09      	cmp	r3, #9
 800a7ee:	d80b      	bhi.n	800a808 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	0f1b      	lsrs	r3, r3, #28
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	440b      	add	r3, r1
 800a800:	3230      	adds	r2, #48	@ 0x30
 800a802:	b2d2      	uxtb	r2, r2
 800a804:	701a      	strb	r2, [r3, #0]
 800a806:	e00a      	b.n	800a81e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	0f1b      	lsrs	r3, r3, #28
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	005b      	lsls	r3, r3, #1
 800a812:	4619      	mov	r1, r3
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	440b      	add	r3, r1
 800a818:	3237      	adds	r2, #55	@ 0x37
 800a81a:	b2d2      	uxtb	r2, r2
 800a81c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	011b      	lsls	r3, r3, #4
 800a822:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	3301      	adds	r3, #1
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	4413      	add	r3, r2
 800a82e:	2200      	movs	r2, #0
 800a830:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a832:	7dfb      	ldrb	r3, [r7, #23]
 800a834:	3301      	adds	r3, #1
 800a836:	75fb      	strb	r3, [r7, #23]
 800a838:	7dfa      	ldrb	r2, [r7, #23]
 800a83a:	79fb      	ldrb	r3, [r7, #7]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d3d3      	bcc.n	800a7e8 <IntToUnicode+0x18>
  }
}
 800a840:	bf00      	nop
 800a842:	bf00      	nop
 800a844:	371c      	adds	r7, #28
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 800a84e:	b480      	push	{r7}
 800a850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800a852:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800a854:	4618      	mov	r0, r3
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 800a85e:	b480      	push	{r7}
 800a860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800a862:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800a864:	4618      	mov	r0, r3
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800a876:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800a890:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a892:	4618      	mov	r0, r3
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b085      	sub	sp, #20
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	60f8      	str	r0, [r7, #12]
 800a8a6:	60b9      	str	r1, [r7, #8]
 800a8a8:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 800a8aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b085      	sub	sp, #20
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	607a      	str	r2, [r7, #4]
 800a8c6:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800a8c8:	7afb      	ldrb	r3, [r7, #11]
 800a8ca:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800a8cc:	bf00      	nop
  }
  return (USBD_OK);
 800a8ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b094      	sub	sp, #80	@ 0x50
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a8e4:	f107 030c 	add.w	r3, r7, #12
 800a8e8:	2244      	movs	r2, #68	@ 0x44
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fac9 	bl	800ae84 <memset>
  if(pcdHandle->Instance==USB)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a15      	ldr	r2, [pc, #84]	@ (800a94c <HAL_PCD_MspInit+0x70>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d123      	bne.n	800a944 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a8fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a900:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800a902:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a906:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a908:	f107 030c 	add.w	r3, r7, #12
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fa fda9 	bl	8005464 <HAL_RCCEx_PeriphCLKConfig>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800a918:	f7f5 fefa 	bl	8000710 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a91c:	4b0c      	ldr	r3, [pc, #48]	@ (800a950 <HAL_PCD_MspInit+0x74>)
 800a91e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a920:	4a0b      	ldr	r2, [pc, #44]	@ (800a950 <HAL_PCD_MspInit+0x74>)
 800a922:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a926:	6593      	str	r3, [r2, #88]	@ 0x58
 800a928:	4b09      	ldr	r3, [pc, #36]	@ (800a950 <HAL_PCD_MspInit+0x74>)
 800a92a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a92c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a930:	60bb      	str	r3, [r7, #8]
 800a932:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a934:	2200      	movs	r2, #0
 800a936:	2100      	movs	r1, #0
 800a938:	2014      	movs	r0, #20
 800a93a:	f7f6 fa46 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a93e:	2014      	movs	r0, #20
 800a940:	f7f6 fa5d 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a944:	bf00      	nop
 800a946:	3750      	adds	r7, #80	@ 0x50
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	40005c00 	.word	0x40005c00
 800a950:	40021000 	.word	0x40021000

0800a954 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a968:	4619      	mov	r1, r3
 800a96a:	4610      	mov	r0, r2
 800a96c:	f7fe fd9f 	bl	80094ae <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a970:	bf00      	nop
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a98a:	78fa      	ldrb	r2, [r7, #3]
 800a98c:	6879      	ldr	r1, [r7, #4]
 800a98e:	4613      	mov	r3, r2
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	4413      	add	r3, r2
 800a994:	00db      	lsls	r3, r3, #3
 800a996:	440b      	add	r3, r1
 800a998:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	78fb      	ldrb	r3, [r7, #3]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	f7fe fdd9 	bl	8009558 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a9a6:	bf00      	nop
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a9c0:	78fa      	ldrb	r2, [r7, #3]
 800a9c2:	6879      	ldr	r1, [r7, #4]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	00db      	lsls	r3, r3, #3
 800a9cc:	440b      	add	r3, r1
 800a9ce:	3324      	adds	r3, #36	@ 0x24
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	78fb      	ldrb	r3, [r7, #3]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f7fe fe22 	bl	800961e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a9da:	bf00      	nop
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b082      	sub	sp, #8
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fe ff36 	bl	8009862 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a9f6:	bf00      	nop
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa06:	2301      	movs	r3, #1
 800aa08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	795b      	ldrb	r3, [r3, #5]
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d001      	beq.n	800aa16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa12:	f7f5 fe7d 	bl	8000710 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aa1c:	7bfa      	ldrb	r2, [r7, #15]
 800aa1e:	4611      	mov	r1, r2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe fee0 	bl	80097e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fe fe8c 	bl	800974a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
	...

0800aa3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fe fedb 	bl	8009806 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	7a5b      	ldrb	r3, [r3, #9]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d005      	beq.n	800aa64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa58:	4b04      	ldr	r3, [pc, #16]	@ (800aa6c <HAL_PCD_SuspendCallback+0x30>)
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	4a03      	ldr	r2, [pc, #12]	@ (800aa6c <HAL_PCD_SuspendCallback+0x30>)
 800aa5e:	f043 0306 	orr.w	r3, r3, #6
 800aa62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800aa64:	bf00      	nop
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	e000ed00 	.word	0xe000ed00

0800aa70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	7a5b      	ldrb	r3, [r3, #9]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d007      	beq.n	800aa90 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa80:	4b08      	ldr	r3, [pc, #32]	@ (800aaa4 <HAL_PCD_ResumeCallback+0x34>)
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	4a07      	ldr	r2, [pc, #28]	@ (800aaa4 <HAL_PCD_ResumeCallback+0x34>)
 800aa86:	f023 0306 	bic.w	r3, r3, #6
 800aa8a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800aa8c:	f000 f9c8 	bl	800ae20 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fe fecb 	bl	8009832 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800aa9c:	bf00      	nop
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	e000ed00 	.word	0xe000ed00

0800aaa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800aab0:	4a1e      	ldr	r2, [pc, #120]	@ (800ab2c <USBD_LL_Init+0x84>)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a1c      	ldr	r2, [pc, #112]	@ (800ab2c <USBD_LL_Init+0x84>)
 800aabc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800aac0:	4b1a      	ldr	r3, [pc, #104]	@ (800ab2c <USBD_LL_Init+0x84>)
 800aac2:	4a1b      	ldr	r2, [pc, #108]	@ (800ab30 <USBD_LL_Init+0x88>)
 800aac4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aac6:	4b19      	ldr	r3, [pc, #100]	@ (800ab2c <USBD_LL_Init+0x84>)
 800aac8:	2208      	movs	r2, #8
 800aaca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aacc:	4b17      	ldr	r3, [pc, #92]	@ (800ab2c <USBD_LL_Init+0x84>)
 800aace:	2202      	movs	r2, #2
 800aad0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aad2:	4b16      	ldr	r3, [pc, #88]	@ (800ab2c <USBD_LL_Init+0x84>)
 800aad4:	2202      	movs	r2, #2
 800aad6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800aad8:	4b14      	ldr	r3, [pc, #80]	@ (800ab2c <USBD_LL_Init+0x84>)
 800aada:	2200      	movs	r2, #0
 800aadc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aade:	4b13      	ldr	r3, [pc, #76]	@ (800ab2c <USBD_LL_Init+0x84>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aae4:	4b11      	ldr	r3, [pc, #68]	@ (800ab2c <USBD_LL_Init+0x84>)
 800aae6:	2200      	movs	r2, #0
 800aae8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aaea:	4b10      	ldr	r3, [pc, #64]	@ (800ab2c <USBD_LL_Init+0x84>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aaf0:	480e      	ldr	r0, [pc, #56]	@ (800ab2c <USBD_LL_Init+0x84>)
 800aaf2:	f7f8 fa4e 	bl	8002f92 <HAL_PCD_Init>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800aafc:	f7f5 fe08 	bl	8000710 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ab06:	2318      	movs	r3, #24
 800ab08:	2200      	movs	r2, #0
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	f7f9 fe97 	bl	800483e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ab16:	2358      	movs	r3, #88	@ 0x58
 800ab18:	2200      	movs	r2, #0
 800ab1a:	2180      	movs	r1, #128	@ 0x80
 800ab1c:	f7f9 fe8f 	bl	800483e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	20000840 	.word	0x20000840
 800ab30:	40005c00 	.word	0x40005c00

0800ab34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7f8 faef 	bl	800312e <HAL_PCD_Start>
 800ab50:	4603      	mov	r3, r0
 800ab52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 f968 	bl	800ae2c <USBD_Get_USB_Status>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7f8 faf6 	bl	8003172 <HAL_PCD_Stop>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 f94d 	bl	800ae2c <USBD_Get_USB_Status>
 800ab92:	4603      	mov	r3, r0
 800ab94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	4608      	mov	r0, r1
 800abaa:	4611      	mov	r1, r2
 800abac:	461a      	mov	r2, r3
 800abae:	4603      	mov	r3, r0
 800abb0:	70fb      	strb	r3, [r7, #3]
 800abb2:	460b      	mov	r3, r1
 800abb4:	70bb      	strb	r3, [r7, #2]
 800abb6:	4613      	mov	r3, r2
 800abb8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800abc8:	78bb      	ldrb	r3, [r7, #2]
 800abca:	883a      	ldrh	r2, [r7, #0]
 800abcc:	78f9      	ldrb	r1, [r7, #3]
 800abce:	f7f8 fc3d 	bl	800344c <HAL_PCD_EP_Open>
 800abd2:	4603      	mov	r3, r0
 800abd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 f927 	bl	800ae2c <USBD_Get_USB_Status>
 800abde:	4603      	mov	r3, r0
 800abe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	460b      	mov	r3, r1
 800abf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ac06:	78fa      	ldrb	r2, [r7, #3]
 800ac08:	4611      	mov	r1, r2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7f8 fce5 	bl	80035da <HAL_PCD_EP_SetStall>
 800ac10:	4603      	mov	r3, r0
 800ac12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 f908 	bl	800ae2c <USBD_Get_USB_Status>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ac44:	78fa      	ldrb	r2, [r7, #3]
 800ac46:	4611      	mov	r1, r2
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7f8 fd18 	bl	800367e <HAL_PCD_EP_ClrStall>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 f8e9 	bl	800ae2c <USBD_Get_USB_Status>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ac7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	da0b      	bge.n	800ac9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac84:	78fb      	ldrb	r3, [r7, #3]
 800ac86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac8a:	68f9      	ldr	r1, [r7, #12]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4413      	add	r3, r2
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	440b      	add	r3, r1
 800ac96:	3312      	adds	r3, #18
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	e00b      	b.n	800acb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac9c:	78fb      	ldrb	r3, [r7, #3]
 800ac9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aca2:	68f9      	ldr	r1, [r7, #12]
 800aca4:	4613      	mov	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	00db      	lsls	r3, r3, #3
 800acac:	440b      	add	r3, r1
 800acae:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800acb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800acda:	78fa      	ldrb	r2, [r7, #3]
 800acdc:	4611      	mov	r1, r2
 800acde:	4618      	mov	r0, r3
 800ace0:	f7f8 fb90 	bl	8003404 <HAL_PCD_SetAddress>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
 800acea:	4618      	mov	r0, r3
 800acec:	f000 f89e 	bl	800ae2c <USBD_Get_USB_Status>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b086      	sub	sp, #24
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	60f8      	str	r0, [r7, #12]
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	603b      	str	r3, [r7, #0]
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ad1c:	7af9      	ldrb	r1, [r7, #11]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	f7f8 fc23 	bl	800356c <HAL_PCD_EP_Transmit>
 800ad26:	4603      	mov	r3, r0
 800ad28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad2a:	7dfb      	ldrb	r3, [r7, #23]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 f87d 	bl	800ae2c <USBD_Get_USB_Status>
 800ad32:	4603      	mov	r3, r0
 800ad34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad36:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3718      	adds	r7, #24
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	607a      	str	r2, [r7, #4]
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ad5e:	7af9      	ldrb	r1, [r7, #11]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	f7f8 fbd1 	bl	800350a <HAL_PCD_EP_Receive>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 f85c 	bl	800ae2c <USBD_Get_USB_Status>
 800ad74:	4603      	mov	r3, r0
 800ad76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad78:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
	...

0800ad84 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ad90:	78fb      	ldrb	r3, [r7, #3]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d002      	beq.n	800ad9c <HAL_PCDEx_LPM_Callback+0x18>
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d013      	beq.n	800adc2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ad9a:	e023      	b.n	800ade4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	7a5b      	ldrb	r3, [r3, #9]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d007      	beq.n	800adb4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ada4:	f000 f83c 	bl	800ae20 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ada8:	4b10      	ldr	r3, [pc, #64]	@ (800adec <HAL_PCDEx_LPM_Callback+0x68>)
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	4a0f      	ldr	r2, [pc, #60]	@ (800adec <HAL_PCDEx_LPM_Callback+0x68>)
 800adae:	f023 0306 	bic.w	r3, r3, #6
 800adb2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe fd39 	bl	8009832 <USBD_LL_Resume>
    break;
 800adc0:	e010      	b.n	800ade4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fe fd1c 	bl	8009806 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	7a5b      	ldrb	r3, [r3, #9]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d005      	beq.n	800ade2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800add6:	4b05      	ldr	r3, [pc, #20]	@ (800adec <HAL_PCDEx_LPM_Callback+0x68>)
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	4a04      	ldr	r2, [pc, #16]	@ (800adec <HAL_PCDEx_LPM_Callback+0x68>)
 800addc:	f043 0306 	orr.w	r3, r3, #6
 800ade0:	6113      	str	r3, [r2, #16]
    break;
 800ade2:	bf00      	nop
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	e000ed00 	.word	0xe000ed00

0800adf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800adf8:	4b03      	ldr	r3, [pc, #12]	@ (800ae08 <USBD_static_malloc+0x18>)
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	20000b1c 	.word	0x20000b1c

0800ae0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]

}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ae24:	f7f5 faec 	bl	8000400 <SystemClock_Config>
}
 800ae28:	bf00      	nop
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	4603      	mov	r3, r0
 800ae34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae3a:	79fb      	ldrb	r3, [r7, #7]
 800ae3c:	2b03      	cmp	r3, #3
 800ae3e:	d817      	bhi.n	800ae70 <USBD_Get_USB_Status+0x44>
 800ae40:	a201      	add	r2, pc, #4	@ (adr r2, 800ae48 <USBD_Get_USB_Status+0x1c>)
 800ae42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae46:	bf00      	nop
 800ae48:	0800ae59 	.word	0x0800ae59
 800ae4c:	0800ae5f 	.word	0x0800ae5f
 800ae50:	0800ae65 	.word	0x0800ae65
 800ae54:	0800ae6b 	.word	0x0800ae6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae5c:	e00b      	b.n	800ae76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	73fb      	strb	r3, [r7, #15]
    break;
 800ae62:	e008      	b.n	800ae76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae64:	2301      	movs	r3, #1
 800ae66:	73fb      	strb	r3, [r7, #15]
    break;
 800ae68:	e005      	b.n	800ae76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae6e:	e002      	b.n	800ae76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae70:	2303      	movs	r3, #3
 800ae72:	73fb      	strb	r3, [r7, #15]
    break;
 800ae74:	bf00      	nop
  }
  return usb_status;
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <memset>:
 800ae84:	4402      	add	r2, r0
 800ae86:	4603      	mov	r3, r0
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d100      	bne.n	800ae8e <memset+0xa>
 800ae8c:	4770      	bx	lr
 800ae8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae92:	e7f9      	b.n	800ae88 <memset+0x4>

0800ae94 <__libc_init_array>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	4d0d      	ldr	r5, [pc, #52]	@ (800aecc <__libc_init_array+0x38>)
 800ae98:	4c0d      	ldr	r4, [pc, #52]	@ (800aed0 <__libc_init_array+0x3c>)
 800ae9a:	1b64      	subs	r4, r4, r5
 800ae9c:	10a4      	asrs	r4, r4, #2
 800ae9e:	2600      	movs	r6, #0
 800aea0:	42a6      	cmp	r6, r4
 800aea2:	d109      	bne.n	800aeb8 <__libc_init_array+0x24>
 800aea4:	4d0b      	ldr	r5, [pc, #44]	@ (800aed4 <__libc_init_array+0x40>)
 800aea6:	4c0c      	ldr	r4, [pc, #48]	@ (800aed8 <__libc_init_array+0x44>)
 800aea8:	f000 f818 	bl	800aedc <_init>
 800aeac:	1b64      	subs	r4, r4, r5
 800aeae:	10a4      	asrs	r4, r4, #2
 800aeb0:	2600      	movs	r6, #0
 800aeb2:	42a6      	cmp	r6, r4
 800aeb4:	d105      	bne.n	800aec2 <__libc_init_array+0x2e>
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}
 800aeb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aebc:	4798      	blx	r3
 800aebe:	3601      	adds	r6, #1
 800aec0:	e7ee      	b.n	800aea0 <__libc_init_array+0xc>
 800aec2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec6:	4798      	blx	r3
 800aec8:	3601      	adds	r6, #1
 800aeca:	e7f2      	b.n	800aeb2 <__libc_init_array+0x1e>
 800aecc:	0800afb4 	.word	0x0800afb4
 800aed0:	0800afb4 	.word	0x0800afb4
 800aed4:	0800afb4 	.word	0x0800afb4
 800aed8:	0800afb8 	.word	0x0800afb8

0800aedc <_init>:
 800aedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aede:	bf00      	nop
 800aee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee2:	bc08      	pop	{r3}
 800aee4:	469e      	mov	lr, r3
 800aee6:	4770      	bx	lr

0800aee8 <_fini>:
 800aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeea:	bf00      	nop
 800aeec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeee:	bc08      	pop	{r3}
 800aef0:	469e      	mov	lr, r3
 800aef2:	4770      	bx	lr
