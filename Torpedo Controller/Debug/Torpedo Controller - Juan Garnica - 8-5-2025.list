
Torpedo Controller - Juan Garnica - 8-5-2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ade4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800afbc  0800afbc  0000bfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b07c  0800b07c  0000d0e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b07c  0800b07c  0000d0e8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b07c  0800b07c  0000d0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b07c  0800b07c  0000c07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b080  0800b080  0000c080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  0800b084  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e00  200000e8  0800b16c  0000d0e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ee8  0800b16c  0000dee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d0e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001997d  00000000  00000000  0000d118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e0a  00000000  00000000  00026a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  0002a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011bf  00000000  00000000  0002bfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021035  00000000  00000000  0002d17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8fc  00000000  00000000  0004e1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7d67  00000000  00000000  0006aab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006068  00000000  00000000  0013285c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001388c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e8 	.word	0x200000e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800afa4 	.word	0x0800afa4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000ec 	.word	0x200000ec
 8000214:	0800afa4 	.word	0x0800afa4

08000218 <process_data>:
int countAddr = 0;
int countrxcplt = 0;
int counterror = 0;

void process_data (void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0

	int startREG = RxData[0];  // get the register address
 800021e:	4b40      	ldr	r3, [pc, #256]	@ (8000320 <process_data+0x108>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	617b      	str	r3, [r7, #20]
	int numREG = rxcount-1;  // Get the number of registers
 8000224:	4b3f      	ldr	r3, [pc, #252]	@ (8000324 <process_data+0x10c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3b01      	subs	r3, #1
 800022a:	60bb      	str	r3, [r7, #8]
	int endREG = startREG + numREG -1;  // calculate the end register
 800022c:	697a      	ldr	r2, [r7, #20]
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	4413      	add	r3, r2
 8000232:	3b01      	subs	r3, #1
 8000234:	607b      	str	r3, [r7, #4]
	if (endREG>2)  // There are a total of 10 registers (0-9)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2b02      	cmp	r3, #2
 800023a:	dd01      	ble.n	8000240 <process_data+0x28>
	{
		Error_Handler();
 800023c:	f000 fb06 	bl	800084c <Error_Handler>
	}

	int indx = 1;  // set the indx to 1 in order to start reading from RxData[1]
 8000240:	2301      	movs	r3, #1
 8000242:	613b      	str	r3, [r7, #16]
	for (int i=0; i<numREG; i++)
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e060      	b.n	800030c <process_data+0xf4>
	{
		I2C_REGISTERS[startREG++] = RxData[indx++]; // Read the data from RxData and save it in the I2C_REGISTERS
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	1c53      	adds	r3, r2, #1
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	1c59      	adds	r1, r3, #1
 8000254:	6179      	str	r1, [r7, #20]
 8000256:	4932      	ldr	r1, [pc, #200]	@ (8000320 <process_data+0x108>)
 8000258:	5c89      	ldrb	r1, [r1, r2]
 800025a:	4a33      	ldr	r2, [pc, #204]	@ (8000328 <process_data+0x110>)
 800025c:	54d1      	strb	r1, [r2, r3]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800025e:	2100      	movs	r1, #0
 8000260:	4832      	ldr	r0, [pc, #200]	@ (800032c <process_data+0x114>)
 8000262:	f005 fc0b 	bl	8005a7c <HAL_TIM_PWM_Start>
		pulseWidth = 500 + ((tim1Degrees * 2000) / 180); // pulse width in us
 8000266:	4b32      	ldr	r3, [pc, #200]	@ (8000330 <process_data+0x118>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	461a      	mov	r2, r3
 800026c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000270:	fb02 f303 	mul.w	r3, r2, r3
 8000274:	4a2f      	ldr	r2, [pc, #188]	@ (8000334 <process_data+0x11c>)
 8000276:	fb82 1203 	smull	r1, r2, r2, r3
 800027a:	441a      	add	r2, r3
 800027c:	11d2      	asrs	r2, r2, #7
 800027e:	17db      	asrs	r3, r3, #31
 8000280:	1ad3      	subs	r3, r2, r3
 8000282:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000286:	ee07 3a90 	vmov	s15, r3
 800028a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800028e:	4b2a      	ldr	r3, [pc, #168]	@ (8000338 <process_data+0x120>)
 8000290:	edc3 7a00 	vstr	s15, [r3]
		tim1PWM = pulseWidth / 100; // 1 timer period = 100us
 8000294:	4b28      	ldr	r3, [pc, #160]	@ (8000338 <process_data+0x120>)
 8000296:	ed93 7a00 	vldr	s14, [r3]
 800029a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800033c <process_data+0x124>
 800029e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002a2:	4b27      	ldr	r3, [pc, #156]	@ (8000340 <process_data+0x128>)
 80002a4:	edc3 7a00 	vstr	s15, [r3]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, tim1PWM);
 80002a8:	4b25      	ldr	r3, [pc, #148]	@ (8000340 <process_data+0x128>)
 80002aa:	edd3 7a00 	vldr	s15, [r3]
 80002ae:	4b1f      	ldr	r3, [pc, #124]	@ (800032c <process_data+0x114>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002b6:	ee17 2a90 	vmov	r2, s15
 80002ba:	635a      	str	r2, [r3, #52]	@ 0x34

		if (direction)
 80002bc:	4b21      	ldr	r3, [pc, #132]	@ (8000344 <process_data+0x12c>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d005      	beq.n	80002d0 <process_data+0xb8>
			tim1Degrees += 1;
 80002c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000330 <process_data+0x118>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <process_data+0x118>)
 80002ce:	701a      	strb	r2, [r3, #0]
		if (!direction)
 80002d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <process_data+0x12c>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d105      	bne.n	80002e4 <process_data+0xcc>
			tim1Degrees -= 1;
 80002d8:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <process_data+0x118>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	3b01      	subs	r3, #1
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b13      	ldr	r3, [pc, #76]	@ (8000330 <process_data+0x118>)
 80002e2:	701a      	strb	r2, [r3, #0]

		if (tim1Degrees >= 180)
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <process_data+0x118>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2bb3      	cmp	r3, #179	@ 0xb3
 80002ea:	d902      	bls.n	80002f2 <process_data+0xda>
			direction = 0;
 80002ec:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <process_data+0x12c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]
		if (tim1Degrees <= 0)
 80002f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <process_data+0x118>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d102      	bne.n	8000300 <process_data+0xe8>
			direction = 1;
 80002fa:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <process_data+0x12c>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	701a      	strb	r2, [r3, #0]
		HAL_Delay(28);
 8000300:	201c      	movs	r0, #28
 8000302:	f000 fcc9 	bl	8000c98 <HAL_Delay>
	for (int i=0; i<numREG; i++)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	3301      	adds	r3, #1
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	429a      	cmp	r2, r3
 8000312:	db9a      	blt.n	800024a <process_data+0x32>
	}
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000104 	.word	0x20000104
 8000324:	20000106 	.word	0x20000106
 8000328:	20000108 	.word	0x20000108
 800032c:	20000164 	.word	0x20000164
 8000330:	20000000 	.word	0x20000000
 8000334:	b60b60b7 	.word	0xb60b60b7
 8000338:	20000214 	.word	0x20000214
 800033c:	42c80000 	.word	0x42c80000
 8000340:	20000004 	.word	0x20000004
 8000344:	20000210 	.word	0x20000210

08000348 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) // Puts to listen mode to look for req from master
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f001 fae9 	bl	8001928 <HAL_I2C_EnableListen_IT>
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
 800036c:	4613      	mov	r3, r2
 800036e:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d10d      	bne.n	8000392 <HAL_I2C_AddrCallback+0x32>
	{
		rxcount = 0;
 8000376:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <HAL_I2C_AddrCallback+0x40>)
 8000378:	2200      	movs	r2, #0
 800037a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 800037c:	4b08      	ldr	r3, [pc, #32]	@ (80003a0 <HAL_I2C_AddrCallback+0x40>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	461a      	mov	r2, r3
 8000382:	4b08      	ldr	r3, [pc, #32]	@ (80003a4 <HAL_I2C_AddrCallback+0x44>)
 8000384:	18d1      	adds	r1, r2, r3
 8000386:	2300      	movs	r3, #0
 8000388:	2201      	movs	r2, #1
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	f001 fa1a 	bl	80017c4 <HAL_I2C_Slave_Seq_Receive_IT>

	else
	{
		Error_Handler();
	}
}
 8000390:	e001      	b.n	8000396 <HAL_I2C_AddrCallback+0x36>
		Error_Handler();
 8000392:	f000 fa5b 	bl	800084c <Error_Handler>
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000106 	.word	0x20000106
 80003a4:	20000104 	.word	0x20000104

080003a8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	rxcount++;
 80003b0:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	3301      	adds	r3, #1
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003ba:	701a      	strb	r2, [r3, #0]
	if (rxcount < RxSIZE)
 80003bc:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d81a      	bhi.n	80003fa <HAL_I2C_SlaveRxCpltCallback+0x52>
	{
		if (rxcount == RxSIZE-1)
 80003c4:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d10b      	bne.n	80003e4 <HAL_I2C_SlaveRxCpltCallback+0x3c>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 80003cc:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80003d4:	18d1      	adds	r1, r2, r3
 80003d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80003da:	2201      	movs	r2, #1
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f001 f9f1 	bl	80017c4 <HAL_I2C_Slave_Seq_Receive_IT>
 80003e2:	e00a      	b.n	80003fa <HAL_I2C_SlaveRxCpltCallback+0x52>
		}
		else
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 80003e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80003ec:	18d1      	adds	r1, r2, r3
 80003ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80003f2:	2201      	movs	r2, #1
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f001 f9e5 	bl	80017c4 <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (rxcount == RxSIZE)
 80003fa:	4b05      	ldr	r3, [pc, #20]	@ (8000410 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b02      	cmp	r3, #2
 8000400:	d101      	bne.n	8000406 <HAL_I2C_SlaveRxCpltCallback+0x5e>
	{
		process_data();
 8000402:	f7ff ff09 	bl	8000218 <process_data>
	}
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000106 	.word	0x20000106
 8000414:	20000104 	.word	0x20000104

08000418 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	counterror++;
 8000420:	4b0a      	ldr	r3, [pc, #40]	@ (800044c <HAL_I2C_ErrorCallback+0x34>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	3301      	adds	r3, #1
 8000426:	4a09      	ldr	r2, [pc, #36]	@ (800044c <HAL_I2C_ErrorCallback+0x34>)
 8000428:	6013      	str	r3, [r2, #0]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f001 fb53 	bl	8001ad6 <HAL_I2C_GetError>
 8000430:	60f8      	str	r0, [r7, #12]
	if (errorcode == 4)  // AF error
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2b04      	cmp	r3, #4
 8000436:	d101      	bne.n	800043c <HAL_I2C_ErrorCallback+0x24>
	{
		process_data();
 8000438:	f7ff feee 	bl	8000218 <process_data>
	}
	HAL_I2C_EnableListen_IT(hi2c);
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f001 fa73 	bl	8001928 <HAL_I2C_EnableListen_IT>
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	2000010c 	.word	0x2000010c

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000454:	f000 fbaf 	bl	8000bb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000458:	f000 f878 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045c:	f000 f9ac 	bl	80007b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000460:	f000 f980 	bl	8000764 <MX_DMA_Init>
  MX_I2C2_Init();
 8000464:	f000 f8bc 	bl	80005e0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000468:	f000 f8fa 	bl	8000660 <MX_TIM2_Init>
  MX_USB_Device_Init();
 800046c:	f00a f914 	bl	800a698 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000470:	2100      	movs	r1, #0
 8000472:	482e      	ldr	r0, [pc, #184]	@ (800052c <main+0xdc>)
 8000474:	f005 fb02 	bl	8005a7c <HAL_TIM_PWM_Start>

  //uint32_t position = 0;

  if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK) //Entrs slav to listen for master requests
 8000478:	482d      	ldr	r0, [pc, #180]	@ (8000530 <main+0xe0>)
 800047a:	f001 fa55 	bl	8001928 <HAL_I2C_EnableListen_IT>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <main+0x38>
  {
	  Error_Handler();
 8000484:	f000 f9e2 	bl	800084c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  		pulseWidth = 500 + ((tim1Degrees * 2000) / 180); // pulse width in us
 8000488:	4b2a      	ldr	r3, [pc, #168]	@ (8000534 <main+0xe4>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000492:	fb02 f303 	mul.w	r3, r2, r3
 8000496:	4a28      	ldr	r2, [pc, #160]	@ (8000538 <main+0xe8>)
 8000498:	fb82 1203 	smull	r1, r2, r2, r3
 800049c:	441a      	add	r2, r3
 800049e:	11d2      	asrs	r2, r2, #7
 80004a0:	17db      	asrs	r3, r3, #31
 80004a2:	1ad3      	subs	r3, r2, r3
 80004a4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80004a8:	ee07 3a90 	vmov	s15, r3
 80004ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004b0:	4b22      	ldr	r3, [pc, #136]	@ (800053c <main+0xec>)
 80004b2:	edc3 7a00 	vstr	s15, [r3]
	  		tim1PWM = pulseWidth / 100; // 1 timer period = 100us
 80004b6:	4b21      	ldr	r3, [pc, #132]	@ (800053c <main+0xec>)
 80004b8:	ed93 7a00 	vldr	s14, [r3]
 80004bc:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000540 <main+0xf0>
 80004c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000544 <main+0xf4>)
 80004c6:	edc3 7a00 	vstr	s15, [r3]
	  		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, tim1PWM);
 80004ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000544 <main+0xf4>)
 80004cc:	edd3 7a00 	vldr	s15, [r3]
 80004d0:	4b16      	ldr	r3, [pc, #88]	@ (800052c <main+0xdc>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004d8:	ee17 2a90 	vmov	r2, s15
 80004dc:	635a      	str	r2, [r3, #52]	@ 0x34

	  		if (direction)
 80004de:	4b1a      	ldr	r3, [pc, #104]	@ (8000548 <main+0xf8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d005      	beq.n	80004f2 <main+0xa2>
	  			tim1Degrees += 1;
 80004e6:	4b13      	ldr	r3, [pc, #76]	@ (8000534 <main+0xe4>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <main+0xe4>)
 80004f0:	701a      	strb	r2, [r3, #0]
	  		if (!direction)
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <main+0xf8>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d105      	bne.n	8000506 <main+0xb6>
	  			tim1Degrees -= 1;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <main+0xe4>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	3b01      	subs	r3, #1
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <main+0xe4>)
 8000504:	701a      	strb	r2, [r3, #0]

	  		if (tim1Degrees >= 180)
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <main+0xe4>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2bb3      	cmp	r3, #179	@ 0xb3
 800050c:	d902      	bls.n	8000514 <main+0xc4>
	  			direction = 0;
 800050e:	4b0e      	ldr	r3, [pc, #56]	@ (8000548 <main+0xf8>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
	  		if (tim1Degrees <= 0)
 8000514:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <main+0xe4>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d102      	bne.n	8000522 <main+0xd2>
	  			direction = 1;
 800051c:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <main+0xf8>)
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
	  		HAL_Delay(28);
 8000522:	201c      	movs	r0, #28
 8000524:	f000 fbb8 	bl	8000c98 <HAL_Delay>
	  		pulseWidth = 500 + ((tim1Degrees * 2000) / 180); // pulse width in us
 8000528:	e7ae      	b.n	8000488 <main+0x38>
 800052a:	bf00      	nop
 800052c:	20000164 	.word	0x20000164
 8000530:	20000110 	.word	0x20000110
 8000534:	20000000 	.word	0x20000000
 8000538:	b60b60b7 	.word	0xb60b60b7
 800053c:	20000214 	.word	0x20000214
 8000540:	42c80000 	.word	0x42c80000
 8000544:	20000004 	.word	0x20000004
 8000548:	20000210 	.word	0x20000210

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2238      	movs	r2, #56	@ 0x38
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f00a fcf6 	bl	800af4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000572:	f004 fa35 	bl	80049e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000576:	2301      	movs	r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000584:	2303      	movs	r3, #3
 8000586:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000588:	2301      	movs	r3, #1
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800058c:	230c      	movs	r3, #12
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000594:	2304      	movs	r3, #4
 8000596:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 fad1 	bl	8004b48 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005ac:	f000 f94e 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2103      	movs	r1, #3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f004 fdcf 	bl	800516c <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d4:	f000 f93a 	bl	800084c <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	@ 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000654 <MX_I2C2_Init+0x74>)
 80005e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000658 <MX_I2C2_Init+0x78>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B17DB6;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000654 <MX_I2C2_Init+0x74>)
 80005ec:	4a1b      	ldr	r2, [pc, #108]	@ (800065c <MX_I2C2_Init+0x7c>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 158;
 80005f0:	4b18      	ldr	r3, [pc, #96]	@ (8000654 <MX_I2C2_Init+0x74>)
 80005f2:	229e      	movs	r2, #158	@ 0x9e
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <MX_I2C2_Init+0x74>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <MX_I2C2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <MX_I2C2_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <MX_I2C2_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_I2C2_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <MX_I2C2_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800061a:	480e      	ldr	r0, [pc, #56]	@ (8000654 <MX_I2C2_Init+0x74>)
 800061c:	f001 f836 	bl	800168c <HAL_I2C_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000626:	f000 f911 	bl	800084c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800062a:	2100      	movs	r1, #0
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <MX_I2C2_Init+0x74>)
 800062e:	f002 fc7d 	bl	8002f2c <HAL_I2CEx_ConfigAnalogFilter>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000638:	f000 f908 	bl	800084c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800063c:	2100      	movs	r1, #0
 800063e:	4805      	ldr	r0, [pc, #20]	@ (8000654 <MX_I2C2_Init+0x74>)
 8000640:	f002 fcbf 	bl	8002fc2 <HAL_I2CEx_ConfigDigitalFilter>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 f8ff 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000110 	.word	0x20000110
 8000658:	40005800 	.word	0x40005800
 800065c:	20b17db6 	.word	0x20b17db6

08000660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
 800068e:	615a      	str	r2, [r3, #20]
 8000690:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000692:	4b33      	ldr	r3, [pc, #204]	@ (8000760 <MX_TIM2_Init+0x100>)
 8000694:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000698:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600-1;
 800069a:	4b31      	ldr	r3, [pc, #196]	@ (8000760 <MX_TIM2_Init+0x100>)
 800069c:	f242 527f 	movw	r2, #9599	@ 0x257f
 80006a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000760 <MX_TIM2_Init+0x100>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80006a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000760 <MX_TIM2_Init+0x100>)
 80006aa:	2263      	movs	r2, #99	@ 0x63
 80006ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000760 <MX_TIM2_Init+0x100>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <MX_TIM2_Init+0x100>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ba:	4829      	ldr	r0, [pc, #164]	@ (8000760 <MX_TIM2_Init+0x100>)
 80006bc:	f005 f926 	bl	800590c <HAL_TIM_Base_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80006c6:	f000 f8c1 	bl	800084c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4822      	ldr	r0, [pc, #136]	@ (8000760 <MX_TIM2_Init+0x100>)
 80006d8:	f005 fd34 	bl	8006144 <HAL_TIM_ConfigClockSource>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80006e2:	f000 f8b3 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006e6:	481e      	ldr	r0, [pc, #120]	@ (8000760 <MX_TIM2_Init+0x100>)
 80006e8:	f005 f967 	bl	80059ba <HAL_TIM_PWM_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006f2:	f000 f8ab 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	4816      	ldr	r0, [pc, #88]	@ (8000760 <MX_TIM2_Init+0x100>)
 8000706:	f006 fa9d 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000710:	f000 f89c 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000714:	2360      	movs	r3, #96	@ 0x60
 8000716:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	4619      	mov	r1, r3
 800072a:	480d      	ldr	r0, [pc, #52]	@ (8000760 <MX_TIM2_Init+0x100>)
 800072c:	f005 fbf6 	bl	8005f1c <HAL_TIM_PWM_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000736:	f000 f889 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2204      	movs	r2, #4
 800073e:	4619      	mov	r1, r3
 8000740:	4807      	ldr	r0, [pc, #28]	@ (8000760 <MX_TIM2_Init+0x100>)
 8000742:	f005 fbeb 	bl	8005f1c <HAL_TIM_PWM_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800074c:	f000 f87e 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <MX_TIM2_Init+0x100>)
 8000752:	f000 f95f 	bl	8000a14 <HAL_TIM_MspPostInit>

}
 8000756:	bf00      	nop
 8000758:	3738      	adds	r7, #56	@ 0x38
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000164 	.word	0x20000164

08000764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_DMA_Init+0x50>)
 800076c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800076e:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <MX_DMA_Init+0x50>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6493      	str	r3, [r2, #72]	@ 0x48
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_DMA_Init+0x50>)
 8000778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_DMA_Init+0x50>)
 8000784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000786:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <MX_DMA_Init+0x50>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6493      	str	r3, [r2, #72]	@ 0x48
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_DMA_Init+0x50>)
 8000790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200c      	movs	r0, #12
 80007a0:	f000 fb77 	bl	8000e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007a4:	200c      	movs	r0, #12
 80007a6:	f000 fb8e 	bl	8000ec6 <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000848 <MX_GPIO_Init+0x90>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000848 <MX_GPIO_Init+0x90>)
 80007d4:	f043 0320 	orr.w	r3, r3, #32
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <MX_GPIO_Init+0x90>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0320 	and.w	r3, r3, #32
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_GPIO_Init+0x90>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a17      	ldr	r2, [pc, #92]	@ (8000848 <MX_GPIO_Init+0x90>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_GPIO_Init+0x90>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_GPIO_Init+0x90>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a11      	ldr	r2, [pc, #68]	@ (8000848 <MX_GPIO_Init+0x90>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_GPIO_Init+0x90>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2101      	movs	r1, #1
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f000 ff1d 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000822:	2301      	movs	r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f000 fd8c 	bl	8001358 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <HAL_MspInit+0x44>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000862:	4a0e      	ldr	r2, [pc, #56]	@ (800089c <HAL_MspInit+0x44>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	@ 0x60
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_MspInit+0x44>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_MspInit+0x44>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6593      	str	r3, [r2, #88]	@ 0x58
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800088e:	f004 f94b 	bl	8004b28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b09a      	sub	sp, #104	@ 0x68
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	2244      	movs	r2, #68	@ 0x44
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f00a fb43 	bl	800af4c <memset>
  if(hi2c->Instance==I2C2)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a27      	ldr	r2, [pc, #156]	@ (8000968 <HAL_I2C_MspInit+0xc8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d147      	bne.n	8000960 <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008d0:	2380      	movs	r3, #128	@ 0x80
 80008d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4618      	mov	r0, r3
 80008de:	f004 fe25 	bl	800552c <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008e8:	f7ff ffb0 	bl	800084c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b1f      	ldr	r3, [pc, #124]	@ (800096c <HAL_I2C_MspInit+0xcc>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f0:	4a1e      	ldr	r2, [pc, #120]	@ (800096c <HAL_I2C_MspInit+0xcc>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f8:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <HAL_I2C_MspInit+0xcc>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000904:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000908:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090a:	2312      	movs	r3, #18
 800090c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000916:	2304      	movs	r3, #4
 8000918:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000924:	f000 fd18 	bl	8001358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000928:	4b10      	ldr	r3, [pc, #64]	@ (800096c <HAL_I2C_MspInit+0xcc>)
 800092a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092c:	4a0f      	ldr	r2, [pc, #60]	@ (800096c <HAL_I2C_MspInit+0xcc>)
 800092e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000932:	6593      	str	r3, [r2, #88]	@ 0x58
 8000934:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <HAL_I2C_MspInit+0xcc>)
 8000936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2021      	movs	r0, #33	@ 0x21
 8000946:	f000 faa4 	bl	8000e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800094a:	2021      	movs	r0, #33	@ 0x21
 800094c:	f000 fabb 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	2022      	movs	r0, #34	@ 0x22
 8000956:	f000 fa9c 	bl	8000e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800095a:	2022      	movs	r0, #34	@ 0x22
 800095c:	f000 fab3 	bl	8000ec6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000960:	bf00      	nop
 8000962:	3768      	adds	r7, #104	@ 0x68
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40005800 	.word	0x40005800
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000980:	d13e      	bne.n	8000a00 <HAL_TIM_Base_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <HAL_TIM_Base_MspInit+0x98>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000986:	4a20      	ldr	r2, [pc, #128]	@ (8000a08 <HAL_TIM_Base_MspInit+0x98>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6593      	str	r3, [r2, #88]	@ 0x58
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <HAL_TIM_Base_MspInit+0x98>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel2;
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 800099c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <HAL_TIM_Base_MspInit+0xa0>)
 800099e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 80009a2:	2239      	movs	r2, #57	@ 0x39
 80009a4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 80009ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009be:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 80009c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009c6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 80009c8:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 80009d4:	480d      	ldr	r0, [pc, #52]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 80009d6:	f000 fa91 	bl	8000efc <HAL_DMA_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80009e0:	f7ff ff34 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a09      	ldr	r2, [pc, #36]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 80009e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <HAL_TIM_Base_MspInit+0x9c>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	201c      	movs	r0, #28
 80009f6:	f000 fa4c 	bl	8000e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009fa:	201c      	movs	r0, #28
 80009fc:	f000 fa63 	bl	8000ec6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	200001b0 	.word	0x200001b0
 8000a10:	4002001c 	.word	0x4002001c

08000a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a34:	d11c      	bne.n	8000a70 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <HAL_TIM_MspPostInit+0x64>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a78 <HAL_TIM_MspPostInit+0x64>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <HAL_TIM_MspPostInit+0x64>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000a4e:	2322      	movs	r3, #34	@ 0x22
 8000a50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6c:	f000 fc74 	bl	8001358 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <NMI_Handler+0x4>

08000a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <MemManage_Handler+0x4>

08000a94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad2:	f000 f8c3 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8000ae0:	4802      	ldr	r0, [pc, #8]	@ (8000aec <DMA1_Channel2_IRQHandler+0x10>)
 8000ae2:	f000 fb1a 	bl	800111a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200001b0 	.word	0x200001b0

08000af0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <USB_LP_IRQHandler+0x10>)
 8000af6:	f002 fbc2 	bl	800327e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200007ec 	.word	0x200007ec

08000b04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b08:	4802      	ldr	r0, [pc, #8]	@ (8000b14 <TIM2_IRQHandler+0x10>)
 8000b0a:	f005 f8b7 	bl	8005c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000164 	.word	0x20000164

08000b18 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <I2C2_EV_IRQHandler+0x10>)
 8000b1e:	f000 ff23 	bl	8001968 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000110 	.word	0x20000110

08000b2c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <I2C2_ER_IRQHandler+0x10>)
 8000b32:	f000 ff33 	bl	800199c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000110 	.word	0x20000110

08000b40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b64:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b66:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b68:	f7ff ffea 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f00a f9e3 	bl	800af5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b96:	f7ff fc5b 	bl	8000450 <main>

08000b9a <LoopForever>:

LoopForever:
    b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   r0, =_estack
 8000b9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000ba8:	0800b084 	.word	0x0800b084
  ldr r2, =_sbss
 8000bac:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000bb0:	20000ee8 	.word	0x20000ee8

08000bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_2_IRQHandler>

08000bb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f95b 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f000 f80e 	bl	8000be8 <HAL_InitTick>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	71fb      	strb	r3, [r7, #7]
 8000bd6:	e001      	b.n	8000bdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd8:	f7ff fe3e 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]

}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <HAL_InitTick+0x68>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d022      	beq.n	8000c42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_InitTick+0x6c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <HAL_InitTick+0x68>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f966 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10f      	bne.n	8000c3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b0f      	cmp	r3, #15
 8000c20:	d809      	bhi.n	8000c36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c22:	2200      	movs	r2, #0
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2a:	f000 f932 	bl	8000e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <HAL_InitTick+0x70>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e007      	b.n	8000c46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e004      	b.n	8000c46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e001      	b.n	8000c46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000010 	.word	0x20000010
 8000c54:	20000008 	.word	0x20000008
 8000c58:	2000000c 	.word	0x2000000c

08000c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_IncTick+0x20>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a03      	ldr	r2, [pc, #12]	@ (8000c78 <HAL_IncTick+0x1c>)
 8000c6c:	6013      	str	r3, [r2, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	20000218 	.word	0x20000218
 8000c7c:	20000010 	.word	0x20000010

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000218 	.word	0x20000218

08000c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca0:	f7ff ffee 	bl	8000c80 <HAL_GetTick>
 8000ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb0:	d004      	beq.n	8000cbc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_Delay+0x40>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	4413      	add	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cbc:	bf00      	nop
 8000cbe:	f7ff ffdf 	bl	8000c80 <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d8f7      	bhi.n	8000cbe <HAL_Delay+0x26>
  {
  }
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000010 	.word	0x20000010

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	@ (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	@ (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	@ 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff29 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff40 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff90 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff5f 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff33 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffa4 	bl	8000e38 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e08d      	b.n	800102a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b47      	ldr	r3, [pc, #284]	@ (8001034 <HAL_DMA_Init+0x138>)
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d80f      	bhi.n	8000f3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b45      	ldr	r3, [pc, #276]	@ (8001038 <HAL_DMA_Init+0x13c>)
 8000f22:	4413      	add	r3, r2
 8000f24:	4a45      	ldr	r2, [pc, #276]	@ (800103c <HAL_DMA_Init+0x140>)
 8000f26:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	009a      	lsls	r2, r3, #2
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a42      	ldr	r2, [pc, #264]	@ (8001040 <HAL_DMA_Init+0x144>)
 8000f36:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f38:	e00e      	b.n	8000f58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b40      	ldr	r3, [pc, #256]	@ (8001044 <HAL_DMA_Init+0x148>)
 8000f42:	4413      	add	r3, r2
 8000f44:	4a3d      	ldr	r2, [pc, #244]	@ (800103c <HAL_DMA_Init+0x140>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	009a      	lsls	r2, r3, #2
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a3c      	ldr	r2, [pc, #240]	@ (8001048 <HAL_DMA_Init+0x14c>)
 8000f56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f972 	bl	8001294 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000fb8:	d102      	bne.n	8000fc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000fd4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d010      	beq.n	8001000 <HAL_DMA_Init+0x104>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d80c      	bhi.n	8001000 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f992 	bl	8001310 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	e008      	b.n	8001012 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020407 	.word	0x40020407
 8001038:	bffdfff8 	.word	0xbffdfff8
 800103c:	cccccccd 	.word	0xcccccccd
 8001040:	40020000 	.word	0x40020000
 8001044:	bffdfbf8 	.word	0xbffdfbf8
 8001048:	40020400 	.word	0x40020400

0800104c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d00d      	beq.n	8001080 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2204      	movs	r2, #4
 8001068:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e047      	b.n	8001110 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 020e 	bic.w	r2, r2, #14
 800108e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0201 	bic.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	2101      	movs	r1, #1
 80010be:	fa01 f202 	lsl.w	r2, r1, r2
 80010c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00c      	beq.n	80010f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	4798      	blx	r3
    }
  }
  return status;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	2204      	movs	r2, #4
 800113c:	409a      	lsls	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4013      	ands	r3, r2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d026      	beq.n	8001194 <HAL_DMA_IRQHandler+0x7a>
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d021      	beq.n	8001194 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0320 	and.w	r3, r3, #32
 800115a:	2b00      	cmp	r3, #0
 800115c:	d107      	bne.n	800116e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0204 	bic.w	r2, r2, #4
 800116c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f003 021f 	and.w	r2, r3, #31
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	2104      	movs	r1, #4
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	2b00      	cmp	r3, #0
 8001188:	d071      	beq.n	800126e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001192:	e06c      	b.n	800126e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	2202      	movs	r2, #2
 800119e:	409a      	lsls	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d02e      	beq.n	8001206 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d029      	beq.n	8001206 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0320 	and.w	r3, r3, #32
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10b      	bne.n	80011d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 020a 	bic.w	r2, r2, #10
 80011ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	2102      	movs	r1, #2
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d038      	beq.n	800126e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001204:	e033      	b.n	800126e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	2208      	movs	r2, #8
 8001210:	409a      	lsls	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d02a      	beq.n	8001270 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d025      	beq.n	8001270 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 020e 	bic.w	r2, r2, #14
 8001232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f202 	lsl.w	r2, r1, r2
 8001246:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001262:	2b00      	cmp	r3, #0
 8001264:	d004      	beq.n	8001270 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800126e:	bf00      	nop
 8001270:	bf00      	nop
}
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001286:	b2db      	uxtb	r3, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d802      	bhi.n	80012ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	e001      	b.n	80012b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80012b0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3b08      	subs	r3, #8
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	009a      	lsls	r2, r3, #2
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4413      	add	r3, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80012de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	2201      	movs	r2, #1
 80012e8:	409a      	lsls	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80012ee:	bf00      	nop
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40020407 	.word	0x40020407
 8001300:	40020800 	.word	0x40020800
 8001304:	40020820 	.word	0x40020820
 8001308:	cccccccd 	.word	0xcccccccd
 800130c:	40020880 	.word	0x40020880

08001310 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001332:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3b01      	subs	r3, #1
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	2201      	movs	r2, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	1000823f 	.word	0x1000823f
 8001354:	40020940 	.word	0x40020940

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001366:	e15a      	b.n	800161e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2101      	movs	r1, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 814c 	beq.w	8001618 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d005      	beq.n	8001398 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001394:	2b02      	cmp	r3, #2
 8001396:	d130      	bne.n	80013fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ce:	2201      	movs	r2, #1
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f003 0201 	and.w	r2, r3, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b03      	cmp	r3, #3
 8001404:	d017      	beq.n	8001436 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d123      	bne.n	800148a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	6939      	ldr	r1, [r7, #16]
 8001486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0203 	and.w	r2, r3, #3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80a6 	beq.w	8001618 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014cc:	4b5b      	ldr	r3, [pc, #364]	@ (800163c <HAL_GPIO_Init+0x2e4>)
 80014ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d0:	4a5a      	ldr	r2, [pc, #360]	@ (800163c <HAL_GPIO_Init+0x2e4>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d8:	4b58      	ldr	r3, [pc, #352]	@ (800163c <HAL_GPIO_Init+0x2e4>)
 80014da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e4:	4a56      	ldr	r2, [pc, #344]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800150e:	d01f      	beq.n	8001550 <HAL_GPIO_Init+0x1f8>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a4c      	ldr	r2, [pc, #304]	@ (8001644 <HAL_GPIO_Init+0x2ec>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d019      	beq.n	800154c <HAL_GPIO_Init+0x1f4>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a4b      	ldr	r2, [pc, #300]	@ (8001648 <HAL_GPIO_Init+0x2f0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d013      	beq.n	8001548 <HAL_GPIO_Init+0x1f0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a4a      	ldr	r2, [pc, #296]	@ (800164c <HAL_GPIO_Init+0x2f4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d00d      	beq.n	8001544 <HAL_GPIO_Init+0x1ec>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a49      	ldr	r2, [pc, #292]	@ (8001650 <HAL_GPIO_Init+0x2f8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x1e8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a48      	ldr	r2, [pc, #288]	@ (8001654 <HAL_GPIO_Init+0x2fc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_GPIO_Init+0x1e4>
 8001538:	2305      	movs	r3, #5
 800153a:	e00a      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 800153c:	2306      	movs	r3, #6
 800153e:	e008      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 8001540:	2304      	movs	r3, #4
 8001542:	e006      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 8001544:	2303      	movs	r3, #3
 8001546:	e004      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 8001548:	2302      	movs	r3, #2
 800154a:	e002      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 8001550:	2300      	movs	r3, #0
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	f002 0203 	and.w	r2, r2, #3
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	4093      	lsls	r3, r2
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001562:	4937      	ldr	r1, [pc, #220]	@ (8001640 <HAL_GPIO_Init+0x2e8>)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001570:	4b39      	ldr	r3, [pc, #228]	@ (8001658 <HAL_GPIO_Init+0x300>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001594:	4a30      	ldr	r2, [pc, #192]	@ (8001658 <HAL_GPIO_Init+0x300>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800159a:	4b2f      	ldr	r3, [pc, #188]	@ (8001658 <HAL_GPIO_Init+0x300>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015be:	4a26      	ldr	r2, [pc, #152]	@ (8001658 <HAL_GPIO_Init+0x300>)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015c4:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <HAL_GPIO_Init+0x300>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001658 <HAL_GPIO_Init+0x300>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <HAL_GPIO_Init+0x300>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001612:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <HAL_GPIO_Init+0x300>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3301      	adds	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	f47f ae9d 	bne.w	8001368 <HAL_GPIO_Init+0x10>
  }
}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	371c      	adds	r7, #28
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800
 800164c:	48000c00 	.word	0x48000c00
 8001650:	48001000 	.word	0x48001000
 8001654:	48001400 	.word	0x48001400
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001678:	e002      	b.n	8001680 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e08d      	b.n	80017ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff f8f4 	bl	80008a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2224      	movs	r2, #36	@ 0x24
 80016bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d107      	bne.n	8001706 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	e006      	b.n	8001714 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001712:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d108      	bne.n	800172e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	e007      	b.n	800173e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800173c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800174c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001750:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001760:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69d9      	ldr	r1, [r3, #28]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1a      	ldr	r2, [r3, #32]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2220      	movs	r2, #32
 80017a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	4613      	mov	r3, r2
 80017d2:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80017e0:	2b28      	cmp	r3, #40	@ 0x28
 80017e2:	f040 8098 	bne.w	8001916 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d105      	bne.n	80017fe <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e08c      	b.n	8001918 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80017fe:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f001 fb34 	bl	8002e70 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8001812:	2302      	movs	r3, #2
 8001814:	e080      	b.n	8001918 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b29      	cmp	r3, #41	@ 0x29
 8001828:	d12a      	bne.n	8001880 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800182a:	2101      	movs	r1, #1
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f001 fb1f 	bl	8002e70 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800183c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001840:	d11e      	bne.n	8001880 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001850:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001856:	2b00      	cmp	r3, #0
 8001858:	d012      	beq.n	8001880 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800185e:	4a30      	ldr	r2, [pc, #192]	@ (8001920 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001860:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fbf0 	bl	800104c <HAL_DMA_Abort_IT>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800187c:	4610      	mov	r0, r2
 800187e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	222a      	movs	r2, #42	@ 0x2a
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018a4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	88fa      	ldrh	r2, [r7, #6]
 80018b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80018c6:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2208      	movs	r2, #8
 80018fe:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001908:	f248 0102 	movw	r1, #32770	@ 0x8002
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f001 fa2b 	bl	8002d68 <I2C_Enable_IRQ>

    return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
  }
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08002cc7 	.word	0x08002cc7
 8001924:	08001aef 	.word	0x08001aef

08001928 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b20      	cmp	r3, #32
 800193a:	d10d      	bne.n	8001958 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2228      	movs	r2, #40	@ 0x28
 8001940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_I2C_EnableListen_IT+0x3c>)
 8001948:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800194a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f001 fa0a 	bl	8002d68 <I2C_Enable_IRQ>

    return HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	e000      	b.n	800195a <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001958:	2302      	movs	r3, #2
  }
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	08001aef 	.word	0x08001aef

08001968 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
  }
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d010      	beq.n	80019e2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	09db      	lsrs	r3, r3, #7
 80019c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00a      	beq.n	80019e2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	0a9b      	lsrs	r3, r3, #10
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d010      	beq.n	8001a10 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	09db      	lsrs	r3, r3, #7
 80019f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	f043 0208 	orr.w	r2, r3, #8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a0e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	0a5b      	lsrs	r3, r3, #9
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d010      	beq.n	8001a3e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	09db      	lsrs	r3, r3, #7
 8001a20:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00a      	beq.n	8001a3e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2c:	f043 0202 	orr.w	r2, r3, #2
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a3c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 030b 	and.w	r3, r3, #11
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fffd 	bl	8002a50 <I2C_ITError>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <I2C_Slave_ISR_IT+0x24>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e0ed      	b.n	8001cee <I2C_Slave_ISR_IT+0x200>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	095b      	lsrs	r3, r3, #5
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001b32:	6939      	ldr	r1, [r7, #16]
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 fdcb 	bl	80026d0 <I2C_ITSlaveCplt>
 8001b3a:	e0d3      	b.n	8001ce4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d04d      	beq.n	8001be4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d047      	beq.n	8001be4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d128      	bne.n	8001bb0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b28      	cmp	r3, #40	@ 0x28
 8001b68:	d108      	bne.n	8001b7c <I2C_Slave_ISR_IT+0x8e>
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b70:	d104      	bne.n	8001b7c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001b72:	6939      	ldr	r1, [r7, #16]
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 ff15 	bl	80029a4 <I2C_ITListenCplt>
 8001b7a:	e032      	b.n	8001be2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b29      	cmp	r3, #41	@ 0x29
 8001b86:	d10e      	bne.n	8001ba6 <I2C_Slave_ISR_IT+0xb8>
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b8e:	d00a      	beq.n	8001ba6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2210      	movs	r2, #16
 8001b96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f001 f870 	bl	8002c7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fc6e 	bl	8002480 <I2C_ITSlaveSeqCplt>
 8001ba4:	e01d      	b.n	8001be2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2210      	movs	r2, #16
 8001bac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001bae:	e096      	b.n	8001cde <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2210      	movs	r2, #16
 8001bb6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbc:	f043 0204 	orr.w	r2, r3, #4
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <I2C_Slave_ISR_IT+0xe6>
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd0:	f040 8085 	bne.w	8001cde <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd8:	4619      	mov	r1, r3
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 ff38 	bl	8002a50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001be0:	e07d      	b.n	8001cde <I2C_Slave_ISR_IT+0x1f0>
 8001be2:	e07c      	b.n	8001cde <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d030      	beq.n	8001c52 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d02a      	beq.n	8001c52 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d018      	beq.n	8001c38 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d14f      	bne.n	8001ce2 <I2C_Slave_ISR_IT+0x1f4>
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c48:	d04b      	beq.n	8001ce2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fc18 	bl	8002480 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001c50:	e047      	b.n	8001ce2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001c6a:	6939      	ldr	r1, [r7, #16]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fb46 	bl	80022fe <I2C_ITAddrCplt>
 8001c72:	e037      	b.n	8001ce4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	085b      	lsrs	r3, r3, #1
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d031      	beq.n	8001ce4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	085b      	lsrs	r3, r3, #1
 8001c84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d02b      	beq.n	8001ce4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d018      	beq.n	8001cc8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	781a      	ldrb	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001cc6:	e00d      	b.n	8001ce4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cce:	d002      	beq.n	8001cd6 <I2C_Slave_ISR_IT+0x1e8>
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 fbd2 	bl	8002480 <I2C_ITSlaveSeqCplt>
 8001cdc:	e002      	b.n	8001ce4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8001cde:	bf00      	nop
 8001ce0:	e000      	b.n	8001ce4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8001ce2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b088      	sub	sp, #32
 8001cfa:	af02      	add	r7, sp, #8
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <I2C_Master_ISR_DMA+0x1a>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e0e1      	b.n	8001ed4 <I2C_Master_ISR_DMA+0x1de>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d017      	beq.n	8001d54 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d011      	beq.n	8001d54 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2210      	movs	r2, #16
 8001d36:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3c:	f043 0204 	orr.w	r2, r3, #4
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001d44:	2120      	movs	r1, #32
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f001 f80e 	bl	8002d68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 ff96 	bl	8002c7e <I2C_Flush_TXDR>
 8001d52:	e0ba      	b.n	8001eca <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	09db      	lsrs	r3, r3, #7
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d072      	beq.n	8001e46 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d06c      	beq.n	8001e46 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d7a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d04e      	beq.n	8001e24 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d92:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2bff      	cmp	r3, #255	@ 0xff
 8001d9c:	d906      	bls.n	8001dac <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	22ff      	movs	r2, #255	@ 0xff
 8001da2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8001da4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e010      	b.n	8001dce <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001dbe:	d003      	beq.n	8001dc8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e002      	b.n	8001dce <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001dc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dcc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	8a79      	ldrh	r1, [r7, #18]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 ff91 	bl	8002d04 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b22      	cmp	r3, #34	@ 0x22
 8001dfe:	d108      	bne.n	8001e12 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e0e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e10:	e05b      	b.n	8001eca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e20:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e22:	e052      	b.n	8001eca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e32:	d003      	beq.n	8001e3c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fae6 	bl	8002406 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001e3a:	e046      	b.n	8001eca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e3c:	2140      	movs	r1, #64	@ 0x40
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fe06 	bl	8002a50 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001e44:	e041      	b.n	8001eca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d029      	beq.n	8001ea6 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	099b      	lsrs	r3, r3, #6
 8001e56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d023      	beq.n	8001ea6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d119      	bne.n	8001e9c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e76:	d027      	beq.n	8001ec8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e80:	d108      	bne.n	8001e94 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e90:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001e92:	e019      	b.n	8001ec8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 fab6 	bl	8002406 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001e9a:	e015      	b.n	8001ec8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e9c:	2140      	movs	r1, #64	@ 0x40
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 fdd6 	bl	8002a50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ea4:	e010      	b.n	8001ec8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fb3b 	bl	800253c <I2C_ITMasterCplt>
 8001ec6:	e000      	b.n	8001eca <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001ec8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001ee8:	4b92      	ldr	r3, [pc, #584]	@ (8002134 <I2C_Mem_ISR_DMA+0x258>)
 8001eea:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <I2C_Mem_ISR_DMA+0x1e>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e118      	b.n	800212c <I2C_Mem_ISR_DMA+0x250>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d017      	beq.n	8001f3e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d011      	beq.n	8001f3e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2210      	movs	r2, #16
 8001f20:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	f043 0204 	orr.w	r2, r3, #4
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001f2e:	2120      	movs	r1, #32
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 ff19 	bl	8002d68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 fea1 	bl	8002c7e <I2C_Flush_TXDR>
 8001f3c:	e0f1      	b.n	8002122 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00f      	beq.n	8001f6a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f5e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f04f 32ff 	mov.w	r2, #4294967295
 8001f66:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f68:	e0db      	b.n	8002122 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	09db      	lsrs	r3, r3, #7
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d060      	beq.n	8002038 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d05a      	beq.n	8002038 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f82:	2101      	movs	r1, #1
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 ff73 	bl	8002e70 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001f8a:	2110      	movs	r1, #16
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 feeb 	bl	8002d68 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d048      	beq.n	800202e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2bff      	cmp	r3, #255	@ 0xff
 8001fa4:	d910      	bls.n	8001fc8 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	22ff      	movs	r2, #255	@ 0xff
 8001faa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb0:	b299      	uxth	r1, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fe9f 	bl	8002d04 <I2C_TransferConfig>
 8001fc6:	e011      	b.n	8001fec <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	b299      	uxth	r1, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fe8c 	bl	8002d04 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b22      	cmp	r3, #34	@ 0x22
 8002008:	d108      	bne.n	800201c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002018:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800201a:	e082      	b.n	8002122 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800202a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800202c:	e079      	b.n	8002122 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800202e:	2140      	movs	r1, #64	@ 0x40
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 fd0d 	bl	8002a50 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002036:	e074      	b.n	8002122 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	099b      	lsrs	r3, r3, #6
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d05e      	beq.n	8002102 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	099b      	lsrs	r3, r3, #6
 8002048:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800204c:	2b00      	cmp	r3, #0
 800204e:	d058      	beq.n	8002102 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002050:	2101      	movs	r1, #1
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 ff0c 	bl	8002e70 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002058:	2110      	movs	r1, #16
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 fe84 	bl	8002d68 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b22      	cmp	r3, #34	@ 0x22
 800206a:	d101      	bne.n	8002070 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800206c:	4b32      	ldr	r3, [pc, #200]	@ (8002138 <I2C_Mem_ISR_DMA+0x25c>)
 800206e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	2bff      	cmp	r3, #255	@ 0xff
 8002078:	d910      	bls.n	800209c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	22ff      	movs	r2, #255	@ 0xff
 800207e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002084:	b299      	uxth	r1, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208a:	b2da      	uxtb	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 fe35 	bl	8002d04 <I2C_TransferConfig>
 800209a:	e011      	b.n	80020c0 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	b299      	uxth	r1, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fe22 	bl	8002d04 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b22      	cmp	r3, #34	@ 0x22
 80020dc:	d108      	bne.n	80020f0 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020ec:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020ee:	e018      	b.n	8002122 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020fe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002100:	e00f      	b.n	8002122 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d009      	beq.n	8002122 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 fa0d 	bl	800253c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	80002000 	.word	0x80002000
 8002138:	80002400 	.word	0x80002400

0800213c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <I2C_Slave_ISR_DMA+0x24>
 800215c:	2302      	movs	r3, #2
 800215e:	e0ca      	b.n	80022f6 <I2C_Slave_ISR_DMA+0x1ba>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 faa4 	bl	80026d0 <I2C_ITSlaveCplt>
 8002188:	e0b0      	b.n	80022ec <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 809a 	beq.w	80022cc <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8093 	beq.w	80022cc <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	0b9b      	lsrs	r3, r3, #14
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0bdb      	lsrs	r3, r3, #15
 80021b6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d07f      	beq.n	80022be <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00d      	beq.n	80021e2 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0bdb      	lsrs	r3, r3, #15
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80021de:	2301      	movs	r3, #1
 80021e0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00d      	beq.n	8002206 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	0b9b      	lsrs	r3, r3, #14
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d007      	beq.n	8002206 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8002202:	2301      	movs	r3, #1
 8002204:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d128      	bne.n	800225e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b28      	cmp	r3, #40	@ 0x28
 8002216:	d108      	bne.n	800222a <I2C_Slave_ISR_DMA+0xee>
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800221e:	d104      	bne.n	800222a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 fbbe 	bl	80029a4 <I2C_ITListenCplt>
 8002228:	e048      	b.n	80022bc <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b29      	cmp	r3, #41	@ 0x29
 8002234:	d10e      	bne.n	8002254 <I2C_Slave_ISR_DMA+0x118>
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800223c:	d00a      	beq.n	8002254 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2210      	movs	r2, #16
 8002244:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fd19 	bl	8002c7e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f917 	bl	8002480 <I2C_ITSlaveSeqCplt>
 8002252:	e033      	b.n	80022bc <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2210      	movs	r2, #16
 800225a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800225c:	e034      	b.n	80022c8 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2210      	movs	r2, #16
 8002264:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	f043 0204 	orr.w	r2, r3, #4
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002278:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <I2C_Slave_ISR_DMA+0x14c>
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002286:	d11f      	bne.n	80022c8 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b21      	cmp	r3, #33	@ 0x21
 800228c:	d002      	beq.n	8002294 <I2C_Slave_ISR_DMA+0x158>
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	2b29      	cmp	r3, #41	@ 0x29
 8002292:	d103      	bne.n	800229c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2221      	movs	r2, #33	@ 0x21
 8002298:	631a      	str	r2, [r3, #48]	@ 0x30
 800229a:	e008      	b.n	80022ae <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b22      	cmp	r3, #34	@ 0x22
 80022a0:	d002      	beq.n	80022a8 <I2C_Slave_ISR_DMA+0x16c>
 80022a2:	7dfb      	ldrb	r3, [r7, #23]
 80022a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80022a6:	d102      	bne.n	80022ae <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2222      	movs	r2, #34	@ 0x22
 80022ac:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	4619      	mov	r1, r3
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fbcb 	bl	8002a50 <I2C_ITError>
      if (treatdmanack == 1U)
 80022ba:	e005      	b.n	80022c8 <I2C_Slave_ISR_DMA+0x18c>
 80022bc:	e004      	b.n	80022c8 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2210      	movs	r2, #16
 80022c4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022c6:	e011      	b.n	80022ec <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80022c8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022ca:	e00f      	b.n	80022ec <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	08db      	lsrs	r3, r3, #3
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d009      	beq.n	80022ec <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	08db      	lsrs	r3, r3, #3
 80022dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f809 	bl	80022fe <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002314:	2b28      	cmp	r3, #40	@ 0x28
 8002316:	d16a      	bne.n	80023ee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	0c1b      	lsrs	r3, r3, #16
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	b29b      	uxth	r3, r3
 8002332:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002336:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	b29b      	uxth	r3, r3
 8002340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002344:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	b29b      	uxth	r3, r3
 800234e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002352:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d138      	bne.n	80023ce <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800235c:	897b      	ldrh	r3, [r7, #10]
 800235e:	09db      	lsrs	r3, r3, #7
 8002360:	b29a      	uxth	r2, r3
 8002362:	89bb      	ldrh	r3, [r7, #12]
 8002364:	4053      	eors	r3, r2
 8002366:	b29b      	uxth	r3, r3
 8002368:	f003 0306 	and.w	r3, r3, #6
 800236c:	2b00      	cmp	r3, #0
 800236e:	d11c      	bne.n	80023aa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002370:	897b      	ldrh	r3, [r7, #10]
 8002372:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002382:	2b02      	cmp	r3, #2
 8002384:	d13b      	bne.n	80023fe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2208      	movs	r2, #8
 8002392:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800239c:	89ba      	ldrh	r2, [r7, #12]
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	4619      	mov	r1, r3
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fd ffdc 	bl	8000360 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80023a8:	e029      	b.n	80023fe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80023aa:	893b      	ldrh	r3, [r7, #8]
 80023ac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fd5c 	bl	8002e70 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023c0:	89ba      	ldrh	r2, [r7, #12]
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fd ffca 	bl	8000360 <HAL_I2C_AddrCallback>
}
 80023cc:	e017      	b.n	80023fe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fd4c 	bl	8002e70 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023e0:	89ba      	ldrh	r2, [r7, #12]
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fd ffba 	bl	8000360 <HAL_I2C_AddrCallback>
}
 80023ec:	e007      	b.n	80023fe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2208      	movs	r2, #8
 80023f4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b21      	cmp	r3, #33	@ 0x21
 8002420:	d115      	bne.n	800244e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2211      	movs	r2, #17
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002436:	2101      	movs	r1, #1
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fd19 	bl	8002e70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff fb09 	bl	8001a5e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800244c:	e014      	b.n	8002478 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2212      	movs	r2, #18
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002462:	2102      	movs	r1, #2
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fd03 	bl	8002e70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fafd 	bl	8001a72 <HAL_I2C_MasterRxCpltCallback>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	0b9b      	lsrs	r3, r3, #14
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e00d      	b.n	80024d2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	0bdb      	lsrs	r3, r3, #15
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b29      	cmp	r3, #41	@ 0x29
 80024dc:	d112      	bne.n	8002504 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2228      	movs	r2, #40	@ 0x28
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2221      	movs	r2, #33	@ 0x21
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024ec:	2101      	movs	r1, #1
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fcbe 	bl	8002e70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fac2 	bl	8001a86 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002502:	e017      	b.n	8002534 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b2a      	cmp	r3, #42	@ 0x2a
 800250e:	d111      	bne.n	8002534 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2228      	movs	r2, #40	@ 0x28
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2222      	movs	r2, #34	@ 0x22
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800251e:	2102      	movs	r1, #2
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fca5 	bl	8002e70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fd ff3a 	bl	80003a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2220      	movs	r2, #32
 8002550:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b21      	cmp	r3, #33	@ 0x21
 800255c:	d107      	bne.n	800256e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800255e:	2101      	movs	r1, #1
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fc85 	bl	8002e70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2211      	movs	r2, #17
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
 800256c:	e00c      	b.n	8002588 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b22      	cmp	r3, #34	@ 0x22
 8002578:	d106      	bne.n	8002588 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800257a:	2102      	movs	r1, #2
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fc77 	bl	8002e70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2212      	movs	r2, #18
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b4d      	ldr	r3, [pc, #308]	@ (80026c8 <I2C_ITMasterCplt+0x18c>)
 8002594:	400b      	ands	r3, r1
 8002596:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4a      	ldr	r2, [pc, #296]	@ (80026cc <I2C_ITMasterCplt+0x190>)
 80025a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d009      	beq.n	80025c4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2210      	movs	r2, #16
 80025b6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025bc:	f043 0204 	orr.w	r2, r3, #4
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b60      	cmp	r3, #96	@ 0x60
 80025ce:	d10b      	bne.n	80025e8 <I2C_ITMasterCplt+0xac>
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80025e6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fb48 	bl	8002c7e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b60      	cmp	r3, #96	@ 0x60
 80025fe:	d002      	beq.n	8002606 <I2C_ITMasterCplt+0xca>
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fa1f 	bl	8002a50 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002612:	e054      	b.n	80026be <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b21      	cmp	r3, #33	@ 0x21
 800261e:	d124      	bne.n	800266a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b40      	cmp	r3, #64	@ 0x40
 8002638:	d10b      	bne.n	8002652 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fa25 	bl	8001a9a <HAL_I2C_MemTxCpltCallback>
}
 8002650:	e035      	b.n	80026be <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff f9fb 	bl	8001a5e <HAL_I2C_MasterTxCpltCallback>
}
 8002668:	e029      	b.n	80026be <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b22      	cmp	r3, #34	@ 0x22
 8002674:	d123      	bne.n	80026be <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b40      	cmp	r3, #64	@ 0x40
 800268e:	d10b      	bne.n	80026a8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fa04 	bl	8001aae <HAL_I2C_MemRxCpltCallback>
}
 80026a6:	e00a      	b.n	80026be <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff f9da 	bl	8001a72 <HAL_I2C_MasterRxCpltCallback>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	fe00e800 	.word	0xfe00e800
 80026cc:	ffff0000 	.word	0xffff0000

080026d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2220      	movs	r2, #32
 80026fa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026fc:	7afb      	ldrb	r3, [r7, #11]
 80026fe:	2b21      	cmp	r3, #33	@ 0x21
 8002700:	d002      	beq.n	8002708 <I2C_ITSlaveCplt+0x38>
 8002702:	7afb      	ldrb	r3, [r7, #11]
 8002704:	2b29      	cmp	r3, #41	@ 0x29
 8002706:	d108      	bne.n	800271a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002708:	f248 0101 	movw	r1, #32769	@ 0x8001
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fbaf 	bl	8002e70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2221      	movs	r2, #33	@ 0x21
 8002716:	631a      	str	r2, [r3, #48]	@ 0x30
 8002718:	e019      	b.n	800274e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	2b22      	cmp	r3, #34	@ 0x22
 800271e:	d002      	beq.n	8002726 <I2C_ITSlaveCplt+0x56>
 8002720:	7afb      	ldrb	r3, [r7, #11]
 8002722:	2b2a      	cmp	r3, #42	@ 0x2a
 8002724:	d108      	bne.n	8002738 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002726:	f248 0102 	movw	r1, #32770	@ 0x8002
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fba0 	bl	8002e70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2222      	movs	r2, #34	@ 0x22
 8002734:	631a      	str	r2, [r3, #48]	@ 0x30
 8002736:	e00a      	b.n	800274e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002738:	7afb      	ldrb	r3, [r7, #11]
 800273a:	2b28      	cmp	r3, #40	@ 0x28
 800273c:	d107      	bne.n	800274e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800273e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fb94 	bl	8002e70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800275c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b8c      	ldr	r3, [pc, #560]	@ (800299c <I2C_ITSlaveCplt+0x2cc>)
 800276a:	400b      	ands	r3, r1
 800276c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa85 	bl	8002c7e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	0b9b      	lsrs	r3, r3, #14
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800278e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027a6:	e018      	b.n	80027da <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	0bdb      	lsrs	r3, r3, #15
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d012      	beq.n	80027da <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d020      	beq.n	8002828 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f023 0304 	bic.w	r3, r3, #4
 80027ec:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	f043 0204 	orr.w	r2, r3, #4
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d04a      	beq.n	80028e0 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002852:	2b00      	cmp	r3, #0
 8002854:	d044      	beq.n	80028e0 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d128      	bne.n	80028b2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b28      	cmp	r3, #40	@ 0x28
 800286a:	d108      	bne.n	800287e <I2C_ITSlaveCplt+0x1ae>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002872:	d104      	bne.n	800287e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002874:	6979      	ldr	r1, [r7, #20]
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f894 	bl	80029a4 <I2C_ITListenCplt>
 800287c:	e030      	b.n	80028e0 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b29      	cmp	r3, #41	@ 0x29
 8002888:	d10e      	bne.n	80028a8 <I2C_ITSlaveCplt+0x1d8>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002890:	d00a      	beq.n	80028a8 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2210      	movs	r2, #16
 8002898:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9ef 	bl	8002c7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fded 	bl	8002480 <I2C_ITSlaveSeqCplt>
 80028a6:	e01b      	b.n	80028e0 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2210      	movs	r2, #16
 80028ae:	61da      	str	r2, [r3, #28]
 80028b0:	e016      	b.n	80028e0 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2210      	movs	r2, #16
 80028b8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	f043 0204 	orr.w	r2, r3, #4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <I2C_ITSlaveCplt+0x204>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d2:	d105      	bne.n	80028e0 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d8:	4619      	mov	r1, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8b8 	bl	8002a50 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d010      	beq.n	8002918 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	4619      	mov	r1, r3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f8a7 	bl	8002a50 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b28      	cmp	r3, #40	@ 0x28
 800290c:	d141      	bne.n	8002992 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800290e:	6979      	ldr	r1, [r7, #20]
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f847 	bl	80029a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002916:	e03c      	b.n	8002992 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002920:	d014      	beq.n	800294c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fdac 	bl	8002480 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a1d      	ldr	r2, [pc, #116]	@ (80029a0 <I2C_ITSlaveCplt+0x2d0>)
 800292c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fd fcff 	bl	8000348 <HAL_I2C_ListenCpltCallback>
}
 800294a:	e022      	b.n	8002992 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b22      	cmp	r3, #34	@ 0x22
 8002956:	d10e      	bne.n	8002976 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fd fd1a 	bl	80003a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002974:	e00d      	b.n	8002992 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff f87a 	bl	8001a86 <HAL_I2C_SlaveTxCpltCallback>
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	fe00e800 	.word	0xfe00e800
 80029a0:	ffff0000 	.word	0xffff0000

080029a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a26      	ldr	r2, [pc, #152]	@ (8002a4c <I2C_ITListenCplt+0xa8>)
 80029b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d022      	beq.n	8002a22 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	f043 0204 	orr.w	r2, r3, #4
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a22:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fa22 	bl	8002e70 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2210      	movs	r2, #16
 8002a32:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7fd fc83 	bl	8000348 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	ffff0000 	.word	0xffff0000

08002a50 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a60:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a6d      	ldr	r2, [pc, #436]	@ (8002c24 <I2C_ITError+0x1d4>)
 8002a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b28      	cmp	r3, #40	@ 0x28
 8002a86:	d005      	beq.n	8002a94 <I2C_ITError+0x44>
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b29      	cmp	r3, #41	@ 0x29
 8002a8c:	d002      	beq.n	8002a94 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a92:	d10b      	bne.n	8002aac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a94:	2103      	movs	r1, #3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f9ea 	bl	8002e70 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2228      	movs	r2, #40	@ 0x28
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a60      	ldr	r2, [pc, #384]	@ (8002c28 <I2C_ITError+0x1d8>)
 8002aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aaa:	e030      	b.n	8002b0e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002aac:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f9dd 	bl	8002e70 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f8e1 	bl	8002c7e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b60      	cmp	r3, #96	@ 0x60
 8002ac6:	d01f      	beq.n	8002b08 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d114      	bne.n	8002b08 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d109      	bne.n	8002b00 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2210      	movs	r2, #16
 8002af2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af8:	f043 0204 	orr.w	r2, r3, #4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2220      	movs	r2, #32
 8002b06:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d039      	beq.n	8002b90 <I2C_ITError+0x140>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b11      	cmp	r3, #17
 8002b20:	d002      	beq.n	8002b28 <I2C_ITError+0xd8>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b21      	cmp	r3, #33	@ 0x21
 8002b26:	d133      	bne.n	8002b90 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b36:	d107      	bne.n	8002b48 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe fb93 	bl	8001278 <HAL_DMA_GetState>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d017      	beq.n	8002b88 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	4a33      	ldr	r2, [pc, #204]	@ (8002c2c <I2C_ITError+0x1dc>)
 8002b5e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe fa6d 	bl	800104c <HAL_DMA_Abort_IT>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d04d      	beq.n	8002c14 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b82:	4610      	mov	r0, r2
 8002b84:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b86:	e045      	b.n	8002c14 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f851 	bl	8002c30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b8e:	e041      	b.n	8002c14 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d039      	beq.n	8002c0c <I2C_ITError+0x1bc>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b12      	cmp	r3, #18
 8002b9c:	d002      	beq.n	8002ba4 <I2C_ITError+0x154>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b22      	cmp	r3, #34	@ 0x22
 8002ba2:	d133      	bne.n	8002c0c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bb2:	d107      	bne.n	8002bc4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bc2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe fb55 	bl	8001278 <HAL_DMA_GetState>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d017      	beq.n	8002c04 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	4a14      	ldr	r2, [pc, #80]	@ (8002c2c <I2C_ITError+0x1dc>)
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe fa2f 	bl	800104c <HAL_DMA_Abort_IT>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d011      	beq.n	8002c18 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c02:	e009      	b.n	8002c18 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f813 	bl	8002c30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c0a:	e005      	b.n	8002c18 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f80f 	bl	8002c30 <I2C_TreatErrorCallback>
  }
}
 8002c12:	e002      	b.n	8002c1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c14:	bf00      	nop
 8002c16:	e000      	b.n	8002c1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c18:	bf00      	nop
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	ffff0000 	.word	0xffff0000
 8002c28:	08001aef 	.word	0x08001aef
 8002c2c:	08002cc7 	.word	0x08002cc7

08002c30 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b60      	cmp	r3, #96	@ 0x60
 8002c42:	d10e      	bne.n	8002c62 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe ff31 	bl	8001ac2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c60:	e009      	b.n	8002c76 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7fd fbd1 	bl	8000418 <HAL_I2C_ErrorCallback>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d103      	bne.n	8002c9c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d007      	beq.n	8002cba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699a      	ldr	r2, [r3, #24]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	619a      	str	r2, [r3, #24]
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff ff9b 	bl	8002c30 <I2C_TreatErrorCallback>
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	817b      	strh	r3, [r7, #10]
 8002d12:	4613      	mov	r3, r2
 8002d14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d16:	897b      	ldrh	r3, [r7, #10]
 8002d18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d1c:	7a7b      	ldrb	r3, [r7, #9]
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	0d5b      	lsrs	r3, r3, #21
 8002d3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d42:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <I2C_TransferConfig+0x60>)
 8002d44:	430b      	orrs	r3, r1
 8002d46:	43db      	mvns	r3, r3
 8002d48:	ea02 0103 	and.w	r1, r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	03ff63ff 	.word	0x03ff63ff

08002d68 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7c:	4a39      	ldr	r2, [pc, #228]	@ (8002e64 <I2C_Enable_IRQ+0xfc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d032      	beq.n	8002de8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002d86:	4a38      	ldr	r2, [pc, #224]	@ (8002e68 <I2C_Enable_IRQ+0x100>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d02d      	beq.n	8002de8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002d90:	4a36      	ldr	r2, [pc, #216]	@ (8002e6c <I2C_Enable_IRQ+0x104>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d028      	beq.n	8002de8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	da03      	bge.n	8002da6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002da4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002da6:	887b      	ldrh	r3, [r7, #2]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002db6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002dc8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002dca:	887b      	ldrh	r3, [r7, #2]
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d103      	bne.n	8002dd8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002dd6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d133      	bne.n	8002e46 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f043 0320 	orr.w	r3, r3, #32
 8002de4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002de6:	e02e      	b.n	8002e46 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002de8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	da03      	bge.n	8002df8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002df6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002e08:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002e1a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d103      	bne.n	8002e2a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002e28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002e2a:	887b      	ldrh	r3, [r7, #2]
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d103      	bne.n	8002e38 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	2b40      	cmp	r3, #64	@ 0x40
 8002e3c:	d103      	bne.n	8002e46 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6819      	ldr	r1, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	08001cf7 	.word	0x08001cf7
 8002e68:	0800213d 	.word	0x0800213d
 8002e6c:	08001edd 	.word	0x08001edd

08002e70 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00f      	beq.n	8002eaa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002e90:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e9e:	2b28      	cmp	r3, #40	@ 0x28
 8002ea0:	d003      	beq.n	8002eaa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002ea8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002eaa:	887b      	ldrh	r3, [r7, #2]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00f      	beq.n	8002ed4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002eba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ec8:	2b28      	cmp	r3, #40	@ 0x28
 8002eca:	d003      	beq.n	8002ed4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002ed2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ed4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da03      	bge.n	8002ee4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002ee2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d103      	bne.n	8002ef2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d103      	bne.n	8002f00 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f043 0320 	orr.w	r3, r3, #32
 8002efe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	2b40      	cmp	r3, #64	@ 0x40
 8002f04:	d103      	bne.n	8002f0e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	43da      	mvns	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d138      	bne.n	8002fb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e032      	b.n	8002fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	@ 0x24
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6819      	ldr	r1, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d139      	bne.n	800304c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e033      	b.n	800304e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2224      	movs	r2, #36	@ 0x24
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003014:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0c0      	b.n	80031ee <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f007 fc8f 	bl	800a9a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2203      	movs	r2, #3
 800308a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f003 feb5 	bl	8006e02 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e03e      	b.n	800311c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	440b      	add	r3, r1
 80030ac:	3311      	adds	r3, #17
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	3310      	adds	r3, #16
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	440b      	add	r3, r1
 80030d4:	3313      	adds	r3, #19
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	3320      	adds	r3, #32
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030ee:	7bfa      	ldrb	r2, [r7, #15]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	440b      	add	r3, r1
 80030fc:	3324      	adds	r3, #36	@ 0x24
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	3301      	adds	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	791b      	ldrb	r3, [r3, #4]
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	429a      	cmp	r2, r3
 8003124:	d3bb      	bcc.n	800309e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
 800312a:	e044      	b.n	80031b6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	440b      	add	r3, r1
 8003166:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800316a:	2200      	movs	r2, #0
 800316c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	440b      	add	r3, r1
 800317c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	440b      	add	r3, r1
 8003192:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	440b      	add	r3, r1
 80031a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	3301      	adds	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	791b      	ldrb	r3, [r3, #4]
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d3b5      	bcc.n	800312c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80031cc:	f003 fe34 	bl	8006e38 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7a9b      	ldrb	r3, [r3, #10]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d102      	bne.n	80031ec <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f001 fbd0 	bl	800498c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_PCD_Start+0x16>
 8003208:	2302      	movs	r3, #2
 800320a:	e012      	b.n	8003232 <HAL_PCD_Start+0x3c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f003 fddb 	bl	8006dd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f005 f9cb 	bl	80085be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_PCD_Stop+0x16>
 800324c:	2302      	movs	r3, #2
 800324e:	e012      	b.n	8003276 <HAL_PCD_Stop+0x3c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f003 fdd0 	bl	8006e02 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f005 f9c0 	bl	80085ec <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f005 f9c3 	bl	8008616 <USB_ReadInterrupts>
 8003290:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 faa6 	bl	80037ee <PCD_EP_ISR_Handler>

    return;
 80032a2:	e110      	b.n	80034c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d013      	beq.n	80032d6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032c0:	b292      	uxth	r2, r2
 80032c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f007 fbfd 	bl	800aac6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80032cc:	2100      	movs	r1, #0
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f8fc 	bl	80034cc <HAL_PCD_SetAddress>

    return;
 80032d4:	e0f7      	b.n	80034c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00c      	beq.n	80032fa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032f2:	b292      	uxth	r2, r2
 80032f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80032f8:	e0e5      	b.n	80034c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800330c:	b29a      	uxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003316:	b292      	uxth	r2, r2
 8003318:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800331c:	e0d3      	b.n	80034c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d034      	beq.n	8003392 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0204 	bic.w	r2, r2, #4
 800333a:	b292      	uxth	r2, r2
 800333c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003348:	b29a      	uxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0208 	bic.w	r2, r2, #8
 8003352:	b292      	uxth	r2, r2
 8003354:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800335e:	2b01      	cmp	r3, #1
 8003360:	d107      	bne.n	8003372 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800336a:	2100      	movs	r1, #0
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f007 fd6d 	bl	800ae4c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f007 fbe0 	bl	800ab38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003380:	b29a      	uxth	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800338a:	b292      	uxth	r2, r2
 800338c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003390:	e099      	b.n	80034c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003398:	2b00      	cmp	r3, #0
 800339a:	d027      	beq.n	80033ec <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0208 	orr.w	r2, r2, #8
 80033ae:	b292      	uxth	r2, r2
 80033b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033bc:	b29a      	uxth	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c6:	b292      	uxth	r2, r2
 80033c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0204 	orr.w	r2, r2, #4
 80033de:	b292      	uxth	r2, r2
 80033e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f007 fb8d 	bl	800ab04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80033ea:	e06c      	b.n	80034c6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d040      	beq.n	8003478 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033fe:	b29a      	uxth	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003408:	b292      	uxth	r2, r2
 800340a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d12b      	bne.n	8003470 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0204 	orr.w	r2, r2, #4
 800342a:	b292      	uxth	r2, r2
 800342c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0208 	orr.w	r2, r2, #8
 8003442:	b292      	uxth	r2, r2
 8003444:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003458:	b29b      	uxth	r3, r3
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003466:	2101      	movs	r1, #1
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f007 fcef 	bl	800ae4c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800346e:	e02a      	b.n	80034c6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f007 fb47 	bl	800ab04 <HAL_PCD_SuspendCallback>
    return;
 8003476:	e026      	b.n	80034c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00f      	beq.n	80034a2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800348a:	b29a      	uxth	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003494:	b292      	uxth	r2, r2
 8003496:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f007 fb05 	bl	800aaaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80034a0:	e011      	b.n	80034c6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034be:	b292      	uxth	r2, r2
 80034c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80034c4:	bf00      	nop
  }
}
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_PCD_SetAddress+0x1a>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e012      	b.n	800350c <HAL_PCD_SetAddress+0x40>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f005 f84a 	bl	8008596 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	4608      	mov	r0, r1
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	4603      	mov	r3, r0
 8003524:	70fb      	strb	r3, [r7, #3]
 8003526:	460b      	mov	r3, r1
 8003528:	803b      	strh	r3, [r7, #0]
 800352a:	4613      	mov	r3, r2
 800352c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003532:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003536:	2b00      	cmp	r3, #0
 8003538:	da0e      	bge.n	8003558 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	f003 0207 	and.w	r2, r3, #7
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	3310      	adds	r3, #16
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	705a      	strb	r2, [r3, #1]
 8003556:	e00e      	b.n	8003576 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	f003 0207 	and.w	r2, r3, #7
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003582:	883b      	ldrh	r3, [r7, #0]
 8003584:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	78ba      	ldrb	r2, [r7, #2]
 8003590:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003592:	78bb      	ldrb	r3, [r7, #2]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d102      	bne.n	800359e <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_PCD_EP_Open+0x98>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e00e      	b.n	80035ca <HAL_PCD_EP_Open+0xb6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68f9      	ldr	r1, [r7, #12]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 fc5a 	bl	8006e74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80035c8:	7afb      	ldrb	r3, [r7, #11]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	460b      	mov	r3, r1
 80035e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e2:	7afb      	ldrb	r3, [r7, #11]
 80035e4:	f003 0207 	and.w	r2, r3, #7
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2200      	movs	r2, #0
 8003610:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003612:	7afb      	ldrb	r3, [r7, #11]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	b2da      	uxtb	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6979      	ldr	r1, [r7, #20]
 8003624:	4618      	mov	r0, r3
 8003626:	f004 f90d 	bl	8007844 <USB_EPStartXfer>

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	460b      	mov	r3, r1
 8003642:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003644:	7afb      	ldrb	r3, [r7, #11]
 8003646:	f003 0207 	and.w	r2, r3, #7
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	3310      	adds	r3, #16
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2200      	movs	r2, #0
 8003678:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2201      	movs	r2, #1
 800367e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003680:	7afb      	ldrb	r3, [r7, #11]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	b2da      	uxtb	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6979      	ldr	r1, [r7, #20]
 8003692:	4618      	mov	r0, r3
 8003694:	f004 f8d6 	bl	8007844 <USB_EPStartXfer>

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	7912      	ldrb	r2, [r2, #4]
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d901      	bls.n	80036c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e03e      	b.n	800373e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da0e      	bge.n	80036e6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 0207 	and.w	r2, r3, #7
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	3310      	adds	r3, #16
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	705a      	strb	r2, [r3, #1]
 80036e4:	e00c      	b.n	8003700 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4413      	add	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_PCD_EP_SetStall+0x7e>
 800371c:	2302      	movs	r3, #2
 800371e:	e00e      	b.n	800373e <HAL_PCD_EP_SetStall+0x9c>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	4618      	mov	r0, r3
 8003730:	f004 fe37 	bl	80083a2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	460b      	mov	r3, r1
 8003750:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	7912      	ldrb	r2, [r2, #4]
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e040      	b.n	80037e6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003768:	2b00      	cmp	r3, #0
 800376a:	da0e      	bge.n	800378a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 0207 	and.w	r2, r3, #7
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	3310      	adds	r3, #16
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	705a      	strb	r2, [r3, #1]
 8003788:	e00e      	b.n	80037a8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	f003 0207 	and.w	r2, r3, #7
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_PCD_EP_ClrStall+0x82>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e00e      	b.n	80037e6 <HAL_PCD_EP_ClrStall+0xa0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68f9      	ldr	r1, [r7, #12]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f004 fe34 	bl	8008444 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b092      	sub	sp, #72	@ 0x48
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037f6:	e333      	b.n	8003e60 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003800:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003802:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800380e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003812:	2b00      	cmp	r3, #0
 8003814:	f040 8108 	bne.w	8003a28 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003818:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	d14c      	bne.n	80038bc <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800382e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003832:	813b      	strh	r3, [r7, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	893b      	ldrh	r3, [r7, #8]
 800383a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003842:	b29b      	uxth	r3, r3
 8003844:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3310      	adds	r3, #16
 800384a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003854:	b29b      	uxth	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	4413      	add	r3, r2
 8003866:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003872:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	441a      	add	r2, r3
 800387e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003880:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003882:	2100      	movs	r1, #0
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f007 f8f6 	bl	800aa76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	7b1b      	ldrb	r3, [r3, #12]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 82e5 	beq.w	8003e60 <PCD_EP_ISR_Handler+0x672>
 8003896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 82e0 	bne.w	8003e60 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7b1b      	ldrb	r3, [r3, #12]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	731a      	strb	r2, [r3, #12]
 80038ba:	e2d1      	b.n	8003e60 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038c2:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80038cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80038ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d032      	beq.n	800393c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038de:	b29b      	uxth	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	4413      	add	r3, r2
 80038f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800390c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003910:	b29b      	uxth	r3, r3
 8003912:	f004 fed3 	bl	80086bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29a      	uxth	r2, r3
 800391e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003922:	4013      	ands	r3, r2
 8003924:	817b      	strh	r3, [r7, #10]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	897a      	ldrh	r2, [r7, #10]
 800392c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003930:	b292      	uxth	r2, r2
 8003932:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f007 f871 	bl	800aa1c <HAL_PCD_SetupStageCallback>
 800393a:	e291      	b.n	8003e60 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800393c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003940:	2b00      	cmp	r3, #0
 8003942:	f280 828d 	bge.w	8003e60 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29a      	uxth	r2, r3
 800394e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003952:	4013      	ands	r3, r2
 8003954:	81fb      	strh	r3, [r7, #14]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	89fa      	ldrh	r2, [r7, #14]
 800395c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003960:	b292      	uxth	r2, r2
 8003962:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800396c:	b29b      	uxth	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4413      	add	r3, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	4413      	add	r3, r2
 800397e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800398a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800398c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d019      	beq.n	80039c8 <PCD_EP_ISR_Handler+0x1da>
 8003994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d015      	beq.n	80039c8 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a2:	6959      	ldr	r1, [r3, #20]
 80039a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80039a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f004 fe85 	bl	80086bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80039b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	441a      	add	r2, r3
 80039bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80039c0:	2100      	movs	r1, #0
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f007 f83c 	bl	800aa40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80039d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 8242 	bne.w	8003e60 <PCD_EP_ISR_Handler+0x672>
 80039dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80039de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80039e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039e6:	f000 823b 	beq.w	8003e60 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fa:	81bb      	strh	r3, [r7, #12]
 80039fc:	89bb      	ldrh	r3, [r7, #12]
 80039fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003a02:	81bb      	strh	r3, [r7, #12]
 8003a04:	89bb      	ldrh	r3, [r7, #12]
 8003a06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a0a:	81bb      	strh	r3, [r7, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	89bb      	ldrh	r3, [r7, #12]
 8003a12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	8013      	strh	r3, [r2, #0]
 8003a26:	e21b      	b.n	8003e60 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a3a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f280 80f1 	bge.w	8003c26 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a72:	b292      	uxth	r2, r2
 8003a74:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003a76:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a8e:	7b1b      	ldrb	r3, [r3, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d123      	bne.n	8003adc <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	4413      	add	r3, r2
 8003aae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003abc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 808b 	beq.w	8003bdc <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003acc:	6959      	ldr	r1, [r3, #20]
 8003ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad0:	88da      	ldrh	r2, [r3, #6]
 8003ad2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003ad6:	f004 fdf1 	bl	80086bc <USB_ReadPMA>
 8003ada:	e07f      	b.n	8003bdc <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ade:	78db      	ldrb	r3, [r3, #3]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d109      	bne.n	8003af8 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003ae4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f9c6 	bl	8003e7c <HAL_PCD_EP_DB_Receive>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003af6:	e071      	b.n	8003bdc <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b12:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	441a      	add	r2, r3
 8003b22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d022      	beq.n	8003b98 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b76:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003b7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d02c      	beq.n	8003bdc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b88:	6959      	ldr	r1, [r3, #20]
 8003b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b8c:	891a      	ldrh	r2, [r3, #8]
 8003b8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003b92:	f004 fd93 	bl	80086bc <USB_ReadPMA>
 8003b96:	e021      	b.n	8003bdc <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bbc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003bc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d009      	beq.n	8003bdc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bce:	6959      	ldr	r1, [r3, #20]
 8003bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd2:	895a      	ldrh	r2, [r3, #10]
 8003bd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003bd8:	f004 fd70 	bl	80086bc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003be4:	441a      	add	r2, r3
 8003be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003bf2:	441a      	add	r2, r3
 8003bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <PCD_EP_ISR_Handler+0x41e>
 8003c00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d206      	bcs.n	8003c1a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f006 ff14 	bl	800aa40 <HAL_PCD_DataOutStageCallback>
 8003c18:	e005      	b.n	8003c26 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c20:	4618      	mov	r0, r3
 8003c22:	f003 fe0f 	bl	8007844 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8117 	beq.w	8003e60 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c32:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	3310      	adds	r3, #16
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4413      	add	r3, r2
 8003c44:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	441a      	add	r2, r3
 8003c70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c80:	78db      	ldrb	r3, [r3, #3]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	f040 80a1 	bne.w	8003dca <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c90:	7b1b      	ldrb	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8092 	beq.w	8003dbc <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d046      	beq.n	8003d30 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca4:	785b      	ldrb	r3, [r3, #1]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d126      	bne.n	8003cf8 <PCD_EP_ISR_Handler+0x50a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	00da      	lsls	r2, r3, #3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	801a      	strh	r2, [r3, #0]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	e061      	b.n	8003dbc <PCD_EP_ISR_Handler+0x5ce>
 8003cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cfa:	785b      	ldrb	r3, [r3, #1]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d15d      	bne.n	8003dbc <PCD_EP_ISR_Handler+0x5ce>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	4413      	add	r3, r2
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	00da      	lsls	r2, r3, #3
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	801a      	strh	r2, [r3, #0]
 8003d2e:	e045      	b.n	8003dbc <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d38:	785b      	ldrb	r3, [r3, #1]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d126      	bne.n	8003d8c <PCD_EP_ISR_Handler+0x59e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d52:	4413      	add	r3, r2
 8003d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	00da      	lsls	r2, r3, #3
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	4413      	add	r3, r2
 8003d60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d64:	623b      	str	r3, [r7, #32]
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	801a      	strh	r2, [r3, #0]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	801a      	strh	r2, [r3, #0]
 8003d8a:	e017      	b.n	8003dbc <PCD_EP_ISR_Handler+0x5ce>
 8003d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d8e:	785b      	ldrb	r3, [r3, #1]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d113      	bne.n	8003dbc <PCD_EP_ISR_Handler+0x5ce>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da2:	4413      	add	r3, r2
 8003da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	00da      	lsls	r2, r3, #3
 8003dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dae:	4413      	add	r3, r2
 8003db0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	2200      	movs	r2, #0
 8003dba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f006 fe57 	bl	800aa76 <HAL_PCD_DataInStageCallback>
 8003dc8:	e04a      	b.n	8003e60 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003dca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d13f      	bne.n	8003e54 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	4413      	add	r3, r2
 8003dee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003df8:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d906      	bls.n	8003e12 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e06:	699a      	ldr	r2, [r3, #24]
 8003e08:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003e0a:	1ad2      	subs	r2, r2, r3
 8003e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e0e:	619a      	str	r2, [r3, #24]
 8003e10:	e002      	b.n	8003e18 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e14:	2200      	movs	r2, #0
 8003e16:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f006 fe25 	bl	800aa76 <HAL_PCD_DataInStageCallback>
 8003e2c:	e018      	b.n	8003e60 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003e34:	441a      	add	r2, r3
 8003e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e38:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e3c:	69da      	ldr	r2, [r3, #28]
 8003e3e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003e40:	441a      	add	r2, r3
 8003e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e44:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f003 fcf9 	bl	8007844 <USB_EPStartXfer>
 8003e52:	e005      	b.n	8003e60 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e56:	461a      	mov	r2, r3
 8003e58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f917 	bl	800408e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	b21b      	sxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f6ff acc3 	blt.w	80037f8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3748      	adds	r7, #72	@ 0x48
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d07c      	beq.n	8003f8e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	8b7b      	ldrh	r3, [r7, #26]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d306      	bcc.n	8003ed2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	8b7b      	ldrh	r3, [r7, #26]
 8003eca:	1ad2      	subs	r2, r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	619a      	str	r2, [r3, #24]
 8003ed0:	e002      	b.n	8003ed8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d123      	bne.n	8003f28 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efa:	833b      	strh	r3, [r7, #24]
 8003efc:	8b3b      	ldrh	r3, [r7, #24]
 8003efe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f02:	833b      	strh	r3, [r7, #24]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	441a      	add	r2, r3
 8003f12:	8b3b      	ldrh	r3, [r7, #24]
 8003f14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01f      	beq.n	8003f72 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4c:	82fb      	strh	r3, [r7, #22]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	441a      	add	r2, r3
 8003f5c:	8afb      	ldrh	r3, [r7, #22]
 8003f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f72:	8b7b      	ldrh	r3, [r7, #26]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8085 	beq.w	8004084 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6959      	ldr	r1, [r3, #20]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	891a      	ldrh	r2, [r3, #8]
 8003f86:	8b7b      	ldrh	r3, [r7, #26]
 8003f88:	f004 fb98 	bl	80086bc <USB_ReadPMA>
 8003f8c:	e07a      	b.n	8004084 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fb2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	8b7b      	ldrh	r3, [r7, #26]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d306      	bcc.n	8003fcc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	8b7b      	ldrh	r3, [r7, #26]
 8003fc4:	1ad2      	subs	r2, r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	619a      	str	r2, [r3, #24]
 8003fca:	e002      	b.n	8003fd2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d123      	bne.n	8004022 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff4:	83fb      	strh	r3, [r7, #30]
 8003ff6:	8bfb      	ldrh	r3, [r7, #30]
 8003ff8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ffc:	83fb      	strh	r3, [r7, #30]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	441a      	add	r2, r3
 800400c:	8bfb      	ldrh	r3, [r7, #30]
 800400e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800401a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800401e:	b29b      	uxth	r3, r3
 8004020:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d11f      	bne.n	800406c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004046:	83bb      	strh	r3, [r7, #28]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	441a      	add	r2, r3
 8004056:	8bbb      	ldrh	r3, [r7, #28]
 8004058:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800405c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004060:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004064:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004068:	b29b      	uxth	r3, r3
 800406a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800406c:	8b7b      	ldrh	r3, [r7, #26]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6959      	ldr	r1, [r3, #20]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	895a      	ldrh	r2, [r3, #10]
 800407e:	8b7b      	ldrh	r3, [r7, #26]
 8004080:	f004 fb1c 	bl	80086bc <USB_ReadPMA>
    }
  }

  return count;
 8004084:	8b7b      	ldrh	r3, [r7, #26]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b0a6      	sub	sp, #152	@ 0x98
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	4613      	mov	r3, r2
 800409a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800409c:	88fb      	ldrh	r3, [r7, #6]
 800409e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 81f7 	beq.w	8004496 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	4413      	add	r3, r2
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	4413      	add	r3, r2
 80040c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040cc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	699a      	ldr	r2, [r3, #24]
 80040d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80040d8:	429a      	cmp	r2, r3
 80040da:	d907      	bls.n	80040ec <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80040e4:	1ad2      	subs	r2, r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	619a      	str	r2, [r3, #24]
 80040ea:	e002      	b.n	80040f2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2200      	movs	r2, #0
 80040f0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f040 80e1 	bne.w	80042be <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d126      	bne.n	8004152 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	633b      	str	r3, [r7, #48]	@ 0x30
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004112:	b29b      	uxth	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004118:	4413      	add	r3, r2
 800411a:	633b      	str	r3, [r7, #48]	@ 0x30
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	00da      	lsls	r2, r3, #3
 8004122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004124:	4413      	add	r3, r2
 8004126:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800412a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004136:	b29a      	uxth	r2, r3
 8004138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413a:	801a      	strh	r2, [r3, #0]
 800413c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800414a:	b29a      	uxth	r2, r3
 800414c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414e:	801a      	strh	r2, [r3, #0]
 8004150:	e01a      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	785b      	ldrb	r3, [r3, #1]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d116      	bne.n	8004188 <HAL_PCD_EP_DB_Transmit+0xfa>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004168:	b29b      	uxth	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	4413      	add	r3, r2
 8004170:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	00da      	lsls	r2, r3, #3
 8004178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417a:	4413      	add	r3, r2
 800417c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004180:	637b      	str	r3, [r7, #52]	@ 0x34
 8004182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004184:	2200      	movs	r2, #0
 8004186:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	785b      	ldrb	r3, [r3, #1]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d126      	bne.n	80041e4 <HAL_PCD_EP_DB_Transmit+0x156>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	4413      	add	r3, r2
 80041ac:	623b      	str	r3, [r7, #32]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	00da      	lsls	r2, r3, #3
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	4413      	add	r3, r2
 80041b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041dc:	b29a      	uxth	r2, r3
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	e017      	b.n	8004214 <HAL_PCD_EP_DB_Transmit+0x186>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d113      	bne.n	8004214 <HAL_PCD_EP_DB_Transmit+0x186>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fa:	4413      	add	r3, r2
 80041fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	00da      	lsls	r2, r3, #3
 8004204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004206:	4413      	add	r3, r2
 8004208:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	2200      	movs	r2, #0
 8004212:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	78db      	ldrb	r3, [r3, #3]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d123      	bne.n	8004264 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004236:	837b      	strh	r3, [r7, #26]
 8004238:	8b7b      	ldrh	r3, [r7, #26]
 800423a:	f083 0320 	eor.w	r3, r3, #32
 800423e:	837b      	strh	r3, [r7, #26]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	441a      	add	r2, r3
 800424e:	8b7b      	ldrh	r3, [r7, #26]
 8004250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800425c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004260:	b29b      	uxth	r3, r3
 8004262:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	4619      	mov	r1, r3
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f006 fc03 	bl	800aa76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01f      	beq.n	80042ba <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004294:	833b      	strh	r3, [r7, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	441a      	add	r2, r3
 80042a4:	8b3b      	ldrh	r3, [r7, #24]
 80042a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e31f      	b.n	80048fe <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d021      	beq.n	800430c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	441a      	add	r2, r3
 80042f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80042f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004308:	b29b      	uxth	r3, r3
 800430a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004312:	2b01      	cmp	r3, #1
 8004314:	f040 82ca 	bne.w	80048ac <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004320:	441a      	add	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800432e:	441a      	add	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	6a1a      	ldr	r2, [r3, #32]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	429a      	cmp	r2, r3
 800433e:	d309      	bcc.n	8004354 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	6a1a      	ldr	r2, [r3, #32]
 800434a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800434c:	1ad2      	subs	r2, r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	621a      	str	r2, [r3, #32]
 8004352:	e015      	b.n	8004380 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d107      	bne.n	800436c <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800435c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004360:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800436a:	e009      	b.n	8004380 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2200      	movs	r2, #0
 800437e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	785b      	ldrb	r3, [r3, #1]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d15f      	bne.n	8004448 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	643b      	str	r3, [r7, #64]	@ 0x40
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004396:	b29b      	uxth	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800439c:	4413      	add	r3, r2
 800439e:	643b      	str	r3, [r7, #64]	@ 0x40
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	00da      	lsls	r2, r3, #3
 80043a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043a8:	4413      	add	r3, r2
 80043aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043be:	801a      	strh	r2, [r3, #0]
 80043c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <HAL_PCD_EP_DB_Transmit+0x34e>
 80043c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	e051      	b.n	8004480 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80043dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043de:	2b3e      	cmp	r3, #62	@ 0x3e
 80043e0:	d816      	bhi.n	8004410 <HAL_PCD_EP_DB_Transmit+0x382>
 80043e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80043e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80043f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043f4:	3301      	adds	r3, #1
 80043f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80043f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004400:	b29b      	uxth	r3, r3
 8004402:	029b      	lsls	r3, r3, #10
 8004404:	b29b      	uxth	r3, r3
 8004406:	4313      	orrs	r3, r2
 8004408:	b29a      	uxth	r2, r3
 800440a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800440c:	801a      	strh	r2, [r3, #0]
 800440e:	e037      	b.n	8004480 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004410:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	653b      	str	r3, [r7, #80]	@ 0x50
 8004416:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <HAL_PCD_EP_DB_Transmit+0x398>
 8004420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004422:	3b01      	subs	r3, #1
 8004424:	653b      	str	r3, [r7, #80]	@ 0x50
 8004426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29a      	uxth	r2, r3
 800442c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800442e:	b29b      	uxth	r3, r3
 8004430:	029b      	lsls	r3, r3, #10
 8004432:	b29b      	uxth	r3, r3
 8004434:	4313      	orrs	r3, r2
 8004436:	b29b      	uxth	r3, r3
 8004438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004440:	b29a      	uxth	r2, r3
 8004442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	e01b      	b.n	8004480 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d117      	bne.n	8004480 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800445e:	b29b      	uxth	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004464:	4413      	add	r3, r2
 8004466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	00da      	lsls	r2, r3, #3
 800446e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004470:	4413      	add	r3, r2
 8004472:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004476:	647b      	str	r3, [r7, #68]	@ 0x44
 8004478:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800447a:	b29a      	uxth	r2, r3
 800447c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800447e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	6959      	ldr	r1, [r3, #20]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	891a      	ldrh	r2, [r3, #8]
 800448c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800448e:	b29b      	uxth	r3, r3
 8004490:	f004 f8d1 	bl	8008636 <USB_WritePMA>
 8004494:	e20a      	b.n	80048ac <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800449e:	b29b      	uxth	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	4413      	add	r3, r2
 80044b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ba:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d307      	bcc.n	80044da <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	619a      	str	r2, [r3, #24]
 80044d8:	e002      	b.n	80044e0 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 80f6 	bne.w	80046d6 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d126      	bne.n	8004540 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004500:	b29b      	uxth	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004506:	4413      	add	r3, r2
 8004508:	677b      	str	r3, [r7, #116]	@ 0x74
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	00da      	lsls	r2, r3, #3
 8004510:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004512:	4413      	add	r3, r2
 8004514:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004518:	673b      	str	r3, [r7, #112]	@ 0x70
 800451a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004524:	b29a      	uxth	r2, r3
 8004526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004538:	b29a      	uxth	r2, r3
 800453a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800453c:	801a      	strh	r2, [r3, #0]
 800453e:	e01a      	b.n	8004576 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	785b      	ldrb	r3, [r3, #1]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d116      	bne.n	8004576 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004556:	b29b      	uxth	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800455c:	4413      	add	r3, r2
 800455e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	00da      	lsls	r2, r3, #3
 8004566:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004568:	4413      	add	r3, r2
 800456a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800456e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004572:	2200      	movs	r2, #0
 8004574:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d12f      	bne.n	80045e6 <HAL_PCD_EP_DB_Transmit+0x558>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004596:	b29b      	uxth	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800459e:	4413      	add	r3, r2
 80045a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	00da      	lsls	r2, r3, #3
 80045aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ae:	4413      	add	r3, r2
 80045b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045dc:	b29a      	uxth	r2, r3
 80045de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	e01c      	b.n	8004620 <HAL_PCD_EP_DB_Transmit+0x592>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	785b      	ldrb	r3, [r3, #1]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d118      	bne.n	8004620 <HAL_PCD_EP_DB_Transmit+0x592>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045fe:	4413      	add	r3, r2
 8004600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	00da      	lsls	r2, r3, #3
 800460a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800460e:	4413      	add	r3, r2
 8004610:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004614:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004618:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800461c:	2200      	movs	r2, #0
 800461e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	78db      	ldrb	r3, [r3, #3]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d127      	bne.n	8004678 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800463e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004642:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004646:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800464a:	f083 0320 	eor.w	r3, r3, #32
 800464e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	441a      	add	r2, r3
 8004660:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800466c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004674:	b29b      	uxth	r3, r3
 8004676:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	4619      	mov	r1, r3
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f006 f9f9 	bl	800aa76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d121      	bne.n	80046d2 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	441a      	add	r2, r3
 80046ba:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80046be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e113      	b.n	80048fe <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d121      	bne.n	8004724 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	441a      	add	r2, r3
 800470c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004710:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004714:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004718:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800471c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004720:	b29b      	uxth	r3, r3
 8004722:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800472a:	2b01      	cmp	r3, #1
 800472c:	f040 80be 	bne.w	80048ac <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004738:	441a      	add	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004746:	441a      	add	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	6a1a      	ldr	r2, [r3, #32]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	429a      	cmp	r2, r3
 8004756:	d309      	bcc.n	800476c <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6a1a      	ldr	r2, [r3, #32]
 8004762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004764:	1ad2      	subs	r2, r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	621a      	str	r2, [r3, #32]
 800476a:	e015      	b.n	8004798 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d107      	bne.n	8004784 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004774:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004778:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004782:	e009      	b.n	8004798 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2200      	movs	r2, #0
 800478e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d15f      	bne.n	8004866 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047ba:	4413      	add	r3, r2
 80047bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	00da      	lsls	r2, r3, #3
 80047c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047c6:	4413      	add	r3, r2
 80047c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80047ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <HAL_PCD_EP_DB_Transmit+0x76c>
 80047e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	e04e      	b.n	8004898 <HAL_PCD_EP_DB_Transmit+0x80a>
 80047fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80047fe:	d816      	bhi.n	800482e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004800:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004802:	085b      	lsrs	r3, r3, #1
 8004804:	663b      	str	r3, [r7, #96]	@ 0x60
 8004806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_PCD_EP_DB_Transmit+0x788>
 8004810:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004812:	3301      	adds	r3, #1
 8004814:	663b      	str	r3, [r7, #96]	@ 0x60
 8004816:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	b29a      	uxth	r2, r3
 800481c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800481e:	b29b      	uxth	r3, r3
 8004820:	029b      	lsls	r3, r3, #10
 8004822:	b29b      	uxth	r3, r3
 8004824:	4313      	orrs	r3, r2
 8004826:	b29a      	uxth	r2, r3
 8004828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	e034      	b.n	8004898 <HAL_PCD_EP_DB_Transmit+0x80a>
 800482e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004830:	095b      	lsrs	r3, r3, #5
 8004832:	663b      	str	r3, [r7, #96]	@ 0x60
 8004834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800483e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004840:	3b01      	subs	r3, #1
 8004842:	663b      	str	r3, [r7, #96]	@ 0x60
 8004844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29a      	uxth	r2, r3
 800484a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800484c:	b29b      	uxth	r3, r3
 800484e:	029b      	lsls	r3, r3, #10
 8004850:	b29b      	uxth	r3, r3
 8004852:	4313      	orrs	r3, r2
 8004854:	b29b      	uxth	r3, r3
 8004856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800485a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800485e:	b29a      	uxth	r2, r3
 8004860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004862:	801a      	strh	r2, [r3, #0]
 8004864:	e018      	b.n	8004898 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	785b      	ldrb	r3, [r3, #1]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d114      	bne.n	8004898 <HAL_PCD_EP_DB_Transmit+0x80a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004876:	b29b      	uxth	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800487c:	4413      	add	r3, r2
 800487e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	00da      	lsls	r2, r3, #3
 8004886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004888:	4413      	add	r3, r2
 800488a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800488e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004890:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004892:	b29a      	uxth	r2, r3
 8004894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004896:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6959      	ldr	r1, [r3, #20]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	895a      	ldrh	r2, [r3, #10]
 80048a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f003 fec5 	bl	8008636 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048c6:	82fb      	strh	r3, [r7, #22]
 80048c8:	8afb      	ldrh	r3, [r7, #22]
 80048ca:	f083 0310 	eor.w	r3, r3, #16
 80048ce:	82fb      	strh	r3, [r7, #22]
 80048d0:	8afb      	ldrh	r3, [r7, #22]
 80048d2:	f083 0320 	eor.w	r3, r3, #32
 80048d6:	82fb      	strh	r3, [r7, #22]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	441a      	add	r2, r3
 80048e6:	8afb      	ldrh	r3, [r7, #22]
 80048e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3798      	adds	r7, #152	@ 0x98
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004906:	b480      	push	{r7}
 8004908:	b087      	sub	sp, #28
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	817b      	strh	r3, [r7, #10]
 8004914:	4613      	mov	r3, r2
 8004916:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004918:	897b      	ldrh	r3, [r7, #10]
 800491a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00b      	beq.n	800493c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004924:	897b      	ldrh	r3, [r7, #10]
 8004926:	f003 0207 	and.w	r2, r3, #7
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	3310      	adds	r3, #16
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e009      	b.n	8004950 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800493c:	897a      	ldrh	r2, [r7, #10]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004950:	893b      	ldrh	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d107      	bne.n	8004966 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2200      	movs	r2, #0
 800495a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	b29a      	uxth	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	80da      	strh	r2, [r3, #6]
 8004964:	e00b      	b.n	800497e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2201      	movs	r2, #1
 800496a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	b29a      	uxth	r2, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	0c1b      	lsrs	r3, r3, #16
 8004978:	b29a      	uxth	r2, r3
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	f043 0302 	orr.w	r3, r3, #2
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d141      	bne.n	8004a72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049ee:	4b4b      	ldr	r3, [pc, #300]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fa:	d131      	bne.n	8004a60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049fc:	4b47      	ldr	r3, [pc, #284]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a02:	4a46      	ldr	r2, [pc, #280]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a0c:	4b43      	ldr	r3, [pc, #268]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a14:	4a41      	ldr	r2, [pc, #260]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a1c:	4b40      	ldr	r3, [pc, #256]	@ (8004b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2232      	movs	r2, #50	@ 0x32
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	4a3f      	ldr	r2, [pc, #252]	@ (8004b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	0c9b      	lsrs	r3, r3, #18
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a32:	e002      	b.n	8004a3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a3a:	4b38      	ldr	r3, [pc, #224]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a46:	d102      	bne.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f2      	bne.n	8004a34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a4e:	4b33      	ldr	r3, [pc, #204]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5a:	d158      	bne.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e057      	b.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a60:	4b2e      	ldr	r3, [pc, #184]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a66:	4a2d      	ldr	r2, [pc, #180]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a70:	e04d      	b.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a78:	d141      	bne.n	8004afe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a7a:	4b28      	ldr	r3, [pc, #160]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a86:	d131      	bne.n	8004aec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a88:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a8e:	4a23      	ldr	r2, [pc, #140]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a98:	4b20      	ldr	r3, [pc, #128]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2232      	movs	r2, #50	@ 0x32
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	0c9b      	lsrs	r3, r3, #18
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004abe:	e002      	b.n	8004ac6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ac6:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad2:	d102      	bne.n	8004ada <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f2      	bne.n	8004ac0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ada:	4b10      	ldr	r3, [pc, #64]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae6:	d112      	bne.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e011      	b.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aec:	4b0b      	ldr	r3, [pc, #44]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af2:	4a0a      	ldr	r2, [pc, #40]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004afc:	e007      	b.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004afe:	4b07      	ldr	r3, [pc, #28]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b06:	4a05      	ldr	r2, [pc, #20]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40007000 	.word	0x40007000
 8004b20:	20000008 	.word	0x20000008
 8004b24:	431bde83 	.word	0x431bde83

08004b28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b2c:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4a04      	ldr	r2, [pc, #16]	@ (8004b44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b36:	6093      	str	r3, [r2, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40007000 	.word	0x40007000

08004b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e2fe      	b.n	8005158 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d075      	beq.n	8004c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b66:	4b97      	ldr	r3, [pc, #604]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b70:	4b94      	ldr	r3, [pc, #592]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d102      	bne.n	8004b86 <HAL_RCC_OscConfig+0x3e>
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d002      	beq.n	8004b8c <HAL_RCC_OscConfig+0x44>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8c:	4b8d      	ldr	r3, [pc, #564]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d05b      	beq.n	8004c50 <HAL_RCC_OscConfig+0x108>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d157      	bne.n	8004c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e2d9      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bac:	d106      	bne.n	8004bbc <HAL_RCC_OscConfig+0x74>
 8004bae:	4b85      	ldr	r3, [pc, #532]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a84      	ldr	r2, [pc, #528]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e01d      	b.n	8004bf8 <HAL_RCC_OscConfig+0xb0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x98>
 8004bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a7e      	ldr	r2, [pc, #504]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4b7c      	ldr	r3, [pc, #496]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a7b      	ldr	r2, [pc, #492]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCC_OscConfig+0xb0>
 8004be0:	4b78      	ldr	r3, [pc, #480]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a77      	ldr	r2, [pc, #476]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	4b75      	ldr	r3, [pc, #468]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a74      	ldr	r2, [pc, #464]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d013      	beq.n	8004c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fc f83e 	bl	8000c80 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c08:	f7fc f83a 	bl	8000c80 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b64      	cmp	r3, #100	@ 0x64
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e29e      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0xc0>
 8004c26:	e014      	b.n	8004c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fc f82a 	bl	8000c80 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fc f826 	bl	8000c80 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	@ 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e28a      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c42:	4b60      	ldr	r3, [pc, #384]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0xe8>
 8004c4e:	e000      	b.n	8004c52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d075      	beq.n	8004d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5e:	4b59      	ldr	r3, [pc, #356]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c68:	4b56      	ldr	r3, [pc, #344]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b0c      	cmp	r3, #12
 8004c76:	d102      	bne.n	8004c7e <HAL_RCC_OscConfig+0x136>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d002      	beq.n	8004c84 <HAL_RCC_OscConfig+0x13c>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d11f      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c84:	4b4f      	ldr	r3, [pc, #316]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_OscConfig+0x154>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e25d      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b49      	ldr	r3, [pc, #292]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	4946      	ldr	r1, [pc, #280]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cb0:	4b45      	ldr	r3, [pc, #276]	@ (8004dc8 <HAL_RCC_OscConfig+0x280>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fb ff97 	bl	8000be8 <HAL_InitTick>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d043      	beq.n	8004d48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e249      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d023      	beq.n	8004d14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a3c      	ldr	r2, [pc, #240]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fb ffd2 	bl	8000c80 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce0:	f7fb ffce 	bl	8000c80 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e232      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cf2:	4b34      	ldr	r3, [pc, #208]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfe:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	061b      	lsls	r3, r3, #24
 8004d0c:	492d      	ldr	r1, [pc, #180]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
 8004d12:	e01a      	b.n	8004d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d14:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fb ffae 	bl	8000c80 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d28:	f7fb ffaa 	bl	8000c80 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e20e      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d3a:	4b22      	ldr	r3, [pc, #136]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x1e0>
 8004d46:	e000      	b.n	8004d4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d041      	beq.n	8004dda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01c      	beq.n	8004d98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d5e:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d64:	4a17      	ldr	r2, [pc, #92]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6e:	f7fb ff87 	bl	8000c80 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d76:	f7fb ff83 	bl	8000c80 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1e7      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d88:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0ef      	beq.n	8004d76 <HAL_RCC_OscConfig+0x22e>
 8004d96:	e020      	b.n	8004dda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d9e:	4a09      	ldr	r2, [pc, #36]	@ (8004dc4 <HAL_RCC_OscConfig+0x27c>)
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fb ff6a 	bl	8000c80 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dae:	e00d      	b.n	8004dcc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db0:	f7fb ff66 	bl	8000c80 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d906      	bls.n	8004dcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e1ca      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
 8004dc2:	bf00      	nop
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1ea      	bne.n	8004db0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80a6 	beq.w	8004f34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de8:	2300      	movs	r3, #0
 8004dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dec:	4b84      	ldr	r3, [pc, #528]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_OscConfig+0x2b4>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <HAL_RCC_OscConfig+0x2b6>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00d      	beq.n	8004e1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e02:	4b7f      	ldr	r3, [pc, #508]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e06:	4a7e      	ldr	r2, [pc, #504]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e1e:	4b79      	ldr	r3, [pc, #484]	@ (8005004 <HAL_RCC_OscConfig+0x4bc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d118      	bne.n	8004e5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e2a:	4b76      	ldr	r3, [pc, #472]	@ (8005004 <HAL_RCC_OscConfig+0x4bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a75      	ldr	r2, [pc, #468]	@ (8005004 <HAL_RCC_OscConfig+0x4bc>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e36:	f7fb ff23 	bl	8000c80 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3e:	f7fb ff1f 	bl	8000c80 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e183      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e50:	4b6c      	ldr	r3, [pc, #432]	@ (8005004 <HAL_RCC_OscConfig+0x4bc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d108      	bne.n	8004e76 <HAL_RCC_OscConfig+0x32e>
 8004e64:	4b66      	ldr	r3, [pc, #408]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	4a65      	ldr	r2, [pc, #404]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e74:	e024      	b.n	8004ec0 <HAL_RCC_OscConfig+0x378>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d110      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x358>
 8004e7e:	4b60      	ldr	r3, [pc, #384]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e84:	4a5e      	ldr	r2, [pc, #376]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e8e:	4b5c      	ldr	r3, [pc, #368]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e94:	4a5a      	ldr	r2, [pc, #360]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e9e:	e00f      	b.n	8004ec0 <HAL_RCC_OscConfig+0x378>
 8004ea0:	4b57      	ldr	r3, [pc, #348]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea6:	4a56      	ldr	r2, [pc, #344]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eb0:	4b53      	ldr	r3, [pc, #332]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	4a52      	ldr	r2, [pc, #328]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004eb8:	f023 0304 	bic.w	r3, r3, #4
 8004ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d016      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fb feda 	bl	8000c80 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed0:	f7fb fed6 	bl	8000c80 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e138      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee6:	4b46      	ldr	r3, [pc, #280]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ed      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x388>
 8004ef4:	e015      	b.n	8004f22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef6:	f7fb fec3 	bl	8000c80 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7fb febf 	bl	8000c80 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e121      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f14:	4b3a      	ldr	r3, [pc, #232]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ed      	bne.n	8004efe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f28:	4b35      	ldr	r3, [pc, #212]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2c:	4a34      	ldr	r2, [pc, #208]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d03c      	beq.n	8004fba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01c      	beq.n	8004f82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f48:	4b2d      	ldr	r3, [pc, #180]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fb fe92 	bl	8000c80 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f60:	f7fb fe8e 	bl	8000c80 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e0f2      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f72:	4b23      	ldr	r3, [pc, #140]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0ef      	beq.n	8004f60 <HAL_RCC_OscConfig+0x418>
 8004f80:	e01b      	b.n	8004fba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f82:	4b1f      	ldr	r3, [pc, #124]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f88:	4a1d      	ldr	r2, [pc, #116]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fb fe75 	bl	8000c80 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f9a:	f7fb fe71 	bl	8000c80 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e0d5      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fac:	4b14      	ldr	r3, [pc, #80]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1ef      	bne.n	8004f9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80c9 	beq.w	8005156 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 030c 	and.w	r3, r3, #12
 8004fcc:	2b0c      	cmp	r3, #12
 8004fce:	f000 8083 	beq.w	80050d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d15e      	bne.n	8005098 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fda:	4b09      	ldr	r3, [pc, #36]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a08      	ldr	r2, [pc, #32]	@ (8005000 <HAL_RCC_OscConfig+0x4b8>)
 8004fe0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe6:	f7fb fe4b 	bl	8000c80 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fec:	e00c      	b.n	8005008 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fee:	f7fb fe47 	bl	8000c80 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d905      	bls.n	8005008 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e0ab      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
 8005000:	40021000 	.word	0x40021000
 8005004:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005008:	4b55      	ldr	r3, [pc, #340]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1ec      	bne.n	8004fee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005014:	4b52      	ldr	r3, [pc, #328]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	4b52      	ldr	r3, [pc, #328]	@ (8005164 <HAL_RCC_OscConfig+0x61c>)
 800501a:	4013      	ands	r3, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6a11      	ldr	r1, [r2, #32]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005024:	3a01      	subs	r2, #1
 8005026:	0112      	lsls	r2, r2, #4
 8005028:	4311      	orrs	r1, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800502e:	0212      	lsls	r2, r2, #8
 8005030:	4311      	orrs	r1, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005036:	0852      	lsrs	r2, r2, #1
 8005038:	3a01      	subs	r2, #1
 800503a:	0552      	lsls	r2, r2, #21
 800503c:	4311      	orrs	r1, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005042:	0852      	lsrs	r2, r2, #1
 8005044:	3a01      	subs	r2, #1
 8005046:	0652      	lsls	r2, r2, #25
 8005048:	4311      	orrs	r1, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800504e:	06d2      	lsls	r2, r2, #27
 8005050:	430a      	orrs	r2, r1
 8005052:	4943      	ldr	r1, [pc, #268]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 8005054:	4313      	orrs	r3, r2
 8005056:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005058:	4b41      	ldr	r3, [pc, #260]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a40      	ldr	r2, [pc, #256]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800505e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005062:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005064:	4b3e      	ldr	r3, [pc, #248]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4a3d      	ldr	r2, [pc, #244]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800506a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800506e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fb fe06 	bl	8000c80 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005078:	f7fb fe02 	bl	8000c80 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e066      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800508a:	4b35      	ldr	r3, [pc, #212]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0x530>
 8005096:	e05e      	b.n	8005156 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005098:	4b31      	ldr	r3, [pc, #196]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a30      	ldr	r2, [pc, #192]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 800509e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fb fdec 	bl	8000c80 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fb fde8 	bl	8000c80 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e04c      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050be:	4b28      	ldr	r3, [pc, #160]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050ca:	4b25      	ldr	r3, [pc, #148]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	4924      	ldr	r1, [pc, #144]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 80050d0:	4b25      	ldr	r3, [pc, #148]	@ (8005168 <HAL_RCC_OscConfig+0x620>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	60cb      	str	r3, [r1, #12]
 80050d6:	e03e      	b.n	8005156 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e039      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80050e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005160 <HAL_RCC_OscConfig+0x618>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f003 0203 	and.w	r2, r3, #3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d12c      	bne.n	8005152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	3b01      	subs	r3, #1
 8005104:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d123      	bne.n	8005152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d11b      	bne.n	8005152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005126:	429a      	cmp	r2, r3
 8005128:	d113      	bne.n	8005152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	3b01      	subs	r3, #1
 8005138:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d109      	bne.n	8005152 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	3b01      	subs	r3, #1
 800514c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d001      	beq.n	8005156 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40021000 	.word	0x40021000
 8005164:	019f800c 	.word	0x019f800c
 8005168:	feeefffc 	.word	0xfeeefffc

0800516c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e11e      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005184:	4b91      	ldr	r3, [pc, #580]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d910      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b8e      	ldr	r3, [pc, #568]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 020f 	bic.w	r2, r3, #15
 800519a:	498c      	ldr	r1, [pc, #560]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b8a      	ldr	r3, [pc, #552]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e106      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d073      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d129      	bne.n	800521c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c8:	4b81      	ldr	r3, [pc, #516]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0f4      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80051d8:	f000 f964 	bl	80054a4 <RCC_GetSysClockFreqFromPLLSource>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4a7c      	ldr	r2, [pc, #496]	@ (80053d4 <HAL_RCC_ClockConfig+0x268>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d93f      	bls.n	8005266 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051e6:	4b7a      	ldr	r3, [pc, #488]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d033      	beq.n	8005266 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005202:	2b00      	cmp	r3, #0
 8005204:	d12f      	bne.n	8005266 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005206:	4b72      	ldr	r3, [pc, #456]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800520e:	4a70      	ldr	r2, [pc, #448]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005214:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005216:	2380      	movs	r3, #128	@ 0x80
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e024      	b.n	8005266 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d107      	bne.n	8005234 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005224:	4b6a      	ldr	r3, [pc, #424]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d109      	bne.n	8005244 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0c6      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005234:	4b66      	ldr	r3, [pc, #408]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e0be      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005244:	f000 f8ce 	bl	80053e4 <HAL_RCC_GetSysClockFreq>
 8005248:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4a61      	ldr	r2, [pc, #388]	@ (80053d4 <HAL_RCC_ClockConfig+0x268>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d909      	bls.n	8005266 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005252:	4b5f      	ldr	r3, [pc, #380]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800525a:	4a5d      	ldr	r2, [pc, #372]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 800525c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005260:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005262:	2380      	movs	r3, #128	@ 0x80
 8005264:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005266:	4b5a      	ldr	r3, [pc, #360]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f023 0203 	bic.w	r2, r3, #3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	4957      	ldr	r1, [pc, #348]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005274:	4313      	orrs	r3, r2
 8005276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005278:	f7fb fd02 	bl	8000c80 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	e00a      	b.n	8005296 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005280:	f7fb fcfe 	bl	8000c80 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e095      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005296:	4b4e      	ldr	r3, [pc, #312]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 020c 	and.w	r2, r3, #12
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d1eb      	bne.n	8005280 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d023      	beq.n	80052fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052c0:	4b43      	ldr	r3, [pc, #268]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4a42      	ldr	r2, [pc, #264]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80052d8:	4b3d      	ldr	r3, [pc, #244]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80052e0:	4a3b      	ldr	r2, [pc, #236]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e8:	4b39      	ldr	r3, [pc, #228]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4936      	ldr	r1, [pc, #216]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
 80052fa:	e008      	b.n	800530e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2b80      	cmp	r3, #128	@ 0x80
 8005300:	d105      	bne.n	800530e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005302:	4b33      	ldr	r3, [pc, #204]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	4a32      	ldr	r2, [pc, #200]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005308:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800530c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800530e:	4b2f      	ldr	r3, [pc, #188]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d21d      	bcs.n	8005358 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531c:	4b2b      	ldr	r3, [pc, #172]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f023 020f 	bic.w	r2, r3, #15
 8005324:	4929      	ldr	r1, [pc, #164]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	4313      	orrs	r3, r2
 800532a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800532c:	f7fb fca8 	bl	8000c80 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	e00a      	b.n	800534a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005334:	f7fb fca4 	bl	8000c80 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e03b      	b.n	80053c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b20      	ldr	r3, [pc, #128]	@ (80053cc <HAL_RCC_ClockConfig+0x260>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d1ed      	bne.n	8005334 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005364:	4b1a      	ldr	r3, [pc, #104]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4917      	ldr	r1, [pc, #92]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005372:	4313      	orrs	r3, r2
 8005374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005382:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	490f      	ldr	r1, [pc, #60]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005396:	f000 f825 	bl	80053e4 <HAL_RCC_GetSysClockFreq>
 800539a:	4602      	mov	r2, r0
 800539c:	4b0c      	ldr	r3, [pc, #48]	@ (80053d0 <HAL_RCC_ClockConfig+0x264>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	490c      	ldr	r1, [pc, #48]	@ (80053d8 <HAL_RCC_ClockConfig+0x26c>)
 80053a8:	5ccb      	ldrb	r3, [r1, r3]
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	fa22 f303 	lsr.w	r3, r2, r3
 80053b2:	4a0a      	ldr	r2, [pc, #40]	@ (80053dc <HAL_RCC_ClockConfig+0x270>)
 80053b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053b6:	4b0a      	ldr	r3, [pc, #40]	@ (80053e0 <HAL_RCC_ClockConfig+0x274>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fb fc14 	bl	8000be8 <HAL_InitTick>
 80053c0:	4603      	mov	r3, r0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40022000 	.word	0x40022000
 80053d0:	40021000 	.word	0x40021000
 80053d4:	04c4b400 	.word	0x04c4b400
 80053d8:	0800b06c 	.word	0x0800b06c
 80053dc:	20000008 	.word	0x20000008
 80053e0:	2000000c 	.word	0x2000000c

080053e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053ea:	4b2c      	ldr	r3, [pc, #176]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d102      	bne.n	80053fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053f6:	4b2a      	ldr	r3, [pc, #168]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	e047      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053fc:	4b27      	ldr	r3, [pc, #156]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 030c 	and.w	r3, r3, #12
 8005404:	2b08      	cmp	r3, #8
 8005406:	d102      	bne.n	800540e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005408:	4b25      	ldr	r3, [pc, #148]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	e03e      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800540e:	4b23      	ldr	r3, [pc, #140]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	2b0c      	cmp	r3, #12
 8005418:	d136      	bne.n	8005488 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800541a:	4b20      	ldr	r3, [pc, #128]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005424:	4b1d      	ldr	r3, [pc, #116]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	3301      	adds	r3, #1
 8005430:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d10c      	bne.n	8005452 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005438:	4a19      	ldr	r2, [pc, #100]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	4a16      	ldr	r2, [pc, #88]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005442:	68d2      	ldr	r2, [r2, #12]
 8005444:	0a12      	lsrs	r2, r2, #8
 8005446:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	617b      	str	r3, [r7, #20]
      break;
 8005450:	e00c      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005452:	4a13      	ldr	r2, [pc, #76]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	4a10      	ldr	r2, [pc, #64]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 800545c:	68d2      	ldr	r2, [r2, #12]
 800545e:	0a12      	lsrs	r2, r2, #8
 8005460:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	617b      	str	r3, [r7, #20]
      break;
 800546a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800546c:	4b0b      	ldr	r3, [pc, #44]	@ (800549c <HAL_RCC_GetSysClockFreq+0xb8>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	0e5b      	lsrs	r3, r3, #25
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	3301      	adds	r3, #1
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	e001      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800548c:	693b      	ldr	r3, [r7, #16]
}
 800548e:	4618      	mov	r0, r3
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40021000 	.word	0x40021000
 80054a0:	00f42400 	.word	0x00f42400

080054a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d10c      	bne.n	80054e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054c8:	4a17      	ldr	r2, [pc, #92]	@ (8005528 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	4a14      	ldr	r2, [pc, #80]	@ (8005524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054d2:	68d2      	ldr	r2, [r2, #12]
 80054d4:	0a12      	lsrs	r2, r2, #8
 80054d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	617b      	str	r3, [r7, #20]
    break;
 80054e0:	e00c      	b.n	80054fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054e2:	4a11      	ldr	r2, [pc, #68]	@ (8005528 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054ec:	68d2      	ldr	r2, [r2, #12]
 80054ee:	0a12      	lsrs	r2, r2, #8
 80054f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054f4:	fb02 f303 	mul.w	r3, r2, r3
 80054f8:	617b      	str	r3, [r7, #20]
    break;
 80054fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054fc:	4b09      	ldr	r3, [pc, #36]	@ (8005524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	0e5b      	lsrs	r3, r3, #25
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	3301      	adds	r3, #1
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005516:	687b      	ldr	r3, [r7, #4]
}
 8005518:	4618      	mov	r0, r3
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	40021000 	.word	0x40021000
 8005528:	00f42400 	.word	0x00f42400

0800552c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005534:	2300      	movs	r3, #0
 8005536:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005538:	2300      	movs	r3, #0
 800553a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 8098 	beq.w	800567a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554e:	4b43      	ldr	r3, [pc, #268]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10d      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800555a:	4b40      	ldr	r3, [pc, #256]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800555c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555e:	4a3f      	ldr	r2, [pc, #252]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005564:	6593      	str	r3, [r2, #88]	@ 0x58
 8005566:	4b3d      	ldr	r3, [pc, #244]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005572:	2301      	movs	r3, #1
 8005574:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005576:	4b3a      	ldr	r3, [pc, #232]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a39      	ldr	r2, [pc, #228]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800557c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005580:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005582:	f7fb fb7d 	bl	8000c80 <HAL_GetTick>
 8005586:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005588:	e009      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558a:	f7fb fb79 	bl	8000c80 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d902      	bls.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	74fb      	strb	r3, [r7, #19]
        break;
 800559c:	e005      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800559e:	4b30      	ldr	r3, [pc, #192]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0ef      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80055aa:	7cfb      	ldrb	r3, [r7, #19]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d159      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055b0:	4b2a      	ldr	r3, [pc, #168]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d01e      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d019      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055cc:	4b23      	ldr	r3, [pc, #140]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055d8:	4b20      	ldr	r3, [pc, #128]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055de:	4a1f      	ldr	r2, [pc, #124]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055e8:	4b1c      	ldr	r3, [pc, #112]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ee:	4a1b      	ldr	r2, [pc, #108]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055f8:	4a18      	ldr	r2, [pc, #96]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d016      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560a:	f7fb fb39 	bl	8000c80 <HAL_GetTick>
 800560e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005610:	e00b      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005612:	f7fb fb35 	bl	8000c80 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005620:	4293      	cmp	r3, r2
 8005622:	d902      	bls.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	74fb      	strb	r3, [r7, #19]
            break;
 8005628:	e006      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562a:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0ec      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800563e:	4b07      	ldr	r3, [pc, #28]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005644:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564c:	4903      	ldr	r1, [pc, #12]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005654:	e008      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005656:	7cfb      	ldrb	r3, [r7, #19]
 8005658:	74bb      	strb	r3, [r7, #18]
 800565a:	e005      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800565c:	40021000 	.word	0x40021000
 8005660:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005668:	7c7b      	ldrb	r3, [r7, #17]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d105      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800566e:	4ba6      	ldr	r3, [pc, #664]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005672:	4aa5      	ldr	r2, [pc, #660]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005678:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005686:	4ba0      	ldr	r3, [pc, #640]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568c:	f023 0203 	bic.w	r2, r3, #3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	499c      	ldr	r1, [pc, #624]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056a8:	4b97      	ldr	r3, [pc, #604]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ae:	f023 020c 	bic.w	r2, r3, #12
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	4994      	ldr	r1, [pc, #592]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056ca:	4b8f      	ldr	r3, [pc, #572]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	498b      	ldr	r1, [pc, #556]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056ec:	4b86      	ldr	r3, [pc, #536]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	4983      	ldr	r1, [pc, #524]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800570e:	4b7e      	ldr	r3, [pc, #504]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005714:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	497a      	ldr	r1, [pc, #488]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005730:	4b75      	ldr	r3, [pc, #468]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005736:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	4972      	ldr	r1, [pc, #456]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005752:	4b6d      	ldr	r3, [pc, #436]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005758:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	4969      	ldr	r1, [pc, #420]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005774:	4b64      	ldr	r3, [pc, #400]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	4961      	ldr	r1, [pc, #388]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005796:	4b5c      	ldr	r3, [pc, #368]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	4958      	ldr	r1, [pc, #352]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d015      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057b8:	4b53      	ldr	r3, [pc, #332]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c6:	4950      	ldr	r1, [pc, #320]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057d6:	d105      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057e2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d015      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057f0:	4b45      	ldr	r3, [pc, #276]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fe:	4942      	ldr	r1, [pc, #264]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800580e:	d105      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005810:	4b3d      	ldr	r3, [pc, #244]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4a3c      	ldr	r2, [pc, #240]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800581a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d015      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005828:	4b37      	ldr	r3, [pc, #220]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	4934      	ldr	r1, [pc, #208]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005846:	d105      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005848:	4b2f      	ldr	r3, [pc, #188]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	4a2e      	ldr	r2, [pc, #184]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800584e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005852:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d015      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005860:	4b29      	ldr	r3, [pc, #164]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005866:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800586e:	4926      	ldr	r1, [pc, #152]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800587a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800587e:	d105      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005880:	4b21      	ldr	r3, [pc, #132]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4a20      	ldr	r2, [pc, #128]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800588a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d015      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005898:	4b1b      	ldr	r3, [pc, #108]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	4918      	ldr	r1, [pc, #96]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058b6:	d105      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058b8:	4b13      	ldr	r3, [pc, #76]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a12      	ldr	r2, [pc, #72]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d015      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058de:	490a      	ldr	r1, [pc, #40]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058ee:	d105      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058f0:	4b05      	ldr	r3, [pc, #20]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4a04      	ldr	r2, [pc, #16]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80058fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40021000 	.word	0x40021000

0800590c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e049      	b.n	80059b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fb f81c 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f000 fd26 	bl	800639c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e049      	b.n	8005a60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f841 	bl	8005a68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2202      	movs	r2, #2
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f000 fccf 	bl	800639c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <HAL_TIM_PWM_Start+0x24>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e03c      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d109      	bne.n	8005aba <HAL_TIM_PWM_Start+0x3e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	bf14      	ite	ne
 8005ab2:	2301      	movne	r3, #1
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	e02f      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d109      	bne.n	8005ad4 <HAL_TIM_PWM_Start+0x58>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	e022      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	d109      	bne.n	8005aee <HAL_TIM_PWM_Start+0x72>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	bf14      	ite	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	2300      	moveq	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	e015      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d109      	bne.n	8005b08 <HAL_TIM_PWM_Start+0x8c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	bf14      	ite	ne
 8005b00:	2301      	movne	r3, #1
 8005b02:	2300      	moveq	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	e008      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	bf14      	ite	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	2300      	moveq	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e097      	b.n	8005c52 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_PWM_Start+0xb6>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b30:	e023      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d104      	bne.n	8005b42 <HAL_TIM_PWM_Start+0xc6>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b40:	e01b      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d104      	bne.n	8005b52 <HAL_TIM_PWM_Start+0xd6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b50:	e013      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b0c      	cmp	r3, #12
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_PWM_Start+0xe6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b60:	e00b      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_PWM_Start+0xf6>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b70:	e003      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 f838 	bl	8006bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a33      	ldr	r2, [pc, #204]	@ (8005c5c <HAL_TIM_PWM_Start+0x1e0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a32      	ldr	r2, [pc, #200]	@ (8005c60 <HAL_TIM_PWM_Start+0x1e4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a30      	ldr	r2, [pc, #192]	@ (8005c64 <HAL_TIM_PWM_Start+0x1e8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2f      	ldr	r2, [pc, #188]	@ (8005c68 <HAL_TIM_PWM_Start+0x1ec>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c6c <HAL_TIM_PWM_Start+0x1f0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_PWM_Start+0x142>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <HAL_TIM_PWM_Start+0x144>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bd2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a20      	ldr	r2, [pc, #128]	@ (8005c5c <HAL_TIM_PWM_Start+0x1e0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d018      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be6:	d013      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a20      	ldr	r2, [pc, #128]	@ (8005c70 <HAL_TIM_PWM_Start+0x1f4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00e      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c74 <HAL_TIM_PWM_Start+0x1f8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d009      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a17      	ldr	r2, [pc, #92]	@ (8005c60 <HAL_TIM_PWM_Start+0x1e4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a16      	ldr	r2, [pc, #88]	@ (8005c64 <HAL_TIM_PWM_Start+0x1e8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d115      	bne.n	8005c3c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	4b18      	ldr	r3, [pc, #96]	@ (8005c78 <HAL_TIM_PWM_Start+0x1fc>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b06      	cmp	r3, #6
 8005c20:	d015      	beq.n	8005c4e <HAL_TIM_PWM_Start+0x1d2>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c28:	d011      	beq.n	8005c4e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0201 	orr.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3a:	e008      	b.n	8005c4e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e000      	b.n	8005c50 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40013400 	.word	0x40013400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	00010007 	.word	0x00010007

08005c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d020      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01b      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0202 	mvn.w	r2, #2
 8005cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fb4a 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005ccc:	e005      	b.n	8005cda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fb3c 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fb4d 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d020      	beq.n	8005d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01b      	beq.n	8005d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0204 	mvn.w	r2, #4
 8005cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fb24 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005d18:	e005      	b.n	8005d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fb16 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fb27 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d020      	beq.n	8005d78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01b      	beq.n	8005d78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0208 	mvn.w	r2, #8
 8005d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fafe 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 faf0 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fb01 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d020      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0210 	mvn.w	r2, #16
 8005d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2208      	movs	r2, #8
 8005d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fad8 	bl	8006360 <HAL_TIM_IC_CaptureCallback>
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 faca 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fadb 	bl	8006374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00c      	beq.n	8005de8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0201 	mvn.w	r2, #1
 8005de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 faa8 	bl	8006338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00c      	beq.n	8005e16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d007      	beq.n	8005e16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 ffa3 	bl	8006d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00c      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d007      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 ff9b 	bl	8006d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fa95 	bl	8006388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00c      	beq.n	8005e82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f06f 0220 	mvn.w	r2, #32
 8005e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 ff63 	bl	8006d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00c      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d007      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 ff6f 	bl	8006d84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00c      	beq.n	8005eca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 ff67 	bl	8006d98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00c      	beq.n	8005eee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d007      	beq.n	8005eee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 ff5f 	bl	8006dac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00c      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 ff57 	bl	8006dc0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e0ff      	b.n	800613a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b14      	cmp	r3, #20
 8005f46:	f200 80f0 	bhi.w	800612a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005fa5 	.word	0x08005fa5
 8005f54:	0800612b 	.word	0x0800612b
 8005f58:	0800612b 	.word	0x0800612b
 8005f5c:	0800612b 	.word	0x0800612b
 8005f60:	08005fe5 	.word	0x08005fe5
 8005f64:	0800612b 	.word	0x0800612b
 8005f68:	0800612b 	.word	0x0800612b
 8005f6c:	0800612b 	.word	0x0800612b
 8005f70:	08006027 	.word	0x08006027
 8005f74:	0800612b 	.word	0x0800612b
 8005f78:	0800612b 	.word	0x0800612b
 8005f7c:	0800612b 	.word	0x0800612b
 8005f80:	08006067 	.word	0x08006067
 8005f84:	0800612b 	.word	0x0800612b
 8005f88:	0800612b 	.word	0x0800612b
 8005f8c:	0800612b 	.word	0x0800612b
 8005f90:	080060a9 	.word	0x080060a9
 8005f94:	0800612b 	.word	0x0800612b
 8005f98:	0800612b 	.word	0x0800612b
 8005f9c:	0800612b 	.word	0x0800612b
 8005fa0:	080060e9 	.word	0x080060e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fa92 	bl	80064d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0208 	orr.w	r2, r2, #8
 8005fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0204 	bic.w	r2, r2, #4
 8005fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6999      	ldr	r1, [r3, #24]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	619a      	str	r2, [r3, #24]
      break;
 8005fe2:	e0a5      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fb02 	bl	80065f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800600e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6999      	ldr	r1, [r3, #24]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	021a      	lsls	r2, r3, #8
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	619a      	str	r2, [r3, #24]
      break;
 8006024:	e084      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fb6b 	bl	8006708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 0208 	orr.w	r2, r2, #8
 8006040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0204 	bic.w	r2, r2, #4
 8006050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69d9      	ldr	r1, [r3, #28]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	61da      	str	r2, [r3, #28]
      break;
 8006064:	e064      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fbd3 	bl	8006818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69d9      	ldr	r1, [r3, #28]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	021a      	lsls	r2, r3, #8
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	61da      	str	r2, [r3, #28]
      break;
 80060a6:	e043      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fc3c 	bl	800692c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0208 	orr.w	r2, r2, #8
 80060c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0204 	bic.w	r2, r2, #4
 80060d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	691a      	ldr	r2, [r3, #16]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80060e6:	e023      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fc80 	bl	80069f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006102:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006112:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	021a      	lsls	r2, r3, #8
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006128:	e002      	b.n	8006130 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	75fb      	strb	r3, [r7, #23]
      break;
 800612e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop

08006144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_TIM_ConfigClockSource+0x1c>
 800615c:	2302      	movs	r3, #2
 800615e:	e0de      	b.n	800631e <HAL_TIM_ConfigClockSource+0x1da>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800617e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800618a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a63      	ldr	r2, [pc, #396]	@ (8006328 <HAL_TIM_ConfigClockSource+0x1e4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	f000 80a9 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80061a0:	4a61      	ldr	r2, [pc, #388]	@ (8006328 <HAL_TIM_ConfigClockSource+0x1e4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	f200 80ae 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061a8:	4a60      	ldr	r2, [pc, #384]	@ (800632c <HAL_TIM_ConfigClockSource+0x1e8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	f000 80a1 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80061b0:	4a5e      	ldr	r2, [pc, #376]	@ (800632c <HAL_TIM_ConfigClockSource+0x1e8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	f200 80a6 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061b8:	4a5d      	ldr	r2, [pc, #372]	@ (8006330 <HAL_TIM_ConfigClockSource+0x1ec>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	f000 8099 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80061c0:	4a5b      	ldr	r2, [pc, #364]	@ (8006330 <HAL_TIM_ConfigClockSource+0x1ec>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	f200 809e 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061c8:	4a5a      	ldr	r2, [pc, #360]	@ (8006334 <HAL_TIM_ConfigClockSource+0x1f0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	f000 8091 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80061d0:	4a58      	ldr	r2, [pc, #352]	@ (8006334 <HAL_TIM_ConfigClockSource+0x1f0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	f200 8096 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061dc:	f000 8089 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80061e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061e4:	f200 808e 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ec:	d03e      	beq.n	800626c <HAL_TIM_ConfigClockSource+0x128>
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f2:	f200 8087 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061fa:	f000 8086 	beq.w	800630a <HAL_TIM_ConfigClockSource+0x1c6>
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006202:	d87f      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 8006204:	2b70      	cmp	r3, #112	@ 0x70
 8006206:	d01a      	beq.n	800623e <HAL_TIM_ConfigClockSource+0xfa>
 8006208:	2b70      	cmp	r3, #112	@ 0x70
 800620a:	d87b      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 800620c:	2b60      	cmp	r3, #96	@ 0x60
 800620e:	d050      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0x16e>
 8006210:	2b60      	cmp	r3, #96	@ 0x60
 8006212:	d877      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 8006214:	2b50      	cmp	r3, #80	@ 0x50
 8006216:	d03c      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0x14e>
 8006218:	2b50      	cmp	r3, #80	@ 0x50
 800621a:	d873      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 800621c:	2b40      	cmp	r3, #64	@ 0x40
 800621e:	d058      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0x18e>
 8006220:	2b40      	cmp	r3, #64	@ 0x40
 8006222:	d86f      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 8006224:	2b30      	cmp	r3, #48	@ 0x30
 8006226:	d064      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006228:	2b30      	cmp	r3, #48	@ 0x30
 800622a:	d86b      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 800622c:	2b20      	cmp	r3, #32
 800622e:	d060      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006230:	2b20      	cmp	r3, #32
 8006232:	d867      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d05c      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006238:	2b10      	cmp	r3, #16
 800623a:	d05a      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800623c:	e062      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800624e:	f000 fcb3 	bl	8006bb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	609a      	str	r2, [r3, #8]
      break;
 800626a:	e04f      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800627c:	f000 fc9c 	bl	8006bb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800628e:	609a      	str	r2, [r3, #8]
      break;
 8006290:	e03c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800629e:	461a      	mov	r2, r3
 80062a0:	f000 fc0e 	bl	8006ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2150      	movs	r1, #80	@ 0x50
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fc67 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 80062b0:	e02c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062be:	461a      	mov	r2, r3
 80062c0:	f000 fc2d 	bl	8006b1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2160      	movs	r1, #96	@ 0x60
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fc57 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 80062d0:	e01c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062de:	461a      	mov	r2, r3
 80062e0:	f000 fbee 	bl	8006ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2140      	movs	r1, #64	@ 0x40
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fc47 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 80062f0:	e00c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4619      	mov	r1, r3
 80062fc:	4610      	mov	r0, r2
 80062fe:	f000 fc3e 	bl	8006b7e <TIM_ITRx_SetConfig>
      break;
 8006302:	e003      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
      break;
 8006308:	e000      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800630a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	00100070 	.word	0x00100070
 800632c:	00100040 	.word	0x00100040
 8006330:	00100030 	.word	0x00100030
 8006334:	00100020 	.word	0x00100020

08006338 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a42      	ldr	r2, [pc, #264]	@ (80064b8 <TIM_Base_SetConfig+0x11c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00f      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ba:	d00b      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3f      	ldr	r2, [pc, #252]	@ (80064bc <TIM_Base_SetConfig+0x120>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d007      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3e      	ldr	r2, [pc, #248]	@ (80064c0 <TIM_Base_SetConfig+0x124>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_Base_SetConfig+0x38>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3d      	ldr	r2, [pc, #244]	@ (80064c4 <TIM_Base_SetConfig+0x128>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d108      	bne.n	80063e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a33      	ldr	r2, [pc, #204]	@ (80064b8 <TIM_Base_SetConfig+0x11c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01b      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f4:	d017      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a30      	ldr	r2, [pc, #192]	@ (80064bc <TIM_Base_SetConfig+0x120>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2f      	ldr	r2, [pc, #188]	@ (80064c0 <TIM_Base_SetConfig+0x124>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00f      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2e      	ldr	r2, [pc, #184]	@ (80064c4 <TIM_Base_SetConfig+0x128>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00b      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2d      	ldr	r2, [pc, #180]	@ (80064c8 <TIM_Base_SetConfig+0x12c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d007      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2c      	ldr	r2, [pc, #176]	@ (80064cc <TIM_Base_SetConfig+0x130>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_Base_SetConfig+0x8a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2b      	ldr	r2, [pc, #172]	@ (80064d0 <TIM_Base_SetConfig+0x134>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d108      	bne.n	8006438 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800642c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a16      	ldr	r2, [pc, #88]	@ (80064b8 <TIM_Base_SetConfig+0x11c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00f      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <TIM_Base_SetConfig+0x128>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00b      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a16      	ldr	r2, [pc, #88]	@ (80064c8 <TIM_Base_SetConfig+0x12c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d007      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a15      	ldr	r2, [pc, #84]	@ (80064cc <TIM_Base_SetConfig+0x130>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_Base_SetConfig+0xe8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a14      	ldr	r2, [pc, #80]	@ (80064d0 <TIM_Base_SetConfig+0x134>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d103      	bne.n	800648c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b01      	cmp	r3, #1
 800649c:	d105      	bne.n	80064aa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f023 0201 	bic.w	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	611a      	str	r2, [r3, #16]
  }
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40013400 	.word	0x40013400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40014400 	.word	0x40014400
 80064d0:	40014800 	.word	0x40014800

080064d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f023 0201 	bic.w	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0303 	bic.w	r3, r3, #3
 800650e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f023 0302 	bic.w	r3, r3, #2
 8006520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a2c      	ldr	r2, [pc, #176]	@ (80065e0 <TIM_OC1_SetConfig+0x10c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00f      	beq.n	8006554 <TIM_OC1_SetConfig+0x80>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a2b      	ldr	r2, [pc, #172]	@ (80065e4 <TIM_OC1_SetConfig+0x110>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00b      	beq.n	8006554 <TIM_OC1_SetConfig+0x80>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a2a      	ldr	r2, [pc, #168]	@ (80065e8 <TIM_OC1_SetConfig+0x114>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_OC1_SetConfig+0x80>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a29      	ldr	r2, [pc, #164]	@ (80065ec <TIM_OC1_SetConfig+0x118>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_OC1_SetConfig+0x80>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a28      	ldr	r2, [pc, #160]	@ (80065f0 <TIM_OC1_SetConfig+0x11c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d10c      	bne.n	800656e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f023 0308 	bic.w	r3, r3, #8
 800655a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f023 0304 	bic.w	r3, r3, #4
 800656c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a1b      	ldr	r2, [pc, #108]	@ (80065e0 <TIM_OC1_SetConfig+0x10c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00f      	beq.n	8006596 <TIM_OC1_SetConfig+0xc2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a1a      	ldr	r2, [pc, #104]	@ (80065e4 <TIM_OC1_SetConfig+0x110>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00b      	beq.n	8006596 <TIM_OC1_SetConfig+0xc2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a19      	ldr	r2, [pc, #100]	@ (80065e8 <TIM_OC1_SetConfig+0x114>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d007      	beq.n	8006596 <TIM_OC1_SetConfig+0xc2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a18      	ldr	r2, [pc, #96]	@ (80065ec <TIM_OC1_SetConfig+0x118>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d003      	beq.n	8006596 <TIM_OC1_SetConfig+0xc2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a17      	ldr	r2, [pc, #92]	@ (80065f0 <TIM_OC1_SetConfig+0x11c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d111      	bne.n	80065ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800659c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	621a      	str	r2, [r3, #32]
}
 80065d4:	bf00      	nop
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40013400 	.word	0x40013400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800

080065f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f023 0210 	bic.w	r2, r3, #16
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800662e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 0320 	bic.w	r3, r3, #32
 8006642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a28      	ldr	r2, [pc, #160]	@ (80066f4 <TIM_OC2_SetConfig+0x100>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_OC2_SetConfig+0x6c>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a27      	ldr	r2, [pc, #156]	@ (80066f8 <TIM_OC2_SetConfig+0x104>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10d      	bne.n	800667c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800667a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a1d      	ldr	r2, [pc, #116]	@ (80066f4 <TIM_OC2_SetConfig+0x100>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00f      	beq.n	80066a4 <TIM_OC2_SetConfig+0xb0>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a1c      	ldr	r2, [pc, #112]	@ (80066f8 <TIM_OC2_SetConfig+0x104>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00b      	beq.n	80066a4 <TIM_OC2_SetConfig+0xb0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a1b      	ldr	r2, [pc, #108]	@ (80066fc <TIM_OC2_SetConfig+0x108>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_OC2_SetConfig+0xb0>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a1a      	ldr	r2, [pc, #104]	@ (8006700 <TIM_OC2_SetConfig+0x10c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_OC2_SetConfig+0xb0>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a19      	ldr	r2, [pc, #100]	@ (8006704 <TIM_OC2_SetConfig+0x110>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d113      	bne.n	80066cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4313      	orrs	r3, r2
 80066be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40012c00 	.word	0x40012c00
 80066f8:	40013400 	.word	0x40013400
 80066fc:	40014000 	.word	0x40014000
 8006700:	40014400 	.word	0x40014400
 8006704:	40014800 	.word	0x40014800

08006708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a27      	ldr	r2, [pc, #156]	@ (8006804 <TIM_OC3_SetConfig+0xfc>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d003      	beq.n	8006772 <TIM_OC3_SetConfig+0x6a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a26      	ldr	r2, [pc, #152]	@ (8006808 <TIM_OC3_SetConfig+0x100>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d10d      	bne.n	800678e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	021b      	lsls	r3, r3, #8
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800678c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a1c      	ldr	r2, [pc, #112]	@ (8006804 <TIM_OC3_SetConfig+0xfc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00f      	beq.n	80067b6 <TIM_OC3_SetConfig+0xae>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a1b      	ldr	r2, [pc, #108]	@ (8006808 <TIM_OC3_SetConfig+0x100>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00b      	beq.n	80067b6 <TIM_OC3_SetConfig+0xae>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a1a      	ldr	r2, [pc, #104]	@ (800680c <TIM_OC3_SetConfig+0x104>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d007      	beq.n	80067b6 <TIM_OC3_SetConfig+0xae>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a19      	ldr	r2, [pc, #100]	@ (8006810 <TIM_OC3_SetConfig+0x108>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d003      	beq.n	80067b6 <TIM_OC3_SetConfig+0xae>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a18      	ldr	r2, [pc, #96]	@ (8006814 <TIM_OC3_SetConfig+0x10c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d113      	bne.n	80067de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	621a      	str	r2, [r3, #32]
}
 80067f8:	bf00      	nop
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	40012c00 	.word	0x40012c00
 8006808:	40013400 	.word	0x40013400
 800680c:	40014000 	.word	0x40014000
 8006810:	40014400 	.word	0x40014400
 8006814:	40014800 	.word	0x40014800

08006818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800684a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	031b      	lsls	r3, r3, #12
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a28      	ldr	r2, [pc, #160]	@ (8006918 <TIM_OC4_SetConfig+0x100>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_OC4_SetConfig+0x6c>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a27      	ldr	r2, [pc, #156]	@ (800691c <TIM_OC4_SetConfig+0x104>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d10d      	bne.n	80068a0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800688a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	031b      	lsls	r3, r3, #12
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4313      	orrs	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800689e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006918 <TIM_OC4_SetConfig+0x100>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00f      	beq.n	80068c8 <TIM_OC4_SetConfig+0xb0>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1c      	ldr	r2, [pc, #112]	@ (800691c <TIM_OC4_SetConfig+0x104>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00b      	beq.n	80068c8 <TIM_OC4_SetConfig+0xb0>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006920 <TIM_OC4_SetConfig+0x108>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d007      	beq.n	80068c8 <TIM_OC4_SetConfig+0xb0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006924 <TIM_OC4_SetConfig+0x10c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC4_SetConfig+0xb0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a19      	ldr	r2, [pc, #100]	@ (8006928 <TIM_OC4_SetConfig+0x110>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d113      	bne.n	80068f0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	019b      	lsls	r3, r3, #6
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	019b      	lsls	r3, r3, #6
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	621a      	str	r2, [r3, #32]
}
 800690a:	bf00      	nop
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40012c00 	.word	0x40012c00
 800691c:	40013400 	.word	0x40013400
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800

0800692c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800695a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006970:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	041b      	lsls	r3, r3, #16
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a17      	ldr	r2, [pc, #92]	@ (80069e0 <TIM_OC5_SetConfig+0xb4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00f      	beq.n	80069a6 <TIM_OC5_SetConfig+0x7a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a16      	ldr	r2, [pc, #88]	@ (80069e4 <TIM_OC5_SetConfig+0xb8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00b      	beq.n	80069a6 <TIM_OC5_SetConfig+0x7a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a15      	ldr	r2, [pc, #84]	@ (80069e8 <TIM_OC5_SetConfig+0xbc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d007      	beq.n	80069a6 <TIM_OC5_SetConfig+0x7a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a14      	ldr	r2, [pc, #80]	@ (80069ec <TIM_OC5_SetConfig+0xc0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d003      	beq.n	80069a6 <TIM_OC5_SetConfig+0x7a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a13      	ldr	r2, [pc, #76]	@ (80069f0 <TIM_OC5_SetConfig+0xc4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d109      	bne.n	80069ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	621a      	str	r2, [r3, #32]
}
 80069d4:	bf00      	nop
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	40013400 	.word	0x40013400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40014400 	.word	0x40014400
 80069f0:	40014800 	.word	0x40014800

080069f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	021b      	lsls	r3, r3, #8
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	051b      	lsls	r3, r3, #20
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a18      	ldr	r2, [pc, #96]	@ (8006aac <TIM_OC6_SetConfig+0xb8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00f      	beq.n	8006a70 <TIM_OC6_SetConfig+0x7c>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a17      	ldr	r2, [pc, #92]	@ (8006ab0 <TIM_OC6_SetConfig+0xbc>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00b      	beq.n	8006a70 <TIM_OC6_SetConfig+0x7c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a16      	ldr	r2, [pc, #88]	@ (8006ab4 <TIM_OC6_SetConfig+0xc0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <TIM_OC6_SetConfig+0x7c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a15      	ldr	r2, [pc, #84]	@ (8006ab8 <TIM_OC6_SetConfig+0xc4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC6_SetConfig+0x7c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a14      	ldr	r2, [pc, #80]	@ (8006abc <TIM_OC6_SetConfig+0xc8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d109      	bne.n	8006a84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	029b      	lsls	r3, r3, #10
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	bf00      	nop
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40013400 	.word	0x40013400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40014400 	.word	0x40014400
 8006abc:	40014800 	.word	0x40014800

08006ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f023 0201 	bic.w	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	011b      	lsls	r3, r3, #4
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f023 030a 	bic.w	r3, r3, #10
 8006afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	621a      	str	r2, [r3, #32]
}
 8006b12:	bf00      	nop
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b087      	sub	sp, #28
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	f023 0210 	bic.w	r2, r3, #16
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	031b      	lsls	r3, r3, #12
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f043 0307 	orr.w	r3, r3, #7
 8006ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	609a      	str	r2, [r3, #8]
}
 8006bac:	bf00      	nop
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	021a      	lsls	r2, r3, #8
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a1a      	ldr	r2, [r3, #32]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c30:	431a      	orrs	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e065      	b.n	8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a2c      	ldr	r2, [pc, #176]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a2b      	ldr	r2, [pc, #172]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d108      	bne.n	8006ca2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d018      	beq.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd2:	d013      	beq.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a18      	ldr	r2, [pc, #96]	@ (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00e      	beq.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a17      	ldr	r2, [pc, #92]	@ (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d009      	beq.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a12      	ldr	r2, [pc, #72]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d004      	beq.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a13      	ldr	r2, [pc, #76]	@ (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d10c      	bne.n	8006d16 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	40012c00 	.word	0x40012c00
 8006d38:	40013400 	.word	0x40013400
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40014000 	.word	0x40014000

08006d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006de4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006de8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b085      	sub	sp, #20
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e0a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006e0e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4013      	ands	r3, r2
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	1d3b      	adds	r3, r7, #4
 8006e42:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b0a7      	sub	sp, #156	@ 0x9c
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e9a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	78db      	ldrb	r3, [r3, #3]
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d81f      	bhi.n	8006ee6 <USB_ActivateEndpoint+0x72>
 8006ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eac <USB_ActivateEndpoint+0x38>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ebd 	.word	0x08006ebd
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006eef 	.word	0x08006eef
 8006eb8:	08006ecb 	.word	0x08006ecb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006ebc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006ec0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ec4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006ec8:	e012      	b.n	8006ef0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006eca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006ece:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006ed2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006ed6:	e00b      	b.n	8006ef0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ed8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006edc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ee0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006ee4:	e004      	b.n	8006ef0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8006eec:	e000      	b.n	8006ef0 <USB_ActivateEndpoint+0x7c>
      break;
 8006eee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	441a      	add	r2, r3
 8006efa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	b21b      	sxth	r3, r3
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2a:	b21a      	sxth	r2, r3
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	b21b      	sxth	r3, r3
 8006f32:	4313      	orrs	r3, r2
 8006f34:	b21b      	sxth	r3, r3
 8006f36:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	441a      	add	r2, r3
 8006f44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006f48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	7b1b      	ldrb	r3, [r3, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f040 8180 	bne.w	8007266 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	785b      	ldrb	r3, [r3, #1]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 8084 	beq.w	8007078 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	4413      	add	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	00da      	lsls	r2, r3, #3
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	88db      	ldrh	r3, [r3, #6]
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	827b      	strh	r3, [r7, #18]
 8006fb2:	8a7b      	ldrh	r3, [r7, #18]
 8006fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01b      	beq.n	8006ff4 <USB_ActivateEndpoint+0x180>
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd2:	823b      	strh	r3, [r7, #16]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	441a      	add	r2, r3
 8006fde:	8a3b      	ldrh	r3, [r7, #16]
 8006fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	78db      	ldrb	r3, [r3, #3]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d020      	beq.n	800703e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800700e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007012:	81bb      	strh	r3, [r7, #12]
 8007014:	89bb      	ldrh	r3, [r7, #12]
 8007016:	f083 0320 	eor.w	r3, r3, #32
 800701a:	81bb      	strh	r3, [r7, #12]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	441a      	add	r2, r3
 8007026:	89bb      	ldrh	r3, [r7, #12]
 8007028:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800702c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007030:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007038:	b29b      	uxth	r3, r3
 800703a:	8013      	strh	r3, [r2, #0]
 800703c:	e3f9      	b.n	8007832 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007054:	81fb      	strh	r3, [r7, #14]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	441a      	add	r2, r3
 8007060:	89fb      	ldrh	r3, [r7, #14]
 8007062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800706a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800706e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007072:	b29b      	uxth	r3, r3
 8007074:	8013      	strh	r3, [r2, #0]
 8007076:	e3dc      	b.n	8007832 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	633b      	str	r3, [r7, #48]	@ 0x30
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007082:	b29b      	uxth	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	4413      	add	r3, r2
 800708a:	633b      	str	r3, [r7, #48]	@ 0x30
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	00da      	lsls	r2, r3, #3
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	4413      	add	r3, r2
 8007096:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800709a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	88db      	ldrh	r3, [r3, #6]
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070aa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	461a      	mov	r2, r3
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	4413      	add	r3, r2
 80070be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	00da      	lsls	r2, r3, #3
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	4413      	add	r3, r2
 80070ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070da:	b29a      	uxth	r2, r3
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	801a      	strh	r2, [r3, #0]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <USB_ActivateEndpoint+0x28a>
 80070e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e041      	b.n	8007182 <USB_ActivateEndpoint+0x30e>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b3e      	cmp	r3, #62	@ 0x3e
 8007104:	d81c      	bhi.n	8007140 <USB_ActivateEndpoint+0x2cc>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	085b      	lsrs	r3, r3, #1
 800710c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <USB_ActivateEndpoint+0x2b2>
 800711c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007120:	3301      	adds	r3, #1
 8007122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29a      	uxth	r2, r3
 800712c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007130:	b29b      	uxth	r3, r3
 8007132:	029b      	lsls	r3, r3, #10
 8007134:	b29b      	uxth	r3, r3
 8007136:	4313      	orrs	r3, r2
 8007138:	b29a      	uxth	r2, r3
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	801a      	strh	r2, [r3, #0]
 800713e:	e020      	b.n	8007182 <USB_ActivateEndpoint+0x30e>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f003 031f 	and.w	r3, r3, #31
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <USB_ActivateEndpoint+0x2ec>
 8007156:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800715a:	3b01      	subs	r3, #1
 800715c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29a      	uxth	r2, r3
 8007166:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800716a:	b29b      	uxth	r3, r3
 800716c:	029b      	lsls	r3, r3, #10
 800716e:	b29b      	uxth	r3, r3
 8007170:	4313      	orrs	r3, r2
 8007172:	b29b      	uxth	r3, r3
 8007174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800717c:	b29a      	uxth	r2, r3
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007190:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01b      	beq.n	80071d2 <USB_ActivateEndpoint+0x35e>
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b0:	843b      	strh	r3, [r7, #32]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	441a      	add	r2, r3
 80071bc:	8c3b      	ldrh	r3, [r7, #32]
 80071be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d124      	bne.n	8007224 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071f0:	83bb      	strh	r3, [r7, #28]
 80071f2:	8bbb      	ldrh	r3, [r7, #28]
 80071f4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80071f8:	83bb      	strh	r3, [r7, #28]
 80071fa:	8bbb      	ldrh	r3, [r7, #28]
 80071fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007200:	83bb      	strh	r3, [r7, #28]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	441a      	add	r2, r3
 800720c:	8bbb      	ldrh	r3, [r7, #28]
 800720e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007212:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800721a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800721e:	b29b      	uxth	r3, r3
 8007220:	8013      	strh	r3, [r2, #0]
 8007222:	e306      	b.n	8007832 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	b29b      	uxth	r3, r3
 8007232:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800723a:	83fb      	strh	r3, [r7, #30]
 800723c:	8bfb      	ldrh	r3, [r7, #30]
 800723e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007242:	83fb      	strh	r3, [r7, #30]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	441a      	add	r2, r3
 800724e:	8bfb      	ldrh	r3, [r7, #30]
 8007250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800725c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007260:	b29b      	uxth	r3, r3
 8007262:	8013      	strh	r3, [r2, #0]
 8007264:	e2e5      	b.n	8007832 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	78db      	ldrb	r3, [r3, #3]
 800726a:	2b02      	cmp	r3, #2
 800726c:	d11e      	bne.n	80072ac <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007284:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8007296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800729a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800729e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80072a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	8013      	strh	r3, [r2, #0]
 80072aa:	e01d      	b.n	80072e8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80072be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072c2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	441a      	add	r2, r3
 80072d0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80072d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072f8:	4413      	add	r3, r2
 80072fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	00da      	lsls	r2, r3, #3
 8007302:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007304:	4413      	add	r3, r2
 8007306:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800730a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	891b      	ldrh	r3, [r3, #8]
 8007310:	085b      	lsrs	r3, r3, #1
 8007312:	b29b      	uxth	r3, r3
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	b29a      	uxth	r2, r3
 8007318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800731a:	801a      	strh	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007326:	b29b      	uxth	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800732c:	4413      	add	r3, r2
 800732e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	00da      	lsls	r2, r3, #3
 8007336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007338:	4413      	add	r3, r2
 800733a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800733e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	895b      	ldrh	r3, [r3, #10]
 8007344:	085b      	lsrs	r3, r3, #1
 8007346:	b29b      	uxth	r3, r3
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800734e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f040 81af 	bne.w	80076b8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800736a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800736e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d01d      	beq.n	80073b2 <USB_ActivateEndpoint+0x53e>
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800738c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	441a      	add	r2, r3
 800739a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800739e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80073c2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80073c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d01d      	beq.n	800740a <USB_ActivateEndpoint+0x596>
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073e4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	441a      	add	r2, r3
 80073f2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80073f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007402:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007406:	b29b      	uxth	r3, r3
 8007408:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d16b      	bne.n	80074ea <USB_ActivateEndpoint+0x676>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800741c:	b29b      	uxth	r3, r3
 800741e:	461a      	mov	r2, r3
 8007420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007422:	4413      	add	r3, r2
 8007424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	00da      	lsls	r2, r3, #3
 800742c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800742e:	4413      	add	r3, r2
 8007430:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007440:	b29a      	uxth	r2, r3
 8007442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <USB_ActivateEndpoint+0x5f0>
 800744e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	b29b      	uxth	r3, r3
 8007454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745c:	b29a      	uxth	r2, r3
 800745e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007460:	801a      	strh	r2, [r3, #0]
 8007462:	e05d      	b.n	8007520 <USB_ActivateEndpoint+0x6ac>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b3e      	cmp	r3, #62	@ 0x3e
 800746a:	d81c      	bhi.n	80074a6 <USB_ActivateEndpoint+0x632>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	085b      	lsrs	r3, r3, #1
 8007472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d004      	beq.n	800748c <USB_ActivateEndpoint+0x618>
 8007482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007486:	3301      	adds	r3, #1
 8007488:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800748c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29a      	uxth	r2, r3
 8007492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007496:	b29b      	uxth	r3, r3
 8007498:	029b      	lsls	r3, r3, #10
 800749a:	b29b      	uxth	r3, r3
 800749c:	4313      	orrs	r3, r2
 800749e:	b29a      	uxth	r2, r3
 80074a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e03c      	b.n	8007520 <USB_ActivateEndpoint+0x6ac>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <USB_ActivateEndpoint+0x652>
 80074bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074c0:	3b01      	subs	r3, #1
 80074c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80074c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	029b      	lsls	r3, r3, #10
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	4313      	orrs	r3, r2
 80074d8:	b29b      	uxth	r3, r3
 80074da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074e6:	801a      	strh	r2, [r3, #0]
 80074e8:	e01a      	b.n	8007520 <USB_ActivateEndpoint+0x6ac>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d116      	bne.n	8007520 <USB_ActivateEndpoint+0x6ac>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007502:	4413      	add	r3, r2
 8007504:	657b      	str	r3, [r7, #84]	@ 0x54
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	00da      	lsls	r2, r3, #3
 800750c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800750e:	4413      	add	r3, r2
 8007510:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007514:	653b      	str	r3, [r7, #80]	@ 0x50
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	b29a      	uxth	r2, r3
 800751c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800751e:	801a      	strh	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	647b      	str	r3, [r7, #68]	@ 0x44
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d16b      	bne.n	8007604 <USB_ActivateEndpoint+0x790>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007536:	b29b      	uxth	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800753c:	4413      	add	r3, r2
 800753e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	00da      	lsls	r2, r3, #3
 8007546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007548:	4413      	add	r3, r2
 800754a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800754e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800755a:	b29a      	uxth	r2, r3
 800755c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755e:	801a      	strh	r2, [r3, #0]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <USB_ActivateEndpoint+0x70a>
 8007568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	b29b      	uxth	r3, r3
 800756e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007576:	b29a      	uxth	r2, r3
 8007578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	e05b      	b.n	8007636 <USB_ActivateEndpoint+0x7c2>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b3e      	cmp	r3, #62	@ 0x3e
 8007584:	d81c      	bhi.n	80075c0 <USB_ActivateEndpoint+0x74c>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	085b      	lsrs	r3, r3, #1
 800758c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d004      	beq.n	80075a6 <USB_ActivateEndpoint+0x732>
 800759c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075a0:	3301      	adds	r3, #1
 80075a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	029b      	lsls	r3, r3, #10
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	4313      	orrs	r3, r2
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	e03a      	b.n	8007636 <USB_ActivateEndpoint+0x7c2>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d104      	bne.n	80075e0 <USB_ActivateEndpoint+0x76c>
 80075d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075da:	3b01      	subs	r3, #1
 80075dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	029b      	lsls	r3, r3, #10
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	4313      	orrs	r3, r2
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007600:	801a      	strh	r2, [r3, #0]
 8007602:	e018      	b.n	8007636 <USB_ActivateEndpoint+0x7c2>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	785b      	ldrb	r3, [r3, #1]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d114      	bne.n	8007636 <USB_ActivateEndpoint+0x7c2>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007612:	b29b      	uxth	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007618:	4413      	add	r3, r2
 800761a:	647b      	str	r3, [r7, #68]	@ 0x44
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	00da      	lsls	r2, r3, #3
 8007622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007624:	4413      	add	r3, r2
 8007626:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800762a:	643b      	str	r3, [r7, #64]	@ 0x40
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	b29a      	uxth	r2, r3
 8007632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007634:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800764e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007650:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007654:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007656:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007658:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800765c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	441a      	add	r2, r3
 8007668:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800766a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800766e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007694:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	441a      	add	r2, r3
 80076a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80076a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	8013      	strh	r3, [r2, #0]
 80076b6:	e0bc      	b.n	8007832 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80076c8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80076cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01d      	beq.n	8007710 <USB_ActivateEndpoint+0x89c>
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	441a      	add	r2, r3
 80076f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80076fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007704:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800770c:	b29b      	uxth	r3, r3
 800770e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007720:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01d      	beq.n	8007768 <USB_ActivateEndpoint+0x8f4>
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800773e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007742:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	441a      	add	r2, r3
 8007750:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800775c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007760:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007764:	b29b      	uxth	r3, r3
 8007766:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	78db      	ldrb	r3, [r3, #3]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d024      	beq.n	80077ba <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	b29b      	uxth	r3, r3
 800777e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007786:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800778a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800778e:	f083 0320 	eor.w	r3, r3, #32
 8007792:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	441a      	add	r2, r3
 80077a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80077a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	8013      	strh	r3, [r2, #0]
 80077b8:	e01d      	b.n	80077f6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077d0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	441a      	add	r2, r3
 80077de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80077e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800780c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	441a      	add	r2, r3
 800781a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800781e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007822:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800782a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800782e:	b29b      	uxth	r3, r3
 8007830:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007832:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007836:	4618      	mov	r0, r3
 8007838:	379c      	adds	r7, #156	@ 0x9c
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop

08007844 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b0ac      	sub	sp, #176	@ 0xb0
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	785b      	ldrb	r3, [r3, #1]
 8007852:	2b01      	cmp	r3, #1
 8007854:	f040 84ca 	bne.w	80081ec <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	699a      	ldr	r2, [r3, #24]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	429a      	cmp	r2, r3
 8007862:	d904      	bls.n	800786e <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800786c:	e003      	b.n	8007876 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	7b1b      	ldrb	r3, [r3, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d122      	bne.n	80078c4 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	6959      	ldr	r1, [r3, #20]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	88da      	ldrh	r2, [r3, #6]
 8007886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800788a:	b29b      	uxth	r3, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fed2 	bl	8008636 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800789c:	b29b      	uxth	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	4413      	add	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	00da      	lsls	r2, r3, #3
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	4413      	add	r3, r2
 80078b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	f000 bc6f 	b.w	80081a2 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	78db      	ldrb	r3, [r3, #3]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	f040 831e 	bne.w	8007f0a <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	6a1a      	ldr	r2, [r3, #32]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	f240 82cf 	bls.w	8007e7a <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078f2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	441a      	add	r2, r3
 8007900:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800790c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007914:	b29b      	uxth	r3, r3
 8007916:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	6a1a      	ldr	r2, [r3, #32]
 800791c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007920:	1ad2      	subs	r2, r2, r3
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 814f 	beq.w	8007bdc <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	633b      	str	r3, [r7, #48]	@ 0x30
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d16b      	bne.n	8007a22 <USB_EPStartXfer+0x1de>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007954:	b29b      	uxth	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795a:	4413      	add	r3, r2
 800795c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	00da      	lsls	r2, r3, #3
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	4413      	add	r3, r2
 8007968:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800796c:	627b      	str	r3, [r7, #36]	@ 0x24
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007978:	b29a      	uxth	r2, r3
 800797a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <USB_EPStartXfer+0x158>
 8007986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007994:	b29a      	uxth	r2, r3
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	801a      	strh	r2, [r3, #0]
 800799a:	e05b      	b.n	8007a54 <USB_EPStartXfer+0x210>
 800799c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80079a2:	d81c      	bhi.n	80079de <USB_EPStartXfer+0x19a>
 80079a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079a8:	085b      	lsrs	r3, r3, #1
 80079aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d004      	beq.n	80079c4 <USB_EPStartXfer+0x180>
 80079ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079be:	3301      	adds	r3, #1
 80079c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	029b      	lsls	r3, r3, #10
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	4313      	orrs	r3, r2
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079da:	801a      	strh	r2, [r3, #0]
 80079dc:	e03a      	b.n	8007a54 <USB_EPStartXfer+0x210>
 80079de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ec:	f003 031f 	and.w	r3, r3, #31
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d104      	bne.n	80079fe <USB_EPStartXfer+0x1ba>
 80079f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80079f8:	3b01      	subs	r3, #1
 80079fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	029b      	lsls	r3, r3, #10
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1e:	801a      	strh	r2, [r3, #0]
 8007a20:	e018      	b.n	8007a54 <USB_EPStartXfer+0x210>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d114      	bne.n	8007a54 <USB_EPStartXfer+0x210>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	461a      	mov	r2, r3
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	4413      	add	r3, r2
 8007a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	00da      	lsls	r2, r3, #3
 8007a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a42:	4413      	add	r3, r2
 8007a44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	895b      	ldrh	r3, [r3, #10]
 8007a58:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	6959      	ldr	r1, [r3, #20]
 8007a60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fde3 	bl	8008636 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	695a      	ldr	r2, [r3, #20]
 8007a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a78:	441a      	add	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6a1a      	ldr	r2, [r3, #32]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d907      	bls.n	8007a9a <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	6a1a      	ldr	r2, [r3, #32]
 8007a8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a92:	1ad2      	subs	r2, r2, r3
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	621a      	str	r2, [r3, #32]
 8007a98:	e006      	b.n	8007aa8 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d16b      	bne.n	8007b88 <USB_EPStartXfer+0x344>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	61bb      	str	r3, [r7, #24]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	461a      	mov	r2, r3
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	00da      	lsls	r2, r3, #3
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	4413      	add	r3, r2
 8007ace:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	801a      	strh	r2, [r3, #0]
 8007ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10a      	bne.n	8007b02 <USB_EPStartXfer+0x2be>
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	801a      	strh	r2, [r3, #0]
 8007b00:	e05d      	b.n	8007bbe <USB_EPStartXfer+0x37a>
 8007b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b06:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b08:	d81c      	bhi.n	8007b44 <USB_EPStartXfer+0x300>
 8007b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b0e:	085b      	lsrs	r3, r3, #1
 8007b10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <USB_EPStartXfer+0x2e6>
 8007b20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b24:	3301      	adds	r3, #1
 8007b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	029b      	lsls	r3, r3, #10
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	e03c      	b.n	8007bbe <USB_EPStartXfer+0x37a>
 8007b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b52:	f003 031f 	and.w	r3, r3, #31
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <USB_EPStartXfer+0x320>
 8007b5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	029b      	lsls	r3, r3, #10
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	4313      	orrs	r3, r2
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	801a      	strh	r2, [r3, #0]
 8007b86:	e01a      	b.n	8007bbe <USB_EPStartXfer+0x37a>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	785b      	ldrb	r3, [r3, #1]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d116      	bne.n	8007bbe <USB_EPStartXfer+0x37a>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	623b      	str	r3, [r7, #32]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	623b      	str	r3, [r7, #32]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	00da      	lsls	r2, r3, #3
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	4413      	add	r3, r2
 8007bae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bb2:	61fb      	str	r3, [r7, #28]
 8007bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	891b      	ldrh	r3, [r3, #8]
 8007bc2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6959      	ldr	r1, [r3, #20]
 8007bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fd2e 	bl	8008636 <USB_WritePMA>
 8007bda:	e2e2      	b.n	80081a2 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d16b      	bne.n	8007cbc <USB_EPStartXfer+0x478>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bf4:	4413      	add	r3, r2
 8007bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	00da      	lsls	r2, r3, #3
 8007bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c00:	4413      	add	r3, r2
 8007c02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c06:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <USB_EPStartXfer+0x3f2>
 8007c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c32:	801a      	strh	r2, [r3, #0]
 8007c34:	e05d      	b.n	8007cf2 <USB_EPStartXfer+0x4ae>
 8007c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c3c:	d81c      	bhi.n	8007c78 <USB_EPStartXfer+0x434>
 8007c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d004      	beq.n	8007c5e <USB_EPStartXfer+0x41a>
 8007c54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c58:	3301      	adds	r3, #1
 8007c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	029b      	lsls	r3, r3, #10
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c74:	801a      	strh	r2, [r3, #0]
 8007c76:	e03c      	b.n	8007cf2 <USB_EPStartXfer+0x4ae>
 8007c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c7c:	095b      	lsrs	r3, r3, #5
 8007c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d104      	bne.n	8007c98 <USB_EPStartXfer+0x454>
 8007c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c92:	3b01      	subs	r3, #1
 8007c94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	029b      	lsls	r3, r3, #10
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	e01a      	b.n	8007cf2 <USB_EPStartXfer+0x4ae>
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d116      	bne.n	8007cf2 <USB_EPStartXfer+0x4ae>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cd4:	4413      	add	r3, r2
 8007cd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	00da      	lsls	r2, r3, #3
 8007cde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	891b      	ldrh	r3, [r3, #8]
 8007cf6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	6959      	ldr	r1, [r3, #20]
 8007cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fc94 	bl	8008636 <USB_WritePMA>
            ep->xfer_buff += len;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	695a      	ldr	r2, [r3, #20]
 8007d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d16:	441a      	add	r2, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	6a1a      	ldr	r2, [r3, #32]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d907      	bls.n	8007d38 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	6a1a      	ldr	r2, [r3, #32]
 8007d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d30:	1ad2      	subs	r2, r2, r3
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	621a      	str	r2, [r3, #32]
 8007d36:	e006      	b.n	8007d46 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	785b      	ldrb	r3, [r3, #1]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d16b      	bne.n	8007e2a <USB_EPStartXfer+0x5e6>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d62:	4413      	add	r3, r2
 8007d64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	00da      	lsls	r2, r3, #3
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6e:	4413      	add	r3, r2
 8007d70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d84:	801a      	strh	r2, [r3, #0]
 8007d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10a      	bne.n	8007da4 <USB_EPStartXfer+0x560>
 8007d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da0:	801a      	strh	r2, [r3, #0]
 8007da2:	e05b      	b.n	8007e5c <USB_EPStartXfer+0x618>
 8007da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007da8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007daa:	d81c      	bhi.n	8007de6 <USB_EPStartXfer+0x5a2>
 8007dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007db0:	085b      	lsrs	r3, r3, #1
 8007db2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d004      	beq.n	8007dcc <USB_EPStartXfer+0x588>
 8007dc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	029b      	lsls	r3, r3, #10
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de2:	801a      	strh	r2, [r3, #0]
 8007de4:	e03a      	b.n	8007e5c <USB_EPStartXfer+0x618>
 8007de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007df4:	f003 031f 	and.w	r3, r3, #31
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <USB_EPStartXfer+0x5c2>
 8007dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e00:	3b01      	subs	r3, #1
 8007e02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	029b      	lsls	r3, r3, #10
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	4313      	orrs	r3, r2
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e26:	801a      	strh	r2, [r3, #0]
 8007e28:	e018      	b.n	8007e5c <USB_EPStartXfer+0x618>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d114      	bne.n	8007e5c <USB_EPStartXfer+0x618>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e3e:	4413      	add	r3, r2
 8007e40:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	00da      	lsls	r2, r3, #3
 8007e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	895b      	ldrh	r3, [r3, #10]
 8007e60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	6959      	ldr	r1, [r3, #20]
 8007e68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fbdf 	bl	8008636 <USB_WritePMA>
 8007e78:	e193      	b.n	80081a2 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e98:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	441a      	add	r2, r3
 8007ea6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ece:	4413      	add	r3, r2
 8007ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	00da      	lsls	r2, r3, #3
 8007ed8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eda:	4413      	add	r3, r2
 8007edc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007eea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	891b      	ldrh	r3, [r3, #8]
 8007ef0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	6959      	ldr	r1, [r3, #20]
 8007ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fb97 	bl	8008636 <USB_WritePMA>
 8007f08:	e14b      	b.n	80081a2 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	6a1a      	ldr	r2, [r3, #32]
 8007f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 809a 	beq.w	8008064 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d16b      	bne.n	8008014 <USB_EPStartXfer+0x7d0>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f4c:	4413      	add	r3, r2
 8007f4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	00da      	lsls	r2, r3, #3
 8007f56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f58:	4413      	add	r3, r2
 8007f5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f6e:	801a      	strh	r2, [r3, #0]
 8007f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10a      	bne.n	8007f8e <USB_EPStartXfer+0x74a>
 8007f78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f8a:	801a      	strh	r2, [r3, #0]
 8007f8c:	e05b      	b.n	8008046 <USB_EPStartXfer+0x802>
 8007f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f92:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f94:	d81c      	bhi.n	8007fd0 <USB_EPStartXfer+0x78c>
 8007f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f9a:	085b      	lsrs	r3, r3, #1
 8007f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <USB_EPStartXfer+0x772>
 8007fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	029b      	lsls	r3, r3, #10
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fcc:	801a      	strh	r2, [r3, #0]
 8007fce:	e03a      	b.n	8008046 <USB_EPStartXfer+0x802>
 8007fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fd4:	095b      	lsrs	r3, r3, #5
 8007fd6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fde:	f003 031f 	and.w	r3, r3, #31
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d104      	bne.n	8007ff0 <USB_EPStartXfer+0x7ac>
 8007fe6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fea:	3b01      	subs	r3, #1
 8007fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	029b      	lsls	r3, r3, #10
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	4313      	orrs	r3, r2
 8008002:	b29b      	uxth	r3, r3
 8008004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800c:	b29a      	uxth	r2, r3
 800800e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008010:	801a      	strh	r2, [r3, #0]
 8008012:	e018      	b.n	8008046 <USB_EPStartXfer+0x802>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	785b      	ldrb	r3, [r3, #1]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d114      	bne.n	8008046 <USB_EPStartXfer+0x802>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008022:	b29b      	uxth	r3, r3
 8008024:	461a      	mov	r2, r3
 8008026:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008028:	4413      	add	r3, r2
 800802a:	673b      	str	r3, [r7, #112]	@ 0x70
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	00da      	lsls	r2, r3, #3
 8008032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008034:	4413      	add	r3, r2
 8008036:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800803a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800803c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008040:	b29a      	uxth	r2, r3
 8008042:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008044:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	895b      	ldrh	r3, [r3, #10]
 800804a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6959      	ldr	r1, [r3, #20]
 8008052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008056:	b29b      	uxth	r3, r3
 8008058:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 faea 	bl	8008636 <USB_WritePMA>
 8008062:	e09e      	b.n	80081a2 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	785b      	ldrb	r3, [r3, #1]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d16b      	bne.n	8008144 <USB_EPStartXfer+0x900>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008076:	b29b      	uxth	r3, r3
 8008078:	461a      	mov	r2, r3
 800807a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800807c:	4413      	add	r3, r2
 800807e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	00da      	lsls	r2, r3, #3
 8008086:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008088:	4413      	add	r3, r2
 800808a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800808e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008090:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	b29b      	uxth	r3, r3
 8008096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800809a:	b29a      	uxth	r2, r3
 800809c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800809e:	801a      	strh	r2, [r3, #0]
 80080a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <USB_EPStartXfer+0x87a>
 80080a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080ba:	801a      	strh	r2, [r3, #0]
 80080bc:	e063      	b.n	8008186 <USB_EPStartXfer+0x942>
 80080be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80080c4:	d81c      	bhi.n	8008100 <USB_EPStartXfer+0x8bc>
 80080c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ca:	085b      	lsrs	r3, r3, #1
 80080cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <USB_EPStartXfer+0x8a2>
 80080dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080e0:	3301      	adds	r3, #1
 80080e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	029b      	lsls	r3, r3, #10
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	4313      	orrs	r3, r2
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080fc:	801a      	strh	r2, [r3, #0]
 80080fe:	e042      	b.n	8008186 <USB_EPStartXfer+0x942>
 8008100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008104:	095b      	lsrs	r3, r3, #5
 8008106:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800810a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	2b00      	cmp	r3, #0
 8008114:	d104      	bne.n	8008120 <USB_EPStartXfer+0x8dc>
 8008116:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800811a:	3b01      	subs	r3, #1
 800811c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008120:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	b29a      	uxth	r2, r3
 8008126:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800812a:	b29b      	uxth	r3, r3
 800812c:	029b      	lsls	r3, r3, #10
 800812e:	b29b      	uxth	r3, r3
 8008130:	4313      	orrs	r3, r2
 8008132:	b29b      	uxth	r3, r3
 8008134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813c:	b29a      	uxth	r2, r3
 800813e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	e020      	b.n	8008186 <USB_EPStartXfer+0x942>
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d11c      	bne.n	8008186 <USB_EPStartXfer+0x942>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008158:	b29b      	uxth	r3, r3
 800815a:	461a      	mov	r2, r3
 800815c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008160:	4413      	add	r3, r2
 8008162:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	00da      	lsls	r2, r3, #3
 800816c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008170:	4413      	add	r3, r2
 8008172:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008176:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800817a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800817e:	b29a      	uxth	r2, r3
 8008180:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008184:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	891b      	ldrh	r3, [r3, #8]
 800818a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	6959      	ldr	r1, [r3, #20]
 8008192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008196:	b29b      	uxth	r3, r3
 8008198:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fa4a 	bl	8008636 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081b8:	817b      	strh	r3, [r7, #10]
 80081ba:	897b      	ldrh	r3, [r7, #10]
 80081bc:	f083 0310 	eor.w	r3, r3, #16
 80081c0:	817b      	strh	r3, [r7, #10]
 80081c2:	897b      	ldrh	r3, [r7, #10]
 80081c4:	f083 0320 	eor.w	r3, r3, #32
 80081c8:	817b      	strh	r3, [r7, #10]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	441a      	add	r2, r3
 80081d4:	897b      	ldrh	r3, [r7, #10]
 80081d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	8013      	strh	r3, [r2, #0]
 80081ea:	e0d5      	b.n	8008398 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	7b1b      	ldrb	r3, [r3, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d156      	bne.n	80082a2 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d122      	bne.n	8008242 <USB_EPStartXfer+0x9fe>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	78db      	ldrb	r3, [r3, #3]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d11e      	bne.n	8008242 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800821a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	441a      	add	r2, r3
 8008228:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800822c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008234:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800823c:	b29b      	uxth	r3, r3
 800823e:	8013      	strh	r3, [r2, #0]
 8008240:	e01d      	b.n	800827e <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	b29b      	uxth	r3, r3
 8008250:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008258:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	441a      	add	r2, r3
 8008266:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800826a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800826e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800827a:	b29b      	uxth	r3, r3
 800827c:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	429a      	cmp	r2, r3
 8008288:	d907      	bls.n	800829a <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	1ad2      	subs	r2, r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	619a      	str	r2, [r3, #24]
 8008298:	e054      	b.n	8008344 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2200      	movs	r2, #0
 800829e:	619a      	str	r2, [r3, #24]
 80082a0:	e050      	b.n	8008344 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	78db      	ldrb	r3, [r3, #3]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d142      	bne.n	8008330 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d048      	beq.n	8008344 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082c2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <USB_EPStartXfer+0xa96>
 80082ce:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082da:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d12e      	bne.n	8008344 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082e6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80082ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d128      	bne.n	8008344 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008308:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	441a      	add	r2, r3
 8008316:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800831a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800831e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008326:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800832a:	b29b      	uxth	r3, r3
 800832c:	8013      	strh	r3, [r2, #0]
 800832e:	e009      	b.n	8008344 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	78db      	ldrb	r3, [r3, #3]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d103      	bne.n	8008340 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	619a      	str	r2, [r3, #24]
 800833e:	e001      	b.n	8008344 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e02a      	b.n	800839a <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	b29b      	uxth	r3, r3
 8008352:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800835a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800835e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008362:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008366:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800836a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800836e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008372:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	441a      	add	r2, r3
 8008380:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008384:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008388:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800838c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008394:	b29b      	uxth	r3, r3
 8008396:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	37b0      	adds	r7, #176	@ 0xb0
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	785b      	ldrb	r3, [r3, #1]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d020      	beq.n	80083f6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083ca:	81bb      	strh	r3, [r7, #12]
 80083cc:	89bb      	ldrh	r3, [r7, #12]
 80083ce:	f083 0310 	eor.w	r3, r3, #16
 80083d2:	81bb      	strh	r3, [r7, #12]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	441a      	add	r2, r3
 80083de:	89bb      	ldrh	r3, [r7, #12]
 80083e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	8013      	strh	r3, [r2, #0]
 80083f4:	e01f      	b.n	8008436 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800840c:	81fb      	strh	r3, [r7, #14]
 800840e:	89fb      	ldrh	r3, [r7, #14]
 8008410:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008414:	81fb      	strh	r3, [r7, #14]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	441a      	add	r2, r3
 8008420:	89fb      	ldrh	r3, [r7, #14]
 8008422:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800842a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800842e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008432:	b29b      	uxth	r3, r3
 8008434:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	785b      	ldrb	r3, [r3, #1]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d04c      	beq.n	80084f0 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	823b      	strh	r3, [r7, #16]
 8008464:	8a3b      	ldrh	r3, [r7, #16]
 8008466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	d01b      	beq.n	80084a6 <USB_EPClearStall+0x62>
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	b29b      	uxth	r3, r3
 800847c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008484:	81fb      	strh	r3, [r7, #14]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	441a      	add	r2, r3
 8008490:	89fb      	ldrh	r3, [r7, #14]
 8008492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800849a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800849e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	78db      	ldrb	r3, [r3, #3]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d06c      	beq.n	8008588 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084c4:	81bb      	strh	r3, [r7, #12]
 80084c6:	89bb      	ldrh	r3, [r7, #12]
 80084c8:	f083 0320 	eor.w	r3, r3, #32
 80084cc:	81bb      	strh	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	441a      	add	r2, r3
 80084d8:	89bb      	ldrh	r3, [r7, #12]
 80084da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	8013      	strh	r3, [r2, #0]
 80084ee:	e04b      	b.n	8008588 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	82fb      	strh	r3, [r7, #22]
 80084fe:	8afb      	ldrh	r3, [r7, #22]
 8008500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01b      	beq.n	8008540 <USB_EPClearStall+0xfc>
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	b29b      	uxth	r3, r3
 8008516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800851a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800851e:	82bb      	strh	r3, [r7, #20]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	441a      	add	r2, r3
 800852a:	8abb      	ldrh	r3, [r7, #20]
 800852c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008534:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800853c:	b29b      	uxth	r3, r3
 800853e:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008556:	827b      	strh	r3, [r7, #18]
 8008558:	8a7b      	ldrh	r3, [r7, #18]
 800855a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800855e:	827b      	strh	r3, [r7, #18]
 8008560:	8a7b      	ldrh	r3, [r7, #18]
 8008562:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008566:	827b      	strh	r3, [r7, #18]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	441a      	add	r2, r3
 8008572:	8a7b      	ldrh	r3, [r7, #18]
 8008574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800857c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008584:	b29b      	uxth	r3, r3
 8008586:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	460b      	mov	r3, r1
 80085a0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80085a2:	78fb      	ldrb	r3, [r7, #3]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d103      	bne.n	80085b0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2280      	movs	r2, #128	@ 0x80
 80085ac:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008600:	b29a      	uxth	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008616:	b480      	push	{r7}
 8008618:	b085      	sub	sp, #20
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008624:	b29b      	uxth	r3, r3
 8008626:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008628:	68fb      	ldr	r3, [r7, #12]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008636:	b480      	push	{r7}
 8008638:	b08b      	sub	sp, #44	@ 0x2c
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	4611      	mov	r1, r2
 8008642:	461a      	mov	r2, r3
 8008644:	460b      	mov	r3, r1
 8008646:	80fb      	strh	r3, [r7, #6]
 8008648:	4613      	mov	r3, r2
 800864a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800864c:	88bb      	ldrh	r3, [r7, #4]
 800864e:	3301      	adds	r3, #1
 8008650:	085b      	lsrs	r3, r3, #1
 8008652:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800865c:	88fa      	ldrh	r2, [r7, #6]
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	4413      	add	r3, r2
 8008662:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008666:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	627b      	str	r3, [r7, #36]	@ 0x24
 800866c:	e01c      	b.n	80086a8 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	3301      	adds	r3, #1
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	b21b      	sxth	r3, r3
 800867c:	021b      	lsls	r3, r3, #8
 800867e:	b21a      	sxth	r2, r3
 8008680:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008684:	4313      	orrs	r3, r2
 8008686:	b21b      	sxth	r3, r3
 8008688:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	8a7a      	ldrh	r2, [r7, #18]
 800868e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	3302      	adds	r3, #2
 8008694:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	3301      	adds	r3, #1
 800869a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	3301      	adds	r3, #1
 80086a0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80086a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a4:	3b01      	subs	r3, #1
 80086a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80086a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1df      	bne.n	800866e <USB_WritePMA+0x38>
  }
}
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
 80086b2:	372c      	adds	r7, #44	@ 0x2c
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80086bc:	b480      	push	{r7}
 80086be:	b08b      	sub	sp, #44	@ 0x2c
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4611      	mov	r1, r2
 80086c8:	461a      	mov	r2, r3
 80086ca:	460b      	mov	r3, r1
 80086cc:	80fb      	strh	r3, [r7, #6]
 80086ce:	4613      	mov	r3, r2
 80086d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80086d2:	88bb      	ldrh	r3, [r7, #4]
 80086d4:	085b      	lsrs	r3, r3, #1
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086e2:	88fa      	ldrh	r2, [r7, #6]
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80086f2:	e018      	b.n	8008726 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	3302      	adds	r3, #2
 8008700:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	b2da      	uxtb	r2, r3
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	3301      	adds	r3, #1
 800870e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	0a1b      	lsrs	r3, r3, #8
 8008714:	b2da      	uxtb	r2, r3
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	3301      	adds	r3, #1
 800871e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008722:	3b01      	subs	r3, #1
 8008724:	627b      	str	r3, [r7, #36]	@ 0x24
 8008726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e3      	bne.n	80086f4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800872c:	88bb      	ldrh	r3, [r7, #4]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	b29b      	uxth	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d007      	beq.n	8008748 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	b29b      	uxth	r3, r3
 800873e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	b2da      	uxtb	r2, r3
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	701a      	strb	r2, [r3, #0]
  }
}
 8008748:	bf00      	nop
 800874a:	372c      	adds	r7, #44	@ 0x2c
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <__NVIC_SystemReset>:
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008758:	f3bf 8f4f 	dsb	sy
}
 800875c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800875e:	4b06      	ldr	r3, [pc, #24]	@ (8008778 <__NVIC_SystemReset+0x24>)
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008766:	4904      	ldr	r1, [pc, #16]	@ (8008778 <__NVIC_SystemReset+0x24>)
 8008768:	4b04      	ldr	r3, [pc, #16]	@ (800877c <__NVIC_SystemReset+0x28>)
 800876a:	4313      	orrs	r3, r2
 800876c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800876e:	f3bf 8f4f 	dsb	sy
}
 8008772:	bf00      	nop
    __NOP();
 8008774:	bf00      	nop
 8008776:	e7fd      	b.n	8008774 <__NVIC_SystemReset+0x20>
 8008778:	e000ed00 	.word	0xe000ed00
 800877c:	05fa0004 	.word	0x05fa0004

08008780 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800878c:	f240 401c 	movw	r0, #1052	@ 0x41c
 8008790:	f002 fb92 	bl	800aeb8 <USBD_static_malloc>
 8008794:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d105      	bne.n	80087a8 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80087a4:	2302      	movs	r3, #2
 80087a6:	e03f      	b.n	8008828 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80087be:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2202      	movs	r2, #2
 80087de:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2202      	movs	r2, #2
 8008806:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	4798      	blx	r3
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8008822:	2303      	movs	r3, #3
 8008824:	e000      	b.n	8008828 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8008846:	2302      	movs	r3, #2
 8008848:	e027      	b.n	800889a <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008850:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2202      	movs	r2, #2
 8008866:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2202      	movs	r2, #2
 8008876:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800888a:	4618      	mov	r0, r3
 800888c:	f002 fb22 	bl	800aed4 <USBD_static_free>
  pdev->pClassData = NULL;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b088      	sub	sp, #32
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088b4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e0d5      	b.n	8008a7c <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d03e      	beq.n	800895a <USBD_DFU_Setup+0xb6>
 80088dc:	2b20      	cmp	r3, #32
 80088de:	f040 80c5 	bne.w	8008a6c <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	785b      	ldrb	r3, [r3, #1]
 80088e6:	2b06      	cmp	r3, #6
 80088e8:	d82f      	bhi.n	800894a <USBD_DFU_Setup+0xa6>
 80088ea:	a201      	add	r2, pc, #4	@ (adr r2, 80088f0 <USBD_DFU_Setup+0x4c>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	08008941 	.word	0x08008941
 80088f4:	0800890d 	.word	0x0800890d
 80088f8:	08008917 	.word	0x08008917
 80088fc:	08008921 	.word	0x08008921
 8008900:	08008929 	.word	0x08008929
 8008904:	08008931 	.word	0x08008931
 8008908:	08008939 	.word	0x08008939
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fa6c 	bl	8008dec <DFU_Download>
          break;
 8008914:	e020      	b.n	8008958 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fad3 	bl	8008ec4 <DFU_Upload>
          break;
 800891e:	e01b      	b.n	8008958 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fba9 	bl	8009078 <DFU_GetStatus>
          break;
 8008926:	e017      	b.n	8008958 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fc5b 	bl	80091e4 <DFU_ClearStatus>
          break;
 800892e:	e013      	b.n	8008958 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fcab 	bl	800928c <DFU_GetState>
          break;
 8008936:	e00f      	b.n	8008958 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fcbf 	bl	80092bc <DFU_Abort>
          break;
 800893e:	e00b      	b.n	8008958 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f9ee 	bl	8008d24 <DFU_Detach>
          break;
 8008948:	e006      	b.n	8008958 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 fdb1 	bl	800a4b4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008952:	2303      	movs	r3, #3
 8008954:	77fb      	strb	r3, [r7, #31]
          break;
 8008956:	bf00      	nop
      }
      break;
 8008958:	e08f      	b.n	8008a7a <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	785b      	ldrb	r3, [r3, #1]
 800895e:	2b0b      	cmp	r3, #11
 8008960:	d87b      	bhi.n	8008a5a <USBD_DFU_Setup+0x1b6>
 8008962:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <USBD_DFU_Setup+0xc4>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	08008999 	.word	0x08008999
 800896c:	08008a69 	.word	0x08008a69
 8008970:	08008a5b 	.word	0x08008a5b
 8008974:	08008a5b 	.word	0x08008a5b
 8008978:	08008a5b 	.word	0x08008a5b
 800897c:	08008a5b 	.word	0x08008a5b
 8008980:	080089c3 	.word	0x080089c3
 8008984:	08008a5b 	.word	0x08008a5b
 8008988:	08008a5b 	.word	0x08008a5b
 800898c:	08008a5b 	.word	0x08008a5b
 8008990:	080089ed 	.word	0x080089ed
 8008994:	08008a19 	.word	0x08008a19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d107      	bne.n	80089b4 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80089a4:	f107 030e 	add.w	r3, r7, #14
 80089a8:	2202      	movs	r2, #2
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 fdf2 	bl	800a596 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089b2:	e05a      	b.n	8008a6a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 fd7c 	bl	800a4b4 <USBD_CtlError>
            ret = USBD_FAIL;
 80089bc:	2303      	movs	r3, #3
 80089be:	77fb      	strb	r3, [r7, #31]
          break;
 80089c0:	e053      	b.n	8008a6a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	885b      	ldrh	r3, [r3, #2]
 80089c6:	0a1b      	lsrs	r3, r3, #8
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	2b21      	cmp	r3, #33	@ 0x21
 80089cc:	d107      	bne.n	80089de <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 80089ce:	4b2d      	ldr	r3, [pc, #180]	@ (8008a84 <USBD_DFU_Setup+0x1e0>)
 80089d0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	88db      	ldrh	r3, [r3, #6]
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	bf28      	it	cs
 80089da:	2309      	movcs	r3, #9
 80089dc:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80089de:	8afb      	ldrh	r3, [r7, #22]
 80089e0:	461a      	mov	r2, r3
 80089e2:	69b9      	ldr	r1, [r7, #24]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 fdd6 	bl	800a596 <USBD_CtlSendData>
          break;
 80089ea:	e03e      	b.n	8008a6a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d108      	bne.n	8008a0a <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80089fe:	2201      	movs	r2, #1
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 fdc7 	bl	800a596 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a08:	e02f      	b.n	8008a6a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f001 fd51 	bl	800a4b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a12:	2303      	movs	r3, #3
 8008a14:	77fb      	strb	r3, [r7, #31]
          break;
 8008a16:	e028      	b.n	8008a6a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	885b      	ldrh	r3, [r3, #2]
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d114      	bne.n	8008a4c <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d107      	bne.n	8008a3e <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	461a      	mov	r2, r3
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a3c:	e015      	b.n	8008a6a <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 fd37 	bl	800a4b4 <USBD_CtlError>
              ret = USBD_FAIL;
 8008a46:	2303      	movs	r3, #3
 8008a48:	77fb      	strb	r3, [r7, #31]
          break;
 8008a4a:	e00e      	b.n	8008a6a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 fd30 	bl	800a4b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a54:	2303      	movs	r3, #3
 8008a56:	77fb      	strb	r3, [r7, #31]
          break;
 8008a58:	e007      	b.n	8008a6a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 fd29 	bl	800a4b4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a62:	2303      	movs	r3, #3
 8008a64:	77fb      	strb	r3, [r7, #31]
          break;
 8008a66:	e000      	b.n	8008a6a <USBD_DFU_Setup+0x1c6>
          break;
 8008a68:	bf00      	nop
      }
      break;
 8008a6a:	e006      	b.n	8008a7a <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 fd20 	bl	800a4b4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a74:	2303      	movs	r3, #3
 8008a76:	77fb      	strb	r3, [r7, #31]
      break;
 8008a78:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3720      	adds	r7, #32
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	20000062 	.word	0x20000062

08008a88 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	221b      	movs	r2, #27
 8008a94:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8008a96:	4b03      	ldr	r3, [pc, #12]	@ (8008aa4 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	20000050 	.word	0x20000050

08008aa8 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b088      	sub	sp, #32
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008acc:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ad4:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e0ce      	b.n	8008c7e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	f040 80bd 	bne.w	8008c66 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d17c      	bne.n	8008bf0 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	f000 8093 	beq.w	8008c28 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008b08:	2b05      	cmp	r3, #5
 8008b0a:	d15e      	bne.n	8008bca <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b21      	cmp	r3, #33	@ 0x21
 8008b12:	d124      	bne.n	8008b5e <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	789b      	ldrb	r3, [r3, #2]
 8008b2a:	021b      	lsls	r3, r3, #8
 8008b2c:	441a      	add	r2, r3
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	78db      	ldrb	r3, [r3, #3]
 8008b3e:	041b      	lsls	r3, r3, #16
 8008b40:	441a      	add	r2, r3
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	791b      	ldrb	r3, [r3, #4]
 8008b52:	061b      	lsls	r3, r3, #24
 8008b54:	441a      	add	r2, r3
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8008b5c:	e064      	b.n	8008c28 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b41      	cmp	r3, #65	@ 0x41
 8008b64:	d12f      	bne.n	8008bc6 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	785b      	ldrb	r3, [r3, #1]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	789b      	ldrb	r3, [r3, #2]
 8008b7c:	021b      	lsls	r3, r3, #8
 8008b7e:	441a      	add	r2, r3
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	78db      	ldrb	r3, [r3, #3]
 8008b90:	041b      	lsls	r3, r3, #16
 8008b92:	441a      	add	r2, r3
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	791b      	ldrb	r3, [r3, #4]
 8008ba4:	061b      	lsls	r3, r3, #24
 8008ba6:	441a      	add	r2, r3
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4798      	blx	r3
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d032      	beq.n	8008c28 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e05b      	b.n	8008c7e <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e059      	b.n	8008c7e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8008bde:	2301      	movs	r3, #1
 8008be0:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8008be2:	f107 030c 	add.w	r3, r7, #12
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 fc63 	bl	800a4b4 <USBD_CtlError>
 8008bee:	e01b      	b.n	8008c28 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d916      	bls.n	8008c28 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008c00:	3b02      	subs	r3, #2
 8008c02:	029a      	lsls	r2, r3, #10
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8008c0a:	4413      	add	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	69f8      	ldr	r0, [r7, #28]
 8008c14:	6979      	ldr	r1, [r7, #20]
 8008c16:	69fa      	ldr	r2, [r7, #28]
 8008c18:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8008c1c:	4798      	blx	r3
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e02a      	b.n	8008c7e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008c64:	e00a      	b.n	8008c7c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008c6c:	2b07      	cmp	r3, #7
 8008c6e:	d103      	bne.n	8008c78 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fb75 	bl	8009360 <DFU_Leave>
 8008c76:	e001      	b.n	8008c7c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e000      	b.n	8008c7e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3720      	adds	r7, #32
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	220a      	movs	r2, #10
 8008ca8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8008caa:	4b03      	ldr	r3, [pc, #12]	@ (8008cb8 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	2000006c 	.word	0x2000006c

08008cbc <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cd0:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8008cd2:	7afb      	ldrb	r3, [r7, #11]
 8008cd4:	2b06      	cmp	r3, #6
 8008cd6:	d808      	bhi.n	8008cea <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	4905      	ldr	r1, [pc, #20]	@ (8008cf4 <USBD_DFU_GetUsrStringDesc+0x38>)
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 fbf8 	bl	800a4d6 <USBD_GetString>
    return USBD_StrDesc;
 8008ce6:	4b03      	ldr	r3, [pc, #12]	@ (8008cf4 <USBD_DFU_GetUsrStringDesc+0x38>)
 8008ce8:	e000      	b.n	8008cec <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8008cea:	2300      	movs	r3, #0
  }
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	2000021c 	.word	0x2000021c

08008cf8 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e004      	b.n	8008d16 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
	...

08008d24 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d34:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d051      	beq.n	8008de0 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d013      	beq.n	8008d6e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d00e      	beq.n	8008d6e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008d56:	2b05      	cmp	r3, #5
 8008d58:	d009      	beq.n	8008d6e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008d60:	2b06      	cmp	r3, #6
 8008d62:	d004      	beq.n	8008d6e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008d6a:	2b09      	cmp	r3, #9
 8008d6c:	d125      	bne.n	8008dba <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2202      	movs	r2, #2
 8008d72:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8008dba:	4b0b      	ldr	r3, [pc, #44]	@ (8008de8 <DFU_Detach+0xc4>)
 8008dbc:	7d5b      	ldrb	r3, [r3, #21]
 8008dbe:	f003 0310 	and.w	r3, r3, #16
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d006      	beq.n	8008dd4 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fb7b 	bl	80094c2 <USBD_Stop>
    (void)USBD_Start(pdev);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fb6c 	bl	80094aa <USBD_Start>
 8008dd2:	e006      	b.n	8008de2 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	885b      	ldrh	r3, [r3, #2]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7f7 ff5d 	bl	8000c98 <HAL_Delay>
 8008dde:	e000      	b.n	8008de2 <DFU_Detach+0xbe>
    return;
 8008de0:	bf00      	nop
  }
}
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000050 	.word	0x20000050

08008dec <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008dfc:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d05b      	beq.n	8008ebc <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	88db      	ldrh	r3, [r3, #6]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d02d      	beq.n	8008e68 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d004      	beq.n	8008e20 <DFU_Download+0x34>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008e1c:	2b05      	cmp	r3, #5
 8008e1e:	d11e      	bne.n	8008e5e <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	885b      	ldrh	r3, [r3, #2]
 8008e24:	461a      	mov	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	88db      	ldrh	r3, [r3, #6]
 8008e30:	461a      	mov	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2203      	movs	r2, #3
 8008e3c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008e4c:	68f9      	ldr	r1, [r7, #12]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008e54:	461a      	mov	r2, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f001 fbc9 	bl	800a5ee <USBD_CtlPrepareRx>
 8008e5c:	e02f      	b.n	8008ebe <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 fb27 	bl	800a4b4 <USBD_CtlError>
 8008e66:	e02a      	b.n	8008ebe <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008e6e:	2b05      	cmp	r3, #5
 8008e70:	d004      	beq.n	8008e7c <DFU_Download+0x90>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d11a      	bne.n	8008eb2 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2206      	movs	r2, #6
 8008e88:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008eb0:	e005      	b.n	8008ebe <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f001 fafd 	bl	800a4b4 <USBD_CtlError>
 8008eba:	e000      	b.n	8008ebe <DFU_Download+0xd2>
    return;
 8008ebc:	bf00      	nop
    }
  }
}
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ed4:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008edc:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 80c4 	beq.w	800906e <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	88db      	ldrh	r3, [r3, #6]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 80a8 	beq.w	8009040 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d005      	beq.n	8008f06 <DFU_Upload+0x42>
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008f00:	2b09      	cmp	r3, #9
 8008f02:	f040 8090 	bne.w	8009026 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	885b      	ldrh	r3, [r3, #2]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	88db      	ldrh	r3, [r3, #6]
 8008f16:	461a      	mov	r2, r3
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d12c      	bne.n	8008f82 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d901      	bls.n	8008f36 <DFU_Upload+0x72>
 8008f32:	2202      	movs	r2, #2
 8008f34:	e000      	b.n	8008f38 <DFU_Upload+0x74>
 8008f36:	2209      	movs	r2, #9
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2200      	movs	r2, #0
 8008f66:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2221      	movs	r2, #33	@ 0x21
 8008f6c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2241      	movs	r2, #65	@ 0x41
 8008f72:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2203      	movs	r2, #3
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f001 fb0b 	bl	800a596 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008f80:	e076      	b.n	8009070 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d931      	bls.n	8008ff0 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	2209      	movs	r2, #9
 8008f90:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008fbe:	3b02      	subs	r3, #2
 8008fc0:	029a      	lsls	r2, r3, #10
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8008fc8:	4413      	add	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	6979      	ldr	r1, [r7, #20]
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8008fda:	4798      	blx	r3
 8008fdc:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	68b9      	ldr	r1, [r7, #8]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 fad4 	bl	800a596 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008fee:	e03f      	b.n	8009070 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	220f      	movs	r2, #15
 8008ff4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 fa48 	bl	800a4b4 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8009024:	e024      	b.n	8009070 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2200      	movs	r2, #0
 800902a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2200      	movs	r2, #0
 8009032:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 fa3b 	bl	800a4b4 <USBD_CtlError>
 800903e:	e017      	b.n	8009070 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800906c:	e000      	b.n	8009070 <DFU_Upload+0x1ac>
    return;
 800906e:	bf00      	nop
  }
}
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009086:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800908e:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 80a0 	beq.w	80091d8 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d002      	beq.n	80090a8 <DFU_GetStatus+0x30>
 80090a2:	2b06      	cmp	r3, #6
 80090a4:	d051      	beq.n	800914a <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 80090a6:	e08e      	b.n	80091c6 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d034      	beq.n	800911c <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2204      	movs	r2, #4
 80090b6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10e      	bne.n	8009106 <DFU_GetStatus+0x8e>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b41      	cmp	r3, #65	@ 0x41
 80090ee:	d10a      	bne.n	8009106 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8009100:	2100      	movs	r1, #0
 8009102:	4798      	blx	r3
      break;
 8009104:	e05f      	b.n	80091c6 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8009116:	2101      	movs	r1, #1
 8009118:	4798      	blx	r3
      break;
 800911a:	e054      	b.n	80091c6 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2205      	movs	r2, #5
 8009120:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8009148:	e03d      	b.n	80091c6 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8009150:	2b01      	cmp	r3, #1
 8009152:	d116      	bne.n	8009182 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2207      	movs	r2, #7
 8009158:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8009180:	e020      	b.n	80091c4 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8009188:	2b00      	cmp	r3, #0
 800918a:	d11b      	bne.n	80091c4 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 800918c:	4b14      	ldr	r3, [pc, #80]	@ (80091e0 <DFU_GetStatus+0x168>)
 800918e:	7d1b      	ldrb	r3, [r3, #20]
 8009190:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8009194:	2b00      	cmp	r3, #0
 8009196:	d015      	beq.n	80091c4 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80091c4:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 80091cc:	2206      	movs	r2, #6
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 f9e0 	bl	800a596 <USBD_CtlSendData>
 80091d6:	e000      	b.n	80091da <DFU_GetStatus+0x162>
    return;
 80091d8:	bf00      	nop
}
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20000050 	.word	0x20000050

080091e4 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091f2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d042      	beq.n	8009280 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009200:	2b0a      	cmp	r3, #10
 8009202:	d11e      	bne.n	8009242 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2202      	movs	r2, #2
 8009208:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8009240:	e01f      	b.n	8009282 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	220a      	movs	r2, #10
 8009246:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	220e      	movs	r2, #14
 800924e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 800927e:	e000      	b.n	8009282 <DFU_ClearStatus+0x9e>
    return;
 8009280:	bf00      	nop
  }
}
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800929a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d008      	beq.n	80092b4 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80092a8:	2201      	movs	r2, #1
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 f972 	bl	800a596 <USBD_CtlSendData>
 80092b2:	e000      	b.n	80092b6 <DFU_GetState+0x2a>
    return;
 80092b4:	bf00      	nop
}
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092ca:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d03f      	beq.n	8009352 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d013      	beq.n	8009304 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d00e      	beq.n	8009304 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80092ec:	2b05      	cmp	r3, #5
 80092ee:	d009      	beq.n	8009304 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80092f6:	2b06      	cmp	r3, #6
 80092f8:	d004      	beq.n	8009304 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8009300:	2b09      	cmp	r3, #9
 8009302:	d127      	bne.n	8009354 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8009350:	e000      	b.n	8009354 <DFU_Abort+0x98>
    return;
 8009352:	bf00      	nop
  }
}
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
	...

08009360 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800936e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d03b      	beq.n	80093ee <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 800937e:	4b1e      	ldr	r3, [pc, #120]	@ (80093f8 <DFU_Leave+0x98>)
 8009380:	7d1b      	ldrb	r3, [r3, #20]
 8009382:	f003 0304 	and.w	r3, r3, #4
 8009386:	2b00      	cmp	r3, #0
 8009388:	d016      	beq.n	80093b8 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2206      	movs	r2, #6
 800938e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 80093b6:	e01b      	b.n	80093f0 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2208      	movs	r2, #8
 80093bc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f86c 	bl	80094c2 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80093ea:	f7ff f9b3 	bl	8008754 <__NVIC_SystemReset>
    return;
 80093ee:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20000050 	.word	0x20000050

080093fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	4613      	mov	r3, r2
 8009408:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009410:	2303      	movs	r3, #3
 8009412:	e01f      	b.n	8009454 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	79fa      	ldrb	r2, [r7, #7]
 8009446:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f001 fb91 	bl	800ab70 <USBD_LL_Init>
 800944e:	4603      	mov	r3, r0
 8009450:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009452:	7dfb      	ldrb	r3, [r7, #23]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009470:	2303      	movs	r3, #3
 8009472:	e016      	b.n	80094a2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009490:	f107 020e 	add.w	r2, r7, #14
 8009494:	4610      	mov	r0, r2
 8009496:	4798      	blx	r3
 8009498:	4602      	mov	r2, r0
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f001 fba2 	bl	800abfc <USBD_LL_Start>
 80094b8:	4603      	mov	r3, r0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f001 fbb1 	bl	800ac32 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d009      	beq.n	80094ee <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	6852      	ldr	r2, [r2, #4]
 80094e6:	b2d2      	uxtb	r2, r2
 80094e8:	4611      	mov	r1, r2
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	4798      	blx	r3
  }

  return USBD_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	460b      	mov	r3, r1
 8009518:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800951a:	2303      	movs	r3, #3
 800951c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009524:	2b00      	cmp	r3, #0
 8009526:	d009      	beq.n	800953c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	78fa      	ldrb	r2, [r7, #3]
 8009532:	4611      	mov	r1, r2
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	4798      	blx	r3
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009558:	2b00      	cmp	r3, #0
 800955a:	d007      	beq.n	800956c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	78fa      	ldrb	r2, [r7, #3]
 8009566:	4611      	mov	r1, r2
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	4798      	blx	r3
  }

  return USBD_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	4618      	mov	r0, r3
 800958a:	f000 ff59 	bl	800a440 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800959c:	461a      	mov	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80095aa:	f003 031f 	and.w	r3, r3, #31
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d01a      	beq.n	80095e8 <USBD_LL_SetupStage+0x72>
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d822      	bhi.n	80095fc <USBD_LL_SetupStage+0x86>
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d002      	beq.n	80095c0 <USBD_LL_SetupStage+0x4a>
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d00a      	beq.n	80095d4 <USBD_LL_SetupStage+0x5e>
 80095be:	e01d      	b.n	80095fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f9ef 	bl	80099ac <USBD_StdDevReq>
 80095ce:	4603      	mov	r3, r0
 80095d0:	73fb      	strb	r3, [r7, #15]
      break;
 80095d2:	e020      	b.n	8009616 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fa53 	bl	8009a88 <USBD_StdItfReq>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73fb      	strb	r3, [r7, #15]
      break;
 80095e6:	e016      	b.n	8009616 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fa92 	bl	8009b1a <USBD_StdEPReq>
 80095f6:	4603      	mov	r3, r0
 80095f8:	73fb      	strb	r3, [r7, #15]
      break;
 80095fa:	e00c      	b.n	8009616 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009602:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009606:	b2db      	uxtb	r3, r3
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 fb52 	bl	800acb4 <USBD_LL_StallEP>
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]
      break;
 8009614:	bf00      	nop
  }

  return ret;
 8009616:	7bfb      	ldrb	r3, [r7, #15]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	460b      	mov	r3, r1
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800962e:	7afb      	ldrb	r3, [r7, #11]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d138      	bne.n	80096a6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800963a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009642:	2b03      	cmp	r3, #3
 8009644:	d14a      	bne.n	80096dc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	689a      	ldr	r2, [r3, #8]
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	429a      	cmp	r2, r3
 8009650:	d913      	bls.n	800967a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	1ad2      	subs	r2, r2, r3
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	68da      	ldr	r2, [r3, #12]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	4293      	cmp	r3, r2
 800966a:	bf28      	it	cs
 800966c:	4613      	movcs	r3, r2
 800966e:	461a      	mov	r2, r3
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 ffd8 	bl	800a628 <USBD_CtlContinueRx>
 8009678:	e030      	b.n	80096dc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b03      	cmp	r3, #3
 8009684:	d10b      	bne.n	800969e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d005      	beq.n	800969e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 ffd3 	bl	800a64a <USBD_CtlSendStatus>
 80096a4:	e01a      	b.n	80096dc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d114      	bne.n	80096dc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00e      	beq.n	80096dc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	7afa      	ldrb	r2, [r7, #11]
 80096c8:	4611      	mov	r1, r2
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	4798      	blx	r3
 80096ce:	4603      	mov	r3, r0
 80096d0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	e000      	b.n	80096de <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b086      	sub	sp, #24
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	460b      	mov	r3, r1
 80096f0:	607a      	str	r2, [r7, #4]
 80096f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80096f4:	7afb      	ldrb	r3, [r7, #11]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d16b      	bne.n	80097d2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3314      	adds	r3, #20
 80096fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009706:	2b02      	cmp	r3, #2
 8009708:	d156      	bne.n	80097b8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	429a      	cmp	r2, r3
 8009714:	d914      	bls.n	8009740 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	689a      	ldr	r2, [r3, #8]
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	1ad2      	subs	r2, r2, r3
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	461a      	mov	r2, r3
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 ff4d 	bl	800a5cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009732:	2300      	movs	r3, #0
 8009734:	2200      	movs	r2, #0
 8009736:	2100      	movs	r1, #0
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f001 fb65 	bl	800ae08 <USBD_LL_PrepareReceive>
 800973e:	e03b      	b.n	80097b8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	68da      	ldr	r2, [r3, #12]
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	429a      	cmp	r2, r3
 800974a:	d11c      	bne.n	8009786 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009754:	429a      	cmp	r2, r3
 8009756:	d316      	bcc.n	8009786 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009762:	429a      	cmp	r2, r3
 8009764:	d20f      	bcs.n	8009786 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009766:	2200      	movs	r2, #0
 8009768:	2100      	movs	r1, #0
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 ff2e 	bl	800a5cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009778:	2300      	movs	r3, #0
 800977a:	2200      	movs	r2, #0
 800977c:	2100      	movs	r1, #0
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f001 fb42 	bl	800ae08 <USBD_LL_PrepareReceive>
 8009784:	e018      	b.n	80097b8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b03      	cmp	r3, #3
 8009790:	d10b      	bne.n	80097aa <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d005      	beq.n	80097aa <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80097aa:	2180      	movs	r1, #128	@ 0x80
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f001 fa81 	bl	800acb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 ff5c 	bl	800a670 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d122      	bne.n	8009808 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f7ff fe98 	bl	80094f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80097d0:	e01a      	b.n	8009808 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d114      	bne.n	8009808 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00e      	beq.n	8009808 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	7afa      	ldrb	r2, [r7, #11]
 80097f4:	4611      	mov	r1, r2
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	4798      	blx	r3
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009804:	7dfb      	ldrb	r3, [r7, #23]
 8009806:	e000      	b.n	800980a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3718      	adds	r7, #24
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b082      	sub	sp, #8
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009842:	2303      	movs	r3, #3
 8009844:	e02f      	b.n	80098a6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00f      	beq.n	8009870 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d009      	beq.n	8009870 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6852      	ldr	r2, [r2, #4]
 8009868:	b2d2      	uxtb	r2, r2
 800986a:	4611      	mov	r1, r2
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009870:	2340      	movs	r3, #64	@ 0x40
 8009872:	2200      	movs	r2, #0
 8009874:	2100      	movs	r1, #0
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f001 f9f6 	bl	800ac68 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2240      	movs	r2, #64	@ 0x40
 8009888:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800988c:	2340      	movs	r3, #64	@ 0x40
 800988e:	2200      	movs	r2, #0
 8009890:	2180      	movs	r1, #128	@ 0x80
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f001 f9e8 	bl	800ac68 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2240      	movs	r2, #64	@ 0x40
 80098a2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b083      	sub	sp, #12
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	78fa      	ldrb	r2, [r7, #3]
 80098be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	370c      	adds	r7, #12
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b083      	sub	sp, #12
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2204      	movs	r2, #4
 80098e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b04      	cmp	r3, #4
 800990c:	d106      	bne.n	800991c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009914:	b2da      	uxtb	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009938:	2b00      	cmp	r3, #0
 800993a:	d101      	bne.n	8009940 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800993c:	2303      	movs	r3, #3
 800993e:	e012      	b.n	8009966 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b03      	cmp	r3, #3
 800994a:	d10b      	bne.n	8009964 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d005      	beq.n	8009964 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800995e:	69db      	ldr	r3, [r3, #28]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800996e:	b480      	push	{r7}
 8009970:	b087      	sub	sp, #28
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	3301      	adds	r3, #1
 8009984:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800998c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009990:	021b      	lsls	r3, r3, #8
 8009992:	b21a      	sxth	r2, r3
 8009994:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009998:	4313      	orrs	r3, r2
 800999a:	b21b      	sxth	r3, r3
 800999c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800999e:	89fb      	ldrh	r3, [r7, #14]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	371c      	adds	r7, #28
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099c2:	2b40      	cmp	r3, #64	@ 0x40
 80099c4:	d005      	beq.n	80099d2 <USBD_StdDevReq+0x26>
 80099c6:	2b40      	cmp	r3, #64	@ 0x40
 80099c8:	d853      	bhi.n	8009a72 <USBD_StdDevReq+0xc6>
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00b      	beq.n	80099e6 <USBD_StdDevReq+0x3a>
 80099ce:	2b20      	cmp	r3, #32
 80099d0:	d14f      	bne.n	8009a72 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	4798      	blx	r3
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]
      break;
 80099e4:	e04a      	b.n	8009a7c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	785b      	ldrb	r3, [r3, #1]
 80099ea:	2b09      	cmp	r3, #9
 80099ec:	d83b      	bhi.n	8009a66 <USBD_StdDevReq+0xba>
 80099ee:	a201      	add	r2, pc, #4	@ (adr r2, 80099f4 <USBD_StdDevReq+0x48>)
 80099f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f4:	08009a49 	.word	0x08009a49
 80099f8:	08009a5d 	.word	0x08009a5d
 80099fc:	08009a67 	.word	0x08009a67
 8009a00:	08009a53 	.word	0x08009a53
 8009a04:	08009a67 	.word	0x08009a67
 8009a08:	08009a27 	.word	0x08009a27
 8009a0c:	08009a1d 	.word	0x08009a1d
 8009a10:	08009a67 	.word	0x08009a67
 8009a14:	08009a3f 	.word	0x08009a3f
 8009a18:	08009a31 	.word	0x08009a31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f9de 	bl	8009de0 <USBD_GetDescriptor>
          break;
 8009a24:	e024      	b.n	8009a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fb7f 	bl	800a12c <USBD_SetAddress>
          break;
 8009a2e:	e01f      	b.n	8009a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fbbe 	bl	800a1b4 <USBD_SetConfig>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]
          break;
 8009a3c:	e018      	b.n	8009a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fc5d 	bl	800a300 <USBD_GetConfig>
          break;
 8009a46:	e013      	b.n	8009a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fc8e 	bl	800a36c <USBD_GetStatus>
          break;
 8009a50:	e00e      	b.n	8009a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fcbd 	bl	800a3d4 <USBD_SetFeature>
          break;
 8009a5a:	e009      	b.n	8009a70 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fccc 	bl	800a3fc <USBD_ClrFeature>
          break;
 8009a64:	e004      	b.n	8009a70 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fd23 	bl	800a4b4 <USBD_CtlError>
          break;
 8009a6e:	bf00      	nop
      }
      break;
 8009a70:	e004      	b.n	8009a7c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fd1d 	bl	800a4b4 <USBD_CtlError>
      break;
 8009a7a:	bf00      	nop
  }

  return ret;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop

08009a88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a9e:	2b40      	cmp	r3, #64	@ 0x40
 8009aa0:	d005      	beq.n	8009aae <USBD_StdItfReq+0x26>
 8009aa2:	2b40      	cmp	r3, #64	@ 0x40
 8009aa4:	d82f      	bhi.n	8009b06 <USBD_StdItfReq+0x7e>
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <USBD_StdItfReq+0x26>
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d12b      	bne.n	8009b06 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d81d      	bhi.n	8009af8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	889b      	ldrh	r3, [r3, #4]
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d813      	bhi.n	8009aee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	4798      	blx	r3
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	88db      	ldrh	r3, [r3, #6]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d110      	bne.n	8009b02 <USBD_StdItfReq+0x7a>
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10d      	bne.n	8009b02 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fdaf 	bl	800a64a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009aec:	e009      	b.n	8009b02 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fcdf 	bl	800a4b4 <USBD_CtlError>
          break;
 8009af6:	e004      	b.n	8009b02 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fcda 	bl	800a4b4 <USBD_CtlError>
          break;
 8009b00:	e000      	b.n	8009b04 <USBD_StdItfReq+0x7c>
          break;
 8009b02:	bf00      	nop
      }
      break;
 8009b04:	e004      	b.n	8009b10 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fcd3 	bl	800a4b4 <USBD_CtlError>
      break;
 8009b0e:	bf00      	nop
  }

  return ret;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b084      	sub	sp, #16
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	889b      	ldrh	r3, [r3, #4]
 8009b2c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b36:	2b40      	cmp	r3, #64	@ 0x40
 8009b38:	d007      	beq.n	8009b4a <USBD_StdEPReq+0x30>
 8009b3a:	2b40      	cmp	r3, #64	@ 0x40
 8009b3c:	f200 8145 	bhi.w	8009dca <USBD_StdEPReq+0x2b0>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00c      	beq.n	8009b5e <USBD_StdEPReq+0x44>
 8009b44:	2b20      	cmp	r3, #32
 8009b46:	f040 8140 	bne.w	8009dca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	4798      	blx	r3
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b5c:	e13a      	b.n	8009dd4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	785b      	ldrb	r3, [r3, #1]
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d007      	beq.n	8009b76 <USBD_StdEPReq+0x5c>
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	f300 8129 	bgt.w	8009dbe <USBD_StdEPReq+0x2a4>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d07f      	beq.n	8009c70 <USBD_StdEPReq+0x156>
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d03c      	beq.n	8009bee <USBD_StdEPReq+0xd4>
 8009b74:	e123      	b.n	8009dbe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d002      	beq.n	8009b88 <USBD_StdEPReq+0x6e>
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d016      	beq.n	8009bb4 <USBD_StdEPReq+0x9a>
 8009b86:	e02c      	b.n	8009be2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b88:	7bbb      	ldrb	r3, [r7, #14]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00d      	beq.n	8009baa <USBD_StdEPReq+0x90>
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	2b80      	cmp	r3, #128	@ 0x80
 8009b92:	d00a      	beq.n	8009baa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f001 f88b 	bl	800acb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b9e:	2180      	movs	r1, #128	@ 0x80
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f001 f887 	bl	800acb4 <USBD_LL_StallEP>
 8009ba6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ba8:	e020      	b.n	8009bec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fc81 	bl	800a4b4 <USBD_CtlError>
              break;
 8009bb2:	e01b      	b.n	8009bec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	885b      	ldrh	r3, [r3, #2]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10e      	bne.n	8009bda <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00b      	beq.n	8009bda <USBD_StdEPReq+0xc0>
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
 8009bc4:	2b80      	cmp	r3, #128	@ 0x80
 8009bc6:	d008      	beq.n	8009bda <USBD_StdEPReq+0xc0>
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	88db      	ldrh	r3, [r3, #6]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d104      	bne.n	8009bda <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 f86d 	bl	800acb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fd35 	bl	800a64a <USBD_CtlSendStatus>

              break;
 8009be0:	e004      	b.n	8009bec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fc65 	bl	800a4b4 <USBD_CtlError>
              break;
 8009bea:	bf00      	nop
          }
          break;
 8009bec:	e0ec      	b.n	8009dc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d002      	beq.n	8009c00 <USBD_StdEPReq+0xe6>
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d016      	beq.n	8009c2c <USBD_StdEPReq+0x112>
 8009bfe:	e030      	b.n	8009c62 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00d      	beq.n	8009c22 <USBD_StdEPReq+0x108>
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	2b80      	cmp	r3, #128	@ 0x80
 8009c0a:	d00a      	beq.n	8009c22 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c0c:	7bbb      	ldrb	r3, [r7, #14]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 f84f 	bl	800acb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c16:	2180      	movs	r1, #128	@ 0x80
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f001 f84b 	bl	800acb4 <USBD_LL_StallEP>
 8009c1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c20:	e025      	b.n	8009c6e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fc45 	bl	800a4b4 <USBD_CtlError>
              break;
 8009c2a:	e020      	b.n	8009c6e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	885b      	ldrh	r3, [r3, #2]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d11b      	bne.n	8009c6c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f001 f855 	bl	800acf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fcfe 	bl	800a64a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	6839      	ldr	r1, [r7, #0]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	4798      	blx	r3
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009c60:	e004      	b.n	8009c6c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fc25 	bl	800a4b4 <USBD_CtlError>
              break;
 8009c6a:	e000      	b.n	8009c6e <USBD_StdEPReq+0x154>
              break;
 8009c6c:	bf00      	nop
          }
          break;
 8009c6e:	e0ab      	b.n	8009dc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d002      	beq.n	8009c82 <USBD_StdEPReq+0x168>
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d032      	beq.n	8009ce6 <USBD_StdEPReq+0x1cc>
 8009c80:	e097      	b.n	8009db2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d007      	beq.n	8009c98 <USBD_StdEPReq+0x17e>
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	2b80      	cmp	r3, #128	@ 0x80
 8009c8c:	d004      	beq.n	8009c98 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fc0f 	bl	800a4b4 <USBD_CtlError>
                break;
 8009c96:	e091      	b.n	8009dbc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	da0b      	bge.n	8009cb8 <USBD_StdEPReq+0x19e>
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	3310      	adds	r3, #16
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	e00b      	b.n	8009cd0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	4413      	add	r3, r2
 8009cce:	3304      	adds	r3, #4
 8009cd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fc59 	bl	800a596 <USBD_CtlSendData>
              break;
 8009ce4:	e06a      	b.n	8009dbc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da11      	bge.n	8009d12 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	f003 020f 	and.w	r2, r3, #15
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	440b      	add	r3, r1
 8009d00:	3324      	adds	r3, #36	@ 0x24
 8009d02:	881b      	ldrh	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d117      	bne.n	8009d38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fbd2 	bl	800a4b4 <USBD_CtlError>
                  break;
 8009d10:	e054      	b.n	8009dbc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	f003 020f 	and.w	r2, r3, #15
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	440b      	add	r3, r1
 8009d24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d104      	bne.n	8009d38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fbbf 	bl	800a4b4 <USBD_CtlError>
                  break;
 8009d36:	e041      	b.n	8009dbc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	da0b      	bge.n	8009d58 <USBD_StdEPReq+0x23e>
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
 8009d42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	3310      	adds	r3, #16
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	4413      	add	r3, r2
 8009d54:	3304      	adds	r3, #4
 8009d56:	e00b      	b.n	8009d70 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	3304      	adds	r3, #4
 8009d70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <USBD_StdEPReq+0x264>
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	2b80      	cmp	r3, #128	@ 0x80
 8009d7c:	d103      	bne.n	8009d86 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	e00e      	b.n	8009da4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009d86:	7bbb      	ldrb	r3, [r7, #14]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 ffd0 	bl	800ad30 <USBD_LL_IsStallEP>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	e002      	b.n	8009da4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2202      	movs	r2, #2
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fbf3 	bl	800a596 <USBD_CtlSendData>
              break;
 8009db0:	e004      	b.n	8009dbc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fb7d 	bl	800a4b4 <USBD_CtlError>
              break;
 8009dba:	bf00      	nop
          }
          break;
 8009dbc:	e004      	b.n	8009dc8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 fb77 	bl	800a4b4 <USBD_CtlError>
          break;
 8009dc6:	bf00      	nop
      }
      break;
 8009dc8:	e004      	b.n	8009dd4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fb71 	bl	800a4b4 <USBD_CtlError>
      break;
 8009dd2:	bf00      	nop
  }

  return ret;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
	...

08009de0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	885b      	ldrh	r3, [r3, #2]
 8009dfa:	0a1b      	lsrs	r3, r3, #8
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	2b0e      	cmp	r3, #14
 8009e02:	f200 8165 	bhi.w	800a0d0 <USBD_GetDescriptor+0x2f0>
 8009e06:	a201      	add	r2, pc, #4	@ (adr r2, 8009e0c <USBD_GetDescriptor+0x2c>)
 8009e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0c:	08009e7d 	.word	0x08009e7d
 8009e10:	08009e95 	.word	0x08009e95
 8009e14:	08009ed5 	.word	0x08009ed5
 8009e18:	0800a0d1 	.word	0x0800a0d1
 8009e1c:	0800a0d1 	.word	0x0800a0d1
 8009e20:	0800a071 	.word	0x0800a071
 8009e24:	0800a09d 	.word	0x0800a09d
 8009e28:	0800a0d1 	.word	0x0800a0d1
 8009e2c:	0800a0d1 	.word	0x0800a0d1
 8009e30:	0800a0d1 	.word	0x0800a0d1
 8009e34:	0800a0d1 	.word	0x0800a0d1
 8009e38:	0800a0d1 	.word	0x0800a0d1
 8009e3c:	0800a0d1 	.word	0x0800a0d1
 8009e40:	0800a0d1 	.word	0x0800a0d1
 8009e44:	08009e49 	.word	0x08009e49
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e5a:	69db      	ldr	r3, [r3, #28]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	7c12      	ldrb	r2, [r2, #16]
 8009e60:	f107 0108 	add.w	r1, r7, #8
 8009e64:	4610      	mov	r0, r2
 8009e66:	4798      	blx	r3
 8009e68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e6a:	e139      	b.n	800a0e0 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fb20 	bl	800a4b4 <USBD_CtlError>
        err++;
 8009e74:	7afb      	ldrb	r3, [r7, #11]
 8009e76:	3301      	adds	r3, #1
 8009e78:	72fb      	strb	r3, [r7, #11]
      break;
 8009e7a:	e131      	b.n	800a0e0 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	7c12      	ldrb	r2, [r2, #16]
 8009e88:	f107 0108 	add.w	r1, r7, #8
 8009e8c:	4610      	mov	r0, r2
 8009e8e:	4798      	blx	r3
 8009e90:	60f8      	str	r0, [r7, #12]
      break;
 8009e92:	e125      	b.n	800a0e0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	7c1b      	ldrb	r3, [r3, #16]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10d      	bne.n	8009eb8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea4:	f107 0208 	add.w	r2, r7, #8
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4798      	blx	r3
 8009eac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009eb6:	e113      	b.n	800a0e0 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec0:	f107 0208 	add.w	r2, r7, #8
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	4798      	blx	r3
 8009ec8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	2202      	movs	r2, #2
 8009ed0:	701a      	strb	r2, [r3, #0]
      break;
 8009ed2:	e105      	b.n	800a0e0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	885b      	ldrh	r3, [r3, #2]
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b05      	cmp	r3, #5
 8009edc:	f200 80ac 	bhi.w	800a038 <USBD_GetDescriptor+0x258>
 8009ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee8 <USBD_GetDescriptor+0x108>)
 8009ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee6:	bf00      	nop
 8009ee8:	08009f01 	.word	0x08009f01
 8009eec:	08009f35 	.word	0x08009f35
 8009ef0:	08009f69 	.word	0x08009f69
 8009ef4:	08009f9d 	.word	0x08009f9d
 8009ef8:	08009fd1 	.word	0x08009fd1
 8009efc:	0800a005 	.word	0x0800a005
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	7c12      	ldrb	r2, [r2, #16]
 8009f18:	f107 0108 	add.w	r1, r7, #8
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	4798      	blx	r3
 8009f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f22:	e0a4      	b.n	800a06e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fac4 	bl	800a4b4 <USBD_CtlError>
            err++;
 8009f2c:	7afb      	ldrb	r3, [r7, #11]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	72fb      	strb	r3, [r7, #11]
          break;
 8009f32:	e09c      	b.n	800a06e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	7c12      	ldrb	r2, [r2, #16]
 8009f4c:	f107 0108 	add.w	r1, r7, #8
 8009f50:	4610      	mov	r0, r2
 8009f52:	4798      	blx	r3
 8009f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f56:	e08a      	b.n	800a06e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 faaa 	bl	800a4b4 <USBD_CtlError>
            err++;
 8009f60:	7afb      	ldrb	r3, [r7, #11]
 8009f62:	3301      	adds	r3, #1
 8009f64:	72fb      	strb	r3, [r7, #11]
          break;
 8009f66:	e082      	b.n	800a06e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00b      	beq.n	8009f8c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	7c12      	ldrb	r2, [r2, #16]
 8009f80:	f107 0108 	add.w	r1, r7, #8
 8009f84:	4610      	mov	r0, r2
 8009f86:	4798      	blx	r3
 8009f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f8a:	e070      	b.n	800a06e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fa90 	bl	800a4b4 <USBD_CtlError>
            err++;
 8009f94:	7afb      	ldrb	r3, [r7, #11]
 8009f96:	3301      	adds	r3, #1
 8009f98:	72fb      	strb	r3, [r7, #11]
          break;
 8009f9a:	e068      	b.n	800a06e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00b      	beq.n	8009fc0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	7c12      	ldrb	r2, [r2, #16]
 8009fb4:	f107 0108 	add.w	r1, r7, #8
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4798      	blx	r3
 8009fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fbe:	e056      	b.n	800a06e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fa76 	bl	800a4b4 <USBD_CtlError>
            err++;
 8009fc8:	7afb      	ldrb	r3, [r7, #11]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009fce:	e04e      	b.n	800a06e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00b      	beq.n	8009ff4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	7c12      	ldrb	r2, [r2, #16]
 8009fe8:	f107 0108 	add.w	r1, r7, #8
 8009fec:	4610      	mov	r0, r2
 8009fee:	4798      	blx	r3
 8009ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ff2:	e03c      	b.n	800a06e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fa5c 	bl	800a4b4 <USBD_CtlError>
            err++;
 8009ffc:	7afb      	ldrb	r3, [r7, #11]
 8009ffe:	3301      	adds	r3, #1
 800a000:	72fb      	strb	r3, [r7, #11]
          break;
 800a002:	e034      	b.n	800a06e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00b      	beq.n	800a028 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	7c12      	ldrb	r2, [r2, #16]
 800a01c:	f107 0108 	add.w	r1, r7, #8
 800a020:	4610      	mov	r0, r2
 800a022:	4798      	blx	r3
 800a024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a026:	e022      	b.n	800a06e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fa42 	bl	800a4b4 <USBD_CtlError>
            err++;
 800a030:	7afb      	ldrb	r3, [r7, #11]
 800a032:	3301      	adds	r3, #1
 800a034:	72fb      	strb	r3, [r7, #11]
          break;
 800a036:	e01a      	b.n	800a06e <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00c      	beq.n	800a05e <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a04c:	683a      	ldr	r2, [r7, #0]
 800a04e:	8852      	ldrh	r2, [r2, #2]
 800a050:	b2d1      	uxtb	r1, r2
 800a052:	f107 0208 	add.w	r2, r7, #8
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	4798      	blx	r3
 800a05a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800a05c:	e006      	b.n	800a06c <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fa27 	bl	800a4b4 <USBD_CtlError>
            err++;
 800a066:	7afb      	ldrb	r3, [r7, #11]
 800a068:	3301      	adds	r3, #1
 800a06a:	72fb      	strb	r3, [r7, #11]
          break;
 800a06c:	bf00      	nop
      }
      break;
 800a06e:	e037      	b.n	800a0e0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	7c1b      	ldrb	r3, [r3, #16]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d109      	bne.n	800a08c <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a07e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a080:	f107 0208 	add.w	r2, r7, #8
 800a084:	4610      	mov	r0, r2
 800a086:	4798      	blx	r3
 800a088:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a08a:	e029      	b.n	800a0e0 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fa10 	bl	800a4b4 <USBD_CtlError>
        err++;
 800a094:	7afb      	ldrb	r3, [r7, #11]
 800a096:	3301      	adds	r3, #1
 800a098:	72fb      	strb	r3, [r7, #11]
      break;
 800a09a:	e021      	b.n	800a0e0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	7c1b      	ldrb	r3, [r3, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10d      	bne.n	800a0c0 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0ac:	f107 0208 	add.w	r2, r7, #8
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	4798      	blx	r3
 800a0b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	2207      	movs	r2, #7
 800a0bc:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0be:	e00f      	b.n	800a0e0 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f9f6 	bl	800a4b4 <USBD_CtlError>
        err++;
 800a0c8:	7afb      	ldrb	r3, [r7, #11]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	72fb      	strb	r3, [r7, #11]
      break;
 800a0ce:	e007      	b.n	800a0e0 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f9ee 	bl	800a4b4 <USBD_CtlError>
      err++;
 800a0d8:	7afb      	ldrb	r3, [r7, #11]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	72fb      	strb	r3, [r7, #11]
      break;
 800a0de:	bf00      	nop
  }

  if (err != 0U)
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d11e      	bne.n	800a124 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	88db      	ldrh	r3, [r3, #6]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d016      	beq.n	800a11c <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 800a0ee:	893b      	ldrh	r3, [r7, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00e      	beq.n	800a112 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	88da      	ldrh	r2, [r3, #6]
 800a0f8:	893b      	ldrh	r3, [r7, #8]
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	bf28      	it	cs
 800a0fe:	4613      	movcs	r3, r2
 800a100:	b29b      	uxth	r3, r3
 800a102:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a104:	893b      	ldrh	r3, [r7, #8]
 800a106:	461a      	mov	r2, r3
 800a108:	68f9      	ldr	r1, [r7, #12]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fa43 	bl	800a596 <USBD_CtlSendData>
 800a110:	e009      	b.n	800a126 <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f9cd 	bl	800a4b4 <USBD_CtlError>
 800a11a:	e004      	b.n	800a126 <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa94 	bl	800a64a <USBD_CtlSendStatus>
 800a122:	e000      	b.n	800a126 <USBD_GetDescriptor+0x346>
    return;
 800a124:	bf00      	nop
  }
}
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	889b      	ldrh	r3, [r3, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d131      	bne.n	800a1a2 <USBD_SetAddress+0x76>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	88db      	ldrh	r3, [r3, #6]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d12d      	bne.n	800a1a2 <USBD_SetAddress+0x76>
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	885b      	ldrh	r3, [r3, #2]
 800a14a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a14c:	d829      	bhi.n	800a1a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	885b      	ldrh	r3, [r3, #2]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a158:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b03      	cmp	r3, #3
 800a164:	d104      	bne.n	800a170 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f9a3 	bl	800a4b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16e:	e01d      	b.n	800a1ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	7bfa      	ldrb	r2, [r7, #15]
 800a174:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fe03 	bl	800ad88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fa61 	bl	800a64a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d004      	beq.n	800a198 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2202      	movs	r2, #2
 800a192:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a196:	e009      	b.n	800a1ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1a0:	e004      	b.n	800a1ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f985 	bl	800a4b4 <USBD_CtlError>
  }
}
 800a1aa:	bf00      	nop
 800a1ac:	bf00      	nop
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	885b      	ldrh	r3, [r3, #2]
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	4b4c      	ldr	r3, [pc, #304]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a1ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1cc:	4b4b      	ldr	r3, [pc, #300]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d905      	bls.n	800a1e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f96c 	bl	800a4b4 <USBD_CtlError>
    return USBD_FAIL;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e088      	b.n	800a2f2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d002      	beq.n	800a1f2 <USBD_SetConfig+0x3e>
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	d025      	beq.n	800a23c <USBD_SetConfig+0x88>
 800a1f0:	e071      	b.n	800a2d6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a1f2:	4b42      	ldr	r3, [pc, #264]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d01c      	beq.n	800a234 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a1fa:	4b40      	ldr	r3, [pc, #256]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a204:	4b3d      	ldr	r3, [pc, #244]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	4619      	mov	r1, r3
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7ff f97f 	bl	800950e <USBD_SetClassConfig>
 800a210:	4603      	mov	r3, r0
 800a212:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f949 	bl	800a4b4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a222:	e065      	b.n	800a2f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fa10 	bl	800a64a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2203      	movs	r2, #3
 800a22e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a232:	e05d      	b.n	800a2f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fa08 	bl	800a64a <USBD_CtlSendStatus>
      break;
 800a23a:	e059      	b.n	800a2f0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a23c:	4b2f      	ldr	r3, [pc, #188]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d112      	bne.n	800a26a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a24c:	4b2b      	ldr	r3, [pc, #172]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	461a      	mov	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a256:	4b29      	ldr	r3, [pc, #164]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7ff f972 	bl	8009546 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f9f1 	bl	800a64a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a268:	e042      	b.n	800a2f0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a26a:	4b24      	ldr	r3, [pc, #144]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	461a      	mov	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	429a      	cmp	r2, r3
 800a276:	d02a      	beq.n	800a2ce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7ff f960 	bl	8009546 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a286:	4b1d      	ldr	r3, [pc, #116]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a290:	4b1a      	ldr	r3, [pc, #104]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7ff f939 	bl	800950e <USBD_SetClassConfig>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00f      	beq.n	800a2c6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f903 	bl	800a4b4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff f945 	bl	8009546 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a2c4:	e014      	b.n	800a2f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f9bf 	bl	800a64a <USBD_CtlSendStatus>
      break;
 800a2cc:	e010      	b.n	800a2f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f9bb 	bl	800a64a <USBD_CtlSendStatus>
      break;
 800a2d4:	e00c      	b.n	800a2f0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f8eb 	bl	800a4b4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2de:	4b07      	ldr	r3, [pc, #28]	@ (800a2fc <USBD_SetConfig+0x148>)
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7ff f92e 	bl	8009546 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ee:	bf00      	nop
  }

  return ret;
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	2000031b 	.word	0x2000031b

0800a300 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	88db      	ldrh	r3, [r3, #6]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d004      	beq.n	800a31c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f8cd 	bl	800a4b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a31a:	e023      	b.n	800a364 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b02      	cmp	r3, #2
 800a326:	dc02      	bgt.n	800a32e <USBD_GetConfig+0x2e>
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dc03      	bgt.n	800a334 <USBD_GetConfig+0x34>
 800a32c:	e015      	b.n	800a35a <USBD_GetConfig+0x5a>
 800a32e:	2b03      	cmp	r3, #3
 800a330:	d00b      	beq.n	800a34a <USBD_GetConfig+0x4a>
 800a332:	e012      	b.n	800a35a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	3308      	adds	r3, #8
 800a33e:	2201      	movs	r2, #1
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f927 	bl	800a596 <USBD_CtlSendData>
        break;
 800a348:	e00c      	b.n	800a364 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	3304      	adds	r3, #4
 800a34e:	2201      	movs	r2, #1
 800a350:	4619      	mov	r1, r3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f91f 	bl	800a596 <USBD_CtlSendData>
        break;
 800a358:	e004      	b.n	800a364 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f8a9 	bl	800a4b4 <USBD_CtlError>
        break;
 800a362:	bf00      	nop
}
 800a364:	bf00      	nop
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	3b01      	subs	r3, #1
 800a380:	2b02      	cmp	r3, #2
 800a382:	d81e      	bhi.n	800a3c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	88db      	ldrh	r3, [r3, #6]
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d004      	beq.n	800a396 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f890 	bl	800a4b4 <USBD_CtlError>
        break;
 800a394:	e01a      	b.n	800a3cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d005      	beq.n	800a3b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	f043 0202 	orr.w	r2, r3, #2
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	330c      	adds	r3, #12
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f8eb 	bl	800a596 <USBD_CtlSendData>
      break;
 800a3c0:	e004      	b.n	800a3cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f875 	bl	800a4b4 <USBD_CtlError>
      break;
 800a3ca:	bf00      	nop
  }
}
 800a3cc:	bf00      	nop
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	885b      	ldrh	r3, [r3, #2]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d106      	bne.n	800a3f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f92b 	bl	800a64a <USBD_CtlSendStatus>
  }
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	3b01      	subs	r3, #1
 800a410:	2b02      	cmp	r3, #2
 800a412:	d80b      	bhi.n	800a42c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	885b      	ldrh	r3, [r3, #2]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d10c      	bne.n	800a436 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f910 	bl	800a64a <USBD_CtlSendStatus>
      }
      break;
 800a42a:	e004      	b.n	800a436 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f840 	bl	800a4b4 <USBD_CtlError>
      break;
 800a434:	e000      	b.n	800a438 <USBD_ClrFeature+0x3c>
      break;
 800a436:	bf00      	nop
  }
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	781a      	ldrb	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	3301      	adds	r3, #1
 800a45a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	781a      	ldrb	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3301      	adds	r3, #1
 800a468:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7ff fa7f 	bl	800996e <SWAPBYTE>
 800a470:	4603      	mov	r3, r0
 800a472:	461a      	mov	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	3301      	adds	r3, #1
 800a47c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3301      	adds	r3, #1
 800a482:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7ff fa72 	bl	800996e <SWAPBYTE>
 800a48a:	4603      	mov	r3, r0
 800a48c:	461a      	mov	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3301      	adds	r3, #1
 800a496:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3301      	adds	r3, #1
 800a49c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f7ff fa65 	bl	800996e <SWAPBYTE>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	80da      	strh	r2, [r3, #6]
}
 800a4ac:	bf00      	nop
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4be:	2180      	movs	r1, #128	@ 0x80
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fbf7 	bl	800acb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fbf3 	bl	800acb4 <USBD_LL_StallEP>
}
 800a4ce:	bf00      	nop
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b086      	sub	sp, #24
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d036      	beq.n	800a55a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a4f0:	6938      	ldr	r0, [r7, #16]
 800a4f2:	f000 f836 	bl	800a562 <USBD_GetLen>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	005b      	lsls	r3, r3, #1
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a504:	7dfb      	ldrb	r3, [r7, #23]
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	4413      	add	r3, r2
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	7812      	ldrb	r2, [r2, #0]
 800a50e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a510:	7dfb      	ldrb	r3, [r7, #23]
 800a512:	3301      	adds	r3, #1
 800a514:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	4413      	add	r3, r2
 800a51c:	2203      	movs	r2, #3
 800a51e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a520:	7dfb      	ldrb	r3, [r7, #23]
 800a522:	3301      	adds	r3, #1
 800a524:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a526:	e013      	b.n	800a550 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	4413      	add	r3, r2
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	7812      	ldrb	r2, [r2, #0]
 800a532:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	3301      	adds	r3, #1
 800a538:	613b      	str	r3, [r7, #16]
    idx++;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	3301      	adds	r3, #1
 800a53e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a540:	7dfb      	ldrb	r3, [r7, #23]
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	4413      	add	r3, r2
 800a546:	2200      	movs	r2, #0
 800a548:	701a      	strb	r2, [r3, #0]
    idx++;
 800a54a:	7dfb      	ldrb	r3, [r7, #23]
 800a54c:	3301      	adds	r3, #1
 800a54e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1e7      	bne.n	800a528 <USBD_GetString+0x52>
 800a558:	e000      	b.n	800a55c <USBD_GetString+0x86>
    return;
 800a55a:	bf00      	nop
  }
}
 800a55c:	3718      	adds	r7, #24
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a562:	b480      	push	{r7}
 800a564:	b085      	sub	sp, #20
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a572:	e005      	b.n	800a580 <USBD_GetLen+0x1e>
  {
    len++;
 800a574:	7bfb      	ldrb	r3, [r7, #15]
 800a576:	3301      	adds	r3, #1
 800a578:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	3301      	adds	r3, #1
 800a57e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1f5      	bne.n	800a574 <USBD_GetLen+0x12>
  }

  return len;
 800a588:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f000 fc02 	bl	800adc6 <USBD_LL_Transmit>

  return USBD_OK;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	2100      	movs	r1, #0
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f000 fbf1 	bl	800adc6 <USBD_LL_Transmit>

  return USBD_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b084      	sub	sp, #16
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	60b9      	str	r1, [r7, #8]
 800a5f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2203      	movs	r2, #3
 800a5fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	2100      	movs	r1, #0
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 fbf5 	bl	800ae08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	2100      	movs	r1, #0
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 fbe4 	bl	800ae08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b082      	sub	sp, #8
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2204      	movs	r2, #4
 800a656:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a65a:	2300      	movs	r3, #0
 800a65c:	2200      	movs	r2, #0
 800a65e:	2100      	movs	r1, #0
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fbb0 	bl	800adc6 <USBD_LL_Transmit>

  return USBD_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2205      	movs	r2, #5
 800a67c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a680:	2300      	movs	r3, #0
 800a682:	2200      	movs	r2, #0
 800a684:	2100      	movs	r1, #0
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fbbe 	bl	800ae08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 800a69c:	2200      	movs	r2, #0
 800a69e:	4912      	ldr	r1, [pc, #72]	@ (800a6e8 <MX_USB_Device_Init+0x50>)
 800a6a0:	4812      	ldr	r0, [pc, #72]	@ (800a6ec <MX_USB_Device_Init+0x54>)
 800a6a2:	f7fe feab 	bl	80093fc <USBD_Init>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d001      	beq.n	800a6b0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a6ac:	f7f6 f8ce 	bl	800084c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 800a6b0:	490f      	ldr	r1, [pc, #60]	@ (800a6f0 <MX_USB_Device_Init+0x58>)
 800a6b2:	480e      	ldr	r0, [pc, #56]	@ (800a6ec <MX_USB_Device_Init+0x54>)
 800a6b4:	f7fe fed2 	bl	800945c <USBD_RegisterClass>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a6be:	f7f6 f8c5 	bl	800084c <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 800a6c2:	490c      	ldr	r1, [pc, #48]	@ (800a6f4 <MX_USB_Device_Init+0x5c>)
 800a6c4:	4809      	ldr	r0, [pc, #36]	@ (800a6ec <MX_USB_Device_Init+0x54>)
 800a6c6:	f7fe fb17 	bl	8008cf8 <USBD_DFU_RegisterMedia>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a6d0:	f7f6 f8bc 	bl	800084c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a6d4:	4805      	ldr	r0, [pc, #20]	@ (800a6ec <MX_USB_Device_Init+0x54>)
 800a6d6:	f7fe fee8 	bl	80094aa <USBD_Start>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a6e0:	f7f6 f8b4 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a6e4:	bf00      	nop
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20000078 	.word	0x20000078
 800a6ec:	2000031c 	.word	0x2000031c
 800a6f0:	20000014 	.word	0x20000014
 800a6f4:	200000cc 	.word	0x200000cc

0800a6f8 <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	6039      	str	r1, [r7, #0]
 800a702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	2212      	movs	r2, #18
 800a708:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 800a70a:	4b03      	ldr	r3, [pc, #12]	@ (800a718 <USBD_DFU_DeviceDescriptor+0x20>)
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	20000098 	.word	0x20000098

0800a71c <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	6039      	str	r1, [r7, #0]
 800a726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	2204      	movs	r2, #4
 800a72c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a72e:	4b03      	ldr	r3, [pc, #12]	@ (800a73c <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 800a730:	4618      	mov	r0, r3
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	200000ac 	.word	0x200000ac

0800a740 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	4603      	mov	r3, r0
 800a748:	6039      	str	r1, [r7, #0]
 800a74a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d105      	bne.n	800a75e <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	4907      	ldr	r1, [pc, #28]	@ (800a774 <USBD_DFU_ProductStrDescriptor+0x34>)
 800a756:	4808      	ldr	r0, [pc, #32]	@ (800a778 <USBD_DFU_ProductStrDescriptor+0x38>)
 800a758:	f7ff febd 	bl	800a4d6 <USBD_GetString>
 800a75c:	e004      	b.n	800a768 <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	4904      	ldr	r1, [pc, #16]	@ (800a774 <USBD_DFU_ProductStrDescriptor+0x34>)
 800a762:	4805      	ldr	r0, [pc, #20]	@ (800a778 <USBD_DFU_ProductStrDescriptor+0x38>)
 800a764:	f7ff feb7 	bl	800a4d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a768:	4b02      	ldr	r3, [pc, #8]	@ (800a774 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	200005ec 	.word	0x200005ec
 800a778:	0800afbc 	.word	0x0800afbc

0800a77c <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	6039      	str	r1, [r7, #0]
 800a786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	4904      	ldr	r1, [pc, #16]	@ (800a79c <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 800a78c:	4804      	ldr	r0, [pc, #16]	@ (800a7a0 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 800a78e:	f7ff fea2 	bl	800a4d6 <USBD_GetString>
  return USBD_StrDesc;
 800a792:	4b02      	ldr	r3, [pc, #8]	@ (800a79c <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	200005ec 	.word	0x200005ec
 800a7a0:	0800afdc 	.word	0x0800afdc

0800a7a4 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6039      	str	r1, [r7, #0]
 800a7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	221a      	movs	r2, #26
 800a7b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7b6:	f000 f843 	bl	800a840 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a7ba:	4b02      	ldr	r3, [pc, #8]	@ (800a7c4 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	200000b0 	.word	0x200000b0

0800a7c8 <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d105      	bne.n	800a7e6 <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	4907      	ldr	r1, [pc, #28]	@ (800a7fc <USBD_DFU_ConfigStrDescriptor+0x34>)
 800a7de:	4808      	ldr	r0, [pc, #32]	@ (800a800 <USBD_DFU_ConfigStrDescriptor+0x38>)
 800a7e0:	f7ff fe79 	bl	800a4d6 <USBD_GetString>
 800a7e4:	e004      	b.n	800a7f0 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	4904      	ldr	r1, [pc, #16]	@ (800a7fc <USBD_DFU_ConfigStrDescriptor+0x34>)
 800a7ea:	4805      	ldr	r0, [pc, #20]	@ (800a800 <USBD_DFU_ConfigStrDescriptor+0x38>)
 800a7ec:	f7ff fe73 	bl	800a4d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7f0:	4b02      	ldr	r3, [pc, #8]	@ (800a7fc <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	200005ec 	.word	0x200005ec
 800a800:	0800aff0 	.word	0x0800aff0

0800a804 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4603      	mov	r3, r0
 800a80c:	6039      	str	r1, [r7, #0]
 800a80e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a810:	79fb      	ldrb	r3, [r7, #7]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d105      	bne.n	800a822 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	4907      	ldr	r1, [pc, #28]	@ (800a838 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 800a81a:	4808      	ldr	r0, [pc, #32]	@ (800a83c <USBD_DFU_InterfaceStrDescriptor+0x38>)
 800a81c:	f7ff fe5b 	bl	800a4d6 <USBD_GetString>
 800a820:	e004      	b.n	800a82c <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	4904      	ldr	r1, [pc, #16]	@ (800a838 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 800a826:	4805      	ldr	r0, [pc, #20]	@ (800a83c <USBD_DFU_InterfaceStrDescriptor+0x38>)
 800a828:	f7ff fe55 	bl	800a4d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a82c:	4b02      	ldr	r3, [pc, #8]	@ (800a838 <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	200005ec 	.word	0x200005ec
 800a83c:	0800affc 	.word	0x0800affc

0800a840 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a846:	4b0f      	ldr	r3, [pc, #60]	@ (800a884 <Get_SerialNum+0x44>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a84c:	4b0e      	ldr	r3, [pc, #56]	@ (800a888 <Get_SerialNum+0x48>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a852:	4b0e      	ldr	r3, [pc, #56]	@ (800a88c <Get_SerialNum+0x4c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4413      	add	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d009      	beq.n	800a87a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a866:	2208      	movs	r2, #8
 800a868:	4909      	ldr	r1, [pc, #36]	@ (800a890 <Get_SerialNum+0x50>)
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f000 f814 	bl	800a898 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a870:	2204      	movs	r2, #4
 800a872:	4908      	ldr	r1, [pc, #32]	@ (800a894 <Get_SerialNum+0x54>)
 800a874:	68b8      	ldr	r0, [r7, #8]
 800a876:	f000 f80f 	bl	800a898 <IntToUnicode>
  }
}
 800a87a:	bf00      	nop
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	1fff7590 	.word	0x1fff7590
 800a888:	1fff7594 	.word	0x1fff7594
 800a88c:	1fff7598 	.word	0x1fff7598
 800a890:	200000b2 	.word	0x200000b2
 800a894:	200000c2 	.word	0x200000c2

0800a898 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	75fb      	strb	r3, [r7, #23]
 800a8ae:	e027      	b.n	800a900 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	0f1b      	lsrs	r3, r3, #28
 800a8b4:	2b09      	cmp	r3, #9
 800a8b6:	d80b      	bhi.n	800a8d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	0f1b      	lsrs	r3, r3, #28
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	7dfb      	ldrb	r3, [r7, #23]
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	440b      	add	r3, r1
 800a8c8:	3230      	adds	r2, #48	@ 0x30
 800a8ca:	b2d2      	uxtb	r2, r2
 800a8cc:	701a      	strb	r2, [r3, #0]
 800a8ce:	e00a      	b.n	800a8e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	0f1b      	lsrs	r3, r3, #28
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	7dfb      	ldrb	r3, [r7, #23]
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	4619      	mov	r1, r3
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	440b      	add	r3, r1
 800a8e0:	3237      	adds	r2, #55	@ 0x37
 800a8e2:	b2d2      	uxtb	r2, r2
 800a8e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	011b      	lsls	r3, r3, #4
 800a8ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8fa:	7dfb      	ldrb	r3, [r7, #23]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	75fb      	strb	r3, [r7, #23]
 800a900:	7dfa      	ldrb	r2, [r7, #23]
 800a902:	79fb      	ldrb	r3, [r7, #7]
 800a904:	429a      	cmp	r2, r3
 800a906:	d3d3      	bcc.n	800a8b0 <IntToUnicode+0x18>
  }
}
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
 800a90c:	371c      	adds	r7, #28
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 800a916:	b480      	push	{r7}
 800a918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800a91a:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 800a926:	b480      	push	{r7}
 800a928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800a92a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 800a936:	b480      	push	{r7}
 800a938:	b083      	sub	sp, #12
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800a93e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a940:	4618      	mov	r0, r3
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800a958:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a966:	b480      	push	{r7}
 800a968:	b085      	sub	sp, #20
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	60f8      	str	r0, [r7, #12]
 800a96e:	60b9      	str	r1, [r7, #8]
 800a970:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 800a972:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 800a976:	4618      	mov	r0, r3
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800a982:	b480      	push	{r7}
 800a984:	b085      	sub	sp, #20
 800a986:	af00      	add	r7, sp, #0
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	460b      	mov	r3, r1
 800a98c:	607a      	str	r2, [r7, #4]
 800a98e:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800a990:	7afb      	ldrb	r3, [r7, #11]
 800a992:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800a994:	bf00      	nop
  }
  return (USBD_OK);
 800a996:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b094      	sub	sp, #80	@ 0x50
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a9ac:	f107 030c 	add.w	r3, r7, #12
 800a9b0:	2244      	movs	r2, #68	@ 0x44
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 fac9 	bl	800af4c <memset>
  if(pcdHandle->Instance==USB)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a15      	ldr	r2, [pc, #84]	@ (800aa14 <HAL_PCD_MspInit+0x70>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d123      	bne.n	800aa0c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a9c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a9c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800a9ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a9ce:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a9d0:	f107 030c 	add.w	r3, r7, #12
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fa fda9 	bl	800552c <HAL_RCCEx_PeriphCLKConfig>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800a9e0:	f7f5 ff34 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a9e4:	4b0c      	ldr	r3, [pc, #48]	@ (800aa18 <HAL_PCD_MspInit+0x74>)
 800a9e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9e8:	4a0b      	ldr	r2, [pc, #44]	@ (800aa18 <HAL_PCD_MspInit+0x74>)
 800a9ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a9ee:	6593      	str	r3, [r2, #88]	@ 0x58
 800a9f0:	4b09      	ldr	r3, [pc, #36]	@ (800aa18 <HAL_PCD_MspInit+0x74>)
 800a9f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9f8:	60bb      	str	r3, [r7, #8]
 800a9fa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2100      	movs	r1, #0
 800aa00:	2014      	movs	r0, #20
 800aa02:	f7f6 fa46 	bl	8000e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800aa06:	2014      	movs	r0, #20
 800aa08:	f7f6 fa5d 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa0c:	bf00      	nop
 800aa0e:	3750      	adds	r7, #80	@ 0x50
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40005c00 	.word	0x40005c00
 800aa18:	40021000 	.word	0x40021000

0800aa1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800aa30:	4619      	mov	r1, r3
 800aa32:	4610      	mov	r0, r2
 800aa34:	f7fe fd9f 	bl	8009576 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800aa38:	bf00      	nop
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800aa52:	78fa      	ldrb	r2, [r7, #3]
 800aa54:	6879      	ldr	r1, [r7, #4]
 800aa56:	4613      	mov	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	440b      	add	r3, r1
 800aa60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	78fb      	ldrb	r3, [r7, #3]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	f7fe fdd9 	bl	8009620 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800aa6e:	bf00      	nop
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800aa88:	78fa      	ldrb	r2, [r7, #3]
 800aa8a:	6879      	ldr	r1, [r7, #4]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4413      	add	r3, r2
 800aa92:	00db      	lsls	r3, r3, #3
 800aa94:	440b      	add	r3, r1
 800aa96:	3324      	adds	r3, #36	@ 0x24
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	78fb      	ldrb	r3, [r7, #3]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	f7fe fe22 	bl	80096e6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b082      	sub	sp, #8
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fe ff36 	bl	800992a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aace:	2301      	movs	r3, #1
 800aad0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	795b      	ldrb	r3, [r3, #5]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d001      	beq.n	800aade <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aada:	f7f5 feb7 	bl	800084c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aae4:	7bfa      	ldrb	r2, [r7, #15]
 800aae6:	4611      	mov	r1, r2
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7fe fee0 	bl	80098ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fe fe8c 	bl	8009812 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800aafa:	bf00      	nop
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
	...

0800ab04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe fedb 	bl	80098ce <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	7a5b      	ldrb	r3, [r3, #9]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d005      	beq.n	800ab2c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab20:	4b04      	ldr	r3, [pc, #16]	@ (800ab34 <HAL_PCD_SuspendCallback+0x30>)
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	4a03      	ldr	r2, [pc, #12]	@ (800ab34 <HAL_PCD_SuspendCallback+0x30>)
 800ab26:	f043 0306 	orr.w	r3, r3, #6
 800ab2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ab2c:	bf00      	nop
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	e000ed00 	.word	0xe000ed00

0800ab38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	7a5b      	ldrb	r3, [r3, #9]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d007      	beq.n	800ab58 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab48:	4b08      	ldr	r3, [pc, #32]	@ (800ab6c <HAL_PCD_ResumeCallback+0x34>)
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	4a07      	ldr	r2, [pc, #28]	@ (800ab6c <HAL_PCD_ResumeCallback+0x34>)
 800ab4e:	f023 0306 	bic.w	r3, r3, #6
 800ab52:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ab54:	f000 f9c8 	bl	800aee8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe fecb 	bl	80098fa <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ab64:	bf00      	nop
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	e000ed00 	.word	0xe000ed00

0800ab70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ab78:	4a1e      	ldr	r2, [pc, #120]	@ (800abf4 <USBD_LL_Init+0x84>)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a1c      	ldr	r2, [pc, #112]	@ (800abf4 <USBD_LL_Init+0x84>)
 800ab84:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ab88:	4b1a      	ldr	r3, [pc, #104]	@ (800abf4 <USBD_LL_Init+0x84>)
 800ab8a:	4a1b      	ldr	r2, [pc, #108]	@ (800abf8 <USBD_LL_Init+0x88>)
 800ab8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab8e:	4b19      	ldr	r3, [pc, #100]	@ (800abf4 <USBD_LL_Init+0x84>)
 800ab90:	2208      	movs	r2, #8
 800ab92:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab94:	4b17      	ldr	r3, [pc, #92]	@ (800abf4 <USBD_LL_Init+0x84>)
 800ab96:	2202      	movs	r2, #2
 800ab98:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab9a:	4b16      	ldr	r3, [pc, #88]	@ (800abf4 <USBD_LL_Init+0x84>)
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800aba0:	4b14      	ldr	r3, [pc, #80]	@ (800abf4 <USBD_LL_Init+0x84>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aba6:	4b13      	ldr	r3, [pc, #76]	@ (800abf4 <USBD_LL_Init+0x84>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800abac:	4b11      	ldr	r3, [pc, #68]	@ (800abf4 <USBD_LL_Init+0x84>)
 800abae:	2200      	movs	r2, #0
 800abb0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800abb2:	4b10      	ldr	r3, [pc, #64]	@ (800abf4 <USBD_LL_Init+0x84>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800abb8:	480e      	ldr	r0, [pc, #56]	@ (800abf4 <USBD_LL_Init+0x84>)
 800abba:	f7f8 fa4e 	bl	800305a <HAL_PCD_Init>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800abc4:	f7f5 fe42 	bl	800084c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800abce:	2318      	movs	r3, #24
 800abd0:	2200      	movs	r2, #0
 800abd2:	2100      	movs	r1, #0
 800abd4:	f7f9 fe97 	bl	8004906 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800abde:	2358      	movs	r3, #88	@ 0x58
 800abe0:	2200      	movs	r2, #0
 800abe2:	2180      	movs	r1, #128	@ 0x80
 800abe4:	f7f9 fe8f 	bl	8004906 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	200007ec 	.word	0x200007ec
 800abf8:	40005c00 	.word	0x40005c00

0800abfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7f8 faef 	bl	80031f6 <HAL_PCD_Start>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 f968 	bl	800aef4 <USBD_Get_USB_Status>
 800ac24:	4603      	mov	r3, r0
 800ac26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7f8 faf6 	bl	800323a <HAL_PCD_Stop>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 f94d 	bl	800aef4 <USBD_Get_USB_Status>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	4608      	mov	r0, r1
 800ac72:	4611      	mov	r1, r2
 800ac74:	461a      	mov	r2, r3
 800ac76:	4603      	mov	r3, r0
 800ac78:	70fb      	strb	r3, [r7, #3]
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	70bb      	strb	r3, [r7, #2]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac82:	2300      	movs	r3, #0
 800ac84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ac90:	78bb      	ldrb	r3, [r7, #2]
 800ac92:	883a      	ldrh	r2, [r7, #0]
 800ac94:	78f9      	ldrb	r1, [r7, #3]
 800ac96:	f7f8 fc3d 	bl	8003514 <HAL_PCD_EP_Open>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac9e:	7bfb      	ldrb	r3, [r7, #15]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 f927 	bl	800aef4 <USBD_Get_USB_Status>
 800aca6:	4603      	mov	r3, r0
 800aca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	460b      	mov	r3, r1
 800acbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800acce:	78fa      	ldrb	r2, [r7, #3]
 800acd0:	4611      	mov	r1, r2
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7f8 fce5 	bl	80036a2 <HAL_PCD_EP_SetStall>
 800acd8:	4603      	mov	r3, r0
 800acda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acdc:	7bfb      	ldrb	r3, [r7, #15]
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 f908 	bl	800aef4 <USBD_Get_USB_Status>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	460b      	mov	r3, r1
 800acfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ad0c:	78fa      	ldrb	r2, [r7, #3]
 800ad0e:	4611      	mov	r1, r2
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7f8 fd18 	bl	8003746 <HAL_PCD_EP_ClrStall>
 800ad16:	4603      	mov	r3, r0
 800ad18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 f8e9 	bl	800aef4 <USBD_Get_USB_Status>
 800ad22:	4603      	mov	r3, r0
 800ad24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ad42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	da0b      	bge.n	800ad64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad4c:	78fb      	ldrb	r3, [r7, #3]
 800ad4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad52:	68f9      	ldr	r1, [r7, #12]
 800ad54:	4613      	mov	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	440b      	add	r3, r1
 800ad5e:	3312      	adds	r3, #18
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	e00b      	b.n	800ad7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad64:	78fb      	ldrb	r3, [r7, #3]
 800ad66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad6a:	68f9      	ldr	r1, [r7, #12]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	440b      	add	r3, r1
 800ad76:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ad7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ada2:	78fa      	ldrb	r2, [r7, #3]
 800ada4:	4611      	mov	r1, r2
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7f8 fb90 	bl	80034cc <HAL_PCD_SetAddress>
 800adac:	4603      	mov	r3, r0
 800adae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 f89e 	bl	800aef4 <USBD_Get_USB_Status>
 800adb8:	4603      	mov	r3, r0
 800adba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b086      	sub	sp, #24
 800adca:	af00      	add	r7, sp, #0
 800adcc:	60f8      	str	r0, [r7, #12]
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	603b      	str	r3, [r7, #0]
 800add2:	460b      	mov	r3, r1
 800add4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ade4:	7af9      	ldrb	r1, [r7, #11]
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	f7f8 fc23 	bl	8003634 <HAL_PCD_EP_Transmit>
 800adee:	4603      	mov	r3, r0
 800adf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 f87d 	bl	800aef4 <USBD_Get_USB_Status>
 800adfa:	4603      	mov	r3, r0
 800adfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adfe:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	607a      	str	r2, [r7, #4]
 800ae12:	603b      	str	r3, [r7, #0]
 800ae14:	460b      	mov	r3, r1
 800ae16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ae26:	7af9      	ldrb	r1, [r7, #11]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	f7f8 fbd1 	bl	80035d2 <HAL_PCD_EP_Receive>
 800ae30:	4603      	mov	r3, r0
 800ae32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae34:	7dfb      	ldrb	r3, [r7, #23]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 f85c 	bl	800aef4 <USBD_Get_USB_Status>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae40:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
	...

0800ae4c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ae58:	78fb      	ldrb	r3, [r7, #3]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <HAL_PCDEx_LPM_Callback+0x18>
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d013      	beq.n	800ae8a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ae62:	e023      	b.n	800aeac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	7a5b      	ldrb	r3, [r3, #9]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d007      	beq.n	800ae7c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ae6c:	f000 f83c 	bl	800aee8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae70:	4b10      	ldr	r3, [pc, #64]	@ (800aeb4 <HAL_PCDEx_LPM_Callback+0x68>)
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	4a0f      	ldr	r2, [pc, #60]	@ (800aeb4 <HAL_PCDEx_LPM_Callback+0x68>)
 800ae76:	f023 0306 	bic.w	r3, r3, #6
 800ae7a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fe fd39 	bl	80098fa <USBD_LL_Resume>
    break;
 800ae88:	e010      	b.n	800aeac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe fd1c 	bl	80098ce <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	7a5b      	ldrb	r3, [r3, #9]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d005      	beq.n	800aeaa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae9e:	4b05      	ldr	r3, [pc, #20]	@ (800aeb4 <HAL_PCDEx_LPM_Callback+0x68>)
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	4a04      	ldr	r2, [pc, #16]	@ (800aeb4 <HAL_PCDEx_LPM_Callback+0x68>)
 800aea4:	f043 0306 	orr.w	r3, r3, #6
 800aea8:	6113      	str	r3, [r2, #16]
    break;
 800aeaa:	bf00      	nop
}
 800aeac:	bf00      	nop
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	e000ed00 	.word	0xe000ed00

0800aeb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aec0:	4b03      	ldr	r3, [pc, #12]	@ (800aed0 <USBD_static_malloc+0x18>)
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	370c      	adds	r7, #12
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	20000ac8 	.word	0x20000ac8

0800aed4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]

}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800aeec:	f7f5 fb2e 	bl	800054c <SystemClock_Config>
}
 800aef0:	bf00      	nop
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	4603      	mov	r3, r0
 800aefc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af02:	79fb      	ldrb	r3, [r7, #7]
 800af04:	2b03      	cmp	r3, #3
 800af06:	d817      	bhi.n	800af38 <USBD_Get_USB_Status+0x44>
 800af08:	a201      	add	r2, pc, #4	@ (adr r2, 800af10 <USBD_Get_USB_Status+0x1c>)
 800af0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0e:	bf00      	nop
 800af10:	0800af21 	.word	0x0800af21
 800af14:	0800af27 	.word	0x0800af27
 800af18:	0800af2d 	.word	0x0800af2d
 800af1c:	0800af33 	.word	0x0800af33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af20:	2300      	movs	r3, #0
 800af22:	73fb      	strb	r3, [r7, #15]
    break;
 800af24:	e00b      	b.n	800af3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af26:	2303      	movs	r3, #3
 800af28:	73fb      	strb	r3, [r7, #15]
    break;
 800af2a:	e008      	b.n	800af3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af2c:	2301      	movs	r3, #1
 800af2e:	73fb      	strb	r3, [r7, #15]
    break;
 800af30:	e005      	b.n	800af3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af32:	2303      	movs	r3, #3
 800af34:	73fb      	strb	r3, [r7, #15]
    break;
 800af36:	e002      	b.n	800af3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af38:	2303      	movs	r3, #3
 800af3a:	73fb      	strb	r3, [r7, #15]
    break;
 800af3c:	bf00      	nop
  }
  return usb_status;
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <memset>:
 800af4c:	4402      	add	r2, r0
 800af4e:	4603      	mov	r3, r0
 800af50:	4293      	cmp	r3, r2
 800af52:	d100      	bne.n	800af56 <memset+0xa>
 800af54:	4770      	bx	lr
 800af56:	f803 1b01 	strb.w	r1, [r3], #1
 800af5a:	e7f9      	b.n	800af50 <memset+0x4>

0800af5c <__libc_init_array>:
 800af5c:	b570      	push	{r4, r5, r6, lr}
 800af5e:	4d0d      	ldr	r5, [pc, #52]	@ (800af94 <__libc_init_array+0x38>)
 800af60:	4c0d      	ldr	r4, [pc, #52]	@ (800af98 <__libc_init_array+0x3c>)
 800af62:	1b64      	subs	r4, r4, r5
 800af64:	10a4      	asrs	r4, r4, #2
 800af66:	2600      	movs	r6, #0
 800af68:	42a6      	cmp	r6, r4
 800af6a:	d109      	bne.n	800af80 <__libc_init_array+0x24>
 800af6c:	4d0b      	ldr	r5, [pc, #44]	@ (800af9c <__libc_init_array+0x40>)
 800af6e:	4c0c      	ldr	r4, [pc, #48]	@ (800afa0 <__libc_init_array+0x44>)
 800af70:	f000 f818 	bl	800afa4 <_init>
 800af74:	1b64      	subs	r4, r4, r5
 800af76:	10a4      	asrs	r4, r4, #2
 800af78:	2600      	movs	r6, #0
 800af7a:	42a6      	cmp	r6, r4
 800af7c:	d105      	bne.n	800af8a <__libc_init_array+0x2e>
 800af7e:	bd70      	pop	{r4, r5, r6, pc}
 800af80:	f855 3b04 	ldr.w	r3, [r5], #4
 800af84:	4798      	blx	r3
 800af86:	3601      	adds	r6, #1
 800af88:	e7ee      	b.n	800af68 <__libc_init_array+0xc>
 800af8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af8e:	4798      	blx	r3
 800af90:	3601      	adds	r6, #1
 800af92:	e7f2      	b.n	800af7a <__libc_init_array+0x1e>
 800af94:	0800b07c 	.word	0x0800b07c
 800af98:	0800b07c 	.word	0x0800b07c
 800af9c:	0800b07c 	.word	0x0800b07c
 800afa0:	0800b080 	.word	0x0800b080

0800afa4 <_init>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	bf00      	nop
 800afa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afaa:	bc08      	pop	{r3}
 800afac:	469e      	mov	lr, r3
 800afae:	4770      	bx	lr

0800afb0 <_fini>:
 800afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb2:	bf00      	nop
 800afb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb6:	bc08      	pop	{r3}
 800afb8:	469e      	mov	lr, r3
 800afba:	4770      	bx	lr
