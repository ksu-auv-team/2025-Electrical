
Torpedo Controller - Juan Garnica - 8-5-2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e0c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08009fe4  08009fe4  0000afe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0a4  0800a0a4  0000c0e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a0a4  0800a0a4  0000c0e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a0a4  0800a0a4  0000c0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0a4  0800a0a4  0000b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0a8  0800a0a8  0000b0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0800a0ac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d9c  200000e0  0800a18c  0000c0e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e7c  0800a18c  0000ce7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ce5  00000000  00000000  0000c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d42  00000000  00000000  00024df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  00028b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011aa  00000000  00000000  0002a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021035  00000000  00000000  0002b3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7df  00000000  00000000  0004c41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7d03  00000000  00000000  00068bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006014  00000000  00000000  00130944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00136958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009fcc 	.word	0x08009fcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e4 	.word	0x200000e4
 8000214:	08009fcc 	.word	0x08009fcc

08000218 <process_data>:
int countAddr = 0;
int countrxcplt = 0;
int counterror = 0;

void process_data (void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0

	int startREG = RxData[0];  // get the register address
 800021e:	4b16      	ldr	r3, [pc, #88]	@ (8000278 <process_data+0x60>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	617b      	str	r3, [r7, #20]
	int numREG = rxcount-1;  // Get the number of registers
 8000224:	4b15      	ldr	r3, [pc, #84]	@ (800027c <process_data+0x64>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3b01      	subs	r3, #1
 800022a:	60bb      	str	r3, [r7, #8]
	int endREG = startREG + numREG -1;  // calculate the end register
 800022c:	697a      	ldr	r2, [r7, #20]
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	4413      	add	r3, r2
 8000232:	3b01      	subs	r3, #1
 8000234:	607b      	str	r3, [r7, #4]
	if (endREG>9)  // There are a total of 10 registers (0-9)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2b09      	cmp	r3, #9
 800023a:	dd01      	ble.n	8000240 <process_data+0x28>
	{
		Error_Handler();
 800023c:	f000 f9fc 	bl	8000638 <Error_Handler>
	}

	int indx = 1;  // set the indx to 1 in order to start reading from RxData[1]
 8000240:	2301      	movs	r3, #1
 8000242:	613b      	str	r3, [r7, #16]
	for (int i=0; i<numREG; i++)
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e00c      	b.n	8000264 <process_data+0x4c>
	{
		I2C_REGISTERS[startREG++] = RxData[indx++];  // Read the data from RxData and save it in the I2C_REGISTERS
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	1c53      	adds	r3, r2, #1
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	1c59      	adds	r1, r3, #1
 8000254:	6179      	str	r1, [r7, #20]
 8000256:	4908      	ldr	r1, [pc, #32]	@ (8000278 <process_data+0x60>)
 8000258:	5c89      	ldrb	r1, [r1, r2]
 800025a:	4a09      	ldr	r2, [pc, #36]	@ (8000280 <process_data+0x68>)
 800025c:	54d1      	strb	r1, [r2, r3]
	for (int i=0; i<numREG; i++)
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	3301      	adds	r3, #1
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	429a      	cmp	r2, r3
 800026a:	dbee      	blt.n	800024a <process_data+0x32>
	}
}
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	3718      	adds	r7, #24
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000104 	.word	0x20000104
 800027c:	20000106 	.word	0x20000106
 8000280:	200000fc 	.word	0x200000fc

08000284 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) // Puts to listen mode to look for req from master
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f001 f83f 	bl	8001310 <HAL_I2C_EnableListen_IT>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	460b      	mov	r3, r1
 80002a6:	70fb      	strb	r3, [r7, #3]
 80002a8:	4613      	mov	r3, r2
 80002aa:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d10d      	bne.n	80002ce <HAL_I2C_AddrCallback+0x32>
	{
		rxcount = 0;
 80002b2:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <HAL_I2C_AddrCallback+0x40>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 80002b8:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <HAL_I2C_AddrCallback+0x40>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	461a      	mov	r2, r3
 80002be:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <HAL_I2C_AddrCallback+0x44>)
 80002c0:	18d1      	adds	r1, r2, r3
 80002c2:	2300      	movs	r3, #0
 80002c4:	2201      	movs	r2, #1
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f000 ff70 	bl	80011ac <HAL_I2C_Slave_Seq_Receive_IT>

	else
	{
		Error_Handler();
	}
}
 80002cc:	e001      	b.n	80002d2 <HAL_I2C_AddrCallback+0x36>
		Error_Handler();
 80002ce:	f000 f9b3 	bl	8000638 <Error_Handler>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000106 	.word	0x20000106
 80002e0:	20000104 	.word	0x20000104

080002e4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	rxcount++;
 80002ec:	4b17      	ldr	r3, [pc, #92]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	3301      	adds	r3, #1
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002f6:	701a      	strb	r2, [r3, #0]
	if (rxcount < RxSIZE)
 80002f8:	4b14      	ldr	r3, [pc, #80]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d81a      	bhi.n	8000336 <HAL_I2C_SlaveRxCpltCallback+0x52>
	{
		if (rxcount == RxSIZE-1)
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d10b      	bne.n	8000320 <HAL_I2C_SlaveRxCpltCallback+0x3c>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 8000308:	4b10      	ldr	r3, [pc, #64]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8000310:	18d1      	adds	r1, r2, r3
 8000312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000316:	2201      	movs	r2, #1
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 ff47 	bl	80011ac <HAL_I2C_Slave_Seq_Receive_IT>
 800031e:	e00a      	b.n	8000336 <HAL_I2C_SlaveRxCpltCallback+0x52>
		}
		else
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 8000320:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8000328:	18d1      	adds	r1, r2, r3
 800032a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800032e:	2201      	movs	r2, #1
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f000 ff3b 	bl	80011ac <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (rxcount == RxSIZE)
 8000336:	4b05      	ldr	r3, [pc, #20]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d101      	bne.n	8000342 <HAL_I2C_SlaveRxCpltCallback+0x5e>
	{
		process_data();
 800033e:	f7ff ff6b 	bl	8000218 <process_data>
	}
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000106 	.word	0x20000106
 8000350:	20000104 	.word	0x20000104

08000354 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	counterror++;
 800035c:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <HAL_I2C_ErrorCallback+0x34>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <HAL_I2C_ErrorCallback+0x34>)
 8000364:	6013      	str	r3, [r2, #0]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f001 f8a9 	bl	80014be <HAL_I2C_GetError>
 800036c:	60f8      	str	r0, [r7, #12]
	if (errorcode == 4)  // AF error
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	2b04      	cmp	r3, #4
 8000372:	d101      	bne.n	8000378 <HAL_I2C_ErrorCallback+0x24>
	{
		process_data();
 8000374:	f7ff ff50 	bl	8000218 <process_data>
	}
	HAL_I2C_EnableListen_IT(hi2c);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f000 ffc9 	bl	8001310 <HAL_I2C_EnableListen_IT>
}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000108 	.word	0x20000108

0800038c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000390:	f000 fabf 	bl	8000912 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000394:	f000 f816 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000398:	f000 f904 	bl	80005a4 <MX_GPIO_Init>
  MX_I2C2_Init();
 800039c:	f000 f85e 	bl	800045c <MX_I2C2_Init>
  MX_TIM2_Init();
 80003a0:	f000 f89c 	bl	80004dc <MX_TIM2_Init>
  MX_USB_Device_Init();
 80003a4:	f009 f98c 	bl	80096c0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK) //Entrs slav to listen for master requests
 80003a8:	4805      	ldr	r0, [pc, #20]	@ (80003c0 <main+0x34>)
 80003aa:	f000 ffb1 	bl	8001310 <HAL_I2C_EnableListen_IT>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <main+0x2e>
  {
	  Error_Handler();
 80003b4:	f000 f940 	bl	8000638 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	bf00      	nop
 80003bc:	e7fd      	b.n	80003ba <main+0x2e>
 80003be:	bf00      	nop
 80003c0:	2000010c 	.word	0x2000010c

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b094      	sub	sp, #80	@ 0x50
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	2238      	movs	r2, #56	@ 0x38
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f009 fdce 	bl	8009f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003ea:	f003 ffed 	bl	80043c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ee:	2302      	movs	r3, #2
 80003f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f8:	2340      	movs	r3, #64	@ 0x40
 80003fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	2302      	movs	r3, #2
 80003fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000400:	2302      	movs	r3, #2
 8000402:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000404:	2301      	movs	r3, #1
 8000406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000408:	230c      	movs	r3, #12
 800040a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800040c:	2302      	movs	r3, #2
 800040e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000410:	2304      	movs	r3, #4
 8000412:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000414:	2302      	movs	r3, #2
 8000416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0318 	add.w	r3, r7, #24
 800041c:	4618      	mov	r0, r3
 800041e:	f004 f887 	bl	8004530 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000428:	f000 f906 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
 800042e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000430:	2301      	movs	r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f004 fb85 	bl	8004b54 <HAL_RCC_ClockConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000450:	f000 f8f2 	bl	8000638 <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3750      	adds	r7, #80	@ 0x50
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000460:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000462:	4a1c      	ldr	r2, [pc, #112]	@ (80004d4 <MX_I2C2_Init+0x78>)
 8000464:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000466:	4b1a      	ldr	r3, [pc, #104]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000468:	4a1b      	ldr	r2, [pc, #108]	@ (80004d8 <MX_I2C2_Init+0x7c>)
 800046a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 158;
 800046c:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <MX_I2C2_Init+0x74>)
 800046e:	229e      	movs	r2, #158	@ 0x9e
 8000470:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000472:	4b17      	ldr	r3, [pc, #92]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000474:	2201      	movs	r2, #1
 8000476:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000478:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <MX_I2C2_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800047e:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000484:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <MX_I2C2_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000490:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000496:	480e      	ldr	r0, [pc, #56]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000498:	f000 fdec 	bl	8001074 <HAL_I2C_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80004a2:	f000 f8c9 	bl	8000638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004a6:	2100      	movs	r1, #0
 80004a8:	4809      	ldr	r0, [pc, #36]	@ (80004d0 <MX_I2C2_Init+0x74>)
 80004aa:	f002 fa33 	bl	8002914 <HAL_I2CEx_ConfigAnalogFilter>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004b4:	f000 f8c0 	bl	8000638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004b8:	2100      	movs	r1, #0
 80004ba:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <MX_I2C2_Init+0x74>)
 80004bc:	f002 fa75 	bl	80029aa <HAL_I2CEx_ConfigDigitalFilter>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f8b7 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	2000010c 	.word	0x2000010c
 80004d4:	40005800 	.word	0x40005800
 80004d8:	00503d58 	.word	0x00503d58

080004dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	@ 0x28
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ee:	463b      	mov	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
 80004fc:	615a      	str	r2, [r3, #20]
 80004fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000500:	4b27      	ldr	r3, [pc, #156]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000502:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000506:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8000508:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 800050a:	f240 623f 	movw	r2, #1599	@ 0x63f
 800050e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000510:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000516:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000518:	2263      	movs	r2, #99	@ 0x63
 800051a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051c:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000522:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000528:	481d      	ldr	r0, [pc, #116]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 800052a:	f004 fee7 	bl	80052fc <HAL_TIM_PWM_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000534:	f000 f880 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	4619      	mov	r1, r3
 8000546:	4816      	ldr	r0, [pc, #88]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000548:	f005 fbd6 	bl	8005cf8 <HAL_TIMEx_MasterConfigSynchronization>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000552:	f000 f871 	bl	8000638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000556:	2360      	movs	r3, #96	@ 0x60
 8000558:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	4619      	mov	r1, r3
 800056c:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 800056e:	f004 ff1d 	bl	80053ac <HAL_TIM_PWM_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000578:	f000 f85e 	bl	8000638 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	2204      	movs	r2, #4
 8000580:	4619      	mov	r1, r3
 8000582:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000584:	f004 ff12 	bl	80053ac <HAL_TIM_PWM_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800058e:	f000 f853 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000592:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000594:	f000 f900 	bl	8000798 <HAL_TIM_MspPostInit>

}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	@ 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000160 	.word	0x20000160

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	4a1d      	ldr	r2, [pc, #116]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005c0:	f043 0320 	orr.w	r3, r3, #32
 80005c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	f003 0320 	and.w	r3, r3, #32
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	4a17      	ldr	r2, [pc, #92]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	4a11      	ldr	r2, [pc, #68]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2101      	movs	r1, #1
 8000606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060a:	f000 fd1b 	bl	8001044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060e:	2301      	movs	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000628:	f000 fb8a 	bl	8000d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <Error_Handler+0x8>

08000644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <HAL_MspInit+0x44>)
 800064c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800064e:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <HAL_MspInit+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6613      	str	r3, [r2, #96]	@ 0x60
 8000656:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <HAL_MspInit+0x44>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <HAL_MspInit+0x44>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000666:	4a08      	ldr	r2, [pc, #32]	@ (8000688 <HAL_MspInit+0x44>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066c:	6593      	str	r3, [r2, #88]	@ 0x58
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_MspInit+0x44>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800067a:	f003 ff49 	bl	8004510 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09a      	sub	sp, #104	@ 0x68
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2244      	movs	r2, #68	@ 0x44
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f009 fc61 	bl	8009f74 <memset>
  if(hi2c->Instance==I2C2)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a27      	ldr	r2, [pc, #156]	@ (8000754 <HAL_I2C_MspInit+0xc8>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d147      	bne.n	800074c <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006bc:	2380      	movs	r3, #128	@ 0x80
 80006be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fc27 	bl	8004f1c <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006d4:	f7ff ffb0 	bl	8000638 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 80006da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f6:	2312      	movs	r3, #18
 80006f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000702:	2304      	movs	r3, #4
 8000704:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800070a:	4619      	mov	r1, r3
 800070c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000710:	f000 fb16 	bl	8000d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000714:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 8000716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000718:	4a0f      	ldr	r2, [pc, #60]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 800071a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800071e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000720:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 8000722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	2021      	movs	r0, #33	@ 0x21
 8000732:	f000 fa5c 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000736:	2021      	movs	r0, #33	@ 0x21
 8000738:	f000 fa73 	bl	8000c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2022      	movs	r0, #34	@ 0x22
 8000742:	f000 fa54 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000746:	2022      	movs	r0, #34	@ 0x22
 8000748:	f000 fa6b 	bl	8000c22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800074c:	bf00      	nop
 800074e:	3768      	adds	r7, #104	@ 0x68
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40005800 	.word	0x40005800
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800076c:	d10b      	bne.n	8000786 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <HAL_TIM_PWM_MspInit+0x38>)
 8000770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000772:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <HAL_TIM_PWM_MspInit+0x38>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6593      	str	r3, [r2, #88]	@ 0x58
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_TIM_PWM_MspInit+0x38>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007b8:	d11c      	bne.n	80007f4 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <HAL_TIM_MspPostInit+0x64>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a0f      	ldr	r2, [pc, #60]	@ (80007fc <HAL_TIM_MspPostInit+0x64>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <HAL_TIM_MspPostInit+0x64>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80007d2:	2322      	movs	r3, #34	@ 0x22
 80007d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f0:	f000 faa6 	bl	8000d40 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <NMI_Handler+0x4>

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <MemManage_Handler+0x4>

08000818 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <UsageFault_Handler+0x4>

08000828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000856:	f000 f8af 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000864:	4802      	ldr	r0, [pc, #8]	@ (8000870 <USB_LP_IRQHandler+0x10>)
 8000866:	f002 f9fe 	bl	8002c66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000780 	.word	0x20000780

08000874 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000878:	4802      	ldr	r0, [pc, #8]	@ (8000884 <I2C2_EV_IRQHandler+0x10>)
 800087a:	f000 fd69 	bl	8001350 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000010c 	.word	0x2000010c

08000888 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800088c:	4802      	ldr	r0, [pc, #8]	@ (8000898 <I2C2_ER_IRQHandler+0x10>)
 800088e:	f000 fd79 	bl	8001384 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000010c 	.word	0x2000010c

0800089c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c0:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c4:	f7ff ffea 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	@ (8000900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	@ (800090c <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80008ee:	f009 fb49 	bl	8009f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008f2:	f7ff fd4b 	bl	800038c <main>

080008f6 <LoopForever>:

LoopForever:
    b LoopForever
 80008f6:	e7fe      	b.n	80008f6 <LoopForever>
  ldr   r0, =_estack
 80008f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8000904:	0800a0ac 	.word	0x0800a0ac
  ldr r2, =_sbss
 8000908:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 800090c:	20000e7c 	.word	0x20000e7c

08000910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC1_2_IRQHandler>

08000912 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000918:	2300      	movs	r3, #0
 800091a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f95b 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000922:	200f      	movs	r0, #15
 8000924:	f000 f80e 	bl	8000944 <HAL_InitTick>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	e001      	b.n	8000938 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000934:	f7ff fe86 	bl	8000644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000938:	79fb      	ldrb	r3, [r7, #7]

}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000950:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <HAL_InitTick+0x68>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d022      	beq.n	800099e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <HAL_InitTick+0x6c>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <HAL_InitTick+0x68>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000964:	fbb1 f3f3 	udiv	r3, r1, r3
 8000968:	fbb2 f3f3 	udiv	r3, r2, r3
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f966 	bl	8000c3e <HAL_SYSTICK_Config>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d10f      	bne.n	8000998 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	d809      	bhi.n	8000992 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097e:	2200      	movs	r2, #0
 8000980:	6879      	ldr	r1, [r7, #4]
 8000982:	f04f 30ff 	mov.w	r0, #4294967295
 8000986:	f000 f932 	bl	8000bee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <HAL_InitTick+0x70>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e007      	b.n	80009a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e004      	b.n	80009a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	e001      	b.n	80009a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_IncTick+0x1c>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <HAL_IncTick+0x20>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a03      	ldr	r2, [pc, #12]	@ (80009d4 <HAL_IncTick+0x1c>)
 80009c8:	6013      	str	r3, [r2, #0]
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	200001ac 	.word	0x200001ac
 80009d8:	20000008 	.word	0x20000008

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	200001ac 	.word	0x200001ac

080009f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009fc:	f7ff ffee 	bl	80009dc <HAL_GetTick>
 8000a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0c:	d004      	beq.n	8000a18 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_Delay+0x40>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4413      	add	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a18:	bf00      	nop
 8000a1a:	f7ff ffdf 	bl	80009dc <HAL_GetTick>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d8f7      	bhi.n	8000a1a <HAL_Delay+0x26>
  {
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000008 	.word	0x20000008

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db0b      	blt.n	8000ac6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f003 021f 	and.w	r2, r3, #31
 8000ab4:	4907      	ldr	r1, [pc, #28]	@ (8000ad4 <__NVIC_EnableIRQ+0x38>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	095b      	lsrs	r3, r3, #5
 8000abc:	2001      	movs	r0, #1
 8000abe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	@ (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	@ (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	@ 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	@ 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff8e 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff29 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfc:	f7ff ff40 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f7ff ff90 	bl	8000b2c <NVIC_EncodePriority>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff5f 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff33 	bl	8000a9c <__NVIC_EnableIRQ>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffa4 	bl	8000b94 <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d00d      	beq.n	8000c8a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2204      	movs	r2, #4
 8000c72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e047      	b.n	8000d1a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 020e 	bic.w	r2, r2, #14
 8000c98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 0201 	bic.w	r2, r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000cb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	f003 021f 	and.w	r2, r3, #31
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000cd6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00c      	beq.n	8000cfa <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000cee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000cf8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	4798      	blx	r3
    }
  }
  return status;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d32:	b2db      	uxtb	r3, r3
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d4e:	e15a      	b.n	8001006 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 814c 	beq.w	8001000 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d005      	beq.n	8000d80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d130      	bne.n	8000de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db6:	2201      	movs	r2, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	f003 0201 	and.w	r2, r3, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d017      	beq.n	8000e1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d123      	bne.n	8000e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	691a      	ldr	r2, [r3, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	6939      	ldr	r1, [r7, #16]
 8000e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0203 	and.w	r2, r3, #3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 80a6 	beq.w	8001000 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	4b5b      	ldr	r3, [pc, #364]	@ (8001024 <HAL_GPIO_Init+0x2e4>)
 8000eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb8:	4a5a      	ldr	r2, [pc, #360]	@ (8001024 <HAL_GPIO_Init+0x2e4>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec0:	4b58      	ldr	r3, [pc, #352]	@ (8001024 <HAL_GPIO_Init+0x2e4>)
 8000ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ecc:	4a56      	ldr	r2, [pc, #344]	@ (8001028 <HAL_GPIO_Init+0x2e8>)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ef6:	d01f      	beq.n	8000f38 <HAL_GPIO_Init+0x1f8>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a4c      	ldr	r2, [pc, #304]	@ (800102c <HAL_GPIO_Init+0x2ec>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d019      	beq.n	8000f34 <HAL_GPIO_Init+0x1f4>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a4b      	ldr	r2, [pc, #300]	@ (8001030 <HAL_GPIO_Init+0x2f0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d013      	beq.n	8000f30 <HAL_GPIO_Init+0x1f0>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a4a      	ldr	r2, [pc, #296]	@ (8001034 <HAL_GPIO_Init+0x2f4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d00d      	beq.n	8000f2c <HAL_GPIO_Init+0x1ec>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a49      	ldr	r2, [pc, #292]	@ (8001038 <HAL_GPIO_Init+0x2f8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0x1e8>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a48      	ldr	r2, [pc, #288]	@ (800103c <HAL_GPIO_Init+0x2fc>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d101      	bne.n	8000f24 <HAL_GPIO_Init+0x1e4>
 8000f20:	2305      	movs	r3, #5
 8000f22:	e00a      	b.n	8000f3a <HAL_GPIO_Init+0x1fa>
 8000f24:	2306      	movs	r3, #6
 8000f26:	e008      	b.n	8000f3a <HAL_GPIO_Init+0x1fa>
 8000f28:	2304      	movs	r3, #4
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x1fa>
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e004      	b.n	8000f3a <HAL_GPIO_Init+0x1fa>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0x1fa>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_GPIO_Init+0x1fa>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	f002 0203 	and.w	r2, r2, #3
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	4093      	lsls	r3, r2
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f4a:	4937      	ldr	r1, [pc, #220]	@ (8001028 <HAL_GPIO_Init+0x2e8>)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f58:	4b39      	ldr	r3, [pc, #228]	@ (8001040 <HAL_GPIO_Init+0x300>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f7c:	4a30      	ldr	r2, [pc, #192]	@ (8001040 <HAL_GPIO_Init+0x300>)
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f82:	4b2f      	ldr	r3, [pc, #188]	@ (8001040 <HAL_GPIO_Init+0x300>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fa6:	4a26      	ldr	r2, [pc, #152]	@ (8001040 <HAL_GPIO_Init+0x300>)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000fac:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <HAL_GPIO_Init+0x300>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001040 <HAL_GPIO_Init+0x300>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_GPIO_Init+0x300>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ffa:	4a11      	ldr	r2, [pc, #68]	@ (8001040 <HAL_GPIO_Init+0x300>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	f47f ae9d 	bne.w	8000d50 <HAL_GPIO_Init+0x10>
  }
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	48000400 	.word	0x48000400
 8001030:	48000800 	.word	0x48000800
 8001034:	48000c00 	.word	0x48000c00
 8001038:	48001000 	.word	0x48001000
 800103c:	48001400 	.word	0x48001400
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001060:	e002      	b.n	8001068 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e08d      	b.n	80011a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d106      	bne.n	80010a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff faf6 	bl	800068c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2224      	movs	r2, #36	@ 0x24
 80010a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d107      	bne.n	80010ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	e006      	b.n	80010fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80010fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d108      	bne.n	8001116 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	e007      	b.n	8001126 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001124:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001138:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001148:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69d9      	ldr	r1, [r3, #28]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2220      	movs	r2, #32
 800118e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80011c8:	2b28      	cmp	r3, #40	@ 0x28
 80011ca:	f040 8098 	bne.w	80012fe <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d105      	bne.n	80011e6 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e08c      	b.n	8001300 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80011e6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f001 fb34 	bl	8002858 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e080      	b.n	8001300 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b29      	cmp	r3, #41	@ 0x29
 8001210:	d12a      	bne.n	8001268 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001212:	2101      	movs	r1, #1
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f001 fb1f 	bl	8002858 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001228:	d11e      	bne.n	8001268 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001238:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800123e:	2b00      	cmp	r3, #0
 8001240:	d012      	beq.n	8001268 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001246:	4a30      	ldr	r2, [pc, #192]	@ (8001308 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001248:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fd01 	bl	8000c56 <HAL_DMA_Abort_IT>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d006      	beq.n	8001268 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800125e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001264:	4610      	mov	r0, r2
 8001266:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	222a      	movs	r2, #42	@ 0x2a
 800126c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2220      	movs	r2, #32
 8001274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800128c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	88fa      	ldrh	r2, [r7, #6]
 8001298:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800129e:	b29a      	uxth	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4a17      	ldr	r2, [pc, #92]	@ (800130c <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80012ae:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	bf0c      	ite	eq
 80012be:	2301      	moveq	r3, #1
 80012c0:	2300      	movne	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	0c1b      	lsrs	r3, r3, #16
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d106      	bne.n	80012e8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2208      	movs	r2, #8
 80012e6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80012f0:	f248 0102 	movw	r1, #32770	@ 0x8002
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f001 fa2b 	bl	8002750 <I2C_Enable_IRQ>

    return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
  }
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	080026af 	.word	0x080026af
 800130c:	080014d7 	.word	0x080014d7

08001310 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b20      	cmp	r3, #32
 8001322:	d10d      	bne.n	8001340 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2228      	movs	r2, #40	@ 0x28
 8001328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a07      	ldr	r2, [pc, #28]	@ (800134c <HAL_I2C_EnableListen_IT+0x3c>)
 8001330:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001332:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f001 fa0a 	bl	8002750 <I2C_Enable_IRQ>

    return HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	e000      	b.n	8001342 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001340:	2302      	movs	r3, #2
  }
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	080014d7 	.word	0x080014d7

08001350 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	68f9      	ldr	r1, [r7, #12]
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4798      	blx	r3
  }
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d010      	beq.n	80013ca <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	09db      	lsrs	r3, r3, #7
 80013ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00a      	beq.n	80013ca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013c8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	0a9b      	lsrs	r3, r3, #10
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d010      	beq.n	80013f8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	09db      	lsrs	r3, r3, #7
 80013da:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00a      	beq.n	80013f8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f043 0208 	orr.w	r2, r3, #8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	0a5b      	lsrs	r3, r3, #9
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d010      	beq.n	8001426 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	09db      	lsrs	r3, r3, #7
 8001408:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00a      	beq.n	8001426 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001414:	f043 0202 	orr.w	r2, r3, #2
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001424:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 030b 	and.w	r3, r3, #11
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fffd 	bl	8002438 <I2C_ITError>
  }
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <I2C_Slave_ISR_IT+0x24>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e0ed      	b.n	80016d6 <I2C_Slave_ISR_IT+0x200>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	095b      	lsrs	r3, r3, #5
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00a      	beq.n	8001524 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	095b      	lsrs	r3, r3, #5
 8001512:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800151a:	6939      	ldr	r1, [r7, #16]
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 fdcb 	bl	80020b8 <I2C_ITSlaveCplt>
 8001522:	e0d3      	b.n	80016cc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d04d      	beq.n	80015cc <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001538:	2b00      	cmp	r3, #0
 800153a:	d047      	beq.n	80015cc <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001540:	b29b      	uxth	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d128      	bne.n	8001598 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b28      	cmp	r3, #40	@ 0x28
 8001550:	d108      	bne.n	8001564 <I2C_Slave_ISR_IT+0x8e>
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001558:	d104      	bne.n	8001564 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800155a:	6939      	ldr	r1, [r7, #16]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 ff15 	bl	800238c <I2C_ITListenCplt>
 8001562:	e032      	b.n	80015ca <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b29      	cmp	r3, #41	@ 0x29
 800156e:	d10e      	bne.n	800158e <I2C_Slave_ISR_IT+0xb8>
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001576:	d00a      	beq.n	800158e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2210      	movs	r2, #16
 800157e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f001 f870 	bl	8002666 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fc6e 	bl	8001e68 <I2C_ITSlaveSeqCplt>
 800158c:	e01d      	b.n	80015ca <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2210      	movs	r2, #16
 8001594:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001596:	e096      	b.n	80016c6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2210      	movs	r2, #16
 800159e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a4:	f043 0204 	orr.w	r2, r3, #4
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d004      	beq.n	80015bc <I2C_Slave_ISR_IT+0xe6>
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015b8:	f040 8085 	bne.w	80016c6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c0:	4619      	mov	r1, r3
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 ff38 	bl	8002438 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80015c8:	e07d      	b.n	80016c6 <I2C_Slave_ISR_IT+0x1f0>
 80015ca:	e07c      	b.n	80016c6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d030      	beq.n	800163a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d02a      	beq.n	800163a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d018      	beq.n	8001620 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800160a:	3b01      	subs	r3, #1
 800160c:	b29a      	uxth	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001624:	b29b      	uxth	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d14f      	bne.n	80016ca <I2C_Slave_ISR_IT+0x1f4>
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001630:	d04b      	beq.n	80016ca <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 fc18 	bl	8001e68 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001638:	e047      	b.n	80016ca <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	08db      	lsrs	r3, r3, #3
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00a      	beq.n	800165c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001652:	6939      	ldr	r1, [r7, #16]
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 fb46 	bl	8001ce6 <I2C_ITAddrCplt>
 800165a:	e037      	b.n	80016cc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	085b      	lsrs	r3, r3, #1
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d031      	beq.n	80016cc <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	085b      	lsrs	r3, r3, #1
 800166c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001670:	2b00      	cmp	r3, #0
 8001672:	d02b      	beq.n	80016cc <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001678:	b29b      	uxth	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d018      	beq.n	80016b0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001698:	b29b      	uxth	r3, r3
 800169a:	3b01      	subs	r3, #1
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a6:	3b01      	subs	r3, #1
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	851a      	strh	r2, [r3, #40]	@ 0x28
 80016ae:	e00d      	b.n	80016cc <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b6:	d002      	beq.n	80016be <I2C_Slave_ISR_IT+0x1e8>
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d106      	bne.n	80016cc <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 fbd2 	bl	8001e68 <I2C_ITSlaveSeqCplt>
 80016c4:	e002      	b.n	80016cc <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80016c6:	bf00      	nop
 80016c8:	e000      	b.n	80016cc <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80016ca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b088      	sub	sp, #32
 80016e2:	af02      	add	r7, sp, #8
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <I2C_Master_ISR_DMA+0x1a>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e0e1      	b.n	80018bc <I2C_Master_ISR_DMA+0x1de>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d017      	beq.n	800173c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001714:	2b00      	cmp	r3, #0
 8001716:	d011      	beq.n	800173c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2210      	movs	r2, #16
 800171e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001724:	f043 0204 	orr.w	r2, r3, #4
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800172c:	2120      	movs	r1, #32
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f001 f80e 	bl	8002750 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 ff96 	bl	8002666 <I2C_Flush_TXDR>
 800173a:	e0ba      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	09db      	lsrs	r3, r3, #7
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d072      	beq.n	800182e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	099b      	lsrs	r3, r3, #6
 800174c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001750:	2b00      	cmp	r3, #0
 8001752:	d06c      	beq.n	800182e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001762:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001768:	b29b      	uxth	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d04e      	beq.n	800180c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	b29b      	uxth	r3, r3
 8001776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800177a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001780:	b29b      	uxth	r3, r3
 8001782:	2bff      	cmp	r3, #255	@ 0xff
 8001784:	d906      	bls.n	8001794 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	22ff      	movs	r2, #255	@ 0xff
 800178a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800178c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e010      	b.n	80017b6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80017a6:	d003      	beq.n	80017b0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e002      	b.n	80017b6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80017b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017b4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	8a79      	ldrh	r1, [r7, #18]
 80017be:	2300      	movs	r3, #0
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 ff91 	bl	80026ec <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b22      	cmp	r3, #34	@ 0x22
 80017e6:	d108      	bne.n	80017fa <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017f6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80017f8:	e05b      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001808:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800180a:	e052      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800181a:	d003      	beq.n	8001824 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 fae6 	bl	8001dee <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001822:	e046      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001824:	2140      	movs	r1, #64	@ 0x40
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 fe06 	bl	8002438 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800182c:	e041      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d029      	beq.n	800188e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	099b      	lsrs	r3, r3, #6
 800183e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001842:	2b00      	cmp	r3, #0
 8001844:	d023      	beq.n	800188e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d119      	bne.n	8001884 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800185e:	d027      	beq.n	80018b0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001868:	d108      	bne.n	800187c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001878:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800187a:	e019      	b.n	80018b0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 fab6 	bl	8001dee <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001882:	e015      	b.n	80018b0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001884:	2140      	movs	r1, #64	@ 0x40
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 fdd6 	bl	8002438 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800188c:	e010      	b.n	80018b0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 fb3b 	bl	8001f24 <I2C_ITMasterCplt>
 80018ae:	e000      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80018b0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80018d0:	4b92      	ldr	r3, [pc, #584]	@ (8001b1c <I2C_Mem_ISR_DMA+0x258>)
 80018d2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <I2C_Mem_ISR_DMA+0x1e>
 80018de:	2302      	movs	r3, #2
 80018e0:	e118      	b.n	8001b14 <I2C_Mem_ISR_DMA+0x250>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d017      	beq.n	8001926 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d011      	beq.n	8001926 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2210      	movs	r2, #16
 8001908:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f043 0204 	orr.w	r2, r3, #4
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001916:	2120      	movs	r1, #32
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 ff19 	bl	8002750 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 fea1 	bl	8002666 <I2C_Flush_TXDR>
 8001924:	e0f1      	b.n	8001b0a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00f      	beq.n	8001952 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f04f 32ff 	mov.w	r2, #4294967295
 800194e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001950:	e0db      	b.n	8001b0a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	09db      	lsrs	r3, r3, #7
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d060      	beq.n	8001a20 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001966:	2b00      	cmp	r3, #0
 8001968:	d05a      	beq.n	8001a20 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800196a:	2101      	movs	r1, #1
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 ff73 	bl	8002858 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001972:	2110      	movs	r1, #16
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 feeb 	bl	8002750 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d048      	beq.n	8001a16 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001988:	b29b      	uxth	r3, r3
 800198a:	2bff      	cmp	r3, #255	@ 0xff
 800198c:	d910      	bls.n	80019b0 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	22ff      	movs	r2, #255	@ 0xff
 8001992:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001998:	b299      	uxth	r1, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fe9f 	bl	80026ec <I2C_TransferConfig>
 80019ae:	e011      	b.n	80019d4 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	b299      	uxth	r1, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	2300      	movs	r3, #0
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 fe8c 	bl	80026ec <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b22      	cmp	r3, #34	@ 0x22
 80019f0:	d108      	bne.n	8001a04 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001a02:	e082      	b.n	8001b0a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a12:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001a14:	e079      	b.n	8001b0a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a16:	2140      	movs	r1, #64	@ 0x40
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 fd0d 	bl	8002438 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001a1e:	e074      	b.n	8001b0a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	099b      	lsrs	r3, r3, #6
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d05e      	beq.n	8001aea <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d058      	beq.n	8001aea <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 ff0c 	bl	8002858 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001a40:	2110      	movs	r1, #16
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 fe84 	bl	8002750 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b22      	cmp	r3, #34	@ 0x22
 8001a52:	d101      	bne.n	8001a58 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8001a54:	4b32      	ldr	r3, [pc, #200]	@ (8001b20 <I2C_Mem_ISR_DMA+0x25c>)
 8001a56:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	2bff      	cmp	r3, #255	@ 0xff
 8001a60:	d910      	bls.n	8001a84 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	22ff      	movs	r2, #255	@ 0xff
 8001a66:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fe35 	bl	80026ec <I2C_TransferConfig>
 8001a82:	e011      	b.n	8001aa8 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	b299      	uxth	r1, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fe22 	bl	80026ec <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b22      	cmp	r3, #34	@ 0x22
 8001ac4:	d108      	bne.n	8001ad8 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ad4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ad6:	e018      	b.n	8001b0a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ae6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ae8:	e00f      	b.n	8001b0a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	095b      	lsrs	r3, r3, #5
 8001afa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 fa0d 	bl	8001f24 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	80002000 	.word	0x80002000
 8001b20:	80002400 	.word	0x80002400

08001b24 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b34:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <I2C_Slave_ISR_DMA+0x24>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e0ca      	b.n	8001cde <I2C_Slave_ISR_DMA+0x1ba>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00a      	beq.n	8001b72 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 faa4 	bl	80020b8 <I2C_ITSlaveCplt>
 8001b70:	e0b0      	b.n	8001cd4 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 809a 	beq.w	8001cb4 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8093 	beq.w	8001cb4 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0b9b      	lsrs	r3, r3, #14
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0bdb      	lsrs	r3, r3, #15
 8001b9e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d07f      	beq.n	8001ca6 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00d      	beq.n	8001bca <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	0bdb      	lsrs	r3, r3, #15
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00d      	beq.n	8001bee <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0b9b      	lsrs	r3, r3, #14
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d128      	bne.n	8001c46 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b28      	cmp	r3, #40	@ 0x28
 8001bfe:	d108      	bne.n	8001c12 <I2C_Slave_ISR_DMA+0xee>
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c06:	d104      	bne.n	8001c12 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fbbe 	bl	800238c <I2C_ITListenCplt>
 8001c10:	e048      	b.n	8001ca4 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b29      	cmp	r3, #41	@ 0x29
 8001c1c:	d10e      	bne.n	8001c3c <I2C_Slave_ISR_DMA+0x118>
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c24:	d00a      	beq.n	8001c3c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 fd19 	bl	8002666 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f917 	bl	8001e68 <I2C_ITSlaveSeqCplt>
 8001c3a:	e033      	b.n	8001ca4 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2210      	movs	r2, #16
 8001c42:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001c44:	e034      	b.n	8001cb0 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c52:	f043 0204 	orr.w	r2, r3, #4
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c60:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <I2C_Slave_ISR_DMA+0x14c>
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c6e:	d11f      	bne.n	8001cb0 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c70:	7dfb      	ldrb	r3, [r7, #23]
 8001c72:	2b21      	cmp	r3, #33	@ 0x21
 8001c74:	d002      	beq.n	8001c7c <I2C_Slave_ISR_DMA+0x158>
 8001c76:	7dfb      	ldrb	r3, [r7, #23]
 8001c78:	2b29      	cmp	r3, #41	@ 0x29
 8001c7a:	d103      	bne.n	8001c84 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2221      	movs	r2, #33	@ 0x21
 8001c80:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c82:	e008      	b.n	8001c96 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b22      	cmp	r3, #34	@ 0x22
 8001c88:	d002      	beq.n	8001c90 <I2C_Slave_ISR_DMA+0x16c>
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c8e:	d102      	bne.n	8001c96 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2222      	movs	r2, #34	@ 0x22
 8001c94:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fbcb 	bl	8002438 <I2C_ITError>
      if (treatdmanack == 1U)
 8001ca2:	e005      	b.n	8001cb0 <I2C_Slave_ISR_DMA+0x18c>
 8001ca4:	e004      	b.n	8001cb0 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2210      	movs	r2, #16
 8001cac:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001cae:	e011      	b.n	8001cd4 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8001cb0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001cb2:	e00f      	b.n	8001cd4 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	08db      	lsrs	r3, r3, #3
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	08db      	lsrs	r3, r3, #3
 8001cc4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 f809 	bl	8001ce6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001cfc:	2b28      	cmp	r3, #40	@ 0x28
 8001cfe:	d16a      	bne.n	8001dd6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	0c1b      	lsrs	r3, r3, #16
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	0c1b      	lsrs	r3, r3, #16
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001d1e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d2c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001d3a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d138      	bne.n	8001db6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001d44:	897b      	ldrh	r3, [r7, #10]
 8001d46:	09db      	lsrs	r3, r3, #7
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	89bb      	ldrh	r3, [r7, #12]
 8001d4c:	4053      	eors	r3, r2
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f003 0306 	and.w	r3, r3, #6
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11c      	bne.n	8001d92 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001d58:	897b      	ldrh	r3, [r7, #10]
 8001d5a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d13b      	bne.n	8001de6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d84:	89ba      	ldrh	r2, [r7, #12]
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fa86 	bl	800029c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001d90:	e029      	b.n	8001de6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001d92:	893b      	ldrh	r3, [r7, #8]
 8001d94:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fd5c 	bl	8002858 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001da8:	89ba      	ldrh	r2, [r7, #12]
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	4619      	mov	r1, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fa74 	bl	800029c <HAL_I2C_AddrCallback>
}
 8001db4:	e017      	b.n	8001de6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001db6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fd4c 	bl	8002858 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001dc8:	89ba      	ldrh	r2, [r7, #12]
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe fa64 	bl	800029c <HAL_I2C_AddrCallback>
}
 8001dd4:	e007      	b.n	8001de6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2208      	movs	r2, #8
 8001ddc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b21      	cmp	r3, #33	@ 0x21
 8001e08:	d115      	bne.n	8001e36 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2211      	movs	r2, #17
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e1e:	2101      	movs	r1, #1
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fd19 	bl	8002858 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fb09 	bl	8001446 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e34:	e014      	b.n	8001e60 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2212      	movs	r2, #18
 8001e42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fd03 	bl	8002858 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fafd 	bl	800145a <HAL_I2C_MasterRxCpltCallback>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	0b9b      	lsrs	r3, r3, #14
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e00d      	b.n	8001eba <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	0bdb      	lsrs	r3, r3, #15
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eb8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b29      	cmp	r3, #41	@ 0x29
 8001ec4:	d112      	bne.n	8001eec <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2228      	movs	r2, #40	@ 0x28
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2221      	movs	r2, #33	@ 0x21
 8001ed2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fcbe 	bl	8002858 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff fac2 	bl	800146e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001eea:	e017      	b.n	8001f1c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ef6:	d111      	bne.n	8001f1c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2228      	movs	r2, #40	@ 0x28
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2222      	movs	r2, #34	@ 0x22
 8001f04:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f06:	2102      	movs	r1, #2
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fca5 	bl	8002858 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe f9e4 	bl	80002e4 <HAL_I2C_SlaveRxCpltCallback>
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2220      	movs	r2, #32
 8001f38:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b21      	cmp	r3, #33	@ 0x21
 8001f44:	d107      	bne.n	8001f56 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f46:	2101      	movs	r1, #1
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fc85 	bl	8002858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2211      	movs	r2, #17
 8001f52:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f54:	e00c      	b.n	8001f70 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b22      	cmp	r3, #34	@ 0x22
 8001f60:	d106      	bne.n	8001f70 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f62:	2102      	movs	r1, #2
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fc77 	bl	8002858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2212      	movs	r2, #18
 8001f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80020b0 <I2C_ITMasterCplt+0x18c>)
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4a      	ldr	r2, [pc, #296]	@ (80020b4 <I2C_ITMasterCplt+0x190>)
 8001f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa4:	f043 0204 	orr.w	r2, r3, #4
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b60      	cmp	r3, #96	@ 0x60
 8001fb6:	d10b      	bne.n	8001fd0 <I2C_ITMasterCplt+0xac>
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001fce:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fb48 	bl	8002666 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b60      	cmp	r3, #96	@ 0x60
 8001fe6:	d002      	beq.n	8001fee <I2C_ITMasterCplt+0xca>
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fa1f 	bl	8002438 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001ffa:	e054      	b.n	80020a6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b21      	cmp	r3, #33	@ 0x21
 8002006:	d124      	bne.n	8002052 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b40      	cmp	r3, #64	@ 0x40
 8002020:	d10b      	bne.n	800203a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fa25 	bl	8001482 <HAL_I2C_MemTxCpltCallback>
}
 8002038:	e035      	b.n	80020a6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff f9fb 	bl	8001446 <HAL_I2C_MasterTxCpltCallback>
}
 8002050:	e029      	b.n	80020a6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b22      	cmp	r3, #34	@ 0x22
 800205c:	d123      	bne.n	80020a6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2220      	movs	r2, #32
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b40      	cmp	r3, #64	@ 0x40
 8002076:	d10b      	bne.n	8002090 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff fa04 	bl	8001496 <HAL_I2C_MemRxCpltCallback>
}
 800208e:	e00a      	b.n	80020a6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff f9da 	bl	800145a <HAL_I2C_MasterRxCpltCallback>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	fe00e800 	.word	0xfe00e800
 80020b4:	ffff0000 	.word	0xffff0000

080020b8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020da:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2220      	movs	r2, #32
 80020e2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020e4:	7afb      	ldrb	r3, [r7, #11]
 80020e6:	2b21      	cmp	r3, #33	@ 0x21
 80020e8:	d002      	beq.n	80020f0 <I2C_ITSlaveCplt+0x38>
 80020ea:	7afb      	ldrb	r3, [r7, #11]
 80020ec:	2b29      	cmp	r3, #41	@ 0x29
 80020ee:	d108      	bne.n	8002102 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80020f0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fbaf 	bl	8002858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2221      	movs	r2, #33	@ 0x21
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002100:	e019      	b.n	8002136 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002102:	7afb      	ldrb	r3, [r7, #11]
 8002104:	2b22      	cmp	r3, #34	@ 0x22
 8002106:	d002      	beq.n	800210e <I2C_ITSlaveCplt+0x56>
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	2b2a      	cmp	r3, #42	@ 0x2a
 800210c:	d108      	bne.n	8002120 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800210e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fba0 	bl	8002858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2222      	movs	r2, #34	@ 0x22
 800211c:	631a      	str	r2, [r3, #48]	@ 0x30
 800211e:	e00a      	b.n	8002136 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002120:	7afb      	ldrb	r3, [r7, #11]
 8002122:	2b28      	cmp	r3, #40	@ 0x28
 8002124:	d107      	bne.n	8002136 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002126:	f248 0103 	movw	r1, #32771	@ 0x8003
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fb94 	bl	8002858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002144:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b8c      	ldr	r3, [pc, #560]	@ (8002384 <I2C_ITSlaveCplt+0x2cc>)
 8002152:	400b      	ands	r3, r1
 8002154:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fa85 	bl	8002666 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	0b9b      	lsrs	r3, r3, #14
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002176:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800218e:	e018      	b.n	80021c2 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	0bdb      	lsrs	r3, r3, #15
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d012      	beq.n	80021c2 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021aa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d020      	beq.n	8002210 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00c      	beq.n	8002210 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f043 0204 	orr.w	r2, r3, #4
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d04a      	beq.n	80022c8 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800223a:	2b00      	cmp	r3, #0
 800223c:	d044      	beq.n	80022c8 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d128      	bne.n	800229a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b28      	cmp	r3, #40	@ 0x28
 8002252:	d108      	bne.n	8002266 <I2C_ITSlaveCplt+0x1ae>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800225a:	d104      	bne.n	8002266 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800225c:	6979      	ldr	r1, [r7, #20]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f894 	bl	800238c <I2C_ITListenCplt>
 8002264:	e030      	b.n	80022c8 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b29      	cmp	r3, #41	@ 0x29
 8002270:	d10e      	bne.n	8002290 <I2C_ITSlaveCplt+0x1d8>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002278:	d00a      	beq.n	8002290 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2210      	movs	r2, #16
 8002280:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f9ef 	bl	8002666 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff fded 	bl	8001e68 <I2C_ITSlaveSeqCplt>
 800228e:	e01b      	b.n	80022c8 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2210      	movs	r2, #16
 8002296:	61da      	str	r2, [r3, #28]
 8002298:	e016      	b.n	80022c8 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2210      	movs	r2, #16
 80022a0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	f043 0204 	orr.w	r2, r3, #4
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <I2C_ITSlaveCplt+0x204>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022ba:	d105      	bne.n	80022c8 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	4619      	mov	r1, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8b8 	bl	8002438 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d010      	beq.n	8002300 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	4619      	mov	r1, r3
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f8a7 	bl	8002438 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b28      	cmp	r3, #40	@ 0x28
 80022f4:	d141      	bne.n	800237a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80022f6:	6979      	ldr	r1, [r7, #20]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f847 	bl	800238c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80022fe:	e03c      	b.n	800237a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002308:	d014      	beq.n	8002334 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fdac 	bl	8001e68 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a1d      	ldr	r2, [pc, #116]	@ (8002388 <I2C_ITSlaveCplt+0x2d0>)
 8002314:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7fd ffa9 	bl	8000284 <HAL_I2C_ListenCpltCallback>
}
 8002332:	e022      	b.n	800237a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b22      	cmp	r3, #34	@ 0x22
 800233e:	d10e      	bne.n	800235e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fd ffc4 	bl	80002e4 <HAL_I2C_SlaveRxCpltCallback>
}
 800235c:	e00d      	b.n	800237a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff f87a 	bl	800146e <HAL_I2C_SlaveTxCpltCallback>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	fe00e800 	.word	0xfe00e800
 8002388:	ffff0000 	.word	0xffff0000

0800238c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a26      	ldr	r2, [pc, #152]	@ (8002434 <I2C_ITListenCplt+0xa8>)
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d022      	beq.n	800240a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d012      	beq.n	800240a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f043 0204 	orr.w	r2, r3, #4
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800240a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fa22 	bl	8002858 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2210      	movs	r2, #16
 800241a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7fd ff2d 	bl	8000284 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	ffff0000 	.word	0xffff0000

08002438 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002448:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a6d      	ldr	r2, [pc, #436]	@ (800260c <I2C_ITError+0x1d4>)
 8002456:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b28      	cmp	r3, #40	@ 0x28
 800246e:	d005      	beq.n	800247c <I2C_ITError+0x44>
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	2b29      	cmp	r3, #41	@ 0x29
 8002474:	d002      	beq.n	800247c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	2b2a      	cmp	r3, #42	@ 0x2a
 800247a:	d10b      	bne.n	8002494 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800247c:	2103      	movs	r1, #3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9ea 	bl	8002858 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2228      	movs	r2, #40	@ 0x28
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a60      	ldr	r2, [pc, #384]	@ (8002610 <I2C_ITError+0x1d8>)
 8002490:	635a      	str	r2, [r3, #52]	@ 0x34
 8002492:	e030      	b.n	80024f6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002494:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f9dd 	bl	8002858 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f8e1 	bl	8002666 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b60      	cmp	r3, #96	@ 0x60
 80024ae:	d01f      	beq.n	80024f0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	d114      	bne.n	80024f0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d109      	bne.n	80024e8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2210      	movs	r2, #16
 80024da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e0:	f043 0204 	orr.w	r2, r3, #4
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2220      	movs	r2, #32
 80024ee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002500:	2b00      	cmp	r3, #0
 8002502:	d039      	beq.n	8002578 <I2C_ITError+0x140>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b11      	cmp	r3, #17
 8002508:	d002      	beq.n	8002510 <I2C_ITError+0xd8>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b21      	cmp	r3, #33	@ 0x21
 800250e:	d133      	bne.n	8002578 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800251a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800251e:	d107      	bne.n	8002530 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800252e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe fbf5 	bl	8000d24 <HAL_DMA_GetState>
 800253a:	4603      	mov	r3, r0
 800253c:	2b01      	cmp	r3, #1
 800253e:	d017      	beq.n	8002570 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002544:	4a33      	ldr	r2, [pc, #204]	@ (8002614 <I2C_ITError+0x1dc>)
 8002546:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fb7e 	bl	8000c56 <HAL_DMA_Abort_IT>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d04d      	beq.n	80025fc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800256a:	4610      	mov	r0, r2
 800256c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800256e:	e045      	b.n	80025fc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f851 	bl	8002618 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002576:	e041      	b.n	80025fc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d039      	beq.n	80025f4 <I2C_ITError+0x1bc>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b12      	cmp	r3, #18
 8002584:	d002      	beq.n	800258c <I2C_ITError+0x154>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b22      	cmp	r3, #34	@ 0x22
 800258a:	d133      	bne.n	80025f4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002596:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800259a:	d107      	bne.n	80025ac <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe fbb7 	bl	8000d24 <HAL_DMA_GetState>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d017      	beq.n	80025ec <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c0:	4a14      	ldr	r2, [pc, #80]	@ (8002614 <I2C_ITError+0x1dc>)
 80025c2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fb40 	bl	8000c56 <HAL_DMA_Abort_IT>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d011      	beq.n	8002600 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025e6:	4610      	mov	r0, r2
 80025e8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025ea:	e009      	b.n	8002600 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f813 	bl	8002618 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025f2:	e005      	b.n	8002600 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f80f 	bl	8002618 <I2C_TreatErrorCallback>
  }
}
 80025fa:	e002      	b.n	8002602 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025fc:	bf00      	nop
 80025fe:	e000      	b.n	8002602 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002600:	bf00      	nop
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	ffff0000 	.word	0xffff0000
 8002610:	080014d7 	.word	0x080014d7
 8002614:	080026af 	.word	0x080026af

08002618 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b60      	cmp	r3, #96	@ 0x60
 800262a:	d10e      	bne.n	800264a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe ff31 	bl	80014aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002648:	e009      	b.n	800265e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fd fe7b 	bl	8000354 <HAL_I2C_ErrorCallback>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b02      	cmp	r3, #2
 800267a:	d103      	bne.n	8002684 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2200      	movs	r2, #0
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b01      	cmp	r3, #1
 8002690:	d007      	beq.n	80026a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0201 	orr.w	r2, r2, #1
 80026a0:	619a      	str	r2, [r3, #24]
  }
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	2200      	movs	r2, #0
 80026ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	2200      	movs	r2, #0
 80026da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff ff9b 	bl	8002618 <I2C_TreatErrorCallback>
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	4613      	mov	r3, r2
 80026fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002704:	7a7b      	ldrb	r3, [r7, #9]
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800270c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	4313      	orrs	r3, r2
 8002716:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800271a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	0d5b      	lsrs	r3, r3, #21
 8002726:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <I2C_TransferConfig+0x60>)
 800272c:	430b      	orrs	r3, r1
 800272e:	43db      	mvns	r3, r3
 8002730:	ea02 0103 	and.w	r1, r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	03ff63ff 	.word	0x03ff63ff

08002750 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002764:	4a39      	ldr	r2, [pc, #228]	@ (800284c <I2C_Enable_IRQ+0xfc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d032      	beq.n	80027d0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800276e:	4a38      	ldr	r2, [pc, #224]	@ (8002850 <I2C_Enable_IRQ+0x100>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d02d      	beq.n	80027d0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002778:	4a36      	ldr	r2, [pc, #216]	@ (8002854 <I2C_Enable_IRQ+0x104>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d028      	beq.n	80027d0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800277e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002782:	2b00      	cmp	r3, #0
 8002784:	da03      	bge.n	800278e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800278c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800279e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80027b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d103      	bne.n	80027c0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80027be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d133      	bne.n	800282e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f043 0320 	orr.w	r3, r3, #32
 80027cc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027ce:	e02e      	b.n	800282e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	da03      	bge.n	80027e0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80027de:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80027f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002802:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	2b10      	cmp	r3, #16
 8002808:	d103      	bne.n	8002812 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002810:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	2b20      	cmp	r3, #32
 8002816:	d103      	bne.n	8002820 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800281e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	2b40      	cmp	r3, #64	@ 0x40
 8002824:	d103      	bne.n	800282e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800282c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	080016df 	.word	0x080016df
 8002850:	08001b25 	.word	0x08001b25
 8002854:	080018c5 	.word	0x080018c5

08002858 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00f      	beq.n	8002892 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002878:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002886:	2b28      	cmp	r3, #40	@ 0x28
 8002888:	d003      	beq.n	8002892 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002890:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00f      	beq.n	80028bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80028a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028b0:	2b28      	cmp	r3, #40	@ 0x28
 80028b2:	d003      	beq.n	80028bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80028ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80028bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	da03      	bge.n	80028cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80028ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d103      	bne.n	80028da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80028d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d103      	bne.n	80028e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f043 0320 	orr.w	r3, r3, #32
 80028e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80028e8:	887b      	ldrh	r3, [r7, #2]
 80028ea:	2b40      	cmp	r3, #64	@ 0x40
 80028ec:	d103      	bne.n	80028f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6819      	ldr	r1, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43da      	mvns	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	400a      	ands	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b20      	cmp	r3, #32
 8002928:	d138      	bne.n	800299c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002934:	2302      	movs	r3, #2
 8002936:	e032      	b.n	800299e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	@ 0x24
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002966:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800299c:	2302      	movs	r3, #2
  }
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d139      	bne.n	8002a34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e033      	b.n	8002a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2224      	movs	r2, #36	@ 0x24
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0c0      	b.n	8002bd6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f006 ffaf 	bl	80099cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2203      	movs	r2, #3
 8002a72:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 f9d5 	bl	8005e2a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e03e      	b.n	8002b04 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	3311      	adds	r3, #17
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3310      	adds	r3, #16
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	3313      	adds	r3, #19
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	3320      	adds	r3, #32
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3324      	adds	r3, #36	@ 0x24
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	3301      	adds	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	791b      	ldrb	r3, [r3, #4]
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d3bb      	bcc.n	8002a86 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
 8002b12:	e044      	b.n	8002b9e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	791b      	ldrb	r3, [r3, #4]
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d3b5      	bcc.n	8002b14 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002bb4:	f003 f954 	bl	8005e60 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7a9b      	ldrb	r3, [r3, #10]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f001 fbd0 	bl	8004374 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_PCD_Start+0x16>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e012      	b.n	8002c1a <HAL_PCD_Start+0x3c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f003 f8fb 	bl	8005dfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 fceb 	bl	80075e6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_PCD_Stop+0x16>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e012      	b.n	8002c5e <HAL_PCD_Stop+0x3c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 f8f0 	bl	8005e2a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f004 fce0 	bl	8007614 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f004 fce3 	bl	800763e <USB_ReadInterrupts>
 8002c78:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 faa6 	bl	80031d6 <PCD_EP_ISR_Handler>

    return;
 8002c8a:	e110      	b.n	8002eae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d013      	beq.n	8002cbe <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f006 ff1d 	bl	8009aee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8fc 	bl	8002eb4 <HAL_PCD_SetAddress>

    return;
 8002cbc:	e0f7      	b.n	8002eae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00c      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ce0:	e0e5      	b.n	8002eae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00c      	beq.n	8002d06 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cfe:	b292      	uxth	r2, r2
 8002d00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d04:	e0d3      	b.n	8002eae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d034      	beq.n	8002d7a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	b292      	uxth	r2, r2
 8002d24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0208 	bic.w	r2, r2, #8
 8002d3a:	b292      	uxth	r2, r2
 8002d3c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d52:	2100      	movs	r1, #0
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f007 f88d 	bl	8009e74 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f006 ff00 	bl	8009b60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d72:	b292      	uxth	r2, r2
 8002d74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d78:	e099      	b.n	8002eae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d027      	beq.n	8002dd4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0208 	orr.w	r2, r2, #8
 8002d96:	b292      	uxth	r2, r2
 8002d98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dae:	b292      	uxth	r2, r2
 8002db0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0204 	orr.w	r2, r2, #4
 8002dc6:	b292      	uxth	r2, r2
 8002dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f006 fead 	bl	8009b2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002dd2:	e06c      	b.n	8002eae <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d040      	beq.n	8002e60 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002df0:	b292      	uxth	r2, r2
 8002df2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d12b      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0204 	orr.w	r2, r2, #4
 8002e12:	b292      	uxth	r2, r2
 8002e14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0208 	orr.w	r2, r2, #8
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e4e:	2101      	movs	r1, #1
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f007 f80f 	bl	8009e74 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002e56:	e02a      	b.n	8002eae <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f006 fe67 	bl	8009b2c <HAL_PCD_SuspendCallback>
    return;
 8002e5e:	e026      	b.n	8002eae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00f      	beq.n	8002e8a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f006 fe25 	bl	8009ad2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e88:	e011      	b.n	8002eae <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00c      	beq.n	8002eae <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002eac:	bf00      	nop
  }
}
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_PCD_SetAddress+0x1a>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e012      	b.n	8002ef4 <HAL_PCD_SetAddress+0x40>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f004 fb6a 	bl	80075be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	70fb      	strb	r3, [r7, #3]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	803b      	strh	r3, [r7, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da0e      	bge.n	8002f40 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 0207 	and.w	r2, r3, #7
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	3310      	adds	r3, #16
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	705a      	strb	r2, [r3, #1]
 8002f3e:	e00e      	b.n	8002f5e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 0207 	and.w	r2, r3, #7
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002f6a:	883b      	ldrh	r3, [r7, #0]
 8002f6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	78ba      	ldrb	r2, [r7, #2]
 8002f78:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f7a:	78bb      	ldrb	r3, [r7, #2]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d102      	bne.n	8002f86 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_PCD_EP_Open+0x98>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e00e      	b.n	8002fb2 <HAL_PCD_EP_Open+0xb6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f002 ff7a 	bl	8005e9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fca:	7afb      	ldrb	r3, [r7, #11]
 8002fcc:	f003 0207 	and.w	r2, r3, #7
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	b2da      	uxtb	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6979      	ldr	r1, [r7, #20]
 800300c:	4618      	mov	r0, r3
 800300e:	f003 fc2d 	bl	800686c <USB_EPStartXfer>

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	460b      	mov	r3, r1
 800302a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302c:	7afb      	ldrb	r3, [r7, #11]
 800302e:	f003 0207 	and.w	r2, r3, #7
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	3310      	adds	r3, #16
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2200      	movs	r2, #0
 8003060:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2201      	movs	r2, #1
 8003066:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003068:	7afb      	ldrb	r3, [r7, #11]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	b2da      	uxtb	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6979      	ldr	r1, [r7, #20]
 800307a:	4618      	mov	r0, r3
 800307c:	f003 fbf6 	bl	800686c <USB_EPStartXfer>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	7912      	ldrb	r2, [r2, #4]
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e03e      	b.n	8003126 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da0e      	bge.n	80030ce <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	f003 0207 	and.w	r2, r3, #7
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	3310      	adds	r3, #16
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	705a      	strb	r2, [r3, #1]
 80030cc:	e00c      	b.n	80030e8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4413      	add	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_PCD_EP_SetStall+0x7e>
 8003104:	2302      	movs	r3, #2
 8003106:	e00e      	b.n	8003126 <HAL_PCD_EP_SetStall+0x9c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	4618      	mov	r0, r3
 8003118:	f004 f957 	bl	80073ca <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	7912      	ldrb	r2, [r2, #4]
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e040      	b.n	80031ce <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800314c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003150:	2b00      	cmp	r3, #0
 8003152:	da0e      	bge.n	8003172 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 0207 	and.w	r2, r3, #7
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	3310      	adds	r3, #16
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	705a      	strb	r2, [r3, #1]
 8003170:	e00e      	b.n	8003190 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 0207 	and.w	r2, r3, #7
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	4413      	add	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_PCD_EP_ClrStall+0x82>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e00e      	b.n	80031ce <HAL_PCD_EP_ClrStall+0xa0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68f9      	ldr	r1, [r7, #12]
 80031be:	4618      	mov	r0, r3
 80031c0:	f004 f954 	bl	800746c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b092      	sub	sp, #72	@ 0x48
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031de:	e333      	b.n	8003848 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031e8:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80031ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80031f6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 8108 	bne.w	8003410 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003200:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d14c      	bne.n	80032a4 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800321a:	813b      	strh	r3, [r7, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	893b      	ldrh	r3, [r7, #8]
 8003222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800322a:	b29b      	uxth	r3, r3
 800322c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3310      	adds	r3, #16
 8003232:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800323c:	b29b      	uxth	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	4413      	add	r3, r2
 800324e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800325a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800325c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	441a      	add	r2, r3
 8003266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003268:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800326a:	2100      	movs	r1, #0
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f006 fc16 	bl	8009a9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7b1b      	ldrb	r3, [r3, #12]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 82e5 	beq.w	8003848 <PCD_EP_ISR_Handler+0x672>
 800327e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 82e0 	bne.w	8003848 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7b1b      	ldrb	r3, [r3, #12]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003292:	b2da      	uxtb	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	731a      	strb	r2, [r3, #12]
 80032a2:	e2d1      	b.n	8003848 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032aa:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80032b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80032b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d032      	beq.n	8003324 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	4413      	add	r3, r2
 80032d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80032f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80032f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f004 f9f3 	bl	80076e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b29a      	uxth	r2, r3
 8003306:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800330a:	4013      	ands	r3, r2
 800330c:	817b      	strh	r3, [r7, #10]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	897a      	ldrh	r2, [r7, #10]
 8003314:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003318:	b292      	uxth	r2, r2
 800331a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f006 fb91 	bl	8009a44 <HAL_PCD_SetupStageCallback>
 8003322:	e291      	b.n	8003848 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003324:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003328:	2b00      	cmp	r3, #0
 800332a:	f280 828d 	bge.w	8003848 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29a      	uxth	r2, r3
 8003336:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800333a:	4013      	ands	r3, r2
 800333c:	81fb      	strh	r3, [r7, #14]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	89fa      	ldrh	r2, [r7, #14]
 8003344:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003348:	b292      	uxth	r2, r2
 800334a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003354:	b29b      	uxth	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	4413      	add	r3, r2
 8003366:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003372:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d019      	beq.n	80033b0 <PCD_EP_ISR_Handler+0x1da>
 800337c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d015      	beq.n	80033b0 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800338a:	6959      	ldr	r1, [r3, #20]
 800338c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800338e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003392:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003394:	b29b      	uxth	r3, r3
 8003396:	f004 f9a5 	bl	80076e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800339a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	441a      	add	r2, r3
 80033a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80033a8:	2100      	movs	r1, #0
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f006 fb5c 	bl	8009a68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80033b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80033ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 8242 	bne.w	8003848 <PCD_EP_ISR_Handler+0x672>
 80033c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80033c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80033ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033ce:	f000 823b 	beq.w	8003848 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e2:	81bb      	strh	r3, [r7, #12]
 80033e4:	89bb      	ldrh	r3, [r7, #12]
 80033e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80033ea:	81bb      	strh	r3, [r7, #12]
 80033ec:	89bb      	ldrh	r3, [r7, #12]
 80033ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033f2:	81bb      	strh	r3, [r7, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	89bb      	ldrh	r3, [r7, #12]
 80033fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800340a:	b29b      	uxth	r3, r3
 800340c:	8013      	strh	r3, [r2, #0]
 800340e:	e21b      	b.n	8003848 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003422:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003426:	2b00      	cmp	r3, #0
 8003428:	f280 80f1 	bge.w	800360e <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b29a      	uxth	r2, r3
 800343e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003442:	4013      	ands	r3, r2
 8003444:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003456:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800345a:	b292      	uxth	r2, r2
 800345c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800345e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003476:	7b1b      	ldrb	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d123      	bne.n	80034c4 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003484:	b29b      	uxth	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4413      	add	r3, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	4413      	add	r3, r2
 8003496:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80034a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 808b 	beq.w	80035c4 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034b4:	6959      	ldr	r1, [r3, #20]
 80034b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034b8:	88da      	ldrh	r2, [r3, #6]
 80034ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034be:	f004 f911 	bl	80076e4 <USB_ReadPMA>
 80034c2:	e07f      	b.n	80035c4 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80034c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c6:	78db      	ldrb	r3, [r3, #3]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d109      	bne.n	80034e0 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80034ce:	461a      	mov	r2, r3
 80034d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f9c6 	bl	8003864 <HAL_PCD_EP_DB_Receive>
 80034d8:	4603      	mov	r3, r0
 80034da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80034de:	e071      	b.n	80035c4 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034fa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	441a      	add	r2, r3
 800350a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800350c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003518:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800351c:	b29b      	uxth	r3, r3
 800351e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d022      	beq.n	8003580 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003542:	b29b      	uxth	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	4413      	add	r3, r2
 8003554:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800355e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003562:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003566:	2b00      	cmp	r3, #0
 8003568:	d02c      	beq.n	80035c4 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003570:	6959      	ldr	r1, [r3, #20]
 8003572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003574:	891a      	ldrh	r2, [r3, #8]
 8003576:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800357a:	f004 f8b3 	bl	80076e4 <USB_ReadPMA>
 800357e:	e021      	b.n	80035c4 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003588:	b29b      	uxth	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	4413      	add	r3, r2
 800359a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80035a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035b6:	6959      	ldr	r1, [r3, #20]
 80035b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ba:	895a      	ldrh	r2, [r3, #10]
 80035bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80035c0:	f004 f890 	bl	80076e4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80035c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80035cc:	441a      	add	r2, r3
 80035ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80035da:	441a      	add	r2, r3
 80035dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035de:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <PCD_EP_ISR_Handler+0x41e>
 80035e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80035ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d206      	bcs.n	8003602 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4619      	mov	r1, r3
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f006 fa34 	bl	8009a68 <HAL_PCD_DataOutStageCallback>
 8003600:	e005      	b.n	800360e <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003608:	4618      	mov	r0, r3
 800360a:	f003 f92f 	bl	800686c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800360e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8117 	beq.w	8003848 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800361a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	3310      	adds	r3, #16
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003648:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	441a      	add	r2, r3
 8003658:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800365a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003662:	b29b      	uxth	r3, r3
 8003664:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003668:	78db      	ldrb	r3, [r3, #3]
 800366a:	2b01      	cmp	r3, #1
 800366c:	f040 80a1 	bne.w	80037b2 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003672:	2200      	movs	r2, #0
 8003674:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003678:	7b1b      	ldrb	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8092 	beq.w	80037a4 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003680:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d046      	beq.n	8003718 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800368a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d126      	bne.n	80036e0 <PCD_EP_ISR_Handler+0x50a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	4413      	add	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	00da      	lsls	r2, r3, #3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	4413      	add	r3, r2
 80036b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d8:	b29a      	uxth	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	801a      	strh	r2, [r3, #0]
 80036de:	e061      	b.n	80037a4 <PCD_EP_ISR_Handler+0x5ce>
 80036e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d15d      	bne.n	80037a4 <PCD_EP_ISR_Handler+0x5ce>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	00da      	lsls	r2, r3, #3
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2200      	movs	r2, #0
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	e045      	b.n	80037a4 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800371e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d126      	bne.n	8003774 <PCD_EP_ISR_Handler+0x59e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003734:	b29b      	uxth	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	4413      	add	r3, r2
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
 800373e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	00da      	lsls	r2, r3, #3
 8003744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003746:	4413      	add	r3, r2
 8003748:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003758:	b29a      	uxth	r2, r3
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800376c:	b29a      	uxth	r2, r3
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	801a      	strh	r2, [r3, #0]
 8003772:	e017      	b.n	80037a4 <PCD_EP_ISR_Handler+0x5ce>
 8003774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d113      	bne.n	80037a4 <PCD_EP_ISR_Handler+0x5ce>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003784:	b29b      	uxth	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378a:	4413      	add	r3, r2
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800378e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	00da      	lsls	r2, r3, #3
 8003794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003796:	4413      	add	r3, r2
 8003798:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800379c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a0:	2200      	movs	r2, #0
 80037a2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4619      	mov	r1, r3
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f006 f977 	bl	8009a9e <HAL_PCD_DataInStageCallback>
 80037b0:	e04a      	b.n	8003848 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80037b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80037b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d13f      	bne.n	800383c <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	4413      	add	r3, r2
 80037d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037e0:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80037e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d906      	bls.n	80037fa <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80037ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80037f2:	1ad2      	subs	r2, r2, r3
 80037f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f6:	619a      	str	r2, [r3, #24]
 80037f8:	e002      	b.n	8003800 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80037fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037fc:	2200      	movs	r2, #0
 80037fe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d106      	bne.n	8003816 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f006 f945 	bl	8009a9e <HAL_PCD_DataInStageCallback>
 8003814:	e018      	b.n	8003848 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800381c:	441a      	add	r2, r3
 800381e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003820:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003828:	441a      	add	r2, r3
 800382a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800382c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003834:	4618      	mov	r0, r3
 8003836:	f003 f819 	bl	800686c <USB_EPStartXfer>
 800383a:	e005      	b.n	8003848 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800383c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800383e:	461a      	mov	r2, r3
 8003840:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f917 	bl	8003a76 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003850:	b29b      	uxth	r3, r3
 8003852:	b21b      	sxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	f6ff acc3 	blt.w	80031e0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3748      	adds	r7, #72	@ 0x48
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	4613      	mov	r3, r2
 8003870:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d07c      	beq.n	8003976 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003884:	b29b      	uxth	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	4413      	add	r3, r2
 8003896:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	8b7b      	ldrh	r3, [r7, #26]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d306      	bcc.n	80038ba <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	8b7b      	ldrh	r3, [r7, #26]
 80038b2:	1ad2      	subs	r2, r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	619a      	str	r2, [r3, #24]
 80038b8:	e002      	b.n	80038c0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2200      	movs	r2, #0
 80038be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d123      	bne.n	8003910 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038e2:	833b      	strh	r3, [r7, #24]
 80038e4:	8b3b      	ldrh	r3, [r7, #24]
 80038e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038ea:	833b      	strh	r3, [r7, #24]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	441a      	add	r2, r3
 80038fa:	8b3b      	ldrh	r3, [r7, #24]
 80038fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800390c:	b29b      	uxth	r3, r3
 800390e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01f      	beq.n	800395a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003934:	82fb      	strh	r3, [r7, #22]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	441a      	add	r2, r3
 8003944:	8afb      	ldrh	r3, [r7, #22]
 8003946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800394a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800394e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003952:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003956:	b29b      	uxth	r3, r3
 8003958:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800395a:	8b7b      	ldrh	r3, [r7, #26]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8085 	beq.w	8003a6c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6959      	ldr	r1, [r3, #20]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	891a      	ldrh	r2, [r3, #8]
 800396e:	8b7b      	ldrh	r3, [r7, #26]
 8003970:	f003 feb8 	bl	80076e4 <USB_ReadPMA>
 8003974:	e07a      	b.n	8003a6c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800397e:	b29b      	uxth	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	4413      	add	r3, r2
 8003990:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800399a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	8b7b      	ldrh	r3, [r7, #26]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d306      	bcc.n	80039b4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	8b7b      	ldrh	r3, [r7, #26]
 80039ac:	1ad2      	subs	r2, r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	619a      	str	r2, [r3, #24]
 80039b2:	e002      	b.n	80039ba <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d123      	bne.n	8003a0a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039dc:	83fb      	strh	r3, [r7, #30]
 80039de:	8bfb      	ldrh	r3, [r7, #30]
 80039e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80039e4:	83fb      	strh	r3, [r7, #30]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	441a      	add	r2, r3
 80039f4:	8bfb      	ldrh	r3, [r7, #30]
 80039f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11f      	bne.n	8003a54 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2e:	83bb      	strh	r3, [r7, #28]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	441a      	add	r2, r3
 8003a3e:	8bbb      	ldrh	r3, [r7, #28]
 8003a40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a54:	8b7b      	ldrh	r3, [r7, #26]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	6959      	ldr	r1, [r3, #20]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	895a      	ldrh	r2, [r3, #10]
 8003a66:	8b7b      	ldrh	r3, [r7, #26]
 8003a68:	f003 fe3c 	bl	80076e4 <USB_ReadPMA>
    }
  }

  return count;
 8003a6c:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b0a6      	sub	sp, #152	@ 0x98
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	4613      	mov	r3, r2
 8003a82:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 81f7 	beq.w	8003e7e <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d907      	bls.n	8003ad4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003acc:	1ad2      	subs	r2, r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	619a      	str	r2, [r3, #24]
 8003ad2:	e002      	b.n	8003ada <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 80e1 	bne.w	8003ca6 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d126      	bne.n	8003b3a <HAL_PCD_EP_DB_Transmit+0xc4>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b00:	4413      	add	r3, r2
 8003b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	00da      	lsls	r2, r3, #3
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b22:	801a      	strh	r2, [r3, #0]
 8003b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	e01a      	b.n	8003b70 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	785b      	ldrb	r3, [r3, #1]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d116      	bne.n	8003b70 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b56:	4413      	add	r3, r2
 8003b58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	00da      	lsls	r2, r3, #3
 8003b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b62:	4413      	add	r3, r2
 8003b64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	785b      	ldrb	r3, [r3, #1]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d126      	bne.n	8003bcc <HAL_PCD_EP_DB_Transmit+0x156>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	623b      	str	r3, [r7, #32]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	4413      	add	r3, r2
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	00da      	lsls	r2, r3, #3
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	801a      	strh	r2, [r3, #0]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	e017      	b.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x186>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	785b      	ldrb	r3, [r3, #1]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d113      	bne.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x186>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be2:	4413      	add	r3, r2
 8003be4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	00da      	lsls	r2, r3, #3
 8003bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bee:	4413      	add	r3, r2
 8003bf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	78db      	ldrb	r3, [r3, #3]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d123      	bne.n	8003c4c <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c1e:	837b      	strh	r3, [r7, #26]
 8003c20:	8b7b      	ldrh	r3, [r7, #26]
 8003c22:	f083 0320 	eor.w	r3, r3, #32
 8003c26:	837b      	strh	r3, [r7, #26]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	441a      	add	r2, r3
 8003c36:	8b7b      	ldrh	r3, [r7, #26]
 8003c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	4619      	mov	r1, r3
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f005 ff23 	bl	8009a9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01f      	beq.n	8003ca2 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7c:	833b      	strh	r3, [r7, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	441a      	add	r2, r3
 8003c8c:	8b3b      	ldrh	r3, [r7, #24]
 8003c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e31f      	b.n	80042e6 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d021      	beq.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	441a      	add	r2, r3
 8003cdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ce8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	f040 82ca 	bne.w	8004294 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d08:	441a      	add	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	69da      	ldr	r2, [r3, #28]
 8003d12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d16:	441a      	add	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6a1a      	ldr	r2, [r3, #32]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d309      	bcc.n	8003d3c <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	6a1a      	ldr	r2, [r3, #32]
 8003d32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d34:	1ad2      	subs	r2, r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	621a      	str	r2, [r3, #32]
 8003d3a:	e015      	b.n	8003d68 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003d44:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d48:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d52:	e009      	b.n	8003d68 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2200      	movs	r2, #0
 8003d66:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d15f      	bne.n	8003e30 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d84:	4413      	add	r3, r2
 8003d86:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	00da      	lsls	r2, r3, #3
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d90:	4413      	add	r3, r2
 8003d92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003da6:	801a      	strh	r2, [r3, #0]
 8003da8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10a      	bne.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x34e>
 8003dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc0:	801a      	strh	r2, [r3, #0]
 8003dc2:	e051      	b.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dc8:	d816      	bhi.n	8003df8 <HAL_PCD_EP_DB_Transmit+0x382>
 8003dca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ddc:	3301      	adds	r3, #1
 8003dde:	653b      	str	r3, [r7, #80]	@ 0x50
 8003de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	029b      	lsls	r3, r3, #10
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df4:	801a      	strh	r2, [r3, #0]
 8003df6:	e037      	b.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003df8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <HAL_PCD_EP_DB_Transmit+0x398>
 8003e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	029b      	lsls	r3, r3, #10
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2c:	801a      	strh	r2, [r3, #0]
 8003e2e:	e01b      	b.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d117      	bne.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e4c:	4413      	add	r3, r2
 8003e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	00da      	lsls	r2, r3, #3
 8003e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e58:	4413      	add	r3, r2
 8003e5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e66:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	6959      	ldr	r1, [r3, #20]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	891a      	ldrh	r2, [r3, #8]
 8003e74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f003 fbf1 	bl	800765e <USB_WritePMA>
 8003e7c:	e20a      	b.n	8004294 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	4413      	add	r3, r2
 8003e98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d307      	bcc.n	8003ec2 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003eba:	1ad2      	subs	r2, r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	619a      	str	r2, [r3, #24]
 8003ec0:	e002      	b.n	8003ec8 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f040 80f6 	bne.w	80040be <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	785b      	ldrb	r3, [r3, #1]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d126      	bne.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eee:	4413      	add	r3, r2
 8003ef0:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	00da      	lsls	r2, r3, #3
 8003ef8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003efa:	4413      	add	r3, r2
 8003efc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f00:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	e01a      	b.n	8003f5e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	785b      	ldrb	r3, [r3, #1]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d116      	bne.n	8003f5e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f44:	4413      	add	r3, r2
 8003f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	00da      	lsls	r2, r3, #3
 8003f4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f50:	4413      	add	r3, r2
 8003f52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d12f      	bne.n	8003fce <HAL_PCD_EP_DB_Transmit+0x558>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f86:	4413      	add	r3, r2
 8003f88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	00da      	lsls	r2, r3, #3
 8003f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f96:	4413      	add	r3, r2
 8003f98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	e01c      	b.n	8004008 <HAL_PCD_EP_DB_Transmit+0x592>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	785b      	ldrb	r3, [r3, #1]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d118      	bne.n	8004008 <HAL_PCD_EP_DB_Transmit+0x592>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	00da      	lsls	r2, r3, #3
 8003ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ffc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004000:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004004:	2200      	movs	r2, #0
 8004006:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	78db      	ldrb	r3, [r3, #3]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d127      	bne.n	8004060 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800402a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800402e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004032:	f083 0320 	eor.w	r3, r3, #32
 8004036:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800404c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004050:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	4619      	mov	r1, r3
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f005 fd19 	bl	8009a9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d121      	bne.n	80040ba <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800408c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004090:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80040a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e113      	b.n	80042e6 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d121      	bne.n	800410c <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	441a      	add	r2, r3
 80040f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80040f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004100:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004108:	b29b      	uxth	r3, r3
 800410a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004112:	2b01      	cmp	r3, #1
 8004114:	f040 80be 	bne.w	8004294 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004120:	441a      	add	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800412e:	441a      	add	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6a1a      	ldr	r2, [r3, #32]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	429a      	cmp	r2, r3
 800413e:	d309      	bcc.n	8004154 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800414c:	1ad2      	subs	r2, r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	621a      	str	r2, [r3, #32]
 8004152:	e015      	b.n	8004180 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d107      	bne.n	800416c <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800415c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004160:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800416a:	e009      	b.n	8004180 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d15f      	bne.n	800424e <HAL_PCD_EP_DB_Transmit+0x7d8>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800419c:	b29b      	uxth	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041a2:	4413      	add	r3, r2
 80041a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	00da      	lsls	r2, r3, #3
 80041ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041ae:	4413      	add	r3, r2
 80041b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80041b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <HAL_PCD_EP_DB_Transmit+0x76c>
 80041cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041da:	b29a      	uxth	r2, r3
 80041dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	e04e      	b.n	8004280 <HAL_PCD_EP_DB_Transmit+0x80a>
 80041e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80041e6:	d816      	bhi.n	8004216 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80041e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_PCD_EP_DB_Transmit+0x788>
 80041f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041fa:	3301      	adds	r3, #1
 80041fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80041fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29a      	uxth	r2, r3
 8004204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004206:	b29b      	uxth	r3, r3
 8004208:	029b      	lsls	r3, r3, #10
 800420a:	b29b      	uxth	r3, r3
 800420c:	4313      	orrs	r3, r2
 800420e:	b29a      	uxth	r2, r3
 8004210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004212:	801a      	strh	r2, [r3, #0]
 8004214:	e034      	b.n	8004280 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004216:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	663b      	str	r3, [r7, #96]	@ 0x60
 800421c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004226:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004228:	3b01      	subs	r3, #1
 800422a:	663b      	str	r3, [r7, #96]	@ 0x60
 800422c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29a      	uxth	r2, r3
 8004232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004234:	b29b      	uxth	r3, r3
 8004236:	029b      	lsls	r3, r3, #10
 8004238:	b29b      	uxth	r3, r3
 800423a:	4313      	orrs	r3, r2
 800423c:	b29b      	uxth	r3, r3
 800423e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004246:	b29a      	uxth	r2, r3
 8004248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	e018      	b.n	8004280 <HAL_PCD_EP_DB_Transmit+0x80a>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d114      	bne.n	8004280 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800425e:	b29b      	uxth	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004264:	4413      	add	r3, r2
 8004266:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	00da      	lsls	r2, r3, #3
 800426e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004270:	4413      	add	r3, r2
 8004272:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004276:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800427a:	b29a      	uxth	r2, r3
 800427c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800427e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6959      	ldr	r1, [r3, #20]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	895a      	ldrh	r2, [r3, #10]
 800428c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800428e:	b29b      	uxth	r3, r3
 8004290:	f003 f9e5 	bl	800765e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ae:	82fb      	strh	r3, [r7, #22]
 80042b0:	8afb      	ldrh	r3, [r7, #22]
 80042b2:	f083 0310 	eor.w	r3, r3, #16
 80042b6:	82fb      	strh	r3, [r7, #22]
 80042b8:	8afb      	ldrh	r3, [r7, #22]
 80042ba:	f083 0320 	eor.w	r3, r3, #32
 80042be:	82fb      	strh	r3, [r7, #22]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	8afb      	ldrh	r3, [r7, #22]
 80042d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3798      	adds	r7, #152	@ 0x98
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b087      	sub	sp, #28
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	817b      	strh	r3, [r7, #10]
 80042fc:	4613      	mov	r3, r2
 80042fe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004300:	897b      	ldrh	r3, [r7, #10]
 8004302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00b      	beq.n	8004324 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800430c:	897b      	ldrh	r3, [r7, #10]
 800430e:	f003 0207 	and.w	r2, r3, #7
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	3310      	adds	r3, #16
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e009      	b.n	8004338 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004324:	897a      	ldrh	r2, [r7, #10]
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4413      	add	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004338:	893b      	ldrh	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d107      	bne.n	800434e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2200      	movs	r2, #0
 8004342:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	b29a      	uxth	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	80da      	strh	r2, [r3, #6]
 800434c:	e00b      	b.n	8004366 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2201      	movs	r2, #1
 8004352:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	b29a      	uxth	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	b29a      	uxth	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004398:	b29b      	uxth	r3, r3
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f043 0302 	orr.w	r3, r3, #2
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d141      	bne.n	800445a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e2:	d131      	bne.n	8004448 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043e4:	4b47      	ldr	r3, [pc, #284]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ea:	4a46      	ldr	r2, [pc, #280]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043f4:	4b43      	ldr	r3, [pc, #268]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043fc:	4a41      	ldr	r2, [pc, #260]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004402:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004404:	4b40      	ldr	r3, [pc, #256]	@ (8004508 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2232      	movs	r2, #50	@ 0x32
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	4a3f      	ldr	r2, [pc, #252]	@ (800450c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	0c9b      	lsrs	r3, r3, #18
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800441a:	e002      	b.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3b01      	subs	r3, #1
 8004420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004422:	4b38      	ldr	r3, [pc, #224]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800442e:	d102      	bne.n	8004436 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f2      	bne.n	800441c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004436:	4b33      	ldr	r3, [pc, #204]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004442:	d158      	bne.n	80044f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e057      	b.n	80044f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004448:	4b2e      	ldr	r3, [pc, #184]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800444e:	4a2d      	ldr	r2, [pc, #180]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004454:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004458:	e04d      	b.n	80044f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004460:	d141      	bne.n	80044e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004462:	4b28      	ldr	r3, [pc, #160]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800446a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800446e:	d131      	bne.n	80044d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004470:	4b24      	ldr	r3, [pc, #144]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004476:	4a23      	ldr	r2, [pc, #140]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800447c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004480:	4b20      	ldr	r3, [pc, #128]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004488:	4a1e      	ldr	r2, [pc, #120]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800448e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004490:	4b1d      	ldr	r3, [pc, #116]	@ (8004508 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2232      	movs	r2, #50	@ 0x32
 8004496:	fb02 f303 	mul.w	r3, r2, r3
 800449a:	4a1c      	ldr	r2, [pc, #112]	@ (800450c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	0c9b      	lsrs	r3, r3, #18
 80044a2:	3301      	adds	r3, #1
 80044a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044a6:	e002      	b.n	80044ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044ae:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ba:	d102      	bne.n	80044c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f2      	bne.n	80044a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044c2:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ce:	d112      	bne.n	80044f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e011      	b.n	80044f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044da:	4a0a      	ldr	r2, [pc, #40]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044e4:	e007      	b.n	80044f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044e6:	4b07      	ldr	r3, [pc, #28]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044ee:	4a05      	ldr	r2, [pc, #20]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40007000 	.word	0x40007000
 8004508:	20000000 	.word	0x20000000
 800450c:	431bde83 	.word	0x431bde83

08004510 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004514:	4b05      	ldr	r3, [pc, #20]	@ (800452c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a04      	ldr	r2, [pc, #16]	@ (800452c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800451a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800451e:	6093      	str	r3, [r2, #8]
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40007000 	.word	0x40007000

08004530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e2fe      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d075      	beq.n	800463a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800454e:	4b97      	ldr	r3, [pc, #604]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004558:	4b94      	ldr	r3, [pc, #592]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b0c      	cmp	r3, #12
 8004566:	d102      	bne.n	800456e <HAL_RCC_OscConfig+0x3e>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d002      	beq.n	8004574 <HAL_RCC_OscConfig+0x44>
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d10b      	bne.n	800458c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	4b8d      	ldr	r3, [pc, #564]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d05b      	beq.n	8004638 <HAL_RCC_OscConfig+0x108>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d157      	bne.n	8004638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e2d9      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004594:	d106      	bne.n	80045a4 <HAL_RCC_OscConfig+0x74>
 8004596:	4b85      	ldr	r3, [pc, #532]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a84      	ldr	r2, [pc, #528]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e01d      	b.n	80045e0 <HAL_RCC_OscConfig+0xb0>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x98>
 80045ae:	4b7f      	ldr	r3, [pc, #508]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7e      	ldr	r2, [pc, #504]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80045b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	4b7c      	ldr	r3, [pc, #496]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a7b      	ldr	r2, [pc, #492]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e00b      	b.n	80045e0 <HAL_RCC_OscConfig+0xb0>
 80045c8:	4b78      	ldr	r3, [pc, #480]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a77      	ldr	r2, [pc, #476]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80045ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	4b75      	ldr	r3, [pc, #468]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a74      	ldr	r2, [pc, #464]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80045da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d013      	beq.n	8004610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fc f9f8 	bl	80009dc <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f0:	f7fc f9f4 	bl	80009dc <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b64      	cmp	r3, #100	@ 0x64
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e29e      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004602:	4b6a      	ldr	r3, [pc, #424]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0xc0>
 800460e:	e014      	b.n	800463a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fc f9e4 	bl	80009dc <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004618:	f7fc f9e0 	bl	80009dc <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	@ 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e28a      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800462a:	4b60      	ldr	r3, [pc, #384]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0xe8>
 8004636:	e000      	b.n	800463a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d075      	beq.n	8004732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004646:	4b59      	ldr	r3, [pc, #356]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004650:	4b56      	ldr	r3, [pc, #344]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b0c      	cmp	r3, #12
 800465e:	d102      	bne.n	8004666 <HAL_RCC_OscConfig+0x136>
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d002      	beq.n	800466c <HAL_RCC_OscConfig+0x13c>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d11f      	bne.n	80046ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800466c:	4b4f      	ldr	r3, [pc, #316]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_OscConfig+0x154>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e25d      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004684:	4b49      	ldr	r3, [pc, #292]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	4946      	ldr	r1, [pc, #280]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004698:	4b45      	ldr	r3, [pc, #276]	@ (80047b0 <HAL_RCC_OscConfig+0x280>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7fc f951 	bl	8000944 <HAL_InitTick>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d043      	beq.n	8004730 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e249      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d023      	beq.n	80046fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b4:	4b3d      	ldr	r3, [pc, #244]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a3c      	ldr	r2, [pc, #240]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80046ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fc f98c 	bl	80009dc <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c8:	f7fc f988 	bl	80009dc <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e232      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046da:	4b34      	ldr	r3, [pc, #208]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e6:	4b31      	ldr	r3, [pc, #196]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	061b      	lsls	r3, r3, #24
 80046f4:	492d      	ldr	r1, [pc, #180]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	604b      	str	r3, [r1, #4]
 80046fa:	e01a      	b.n	8004732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fc:	4b2b      	ldr	r3, [pc, #172]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a2a      	ldr	r2, [pc, #168]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004702:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fc f968 	bl	80009dc <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004710:	f7fc f964 	bl	80009dc <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e20e      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004722:	4b22      	ldr	r3, [pc, #136]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x1e0>
 800472e:	e000      	b.n	8004732 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004730:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d041      	beq.n	80047c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01c      	beq.n	8004780 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004746:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800474c:	4a17      	ldr	r2, [pc, #92]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004756:	f7fc f941 	bl	80009dc <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475e:	f7fc f93d 	bl	80009dc <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e1e7      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004770:	4b0e      	ldr	r3, [pc, #56]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0ef      	beq.n	800475e <HAL_RCC_OscConfig+0x22e>
 800477e:	e020      	b.n	80047c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004780:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004786:	4a09      	ldr	r2, [pc, #36]	@ (80047ac <HAL_RCC_OscConfig+0x27c>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fc f924 	bl	80009dc <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004796:	e00d      	b.n	80047b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004798:	f7fc f920 	bl	80009dc <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d906      	bls.n	80047b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e1ca      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000
 80047b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b4:	4b8c      	ldr	r3, [pc, #560]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1ea      	bne.n	8004798 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80a6 	beq.w	800491c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d0:	2300      	movs	r3, #0
 80047d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047d4:	4b84      	ldr	r3, [pc, #528]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 80047d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_OscConfig+0x2b4>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x2b6>
 80047e4:	2300      	movs	r3, #0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ea:	4b7f      	ldr	r3, [pc, #508]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	4a7e      	ldr	r2, [pc, #504]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 80047f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047f6:	4b7c      	ldr	r3, [pc, #496]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 80047f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004802:	2301      	movs	r3, #1
 8004804:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004806:	4b79      	ldr	r3, [pc, #484]	@ (80049ec <HAL_RCC_OscConfig+0x4bc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d118      	bne.n	8004844 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004812:	4b76      	ldr	r3, [pc, #472]	@ (80049ec <HAL_RCC_OscConfig+0x4bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a75      	ldr	r2, [pc, #468]	@ (80049ec <HAL_RCC_OscConfig+0x4bc>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800481c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481e:	f7fc f8dd 	bl	80009dc <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004826:	f7fc f8d9 	bl	80009dc <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e183      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004838:	4b6c      	ldr	r3, [pc, #432]	@ (80049ec <HAL_RCC_OscConfig+0x4bc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d108      	bne.n	800485e <HAL_RCC_OscConfig+0x32e>
 800484c:	4b66      	ldr	r3, [pc, #408]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004852:	4a65      	ldr	r2, [pc, #404]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800485c:	e024      	b.n	80048a8 <HAL_RCC_OscConfig+0x378>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b05      	cmp	r3, #5
 8004864:	d110      	bne.n	8004888 <HAL_RCC_OscConfig+0x358>
 8004866:	4b60      	ldr	r3, [pc, #384]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486c:	4a5e      	ldr	r2, [pc, #376]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 800486e:	f043 0304 	orr.w	r3, r3, #4
 8004872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004876:	4b5c      	ldr	r3, [pc, #368]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487c:	4a5a      	ldr	r2, [pc, #360]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004886:	e00f      	b.n	80048a8 <HAL_RCC_OscConfig+0x378>
 8004888:	4b57      	ldr	r3, [pc, #348]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488e:	4a56      	ldr	r2, [pc, #344]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 8004890:	f023 0301 	bic.w	r3, r3, #1
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004898:	4b53      	ldr	r3, [pc, #332]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489e:	4a52      	ldr	r2, [pc, #328]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 80048a0:	f023 0304 	bic.w	r3, r3, #4
 80048a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d016      	beq.n	80048de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fc f894 	bl	80009dc <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fc f890 	bl	80009dc <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e138      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ce:	4b46      	ldr	r3, [pc, #280]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 80048d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ed      	beq.n	80048b8 <HAL_RCC_OscConfig+0x388>
 80048dc:	e015      	b.n	800490a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fc f87d 	bl	80009dc <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e4:	e00a      	b.n	80048fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fc f879 	bl	80009dc <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e121      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048fc:	4b3a      	ldr	r3, [pc, #232]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ed      	bne.n	80048e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800490a:	7ffb      	ldrb	r3, [r7, #31]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d105      	bne.n	800491c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004910:	4b35      	ldr	r3, [pc, #212]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	4a34      	ldr	r2, [pc, #208]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 8004916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800491a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d03c      	beq.n	80049a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01c      	beq.n	800496a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004930:	4b2d      	ldr	r3, [pc, #180]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 8004932:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004936:	4a2c      	ldr	r2, [pc, #176]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fc f84c 	bl	80009dc <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004948:	f7fc f848 	bl	80009dc <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e0f2      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800495a:	4b23      	ldr	r3, [pc, #140]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 800495c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ef      	beq.n	8004948 <HAL_RCC_OscConfig+0x418>
 8004968:	e01b      	b.n	80049a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800496a:	4b1f      	ldr	r3, [pc, #124]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 800496c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004970:	4a1d      	ldr	r2, [pc, #116]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fc f82f 	bl	80009dc <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004982:	f7fc f82b 	bl	80009dc <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e0d5      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004994:	4b14      	ldr	r3, [pc, #80]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 8004996:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1ef      	bne.n	8004982 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80c9 	beq.w	8004b3e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ac:	4b0e      	ldr	r3, [pc, #56]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 030c 	and.w	r3, r3, #12
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	f000 8083 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d15e      	bne.n	8004a80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c2:	4b09      	ldr	r3, [pc, #36]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a08      	ldr	r2, [pc, #32]	@ (80049e8 <HAL_RCC_OscConfig+0x4b8>)
 80049c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ce:	f7fc f805 	bl	80009dc <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d4:	e00c      	b.n	80049f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d6:	f7fc f801 	bl	80009dc <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d905      	bls.n	80049f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e0ab      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f0:	4b55      	ldr	r3, [pc, #340]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1ec      	bne.n	80049d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049fc:	4b52      	ldr	r3, [pc, #328]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	4b52      	ldr	r3, [pc, #328]	@ (8004b4c <HAL_RCC_OscConfig+0x61c>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6a11      	ldr	r1, [r2, #32]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a0c:	3a01      	subs	r2, #1
 8004a0e:	0112      	lsls	r2, r2, #4
 8004a10:	4311      	orrs	r1, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004a16:	0212      	lsls	r2, r2, #8
 8004a18:	4311      	orrs	r1, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a1e:	0852      	lsrs	r2, r2, #1
 8004a20:	3a01      	subs	r2, #1
 8004a22:	0552      	lsls	r2, r2, #21
 8004a24:	4311      	orrs	r1, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a2a:	0852      	lsrs	r2, r2, #1
 8004a2c:	3a01      	subs	r2, #1
 8004a2e:	0652      	lsls	r2, r2, #25
 8004a30:	4311      	orrs	r1, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a36:	06d2      	lsls	r2, r2, #27
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	4943      	ldr	r1, [pc, #268]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a40:	4b41      	ldr	r3, [pc, #260]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a40      	ldr	r2, [pc, #256]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004a46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4a3d      	ldr	r2, [pc, #244]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fb ffc0 	bl	80009dc <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fb ffbc 	bl	80009dc <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e066      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a72:	4b35      	ldr	r3, [pc, #212]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x530>
 8004a7e:	e05e      	b.n	8004b3e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a80:	4b31      	ldr	r3, [pc, #196]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a30      	ldr	r2, [pc, #192]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004a86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fb ffa6 	bl	80009dc <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fb ffa2 	bl	80009dc <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e04c      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa6:	4b28      	ldr	r3, [pc, #160]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ab2:	4b25      	ldr	r3, [pc, #148]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	4924      	ldr	r1, [pc, #144]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004ab8:	4b25      	ldr	r3, [pc, #148]	@ (8004b50 <HAL_RCC_OscConfig+0x620>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	60cb      	str	r3, [r1, #12]
 8004abe:	e03e      	b.n	8004b3e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e039      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004acc:	4b1e      	ldr	r3, [pc, #120]	@ (8004b48 <HAL_RCC_OscConfig+0x618>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f003 0203 	and.w	r2, r3, #3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d12c      	bne.n	8004b3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	3b01      	subs	r3, #1
 8004aec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d123      	bne.n	8004b3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d11b      	bne.n	8004b3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d113      	bne.n	8004b3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d109      	bne.n	8004b3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	3b01      	subs	r3, #1
 8004b34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	019f800c 	.word	0x019f800c
 8004b50:	feeefffc 	.word	0xfeeefffc

08004b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e11e      	b.n	8004daa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b6c:	4b91      	ldr	r3, [pc, #580]	@ (8004db4 <HAL_RCC_ClockConfig+0x260>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d910      	bls.n	8004b9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7a:	4b8e      	ldr	r3, [pc, #568]	@ (8004db4 <HAL_RCC_ClockConfig+0x260>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 020f 	bic.w	r2, r3, #15
 8004b82:	498c      	ldr	r1, [pc, #560]	@ (8004db4 <HAL_RCC_ClockConfig+0x260>)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b8a      	ldr	r3, [pc, #552]	@ (8004db4 <HAL_RCC_ClockConfig+0x260>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e106      	b.n	8004daa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d073      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d129      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb0:	4b81      	ldr	r3, [pc, #516]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0f4      	b.n	8004daa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004bc0:	f000 f966 	bl	8004e90 <RCC_GetSysClockFreqFromPLLSource>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4a7c      	ldr	r2, [pc, #496]	@ (8004dbc <HAL_RCC_ClockConfig+0x268>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d93f      	bls.n	8004c4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bce:	4b7a      	ldr	r3, [pc, #488]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d033      	beq.n	8004c4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d12f      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bee:	4b72      	ldr	r3, [pc, #456]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bf6:	4a70      	ldr	r2, [pc, #448]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bfe:	2380      	movs	r3, #128	@ 0x80
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	e024      	b.n	8004c4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d107      	bne.n	8004c1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d109      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0c6      	b.n	8004daa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c1c:	4b66      	ldr	r3, [pc, #408]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0be      	b.n	8004daa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c2c:	f000 f8ce 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4a61      	ldr	r2, [pc, #388]	@ (8004dbc <HAL_RCC_ClockConfig+0x268>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d909      	bls.n	8004c4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c42:	4a5d      	ldr	r2, [pc, #372]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c4a:	2380      	movs	r3, #128	@ 0x80
 8004c4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c4e:	4b5a      	ldr	r3, [pc, #360]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f023 0203 	bic.w	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4957      	ldr	r1, [pc, #348]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c60:	f7fb febc 	bl	80009dc <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c68:	f7fb feb8 	bl	80009dc <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e095      	b.n	8004daa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 020c 	and.w	r2, r3, #12
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d1eb      	bne.n	8004c68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d023      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ca8:	4b43      	ldr	r3, [pc, #268]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4a42      	ldr	r2, [pc, #264]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004cae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004cc8:	4a3b      	ldr	r2, [pc, #236]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004cca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd0:	4b39      	ldr	r3, [pc, #228]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4936      	ldr	r1, [pc, #216]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2b80      	cmp	r3, #128	@ 0x80
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cea:	4b33      	ldr	r3, [pc, #204]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	4a32      	ldr	r2, [pc, #200]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004cf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cf4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8004db4 <HAL_RCC_ClockConfig+0x260>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d21d      	bcs.n	8004d40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d04:	4b2b      	ldr	r3, [pc, #172]	@ (8004db4 <HAL_RCC_ClockConfig+0x260>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f023 020f 	bic.w	r2, r3, #15
 8004d0c:	4929      	ldr	r1, [pc, #164]	@ (8004db4 <HAL_RCC_ClockConfig+0x260>)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d14:	f7fb fe62 	bl	80009dc <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d1c:	f7fb fe5e 	bl	80009dc <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e03b      	b.n	8004daa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b20      	ldr	r3, [pc, #128]	@ (8004db4 <HAL_RCC_ClockConfig+0x260>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d1ed      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	4917      	ldr	r1, [pc, #92]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d6a:	4b13      	ldr	r3, [pc, #76]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	490f      	ldr	r1, [pc, #60]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d7e:	f000 f825 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8004d82:	4602      	mov	r2, r0
 8004d84:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <HAL_RCC_ClockConfig+0x264>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	490c      	ldr	r1, [pc, #48]	@ (8004dc0 <HAL_RCC_ClockConfig+0x26c>)
 8004d90:	5ccb      	ldrb	r3, [r1, r3]
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc4 <HAL_RCC_ClockConfig+0x270>)
 8004d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc8 <HAL_RCC_ClockConfig+0x274>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fb fdce 	bl	8000944 <HAL_InitTick>
 8004da8:	4603      	mov	r3, r0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40022000 	.word	0x40022000
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	04c4b400 	.word	0x04c4b400
 8004dc0:	0800a094 	.word	0x0800a094
 8004dc4:	20000000 	.word	0x20000000
 8004dc8:	20000004 	.word	0x20000004

08004dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d102      	bne.n	8004de4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dde:	4b2a      	ldr	r3, [pc, #168]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	e047      	b.n	8004e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004de4:	4b27      	ldr	r3, [pc, #156]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d102      	bne.n	8004df6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004df0:	4b26      	ldr	r3, [pc, #152]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	e03e      	b.n	8004e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004df6:	4b23      	ldr	r3, [pc, #140]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d136      	bne.n	8004e70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e02:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	3301      	adds	r3, #1
 8004e18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d10c      	bne.n	8004e3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e20:	4a1a      	ldr	r2, [pc, #104]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	4a16      	ldr	r2, [pc, #88]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e2a:	68d2      	ldr	r2, [r2, #12]
 8004e2c:	0a12      	lsrs	r2, r2, #8
 8004e2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	617b      	str	r3, [r7, #20]
      break;
 8004e38:	e00c      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e3a:	4a13      	ldr	r2, [pc, #76]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	4a10      	ldr	r2, [pc, #64]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e44:	68d2      	ldr	r2, [r2, #12]
 8004e46:	0a12      	lsrs	r2, r2, #8
 8004e48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e4c:	fb02 f303 	mul.w	r3, r2, r3
 8004e50:	617b      	str	r3, [r7, #20]
      break;
 8004e52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e54:	4b0b      	ldr	r3, [pc, #44]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	0e5b      	lsrs	r3, r3, #25
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	e001      	b.n	8004e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e74:	693b      	ldr	r3, [r7, #16]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	00f42400 	.word	0x00f42400
 8004e8c:	007a1200 	.word	0x007a1200

08004e90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e96:	4b1e      	ldr	r3, [pc, #120]	@ (8004f10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d10c      	bne.n	8004ece <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eb4:	4a17      	ldr	r2, [pc, #92]	@ (8004f14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	4a14      	ldr	r2, [pc, #80]	@ (8004f10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ebe:	68d2      	ldr	r2, [r2, #12]
 8004ec0:	0a12      	lsrs	r2, r2, #8
 8004ec2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ec6:	fb02 f303 	mul.w	r3, r2, r3
 8004eca:	617b      	str	r3, [r7, #20]
    break;
 8004ecc:	e00c      	b.n	8004ee8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ece:	4a12      	ldr	r2, [pc, #72]	@ (8004f18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8004f10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ed8:	68d2      	ldr	r2, [r2, #12]
 8004eda:	0a12      	lsrs	r2, r2, #8
 8004edc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ee0:	fb02 f303 	mul.w	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]
    break;
 8004ee6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ee8:	4b09      	ldr	r3, [pc, #36]	@ (8004f10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	0e5b      	lsrs	r3, r3, #25
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f02:	687b      	ldr	r3, [r7, #4]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40021000 	.word	0x40021000
 8004f14:	007a1200 	.word	0x007a1200
 8004f18:	00f42400 	.word	0x00f42400

08004f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f24:	2300      	movs	r3, #0
 8004f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f28:	2300      	movs	r3, #0
 8004f2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8098 	beq.w	800506a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f3e:	4b43      	ldr	r3, [pc, #268]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10d      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f4a:	4b40      	ldr	r3, [pc, #256]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f56:	4b3d      	ldr	r3, [pc, #244]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5e:	60bb      	str	r3, [r7, #8]
 8004f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f62:	2301      	movs	r3, #1
 8004f64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f66:	4b3a      	ldr	r3, [pc, #232]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a39      	ldr	r2, [pc, #228]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f72:	f7fb fd33 	bl	80009dc <HAL_GetTick>
 8004f76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f78:	e009      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7a:	f7fb fd2f 	bl	80009dc <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d902      	bls.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	74fb      	strb	r3, [r7, #19]
        break;
 8004f8c:	e005      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f8e:	4b30      	ldr	r3, [pc, #192]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0ef      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f9a:	7cfb      	ldrb	r3, [r7, #19]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d159      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004faa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01e      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d019      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fbc:	4b23      	ldr	r3, [pc, #140]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fc8:	4b20      	ldr	r3, [pc, #128]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fce:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fde:	4a1b      	ldr	r2, [pc, #108]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fe8:	4a18      	ldr	r2, [pc, #96]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fb fcef 	bl	80009dc <HAL_GetTick>
 8004ffe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005000:	e00b      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7fb fceb 	bl	80009dc <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005010:	4293      	cmp	r3, r2
 8005012:	d902      	bls.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	74fb      	strb	r3, [r7, #19]
            break;
 8005018:	e006      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501a:	4b0c      	ldr	r3, [pc, #48]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0ec      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005028:	7cfb      	ldrb	r3, [r7, #19]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10b      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800502e:	4b07      	ldr	r3, [pc, #28]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005034:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503c:	4903      	ldr	r1, [pc, #12]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005044:	e008      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	74bb      	strb	r3, [r7, #18]
 800504a:	e005      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800504c:	40021000 	.word	0x40021000
 8005050:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005054:	7cfb      	ldrb	r3, [r7, #19]
 8005056:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005058:	7c7b      	ldrb	r3, [r7, #17]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d105      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800505e:	4ba6      	ldr	r3, [pc, #664]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005062:	4aa5      	ldr	r2, [pc, #660]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005068:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005076:	4ba0      	ldr	r3, [pc, #640]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507c:	f023 0203 	bic.w	r2, r3, #3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	499c      	ldr	r1, [pc, #624]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005098:	4b97      	ldr	r3, [pc, #604]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509e:	f023 020c 	bic.w	r2, r3, #12
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	4994      	ldr	r1, [pc, #592]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050ba:	4b8f      	ldr	r3, [pc, #572]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	498b      	ldr	r1, [pc, #556]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050dc:	4b86      	ldr	r3, [pc, #536]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	4983      	ldr	r1, [pc, #524]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050fe:	4b7e      	ldr	r3, [pc, #504]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005104:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	497a      	ldr	r1, [pc, #488]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005120:	4b75      	ldr	r3, [pc, #468]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005126:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	4972      	ldr	r1, [pc, #456]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005142:	4b6d      	ldr	r3, [pc, #436]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005148:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	4969      	ldr	r1, [pc, #420]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005164:	4b64      	ldr	r3, [pc, #400]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	4961      	ldr	r1, [pc, #388]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005186:	4b5c      	ldr	r3, [pc, #368]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	4958      	ldr	r1, [pc, #352]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d015      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051a8:	4b53      	ldr	r3, [pc, #332]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b6:	4950      	ldr	r1, [pc, #320]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051c6:	d105      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c8:	4b4b      	ldr	r3, [pc, #300]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a4a      	ldr	r2, [pc, #296]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d015      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051e0:	4b45      	ldr	r3, [pc, #276]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	4942      	ldr	r1, [pc, #264]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051fe:	d105      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005200:	4b3d      	ldr	r3, [pc, #244]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a3c      	ldr	r2, [pc, #240]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800520a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d015      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005218:	4b37      	ldr	r3, [pc, #220]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	4934      	ldr	r1, [pc, #208]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005232:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005236:	d105      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005238:	4b2f      	ldr	r3, [pc, #188]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4a2e      	ldr	r2, [pc, #184]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005242:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d015      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005250:	4b29      	ldr	r3, [pc, #164]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800525e:	4926      	ldr	r1, [pc, #152]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800526e:	d105      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005270:	4b21      	ldr	r3, [pc, #132]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4a20      	ldr	r2, [pc, #128]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800527a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d015      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005288:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005296:	4918      	ldr	r1, [pc, #96]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052a6:	d105      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a8:	4b13      	ldr	r3, [pc, #76]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4a12      	ldr	r2, [pc, #72]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052c0:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ce:	490a      	ldr	r1, [pc, #40]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052de:	d105      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052e0:	4b05      	ldr	r3, [pc, #20]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a04      	ldr	r2, [pc, #16]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000

080052fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e049      	b.n	80053a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fb fa1a 	bl	800075c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 f94a 	bl	80055d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e0ff      	b.n	80055ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b14      	cmp	r3, #20
 80053d6:	f200 80f0 	bhi.w	80055ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053da:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005435 	.word	0x08005435
 80053e4:	080055bb 	.word	0x080055bb
 80053e8:	080055bb 	.word	0x080055bb
 80053ec:	080055bb 	.word	0x080055bb
 80053f0:	08005475 	.word	0x08005475
 80053f4:	080055bb 	.word	0x080055bb
 80053f8:	080055bb 	.word	0x080055bb
 80053fc:	080055bb 	.word	0x080055bb
 8005400:	080054b7 	.word	0x080054b7
 8005404:	080055bb 	.word	0x080055bb
 8005408:	080055bb 	.word	0x080055bb
 800540c:	080055bb 	.word	0x080055bb
 8005410:	080054f7 	.word	0x080054f7
 8005414:	080055bb 	.word	0x080055bb
 8005418:	080055bb 	.word	0x080055bb
 800541c:	080055bb 	.word	0x080055bb
 8005420:	08005539 	.word	0x08005539
 8005424:	080055bb 	.word	0x080055bb
 8005428:	080055bb 	.word	0x080055bb
 800542c:	080055bb 	.word	0x080055bb
 8005430:	08005579 	.word	0x08005579
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f966 	bl	800570c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0208 	orr.w	r2, r2, #8
 800544e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0204 	bic.w	r2, r2, #4
 800545e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6999      	ldr	r1, [r3, #24]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	619a      	str	r2, [r3, #24]
      break;
 8005472:	e0a5      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f9d6 	bl	800582c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800548e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800549e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6999      	ldr	r1, [r3, #24]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	021a      	lsls	r2, r3, #8
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	619a      	str	r2, [r3, #24]
      break;
 80054b4:	e084      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fa3f 	bl	8005940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0208 	orr.w	r2, r2, #8
 80054d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0204 	bic.w	r2, r2, #4
 80054e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69d9      	ldr	r1, [r3, #28]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	61da      	str	r2, [r3, #28]
      break;
 80054f4:	e064      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 faa7 	bl	8005a50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69d9      	ldr	r1, [r3, #28]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	021a      	lsls	r2, r3, #8
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	61da      	str	r2, [r3, #28]
      break;
 8005536:	e043      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fb10 	bl	8005b64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0208 	orr.w	r2, r2, #8
 8005552:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0204 	bic.w	r2, r2, #4
 8005562:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005576:	e023      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fb54 	bl	8005c2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005592:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	021a      	lsls	r2, r3, #8
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80055b8:	e002      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	75fb      	strb	r3, [r7, #23]
      break;
 80055be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop

080055d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a42      	ldr	r2, [pc, #264]	@ (80056f0 <TIM_Base_SetConfig+0x11c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_Base_SetConfig+0x38>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f2:	d00b      	beq.n	800560c <TIM_Base_SetConfig+0x38>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a3f      	ldr	r2, [pc, #252]	@ (80056f4 <TIM_Base_SetConfig+0x120>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_Base_SetConfig+0x38>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a3e      	ldr	r2, [pc, #248]	@ (80056f8 <TIM_Base_SetConfig+0x124>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0x38>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a3d      	ldr	r2, [pc, #244]	@ (80056fc <TIM_Base_SetConfig+0x128>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d108      	bne.n	800561e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a33      	ldr	r2, [pc, #204]	@ (80056f0 <TIM_Base_SetConfig+0x11c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01b      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562c:	d017      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a30      	ldr	r2, [pc, #192]	@ (80056f4 <TIM_Base_SetConfig+0x120>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2f      	ldr	r2, [pc, #188]	@ (80056f8 <TIM_Base_SetConfig+0x124>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00f      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2e      	ldr	r2, [pc, #184]	@ (80056fc <TIM_Base_SetConfig+0x128>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00b      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2d      	ldr	r2, [pc, #180]	@ (8005700 <TIM_Base_SetConfig+0x12c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d007      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a2c      	ldr	r2, [pc, #176]	@ (8005704 <TIM_Base_SetConfig+0x130>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_Base_SetConfig+0x8a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a2b      	ldr	r2, [pc, #172]	@ (8005708 <TIM_Base_SetConfig+0x134>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d108      	bne.n	8005670 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a16      	ldr	r2, [pc, #88]	@ (80056f0 <TIM_Base_SetConfig+0x11c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0xe8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a17      	ldr	r2, [pc, #92]	@ (80056fc <TIM_Base_SetConfig+0x128>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0xe8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a16      	ldr	r2, [pc, #88]	@ (8005700 <TIM_Base_SetConfig+0x12c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0xe8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a15      	ldr	r2, [pc, #84]	@ (8005704 <TIM_Base_SetConfig+0x130>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0xe8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a14      	ldr	r2, [pc, #80]	@ (8005708 <TIM_Base_SetConfig+0x134>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d103      	bne.n	80056c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d105      	bne.n	80056e2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f023 0201 	bic.w	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]
  }
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40013400 	.word	0x40013400
 8005700:	40014000 	.word	0x40014000
 8005704:	40014400 	.word	0x40014400
 8005708:	40014800 	.word	0x40014800

0800570c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f023 0201 	bic.w	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800573a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0303 	bic.w	r3, r3, #3
 8005746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f023 0302 	bic.w	r3, r3, #2
 8005758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a2c      	ldr	r2, [pc, #176]	@ (8005818 <TIM_OC1_SetConfig+0x10c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00f      	beq.n	800578c <TIM_OC1_SetConfig+0x80>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a2b      	ldr	r2, [pc, #172]	@ (800581c <TIM_OC1_SetConfig+0x110>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00b      	beq.n	800578c <TIM_OC1_SetConfig+0x80>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a2a      	ldr	r2, [pc, #168]	@ (8005820 <TIM_OC1_SetConfig+0x114>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_OC1_SetConfig+0x80>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a29      	ldr	r2, [pc, #164]	@ (8005824 <TIM_OC1_SetConfig+0x118>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_OC1_SetConfig+0x80>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a28      	ldr	r2, [pc, #160]	@ (8005828 <TIM_OC1_SetConfig+0x11c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d10c      	bne.n	80057a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0308 	bic.w	r3, r3, #8
 8005792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f023 0304 	bic.w	r3, r3, #4
 80057a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005818 <TIM_OC1_SetConfig+0x10c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00f      	beq.n	80057ce <TIM_OC1_SetConfig+0xc2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1a      	ldr	r2, [pc, #104]	@ (800581c <TIM_OC1_SetConfig+0x110>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00b      	beq.n	80057ce <TIM_OC1_SetConfig+0xc2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a19      	ldr	r2, [pc, #100]	@ (8005820 <TIM_OC1_SetConfig+0x114>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d007      	beq.n	80057ce <TIM_OC1_SetConfig+0xc2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a18      	ldr	r2, [pc, #96]	@ (8005824 <TIM_OC1_SetConfig+0x118>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_OC1_SetConfig+0xc2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a17      	ldr	r2, [pc, #92]	@ (8005828 <TIM_OC1_SetConfig+0x11c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d111      	bne.n	80057f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	621a      	str	r2, [r3, #32]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40013400 	.word	0x40013400
 8005820:	40014000 	.word	0x40014000
 8005824:	40014400 	.word	0x40014400
 8005828:	40014800 	.word	0x40014800

0800582c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f023 0210 	bic.w	r2, r3, #16
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 0320 	bic.w	r3, r3, #32
 800587a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a28      	ldr	r2, [pc, #160]	@ (800592c <TIM_OC2_SetConfig+0x100>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_OC2_SetConfig+0x6c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a27      	ldr	r2, [pc, #156]	@ (8005930 <TIM_OC2_SetConfig+0x104>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d10d      	bne.n	80058b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800589e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	@ (800592c <TIM_OC2_SetConfig+0x100>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00f      	beq.n	80058dc <TIM_OC2_SetConfig+0xb0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a1c      	ldr	r2, [pc, #112]	@ (8005930 <TIM_OC2_SetConfig+0x104>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00b      	beq.n	80058dc <TIM_OC2_SetConfig+0xb0>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005934 <TIM_OC2_SetConfig+0x108>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_OC2_SetConfig+0xb0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005938 <TIM_OC2_SetConfig+0x10c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_OC2_SetConfig+0xb0>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a19      	ldr	r2, [pc, #100]	@ (800593c <TIM_OC2_SetConfig+0x110>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d113      	bne.n	8005904 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40013400 	.word	0x40013400
 8005934:	40014000 	.word	0x40014000
 8005938:	40014400 	.word	0x40014400
 800593c:	40014800 	.word	0x40014800

08005940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800596e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0303 	bic.w	r3, r3, #3
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800598c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a27      	ldr	r2, [pc, #156]	@ (8005a3c <TIM_OC3_SetConfig+0xfc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_OC3_SetConfig+0x6a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a26      	ldr	r2, [pc, #152]	@ (8005a40 <TIM_OC3_SetConfig+0x100>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d10d      	bne.n	80059c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a3c <TIM_OC3_SetConfig+0xfc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00f      	beq.n	80059ee <TIM_OC3_SetConfig+0xae>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a40 <TIM_OC3_SetConfig+0x100>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00b      	beq.n	80059ee <TIM_OC3_SetConfig+0xae>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a44 <TIM_OC3_SetConfig+0x104>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d007      	beq.n	80059ee <TIM_OC3_SetConfig+0xae>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a19      	ldr	r2, [pc, #100]	@ (8005a48 <TIM_OC3_SetConfig+0x108>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC3_SetConfig+0xae>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a18      	ldr	r2, [pc, #96]	@ (8005a4c <TIM_OC3_SetConfig+0x10c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d113      	bne.n	8005a16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	621a      	str	r2, [r3, #32]
}
 8005a30:	bf00      	nop
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40013400 	.word	0x40013400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800

08005a50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	031b      	lsls	r3, r3, #12
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a28      	ldr	r2, [pc, #160]	@ (8005b50 <TIM_OC4_SetConfig+0x100>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC4_SetConfig+0x6c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a27      	ldr	r2, [pc, #156]	@ (8005b54 <TIM_OC4_SetConfig+0x104>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d10d      	bne.n	8005ad8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	031b      	lsls	r3, r3, #12
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ad6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1d      	ldr	r2, [pc, #116]	@ (8005b50 <TIM_OC4_SetConfig+0x100>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00f      	beq.n	8005b00 <TIM_OC4_SetConfig+0xb0>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b54 <TIM_OC4_SetConfig+0x104>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00b      	beq.n	8005b00 <TIM_OC4_SetConfig+0xb0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a1b      	ldr	r2, [pc, #108]	@ (8005b58 <TIM_OC4_SetConfig+0x108>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d007      	beq.n	8005b00 <TIM_OC4_SetConfig+0xb0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b5c <TIM_OC4_SetConfig+0x10c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_OC4_SetConfig+0xb0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a19      	ldr	r2, [pc, #100]	@ (8005b60 <TIM_OC4_SetConfig+0x110>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d113      	bne.n	8005b28 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	019b      	lsls	r3, r3, #6
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40013400 	.word	0x40013400
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800

08005b64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005ba8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	041b      	lsls	r3, r3, #16
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a17      	ldr	r2, [pc, #92]	@ (8005c18 <TIM_OC5_SetConfig+0xb4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00f      	beq.n	8005bde <TIM_OC5_SetConfig+0x7a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a16      	ldr	r2, [pc, #88]	@ (8005c1c <TIM_OC5_SetConfig+0xb8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00b      	beq.n	8005bde <TIM_OC5_SetConfig+0x7a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a15      	ldr	r2, [pc, #84]	@ (8005c20 <TIM_OC5_SetConfig+0xbc>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d007      	beq.n	8005bde <TIM_OC5_SetConfig+0x7a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a14      	ldr	r2, [pc, #80]	@ (8005c24 <TIM_OC5_SetConfig+0xc0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_OC5_SetConfig+0x7a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a13      	ldr	r2, [pc, #76]	@ (8005c28 <TIM_OC5_SetConfig+0xc4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d109      	bne.n	8005bf2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005be4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	621a      	str	r2, [r3, #32]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800

08005c2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	051b      	lsls	r3, r3, #20
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a18      	ldr	r2, [pc, #96]	@ (8005ce4 <TIM_OC6_SetConfig+0xb8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00f      	beq.n	8005ca8 <TIM_OC6_SetConfig+0x7c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a17      	ldr	r2, [pc, #92]	@ (8005ce8 <TIM_OC6_SetConfig+0xbc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00b      	beq.n	8005ca8 <TIM_OC6_SetConfig+0x7c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a16      	ldr	r2, [pc, #88]	@ (8005cec <TIM_OC6_SetConfig+0xc0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d007      	beq.n	8005ca8 <TIM_OC6_SetConfig+0x7c>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a15      	ldr	r2, [pc, #84]	@ (8005cf0 <TIM_OC6_SetConfig+0xc4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_OC6_SetConfig+0x7c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a14      	ldr	r2, [pc, #80]	@ (8005cf4 <TIM_OC6_SetConfig+0xc8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d109      	bne.n	8005cbc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	029b      	lsls	r3, r3, #10
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40012c00 	.word	0x40012c00
 8005ce8:	40013400 	.word	0x40013400
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40014400 	.word	0x40014400
 8005cf4:	40014800 	.word	0x40014800

08005cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e065      	b.n	8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a2c      	ldr	r2, [pc, #176]	@ (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d108      	bne.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1b      	ldr	r2, [pc, #108]	@ (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d018      	beq.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d86:	d013      	beq.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a18      	ldr	r2, [pc, #96]	@ (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a17      	ldr	r2, [pc, #92]	@ (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a12      	ldr	r2, [pc, #72]	@ (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a13      	ldr	r2, [pc, #76]	@ (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10c      	bne.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005db6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40013400 	.word	0x40013400
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800
 8005df8:	40014000 	.word	0x40014000

08005dfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e0c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005e10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e32:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005e36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	4013      	ands	r3, r2
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	1d3b      	adds	r3, r7, #4
 8005e6a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b0a7      	sub	sp, #156	@ 0x9c
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	78db      	ldrb	r3, [r3, #3]
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d81f      	bhi.n	8005f0e <USB_ActivateEndpoint+0x72>
 8005ece:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed4 <USB_ActivateEndpoint+0x38>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005ee5 	.word	0x08005ee5
 8005ed8:	08005f01 	.word	0x08005f01
 8005edc:	08005f17 	.word	0x08005f17
 8005ee0:	08005ef3 	.word	0x08005ef3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ee4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005ee8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005eec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005ef0:	e012      	b.n	8005f18 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ef2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005ef6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005efa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005efe:	e00b      	b.n	8005f18 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f00:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f08:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005f0c:	e004      	b.n	8005f18 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8005f14:	e000      	b.n	8005f18 <USB_ActivateEndpoint+0x7c>
      break;
 8005f16:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	b21b      	sxth	r3, r3
 8005f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f52:	b21a      	sxth	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	b21b      	sxth	r3, r3
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b21b      	sxth	r3, r3
 8005f5e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	441a      	add	r2, r3
 8005f6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	7b1b      	ldrb	r3, [r3, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f040 8180 	bne.w	800628e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8084 	beq.w	80060a0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	61bb      	str	r3, [r7, #24]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	4413      	add	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	00da      	lsls	r2, r3, #3
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	88db      	ldrh	r3, [r3, #6]
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	827b      	strh	r3, [r7, #18]
 8005fda:	8a7b      	ldrh	r3, [r7, #18]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <USB_ActivateEndpoint+0x180>
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffa:	823b      	strh	r3, [r7, #16]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	441a      	add	r2, r3
 8006006:	8a3b      	ldrh	r3, [r7, #16]
 8006008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800600c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006014:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006018:	b29b      	uxth	r3, r3
 800601a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	78db      	ldrb	r3, [r3, #3]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d020      	beq.n	8006066 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800603a:	81bb      	strh	r3, [r7, #12]
 800603c:	89bb      	ldrh	r3, [r7, #12]
 800603e:	f083 0320 	eor.w	r3, r3, #32
 8006042:	81bb      	strh	r3, [r7, #12]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	89bb      	ldrh	r3, [r7, #12]
 8006050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800605c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006060:	b29b      	uxth	r3, r3
 8006062:	8013      	strh	r3, [r2, #0]
 8006064:	e3f9      	b.n	800685a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800607c:	81fb      	strh	r3, [r7, #14]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	89fb      	ldrh	r3, [r7, #14]
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
 800609e:	e3dc      	b.n	800685a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	4413      	add	r3, r2
 80060b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	00da      	lsls	r2, r3, #3
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	4413      	add	r3, r2
 80060be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	88db      	ldrh	r3, [r3, #6]
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060de:	b29b      	uxth	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e4:	4413      	add	r3, r2
 80060e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	00da      	lsls	r2, r3, #3
 80060ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f0:	4413      	add	r3, r2
 80060f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006102:	b29a      	uxth	r2, r3
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <USB_ActivateEndpoint+0x28a>
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611e:	b29a      	uxth	r2, r3
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	e041      	b.n	80061aa <USB_ActivateEndpoint+0x30e>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b3e      	cmp	r3, #62	@ 0x3e
 800612c:	d81c      	bhi.n	8006168 <USB_ActivateEndpoint+0x2cc>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d004      	beq.n	800614e <USB_ActivateEndpoint+0x2b2>
 8006144:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006148:	3301      	adds	r3, #1
 800614a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29a      	uxth	r2, r3
 8006154:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006158:	b29b      	uxth	r3, r3
 800615a:	029b      	lsls	r3, r3, #10
 800615c:	b29b      	uxth	r3, r3
 800615e:	4313      	orrs	r3, r2
 8006160:	b29a      	uxth	r2, r3
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	801a      	strh	r2, [r3, #0]
 8006166:	e020      	b.n	80061aa <USB_ActivateEndpoint+0x30e>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <USB_ActivateEndpoint+0x2ec>
 800617e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006182:	3b01      	subs	r3, #1
 8006184:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29a      	uxth	r2, r3
 800618e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006192:	b29b      	uxth	r3, r3
 8006194:	029b      	lsls	r3, r3, #10
 8006196:	b29b      	uxth	r3, r3
 8006198:	4313      	orrs	r3, r2
 800619a:	b29b      	uxth	r3, r3
 800619c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80061b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d01b      	beq.n	80061fa <USB_ActivateEndpoint+0x35e>
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d8:	843b      	strh	r3, [r7, #32]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	441a      	add	r2, r3
 80061e4:	8c3b      	ldrh	r3, [r7, #32]
 80061e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d124      	bne.n	800624c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006218:	83bb      	strh	r3, [r7, #28]
 800621a:	8bbb      	ldrh	r3, [r7, #28]
 800621c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006220:	83bb      	strh	r3, [r7, #28]
 8006222:	8bbb      	ldrh	r3, [r7, #28]
 8006224:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006228:	83bb      	strh	r3, [r7, #28]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	441a      	add	r2, r3
 8006234:	8bbb      	ldrh	r3, [r7, #28]
 8006236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800623a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800623e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006246:	b29b      	uxth	r3, r3
 8006248:	8013      	strh	r3, [r2, #0]
 800624a:	e306      	b.n	800685a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b29b      	uxth	r3, r3
 800625a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800625e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006262:	83fb      	strh	r3, [r7, #30]
 8006264:	8bfb      	ldrh	r3, [r7, #30]
 8006266:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800626a:	83fb      	strh	r3, [r7, #30]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	441a      	add	r2, r3
 8006276:	8bfb      	ldrh	r3, [r7, #30]
 8006278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800627c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006288:	b29b      	uxth	r3, r3
 800628a:	8013      	strh	r3, [r2, #0]
 800628c:	e2e5      	b.n	800685a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	78db      	ldrb	r3, [r3, #3]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d11e      	bne.n	80062d4 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ac:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	441a      	add	r2, r3
 80062ba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80062be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80062ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	8013      	strh	r3, [r2, #0]
 80062d2:	e01d      	b.n	8006310 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80062e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ea:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	441a      	add	r2, r3
 80062f8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80062fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800630c:	b29b      	uxth	r3, r3
 800630e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800631a:	b29b      	uxth	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006320:	4413      	add	r3, r2
 8006322:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	00da      	lsls	r2, r3, #3
 800632a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800632c:	4413      	add	r3, r2
 800632e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006332:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	891b      	ldrh	r3, [r3, #8]
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	b29b      	uxth	r3, r3
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	677b      	str	r3, [r7, #116]	@ 0x74
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800634e:	b29b      	uxth	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006354:	4413      	add	r3, r2
 8006356:	677b      	str	r3, [r7, #116]	@ 0x74
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	00da      	lsls	r2, r3, #3
 800635e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006360:	4413      	add	r3, r2
 8006362:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006366:	673b      	str	r3, [r7, #112]	@ 0x70
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	895b      	ldrh	r3, [r3, #10]
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	b29b      	uxth	r3, r3
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006376:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 81af 	bne.w	80066e0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006392:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01d      	beq.n	80063da <USB_ActivateEndpoint+0x53e>
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80063ea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80063ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d01d      	beq.n	8006432 <USB_ActivateEndpoint+0x596>
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800641e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800642a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d16b      	bne.n	8006512 <USB_ActivateEndpoint+0x676>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006444:	b29b      	uxth	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800644a:	4413      	add	r3, r2
 800644c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	00da      	lsls	r2, r3, #3
 8006454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006456:	4413      	add	r3, r2
 8006458:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800645c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800645e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006468:	b29a      	uxth	r2, r3
 800646a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800646c:	801a      	strh	r2, [r3, #0]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <USB_ActivateEndpoint+0x5f0>
 8006476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006484:	b29a      	uxth	r2, r3
 8006486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	e05d      	b.n	8006548 <USB_ActivateEndpoint+0x6ac>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2b3e      	cmp	r3, #62	@ 0x3e
 8006492:	d81c      	bhi.n	80064ce <USB_ActivateEndpoint+0x632>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <USB_ActivateEndpoint+0x618>
 80064aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064ae:	3301      	adds	r3, #1
 80064b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064be:	b29b      	uxth	r3, r3
 80064c0:	029b      	lsls	r3, r3, #10
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4313      	orrs	r3, r2
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	e03c      	b.n	8006548 <USB_ActivateEndpoint+0x6ac>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <USB_ActivateEndpoint+0x652>
 80064e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064e8:	3b01      	subs	r3, #1
 80064ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	029b      	lsls	r3, r3, #10
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	4313      	orrs	r3, r2
 8006500:	b29b      	uxth	r3, r3
 8006502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650a:	b29a      	uxth	r2, r3
 800650c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e01a      	b.n	8006548 <USB_ActivateEndpoint+0x6ac>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d116      	bne.n	8006548 <USB_ActivateEndpoint+0x6ac>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	657b      	str	r3, [r7, #84]	@ 0x54
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006524:	b29b      	uxth	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800652a:	4413      	add	r3, r2
 800652c:	657b      	str	r3, [r7, #84]	@ 0x54
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	00da      	lsls	r2, r3, #3
 8006534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006536:	4413      	add	r3, r2
 8006538:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800653c:	653b      	str	r3, [r7, #80]	@ 0x50
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	b29a      	uxth	r2, r3
 8006544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	647b      	str	r3, [r7, #68]	@ 0x44
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d16b      	bne.n	800662c <USB_ActivateEndpoint+0x790>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800655e:	b29b      	uxth	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006564:	4413      	add	r3, r2
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	00da      	lsls	r2, r3, #3
 800656e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006570:	4413      	add	r3, r2
 8006572:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006576:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006582:	b29a      	uxth	r2, r3
 8006584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006586:	801a      	strh	r2, [r3, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <USB_ActivateEndpoint+0x70a>
 8006590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659e:	b29a      	uxth	r2, r3
 80065a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e05b      	b.n	800665e <USB_ActivateEndpoint+0x7c2>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80065ac:	d81c      	bhi.n	80065e8 <USB_ActivateEndpoint+0x74c>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	085b      	lsrs	r3, r3, #1
 80065b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d004      	beq.n	80065ce <USB_ActivateEndpoint+0x732>
 80065c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065c8:	3301      	adds	r3, #1
 80065ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065d8:	b29b      	uxth	r3, r3
 80065da:	029b      	lsls	r3, r3, #10
 80065dc:	b29b      	uxth	r3, r3
 80065de:	4313      	orrs	r3, r2
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e4:	801a      	strh	r2, [r3, #0]
 80065e6:	e03a      	b.n	800665e <USB_ActivateEndpoint+0x7c2>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <USB_ActivateEndpoint+0x76c>
 80065fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006602:	3b01      	subs	r3, #1
 8006604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29a      	uxth	r2, r3
 800660e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006612:	b29b      	uxth	r3, r3
 8006614:	029b      	lsls	r3, r3, #10
 8006616:	b29b      	uxth	r3, r3
 8006618:	4313      	orrs	r3, r2
 800661a:	b29b      	uxth	r3, r3
 800661c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006624:	b29a      	uxth	r2, r3
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	e018      	b.n	800665e <USB_ActivateEndpoint+0x7c2>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d114      	bne.n	800665e <USB_ActivateEndpoint+0x7c2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800663a:	b29b      	uxth	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006640:	4413      	add	r3, r2
 8006642:	647b      	str	r3, [r7, #68]	@ 0x44
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	00da      	lsls	r2, r3, #3
 800664a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800664c:	4413      	add	r3, r2
 800664e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006652:	643b      	str	r3, [r7, #64]	@ 0x40
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	b29a      	uxth	r2, r3
 800665a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800665c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006674:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006676:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006678:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800667c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800667e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006680:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006684:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	441a      	add	r2, r3
 8006690:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800669a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800669e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066bc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80066ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8013      	strh	r3, [r2, #0]
 80066de:	e0bc      	b.n	800685a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80066f0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80066f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01d      	beq.n	8006738 <USB_ActivateEndpoint+0x89c>
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800670e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006712:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006734:	b29b      	uxth	r3, r3
 8006736:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006748:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800674c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01d      	beq.n	8006790 <USB_ActivateEndpoint+0x8f4>
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800677c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006788:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800678c:	b29b      	uxth	r3, r3
 800678e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	78db      	ldrb	r3, [r3, #3]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d024      	beq.n	80067e2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80067b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80067b6:	f083 0320 	eor.w	r3, r3, #32
 80067ba:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	441a      	add	r2, r3
 80067c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80067cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067dc:	b29b      	uxth	r3, r3
 80067de:	8013      	strh	r3, [r2, #0]
 80067e0:	e01d      	b.n	800681e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	441a      	add	r2, r3
 8006806:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800680a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800680e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800681a:	b29b      	uxth	r3, r3
 800681c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006834:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	441a      	add	r2, r3
 8006842:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800684a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800684e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006856:	b29b      	uxth	r3, r3
 8006858:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800685a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800685e:	4618      	mov	r0, r3
 8006860:	379c      	adds	r7, #156	@ 0x9c
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop

0800686c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b0ac      	sub	sp, #176	@ 0xb0
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b01      	cmp	r3, #1
 800687c:	f040 84ca 	bne.w	8007214 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	699a      	ldr	r2, [r3, #24]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	429a      	cmp	r2, r3
 800688a:	d904      	bls.n	8006896 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006894:	e003      	b.n	800689e <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	7b1b      	ldrb	r3, [r3, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d122      	bne.n	80068ec <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6959      	ldr	r1, [r3, #20]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	88da      	ldrh	r2, [r3, #6]
 80068ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fed2 	bl	800765e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	461a      	mov	r2, r3
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	4413      	add	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	00da      	lsls	r2, r3, #3
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	4413      	add	r3, r2
 80068d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	f000 bc6f 	b.w	80071ca <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	78db      	ldrb	r3, [r3, #3]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	f040 831e 	bne.w	8006f32 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6a1a      	ldr	r2, [r3, #32]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	429a      	cmp	r2, r3
 8006900:	f240 82cf 	bls.w	8006ea2 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800692c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006934:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693c:	b29b      	uxth	r3, r3
 800693e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6a1a      	ldr	r2, [r3, #32]
 8006944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006948:	1ad2      	subs	r2, r2, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 814f 	beq.w	8006c04 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	633b      	str	r3, [r7, #48]	@ 0x30
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d16b      	bne.n	8006a4a <USB_EPStartXfer+0x1de>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800697c:	b29b      	uxth	r3, r3
 800697e:	461a      	mov	r2, r3
 8006980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006982:	4413      	add	r3, r2
 8006984:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	00da      	lsls	r2, r3, #3
 800698c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698e:	4413      	add	r3, r2
 8006990:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a4:	801a      	strh	r2, [r3, #0]
 80069a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <USB_EPStartXfer+0x158>
 80069ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069bc:	b29a      	uxth	r2, r3
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	e05b      	b.n	8006a7c <USB_EPStartXfer+0x210>
 80069c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80069ca:	d81c      	bhi.n	8006a06 <USB_EPStartXfer+0x19a>
 80069cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <USB_EPStartXfer+0x180>
 80069e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069e6:	3301      	adds	r3, #1
 80069e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	029b      	lsls	r3, r3, #10
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4313      	orrs	r3, r2
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	801a      	strh	r2, [r3, #0]
 8006a04:	e03a      	b.n	8006a7c <USB_EPStartXfer+0x210>
 8006a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a14:	f003 031f 	and.w	r3, r3, #31
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d104      	bne.n	8006a26 <USB_EPStartXfer+0x1ba>
 8006a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a20:	3b01      	subs	r3, #1
 8006a22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	029b      	lsls	r3, r3, #10
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	e018      	b.n	8006a7c <USB_EPStartXfer+0x210>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	785b      	ldrb	r3, [r3, #1]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d114      	bne.n	8006a7c <USB_EPStartXfer+0x210>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5e:	4413      	add	r3, r2
 8006a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	00da      	lsls	r2, r3, #3
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	895b      	ldrh	r3, [r3, #10]
 8006a80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	6959      	ldr	r1, [r3, #20]
 8006a88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fde3 	bl	800765e <USB_WritePMA>
            ep->xfer_buff += len;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	695a      	ldr	r2, [r3, #20]
 8006a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aa0:	441a      	add	r2, r3
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6a1a      	ldr	r2, [r3, #32]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d907      	bls.n	8006ac2 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6a1a      	ldr	r2, [r3, #32]
 8006ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	621a      	str	r2, [r3, #32]
 8006ac0:	e006      	b.n	8006ad0 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2200      	movs	r2, #0
 8006ace:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d16b      	bne.n	8006bb0 <USB_EPStartXfer+0x344>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	4413      	add	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	00da      	lsls	r2, r3, #3
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	4413      	add	r3, r2
 8006af6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	801a      	strh	r2, [r3, #0]
 8006b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <USB_EPStartXfer+0x2be>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	e05d      	b.n	8006be6 <USB_EPStartXfer+0x37a>
 8006b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b30:	d81c      	bhi.n	8006b6c <USB_EPStartXfer+0x300>
 8006b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <USB_EPStartXfer+0x2e6>
 8006b48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	029b      	lsls	r3, r3, #10
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	4313      	orrs	r3, r2
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	801a      	strh	r2, [r3, #0]
 8006b6a:	e03c      	b.n	8006be6 <USB_EPStartXfer+0x37a>
 8006b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d104      	bne.n	8006b8c <USB_EPStartXfer+0x320>
 8006b82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b86:	3b01      	subs	r3, #1
 8006b88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	029b      	lsls	r3, r3, #10
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	801a      	strh	r2, [r3, #0]
 8006bae:	e01a      	b.n	8006be6 <USB_EPStartXfer+0x37a>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	785b      	ldrb	r3, [r3, #1]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d116      	bne.n	8006be6 <USB_EPStartXfer+0x37a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	623b      	str	r3, [r7, #32]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	4413      	add	r3, r2
 8006bca:	623b      	str	r3, [r7, #32]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	00da      	lsls	r2, r3, #3
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	891b      	ldrh	r3, [r3, #8]
 8006bea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6959      	ldr	r1, [r3, #20]
 8006bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fd2e 	bl	800765e <USB_WritePMA>
 8006c02:	e2e2      	b.n	80071ca <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d16b      	bne.n	8006ce4 <USB_EPStartXfer+0x478>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c1c:	4413      	add	r3, r2
 8006c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	00da      	lsls	r2, r3, #3
 8006c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <USB_EPStartXfer+0x3f2>
 8006c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c5a:	801a      	strh	r2, [r3, #0]
 8006c5c:	e05d      	b.n	8006d1a <USB_EPStartXfer+0x4ae>
 8006c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c62:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c64:	d81c      	bhi.n	8006ca0 <USB_EPStartXfer+0x434>
 8006c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <USB_EPStartXfer+0x41a>
 8006c7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c80:	3301      	adds	r3, #1
 8006c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	029b      	lsls	r3, r3, #10
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	4313      	orrs	r3, r2
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c9c:	801a      	strh	r2, [r3, #0]
 8006c9e:	e03c      	b.n	8006d1a <USB_EPStartXfer+0x4ae>
 8006ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ca4:	095b      	lsrs	r3, r3, #5
 8006ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d104      	bne.n	8006cc0 <USB_EPStartXfer+0x454>
 8006cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	029b      	lsls	r3, r3, #10
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	e01a      	b.n	8006d1a <USB_EPStartXfer+0x4ae>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d116      	bne.n	8006d1a <USB_EPStartXfer+0x4ae>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cfc:	4413      	add	r3, r2
 8006cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	00da      	lsls	r2, r3, #3
 8006d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d08:	4413      	add	r3, r2
 8006d0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	891b      	ldrh	r3, [r3, #8]
 8006d1e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6959      	ldr	r1, [r3, #20]
 8006d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fc94 	bl	800765e <USB_WritePMA>
            ep->xfer_buff += len;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	695a      	ldr	r2, [r3, #20]
 8006d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d3e:	441a      	add	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d907      	bls.n	8006d60 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	6a1a      	ldr	r2, [r3, #32]
 8006d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d58:	1ad2      	subs	r2, r2, r3
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	621a      	str	r2, [r3, #32]
 8006d5e:	e006      	b.n	8006d6e <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	785b      	ldrb	r3, [r3, #1]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d16b      	bne.n	8006e52 <USB_EPStartXfer+0x5e6>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8a:	4413      	add	r3, r2
 8006d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	00da      	lsls	r2, r3, #3
 8006d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d96:	4413      	add	r3, r2
 8006d98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <USB_EPStartXfer+0x560>
 8006db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	e05b      	b.n	8006e84 <USB_EPStartXfer+0x618>
 8006dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dd2:	d81c      	bhi.n	8006e0e <USB_EPStartXfer+0x5a2>
 8006dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dd8:	085b      	lsrs	r3, r3, #1
 8006dda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d004      	beq.n	8006df4 <USB_EPStartXfer+0x588>
 8006dea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006dee:	3301      	adds	r3, #1
 8006df0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	029b      	lsls	r3, r3, #10
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	4313      	orrs	r3, r2
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	e03a      	b.n	8006e84 <USB_EPStartXfer+0x618>
 8006e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e1c:	f003 031f 	and.w	r3, r3, #31
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d104      	bne.n	8006e2e <USB_EPStartXfer+0x5c2>
 8006e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	029b      	lsls	r3, r3, #10
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e018      	b.n	8006e84 <USB_EPStartXfer+0x618>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	785b      	ldrb	r3, [r3, #1]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d114      	bne.n	8006e84 <USB_EPStartXfer+0x618>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e66:	4413      	add	r3, r2
 8006e68:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	00da      	lsls	r2, r3, #3
 8006e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e72:	4413      	add	r3, r2
 8006e74:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	895b      	ldrh	r3, [r3, #10]
 8006e88:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6959      	ldr	r1, [r3, #20]
 8006e90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fbdf 	bl	800765e <USB_WritePMA>
 8006ea0:	e193      	b.n	80071ca <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	441a      	add	r2, r3
 8006ece:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006ed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ed6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ef6:	4413      	add	r3, r2
 8006ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	00da      	lsls	r2, r3, #3
 8006f00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f02:	4413      	add	r3, r2
 8006f04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	891b      	ldrh	r3, [r3, #8]
 8006f18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	6959      	ldr	r1, [r3, #20]
 8006f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fb97 	bl	800765e <USB_WritePMA>
 8006f30:	e14b      	b.n	80071ca <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	6a1a      	ldr	r2, [r3, #32]
 8006f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f3a:	1ad2      	subs	r2, r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 809a 	beq.w	800708c <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d16b      	bne.n	800703c <USB_EPStartXfer+0x7d0>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f74:	4413      	add	r3, r2
 8006f76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	00da      	lsls	r2, r3, #3
 8006f7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f80:	4413      	add	r3, r2
 8006f82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f86:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f96:	801a      	strh	r2, [r3, #0]
 8006f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10a      	bne.n	8006fb6 <USB_EPStartXfer+0x74a>
 8006fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e05b      	b.n	800706e <USB_EPStartXfer+0x802>
 8006fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fba:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fbc:	d81c      	bhi.n	8006ff8 <USB_EPStartXfer+0x78c>
 8006fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fc2:	085b      	lsrs	r3, r3, #1
 8006fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d004      	beq.n	8006fde <USB_EPStartXfer+0x772>
 8006fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fd8:	3301      	adds	r3, #1
 8006fda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	029b      	lsls	r3, r3, #10
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e03a      	b.n	800706e <USB_EPStartXfer+0x802>
 8006ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <USB_EPStartXfer+0x7ac>
 800700e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007012:	3b01      	subs	r3, #1
 8007014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007018:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29a      	uxth	r2, r3
 800701e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007022:	b29b      	uxth	r3, r3
 8007024:	029b      	lsls	r3, r3, #10
 8007026:	b29b      	uxth	r3, r3
 8007028:	4313      	orrs	r3, r2
 800702a:	b29b      	uxth	r3, r3
 800702c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007034:	b29a      	uxth	r2, r3
 8007036:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	e018      	b.n	800706e <USB_EPStartXfer+0x802>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d114      	bne.n	800706e <USB_EPStartXfer+0x802>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800704a:	b29b      	uxth	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007050:	4413      	add	r3, r2
 8007052:	673b      	str	r3, [r7, #112]	@ 0x70
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	00da      	lsls	r2, r3, #3
 800705a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800705c:	4413      	add	r3, r2
 800705e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007062:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007068:	b29a      	uxth	r2, r3
 800706a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800706c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	895b      	ldrh	r3, [r3, #10]
 8007072:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	6959      	ldr	r1, [r3, #20]
 800707a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800707e:	b29b      	uxth	r3, r3
 8007080:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 faea 	bl	800765e <USB_WritePMA>
 800708a:	e09e      	b.n	80071ca <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	785b      	ldrb	r3, [r3, #1]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d16b      	bne.n	800716c <USB_EPStartXfer+0x900>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800709e:	b29b      	uxth	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80070a4:	4413      	add	r3, r2
 80070a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	00da      	lsls	r2, r3, #3
 80070ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80070b0:	4413      	add	r3, r2
 80070b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070c6:	801a      	strh	r2, [r3, #0]
 80070c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <USB_EPStartXfer+0x87a>
 80070d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070de:	b29a      	uxth	r2, r3
 80070e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	e063      	b.n	80071ae <USB_EPStartXfer+0x942>
 80070e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80070ec:	d81c      	bhi.n	8007128 <USB_EPStartXfer+0x8bc>
 80070ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d004      	beq.n	800710e <USB_EPStartXfer+0x8a2>
 8007104:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007108:	3301      	adds	r3, #1
 800710a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800710e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	b29a      	uxth	r2, r3
 8007114:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007118:	b29b      	uxth	r3, r3
 800711a:	029b      	lsls	r3, r3, #10
 800711c:	b29b      	uxth	r3, r3
 800711e:	4313      	orrs	r3, r2
 8007120:	b29a      	uxth	r2, r3
 8007122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007124:	801a      	strh	r2, [r3, #0]
 8007126:	e042      	b.n	80071ae <USB_EPStartXfer+0x942>
 8007128:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <USB_EPStartXfer+0x8dc>
 800713e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007142:	3b01      	subs	r3, #1
 8007144:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007148:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29a      	uxth	r2, r3
 800714e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007152:	b29b      	uxth	r3, r3
 8007154:	029b      	lsls	r3, r3, #10
 8007156:	b29b      	uxth	r3, r3
 8007158:	4313      	orrs	r3, r2
 800715a:	b29b      	uxth	r3, r3
 800715c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007164:	b29a      	uxth	r2, r3
 8007166:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	e020      	b.n	80071ae <USB_EPStartXfer+0x942>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d11c      	bne.n	80071ae <USB_EPStartXfer+0x942>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007180:	b29b      	uxth	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007188:	4413      	add	r3, r2
 800718a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	00da      	lsls	r2, r3, #3
 8007194:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007198:	4413      	add	r3, r2
 800719a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800719e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80071ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	891b      	ldrh	r3, [r3, #8]
 80071b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6959      	ldr	r1, [r3, #20]
 80071ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fa4a 	bl	800765e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071e0:	817b      	strh	r3, [r7, #10]
 80071e2:	897b      	ldrh	r3, [r7, #10]
 80071e4:	f083 0310 	eor.w	r3, r3, #16
 80071e8:	817b      	strh	r3, [r7, #10]
 80071ea:	897b      	ldrh	r3, [r7, #10]
 80071ec:	f083 0320 	eor.w	r3, r3, #32
 80071f0:	817b      	strh	r3, [r7, #10]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	441a      	add	r2, r3
 80071fc:	897b      	ldrh	r3, [r7, #10]
 80071fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800720a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800720e:	b29b      	uxth	r3, r3
 8007210:	8013      	strh	r3, [r2, #0]
 8007212:	e0d5      	b.n	80073c0 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	7b1b      	ldrb	r3, [r3, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d156      	bne.n	80072ca <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d122      	bne.n	800726a <USB_EPStartXfer+0x9fe>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	78db      	ldrb	r3, [r3, #3]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d11e      	bne.n	800726a <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800723e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007242:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	441a      	add	r2, r3
 8007250:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800725c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007264:	b29b      	uxth	r3, r3
 8007266:	8013      	strh	r3, [r2, #0]
 8007268:	e01d      	b.n	80072a6 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800727c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007280:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	441a      	add	r2, r3
 800728e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800729a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800729e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d907      	bls.n	80072c2 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	1ad2      	subs	r2, r2, r3
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	619a      	str	r2, [r3, #24]
 80072c0:	e054      	b.n	800736c <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2200      	movs	r2, #0
 80072c6:	619a      	str	r2, [r3, #24]
 80072c8:	e050      	b.n	800736c <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	78db      	ldrb	r3, [r3, #3]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d142      	bne.n	8007358 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d048      	beq.n	800736c <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072ea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80072ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <USB_EPStartXfer+0xa96>
 80072f6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80072fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10b      	bne.n	800731a <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007302:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800730a:	2b00      	cmp	r3, #0
 800730c:	d12e      	bne.n	800736c <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800730e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d128      	bne.n	800736c <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	b29b      	uxth	r3, r3
 8007328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800732c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007330:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	441a      	add	r2, r3
 800733e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800734a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800734e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007352:	b29b      	uxth	r3, r3
 8007354:	8013      	strh	r3, [r2, #0]
 8007356:	e009      	b.n	800736c <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	78db      	ldrb	r3, [r3, #3]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d103      	bne.n	8007368 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2200      	movs	r2, #0
 8007364:	619a      	str	r2, [r3, #24]
 8007366:	e001      	b.n	800736c <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e02a      	b.n	80073c2 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800737e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007382:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007386:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800738a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800738e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007392:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007396:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800739a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	441a      	add	r2, r3
 80073a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80073ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073bc:	b29b      	uxth	r3, r3
 80073be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	37b0      	adds	r7, #176	@ 0xb0
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d020      	beq.n	800741e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073f2:	81bb      	strh	r3, [r7, #12]
 80073f4:	89bb      	ldrh	r3, [r7, #12]
 80073f6:	f083 0310 	eor.w	r3, r3, #16
 80073fa:	81bb      	strh	r3, [r7, #12]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	89bb      	ldrh	r3, [r7, #12]
 8007408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800740c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007418:	b29b      	uxth	r3, r3
 800741a:	8013      	strh	r3, [r2, #0]
 800741c:	e01f      	b.n	800745e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007434:	81fb      	strh	r3, [r7, #14]
 8007436:	89fb      	ldrh	r3, [r7, #14]
 8007438:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800743c:	81fb      	strh	r3, [r7, #14]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	441a      	add	r2, r3
 8007448:	89fb      	ldrh	r3, [r7, #14]
 800744a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800744e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800745a:	b29b      	uxth	r3, r3
 800745c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	785b      	ldrb	r3, [r3, #1]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d04c      	beq.n	8007518 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	823b      	strh	r3, [r7, #16]
 800748c:	8a3b      	ldrh	r3, [r7, #16]
 800748e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01b      	beq.n	80074ce <USB_EPClearStall+0x62>
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ac:	81fb      	strh	r3, [r7, #14]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	441a      	add	r2, r3
 80074b8:	89fb      	ldrh	r3, [r7, #14]
 80074ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	78db      	ldrb	r3, [r3, #3]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d06c      	beq.n	80075b0 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ec:	81bb      	strh	r3, [r7, #12]
 80074ee:	89bb      	ldrh	r3, [r7, #12]
 80074f0:	f083 0320 	eor.w	r3, r3, #32
 80074f4:	81bb      	strh	r3, [r7, #12]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	441a      	add	r2, r3
 8007500:	89bb      	ldrh	r3, [r7, #12]
 8007502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800750a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800750e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007512:	b29b      	uxth	r3, r3
 8007514:	8013      	strh	r3, [r2, #0]
 8007516:	e04b      	b.n	80075b0 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	82fb      	strh	r3, [r7, #22]
 8007526:	8afb      	ldrh	r3, [r7, #22]
 8007528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01b      	beq.n	8007568 <USB_EPClearStall+0xfc>
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007546:	82bb      	strh	r3, [r7, #20]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	441a      	add	r2, r3
 8007552:	8abb      	ldrh	r3, [r7, #20]
 8007554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800755c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007564:	b29b      	uxth	r3, r3
 8007566:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800757a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800757e:	827b      	strh	r3, [r7, #18]
 8007580:	8a7b      	ldrh	r3, [r7, #18]
 8007582:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007586:	827b      	strh	r3, [r7, #18]
 8007588:	8a7b      	ldrh	r3, [r7, #18]
 800758a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800758e:	827b      	strh	r3, [r7, #18]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	441a      	add	r2, r3
 800759a:	8a7b      	ldrh	r3, [r7, #18]
 800759c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2280      	movs	r2, #128	@ 0x80
 80075d4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007622:	b29b      	uxth	r3, r3
 8007624:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007628:	b29a      	uxth	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800763e:	b480      	push	{r7}
 8007640:	b085      	sub	sp, #20
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800764c:	b29b      	uxth	r3, r3
 800764e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007650:	68fb      	ldr	r3, [r7, #12]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800765e:	b480      	push	{r7}
 8007660:	b08b      	sub	sp, #44	@ 0x2c
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	4611      	mov	r1, r2
 800766a:	461a      	mov	r2, r3
 800766c:	460b      	mov	r3, r1
 800766e:	80fb      	strh	r3, [r7, #6]
 8007670:	4613      	mov	r3, r2
 8007672:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007674:	88bb      	ldrh	r3, [r7, #4]
 8007676:	3301      	adds	r3, #1
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007684:	88fa      	ldrh	r2, [r7, #6]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800768e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	627b      	str	r3, [r7, #36]	@ 0x24
 8007694:	e01c      	b.n	80076d0 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	3301      	adds	r3, #1
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	b21b      	sxth	r3, r3
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	b21a      	sxth	r2, r3
 80076a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	b21b      	sxth	r3, r3
 80076b0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	8a7a      	ldrh	r2, [r7, #18]
 80076b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	3302      	adds	r3, #2
 80076bc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	3301      	adds	r3, #1
 80076c2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	3301      	adds	r3, #1
 80076c8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	3b01      	subs	r3, #1
 80076ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1df      	bne.n	8007696 <USB_WritePMA+0x38>
  }
}
 80076d6:	bf00      	nop
 80076d8:	bf00      	nop
 80076da:	372c      	adds	r7, #44	@ 0x2c
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b08b      	sub	sp, #44	@ 0x2c
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	4611      	mov	r1, r2
 80076f0:	461a      	mov	r2, r3
 80076f2:	460b      	mov	r3, r1
 80076f4:	80fb      	strh	r3, [r7, #6]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80076fa:	88bb      	ldrh	r3, [r7, #4]
 80076fc:	085b      	lsrs	r3, r3, #1
 80076fe:	b29b      	uxth	r3, r3
 8007700:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800770a:	88fa      	ldrh	r2, [r7, #6]
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007714:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	627b      	str	r3, [r7, #36]	@ 0x24
 800771a:	e018      	b.n	800774e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	3302      	adds	r3, #2
 8007728:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	b2da      	uxtb	r2, r3
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	3301      	adds	r3, #1
 8007736:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	b2da      	uxtb	r2, r3
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	3301      	adds	r3, #1
 8007746:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	3b01      	subs	r3, #1
 800774c:	627b      	str	r3, [r7, #36]	@ 0x24
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e3      	bne.n	800771c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007754:	88bb      	ldrh	r3, [r7, #4]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d007      	beq.n	8007770 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	b2da      	uxtb	r2, r3
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	701a      	strb	r2, [r3, #0]
  }
}
 8007770:	bf00      	nop
 8007772:	372c      	adds	r7, #44	@ 0x2c
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <__NVIC_SystemReset>:
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007780:	f3bf 8f4f 	dsb	sy
}
 8007784:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007786:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <__NVIC_SystemReset+0x24>)
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800778e:	4904      	ldr	r1, [pc, #16]	@ (80077a0 <__NVIC_SystemReset+0x24>)
 8007790:	4b04      	ldr	r3, [pc, #16]	@ (80077a4 <__NVIC_SystemReset+0x28>)
 8007792:	4313      	orrs	r3, r2
 8007794:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007796:	f3bf 8f4f 	dsb	sy
}
 800779a:	bf00      	nop
    __NOP();
 800779c:	bf00      	nop
 800779e:	e7fd      	b.n	800779c <__NVIC_SystemReset+0x20>
 80077a0:	e000ed00 	.word	0xe000ed00
 80077a4:	05fa0004 	.word	0x05fa0004

080077a8 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80077b4:	f240 401c 	movw	r0, #1052	@ 0x41c
 80077b8:	f002 fb92 	bl	8009ee0 <USBD_static_malloc>
 80077bc:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d105      	bne.n	80077d0 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80077cc:	2302      	movs	r3, #2
 80077ce:	e03f      	b.n	8007850 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80077e6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2202      	movs	r2, #2
 8007806:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2202      	movs	r2, #2
 800782e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	4798      	blx	r3
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800784a:	2303      	movs	r3, #3
 800784c:	e000      	b.n	8007850 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800786e:	2302      	movs	r3, #2
 8007870:	e027      	b.n	80078c2 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007878:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2202      	movs	r2, #2
 800788e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2202      	movs	r2, #2
 800789e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80078b2:	4618      	mov	r0, r3
 80078b4:	f002 fb22 	bl	8009efc <USBD_static_free>
  pdev->pClassData = NULL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80078dc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e0d5      	b.n	8007aa4 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007900:	2b00      	cmp	r3, #0
 8007902:	d03e      	beq.n	8007982 <USBD_DFU_Setup+0xb6>
 8007904:	2b20      	cmp	r3, #32
 8007906:	f040 80c5 	bne.w	8007a94 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	2b06      	cmp	r3, #6
 8007910:	d82f      	bhi.n	8007972 <USBD_DFU_Setup+0xa6>
 8007912:	a201      	add	r2, pc, #4	@ (adr r2, 8007918 <USBD_DFU_Setup+0x4c>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	08007969 	.word	0x08007969
 800791c:	08007935 	.word	0x08007935
 8007920:	0800793f 	.word	0x0800793f
 8007924:	08007949 	.word	0x08007949
 8007928:	08007951 	.word	0x08007951
 800792c:	08007959 	.word	0x08007959
 8007930:	08007961 	.word	0x08007961
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa6c 	bl	8007e14 <DFU_Download>
          break;
 800793c:	e020      	b.n	8007980 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fad3 	bl	8007eec <DFU_Upload>
          break;
 8007946:	e01b      	b.n	8007980 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fba9 	bl	80080a0 <DFU_GetStatus>
          break;
 800794e:	e017      	b.n	8007980 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc5b 	bl	800820c <DFU_ClearStatus>
          break;
 8007956:	e013      	b.n	8007980 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fcab 	bl	80082b4 <DFU_GetState>
          break;
 800795e:	e00f      	b.n	8007980 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fcbf 	bl	80082e4 <DFU_Abort>
          break;
 8007966:	e00b      	b.n	8007980 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f9ee 	bl	8007d4c <DFU_Detach>
          break;
 8007970:	e006      	b.n	8007980 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 fdb1 	bl	80094dc <USBD_CtlError>
          ret = USBD_FAIL;
 800797a:	2303      	movs	r3, #3
 800797c:	77fb      	strb	r3, [r7, #31]
          break;
 800797e:	bf00      	nop
      }
      break;
 8007980:	e08f      	b.n	8007aa2 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	2b0b      	cmp	r3, #11
 8007988:	d87b      	bhi.n	8007a82 <USBD_DFU_Setup+0x1b6>
 800798a:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <USBD_DFU_Setup+0xc4>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079c1 	.word	0x080079c1
 8007994:	08007a91 	.word	0x08007a91
 8007998:	08007a83 	.word	0x08007a83
 800799c:	08007a83 	.word	0x08007a83
 80079a0:	08007a83 	.word	0x08007a83
 80079a4:	08007a83 	.word	0x08007a83
 80079a8:	080079eb 	.word	0x080079eb
 80079ac:	08007a83 	.word	0x08007a83
 80079b0:	08007a83 	.word	0x08007a83
 80079b4:	08007a83 	.word	0x08007a83
 80079b8:	08007a15 	.word	0x08007a15
 80079bc:	08007a41 	.word	0x08007a41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d107      	bne.n	80079dc <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80079cc:	f107 030e 	add.w	r3, r7, #14
 80079d0:	2202      	movs	r2, #2
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 fdf2 	bl	80095be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079da:	e05a      	b.n	8007a92 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 fd7c 	bl	80094dc <USBD_CtlError>
            ret = USBD_FAIL;
 80079e4:	2303      	movs	r3, #3
 80079e6:	77fb      	strb	r3, [r7, #31]
          break;
 80079e8:	e053      	b.n	8007a92 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	885b      	ldrh	r3, [r3, #2]
 80079ee:	0a1b      	lsrs	r3, r3, #8
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b21      	cmp	r3, #33	@ 0x21
 80079f4:	d107      	bne.n	8007a06 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 80079f6:	4b2d      	ldr	r3, [pc, #180]	@ (8007aac <USBD_DFU_Setup+0x1e0>)
 80079f8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	88db      	ldrh	r3, [r3, #6]
 80079fe:	2b09      	cmp	r3, #9
 8007a00:	bf28      	it	cs
 8007a02:	2309      	movcs	r3, #9
 8007a04:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a06:	8afb      	ldrh	r3, [r7, #22]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	69b9      	ldr	r1, [r7, #24]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 fdd6 	bl	80095be <USBD_CtlSendData>
          break;
 8007a12:	e03e      	b.n	8007a92 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d108      	bne.n	8007a32 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a26:	2201      	movs	r2, #1
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fdc7 	bl	80095be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a30:	e02f      	b.n	8007a92 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 fd51 	bl	80094dc <USBD_CtlError>
            ret = USBD_FAIL;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	77fb      	strb	r3, [r7, #31]
          break;
 8007a3e:	e028      	b.n	8007a92 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	885b      	ldrh	r3, [r3, #2]
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d114      	bne.n	8007a74 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d107      	bne.n	8007a66 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	885b      	ldrh	r3, [r3, #2]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a64:	e015      	b.n	8007a92 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fd37 	bl	80094dc <USBD_CtlError>
              ret = USBD_FAIL;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	77fb      	strb	r3, [r7, #31]
          break;
 8007a72:	e00e      	b.n	8007a92 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fd30 	bl	80094dc <USBD_CtlError>
            ret = USBD_FAIL;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	77fb      	strb	r3, [r7, #31]
          break;
 8007a80:	e007      	b.n	8007a92 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 fd29 	bl	80094dc <USBD_CtlError>
          ret = USBD_FAIL;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	77fb      	strb	r3, [r7, #31]
          break;
 8007a8e:	e000      	b.n	8007a92 <USBD_DFU_Setup+0x1c6>
          break;
 8007a90:	bf00      	nop
      }
      break;
 8007a92:	e006      	b.n	8007aa2 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 fd20 	bl	80094dc <USBD_CtlError>
      ret = USBD_FAIL;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	77fb      	strb	r3, [r7, #31]
      break;
 8007aa0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007aa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	2000005a 	.word	0x2000005a

08007ab0 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	221b      	movs	r2, #27
 8007abc:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8007abe:	4b03      	ldr	r3, [pc, #12]	@ (8007acc <USBD_DFU_GetCfgDesc+0x1c>)
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	20000048 	.word	0x20000048

08007ad0 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b088      	sub	sp, #32
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007af4:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007afc:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e0ce      	b.n	8007ca6 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	f040 80bd 	bne.w	8007c8e <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d17c      	bne.n	8007c18 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	f000 8093 	beq.w	8007c50 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007b30:	2b05      	cmp	r3, #5
 8007b32:	d15e      	bne.n	8007bf2 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2b21      	cmp	r3, #33	@ 0x21
 8007b3a:	d124      	bne.n	8007b86 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	461a      	mov	r2, r3
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	789b      	ldrb	r3, [r3, #2]
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	441a      	add	r2, r3
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	78db      	ldrb	r3, [r3, #3]
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	441a      	add	r2, r3
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	791b      	ldrb	r3, [r3, #4]
 8007b7a:	061b      	lsls	r3, r3, #24
 8007b7c:	441a      	add	r2, r3
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8007b84:	e064      	b.n	8007c50 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b41      	cmp	r3, #65	@ 0x41
 8007b8c:	d12f      	bne.n	8007bee <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	461a      	mov	r2, r3
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	789b      	ldrb	r3, [r3, #2]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	441a      	add	r2, r3
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	78db      	ldrb	r3, [r3, #3]
 8007bb8:	041b      	lsls	r3, r3, #16
 8007bba:	441a      	add	r2, r3
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	791b      	ldrb	r3, [r3, #4]
 8007bcc:	061b      	lsls	r3, r3, #24
 8007bce:	441a      	add	r2, r3
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d032      	beq.n	8007c50 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e05b      	b.n	8007ca6 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e059      	b.n	8007ca6 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8007c06:	2301      	movs	r3, #1
 8007c08:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8007c0a:	f107 030c 	add.w	r3, r7, #12
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 fc63 	bl	80094dc <USBD_CtlError>
 8007c16:	e01b      	b.n	8007c50 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d916      	bls.n	8007c50 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007c28:	3b02      	subs	r3, #2
 8007c2a:	029a      	lsls	r2, r3, #10
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8007c32:	4413      	add	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	69f8      	ldr	r0, [r7, #28]
 8007c3c:	6979      	ldr	r1, [r7, #20]
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8007c44:	4798      	blx	r3
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e02a      	b.n	8007ca6 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	2203      	movs	r2, #3
 8007c64:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8007c8c:	e00a      	b.n	8007ca4 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007c94:	2b07      	cmp	r3, #7
 8007c96:	d103      	bne.n	8007ca0 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fb75 	bl	8008388 <DFU_Leave>
 8007c9e:	e001      	b.n	8007ca4 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e000      	b.n	8007ca6 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3720      	adds	r7, #32
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	220a      	movs	r2, #10
 8007cd0:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8007cd2:	4b03      	ldr	r3, [pc, #12]	@ (8007ce0 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	20000064 	.word	0x20000064

08007ce4 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	460b      	mov	r3, r1
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8007cfa:	7afb      	ldrb	r3, [r7, #11]
 8007cfc:	2b06      	cmp	r3, #6
 8007cfe:	d808      	bhi.n	8007d12 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	4905      	ldr	r1, [pc, #20]	@ (8007d1c <USBD_DFU_GetUsrStringDesc+0x38>)
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f001 fbf8 	bl	80094fe <USBD_GetString>
    return USBD_StrDesc;
 8007d0e:	4b03      	ldr	r3, [pc, #12]	@ (8007d1c <USBD_DFU_GetUsrStringDesc+0x38>)
 8007d10:	e000      	b.n	8007d14 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8007d12:	2300      	movs	r3, #0
  }
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	200001b0 	.word	0x200001b0

08007d20 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e004      	b.n	8007d3e <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
	...

08007d4c <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d5c:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d051      	beq.n	8007e08 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d013      	beq.n	8007d96 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d00e      	beq.n	8007d96 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007d7e:	2b05      	cmp	r3, #5
 8007d80:	d009      	beq.n	8007d96 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007d88:	2b06      	cmp	r3, #6
 8007d8a:	d004      	beq.n	8007d96 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007d92:	2b09      	cmp	r3, #9
 8007d94:	d125      	bne.n	8007de2 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2202      	movs	r2, #2
 8007d9a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8007de2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e10 <DFU_Detach+0xc4>)
 8007de4:	7d5b      	ldrb	r3, [r3, #21]
 8007de6:	f003 0310 	and.w	r3, r3, #16
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d006      	beq.n	8007dfc <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fb7b 	bl	80084ea <USBD_Stop>
    (void)USBD_Start(pdev);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fb6c 	bl	80084d2 <USBD_Start>
 8007dfa:	e006      	b.n	8007e0a <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	885b      	ldrh	r3, [r3, #2]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7f8 fdf7 	bl	80009f4 <HAL_Delay>
 8007e06:	e000      	b.n	8007e0a <DFU_Detach+0xbe>
    return;
 8007e08:	bf00      	nop
  }
}
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20000048 	.word	0x20000048

08007e14 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e24:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d05b      	beq.n	8007ee4 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	88db      	ldrh	r3, [r3, #6]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d02d      	beq.n	8007e90 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d004      	beq.n	8007e48 <DFU_Download+0x34>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007e44:	2b05      	cmp	r3, #5
 8007e46:	d11e      	bne.n	8007e86 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	885b      	ldrh	r3, [r3, #2]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	88db      	ldrh	r3, [r3, #6]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2203      	movs	r2, #3
 8007e64:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8007e74:	68f9      	ldr	r1, [r7, #12]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 fbc9 	bl	8009616 <USBD_CtlPrepareRx>
 8007e84:	e02f      	b.n	8007ee6 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 fb27 	bl	80094dc <USBD_CtlError>
 8007e8e:	e02a      	b.n	8007ee6 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007e96:	2b05      	cmp	r3, #5
 8007e98:	d004      	beq.n	8007ea4 <DFU_Download+0x90>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d11a      	bne.n	8007eda <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2206      	movs	r2, #6
 8007eb0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8007ed8:	e005      	b.n	8007ee6 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 fafd 	bl	80094dc <USBD_CtlError>
 8007ee2:	e000      	b.n	8007ee6 <DFU_Download+0xd2>
    return;
 8007ee4:	bf00      	nop
    }
  }
}
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007efc:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f04:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 80c4 	beq.w	8008096 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	88db      	ldrh	r3, [r3, #6]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 80a8 	beq.w	8008068 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d005      	beq.n	8007f2e <DFU_Upload+0x42>
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007f28:	2b09      	cmp	r3, #9
 8007f2a:	f040 8090 	bne.w	800804e <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	885b      	ldrh	r3, [r3, #2]
 8007f32:	461a      	mov	r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	88db      	ldrh	r3, [r3, #6]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d12c      	bne.n	8007faa <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d901      	bls.n	8007f5e <DFU_Upload+0x72>
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	e000      	b.n	8007f60 <DFU_Upload+0x74>
 8007f5e:	2209      	movs	r2, #9
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2221      	movs	r2, #33	@ 0x21
 8007f94:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2241      	movs	r2, #65	@ 0x41
 8007f9a:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 fb0b 	bl	80095be <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007fa8:	e076      	b.n	8008098 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d931      	bls.n	8008018 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2209      	movs	r2, #9
 8007fb8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007fe6:	3b02      	subs	r3, #2
 8007fe8:	029a      	lsls	r2, r3, #10
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8007ff0:	4413      	add	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	6979      	ldr	r1, [r7, #20]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8008002:	4798      	blx	r3
 8008004:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800800c:	461a      	mov	r2, r3
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 fad4 	bl	80095be <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008016:	e03f      	b.n	8008098 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	220f      	movs	r2, #15
 800801c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f001 fa48 	bl	80094dc <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800804c:	e024      	b.n	8008098 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2200      	movs	r2, #0
 8008052:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2200      	movs	r2, #0
 800805a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 fa3b 	bl	80094dc <USBD_CtlError>
 8008066:	e017      	b.n	8008098 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008094:	e000      	b.n	8008098 <DFU_Upload+0x1ac>
    return;
 8008096:	bf00      	nop
  }
}
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080ae:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080b6:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 80a0 	beq.w	8008200 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d002      	beq.n	80080d0 <DFU_GetStatus+0x30>
 80080ca:	2b06      	cmp	r3, #6
 80080cc:	d051      	beq.n	8008172 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 80080ce:	e08e      	b.n	80081ee <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d034      	beq.n	8008144 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2204      	movs	r2, #4
 80080de:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10e      	bne.n	800812e <DFU_GetStatus+0x8e>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b41      	cmp	r3, #65	@ 0x41
 8008116:	d10a      	bne.n	800812e <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8008128:	2100      	movs	r1, #0
 800812a:	4798      	blx	r3
      break;
 800812c:	e05f      	b.n	80081ee <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800813e:	2101      	movs	r1, #1
 8008140:	4798      	blx	r3
      break;
 8008142:	e054      	b.n	80081ee <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2205      	movs	r2, #5
 8008148:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008170:	e03d      	b.n	80081ee <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8008178:	2b01      	cmp	r3, #1
 800817a:	d116      	bne.n	80081aa <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2207      	movs	r2, #7
 8008180:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80081a8:	e020      	b.n	80081ec <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d11b      	bne.n	80081ec <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 80081b4:	4b14      	ldr	r3, [pc, #80]	@ (8008208 <DFU_GetStatus+0x168>)
 80081b6:	7d1b      	ldrb	r3, [r3, #20]
 80081b8:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d015      	beq.n	80081ec <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80081ec:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 80081f4:	2206      	movs	r2, #6
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 f9e0 	bl	80095be <USBD_CtlSendData>
 80081fe:	e000      	b.n	8008202 <DFU_GetStatus+0x162>
    return;
 8008200:	bf00      	nop
}
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20000048 	.word	0x20000048

0800820c <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800821a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d042      	beq.n	80082a8 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008228:	2b0a      	cmp	r3, #10
 800822a:	d11e      	bne.n	800826a <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8008268:	e01f      	b.n	80082aa <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	220a      	movs	r2, #10
 800826e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	220e      	movs	r2, #14
 8008276:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 80082a6:	e000      	b.n	80082aa <DFU_ClearStatus+0x9e>
    return;
 80082a8:	bf00      	nop
  }
}
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082c2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d008      	beq.n	80082dc <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80082d0:	2201      	movs	r2, #1
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 f972 	bl	80095be <USBD_CtlSendData>
 80082da:	e000      	b.n	80082de <DFU_GetState+0x2a>
    return;
 80082dc:	bf00      	nop
}
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082f2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d03f      	beq.n	800837a <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008300:	2b02      	cmp	r3, #2
 8008302:	d013      	beq.n	800832c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800830a:	2b03      	cmp	r3, #3
 800830c:	d00e      	beq.n	800832c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008314:	2b05      	cmp	r3, #5
 8008316:	d009      	beq.n	800832c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800831e:	2b06      	cmp	r3, #6
 8008320:	d004      	beq.n	800832c <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008328:	2b09      	cmp	r3, #9
 800832a:	d127      	bne.n	800837c <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8008378:	e000      	b.n	800837c <DFU_Abort+0x98>
    return;
 800837a:	bf00      	nop
  }
}
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
	...

08008388 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008396:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d03b      	beq.n	8008416 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 80083a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008420 <DFU_Leave+0x98>)
 80083a8:	7d1b      	ldrb	r3, [r3, #20]
 80083aa:	f003 0304 	and.w	r3, r3, #4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d016      	beq.n	80083e0 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2206      	movs	r2, #6
 80083b6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 80083de:	e01b      	b.n	8008418 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2208      	movs	r2, #8
 80083e4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f86c 	bl	80084ea <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8008412:	f7ff f9b3 	bl	800777c <__NVIC_SystemReset>
    return;
 8008416:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000048 	.word	0x20000048

08008424 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	4613      	mov	r3, r2
 8008430:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008438:	2303      	movs	r3, #3
 800843a:	e01f      	b.n	800847c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	79fa      	ldrb	r2, [r7, #7]
 800846e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f001 fb91 	bl	8009b98 <USBD_LL_Init>
 8008476:	4603      	mov	r3, r0
 8008478:	75fb      	strb	r3, [r7, #23]

  return ret;
 800847a:	7dfb      	ldrb	r3, [r7, #23]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008498:	2303      	movs	r3, #3
 800849a:	e016      	b.n	80084ca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b8:	f107 020e 	add.w	r2, r7, #14
 80084bc:	4610      	mov	r0, r2
 80084be:	4798      	blx	r3
 80084c0:	4602      	mov	r2, r0
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b082      	sub	sp, #8
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f001 fba2 	bl	8009c24 <USBD_LL_Start>
 80084e0:	4603      	mov	r3, r0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 fbb1 	bl	8009c5a <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	6852      	ldr	r2, [r2, #4]
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	4611      	mov	r1, r2
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	4798      	blx	r3
  }

  return USBD_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	460b      	mov	r3, r1
 8008540:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008542:	2303      	movs	r3, #3
 8008544:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800854c:	2b00      	cmp	r3, #0
 800854e:	d009      	beq.n	8008564 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	78fa      	ldrb	r2, [r7, #3]
 800855a:	4611      	mov	r1, r2
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	4798      	blx	r3
 8008560:	4603      	mov	r3, r0
 8008562:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008564:	7bfb      	ldrb	r3, [r7, #15]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d007      	beq.n	8008594 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	4611      	mov	r1, r2
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	4798      	blx	r3
  }

  return USBD_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 ff59 	bl	8009468 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80085c4:	461a      	mov	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80085d2:	f003 031f 	and.w	r3, r3, #31
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d01a      	beq.n	8008610 <USBD_LL_SetupStage+0x72>
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d822      	bhi.n	8008624 <USBD_LL_SetupStage+0x86>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d002      	beq.n	80085e8 <USBD_LL_SetupStage+0x4a>
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d00a      	beq.n	80085fc <USBD_LL_SetupStage+0x5e>
 80085e6:	e01d      	b.n	8008624 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f9ef 	bl	80089d4 <USBD_StdDevReq>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73fb      	strb	r3, [r7, #15]
      break;
 80085fa:	e020      	b.n	800863e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fa53 	bl	8008ab0 <USBD_StdItfReq>
 800860a:	4603      	mov	r3, r0
 800860c:	73fb      	strb	r3, [r7, #15]
      break;
 800860e:	e016      	b.n	800863e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fa92 	bl	8008b42 <USBD_StdEPReq>
 800861e:	4603      	mov	r3, r0
 8008620:	73fb      	strb	r3, [r7, #15]
      break;
 8008622:	e00c      	b.n	800863e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800862a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800862e:	b2db      	uxtb	r3, r3
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f001 fb52 	bl	8009cdc <USBD_LL_StallEP>
 8008638:	4603      	mov	r3, r0
 800863a:	73fb      	strb	r3, [r7, #15]
      break;
 800863c:	bf00      	nop
  }

  return ret;
 800863e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	460b      	mov	r3, r1
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008656:	7afb      	ldrb	r3, [r7, #11]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d138      	bne.n	80086ce <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008662:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800866a:	2b03      	cmp	r3, #3
 800866c:	d14a      	bne.n	8008704 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	429a      	cmp	r2, r3
 8008678:	d913      	bls.n	80086a2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	689a      	ldr	r2, [r3, #8]
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	1ad2      	subs	r2, r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	4293      	cmp	r3, r2
 8008692:	bf28      	it	cs
 8008694:	4613      	movcs	r3, r2
 8008696:	461a      	mov	r2, r3
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 ffd8 	bl	8009650 <USBD_CtlContinueRx>
 80086a0:	e030      	b.n	8008704 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d10b      	bne.n	80086c6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 ffd3 	bl	8009672 <USBD_CtlSendStatus>
 80086cc:	e01a      	b.n	8008704 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d114      	bne.n	8008704 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00e      	beq.n	8008704 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	7afa      	ldrb	r2, [r7, #11]
 80086f0:	4611      	mov	r1, r2
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	4798      	blx	r3
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008700:	7dfb      	ldrb	r3, [r7, #23]
 8008702:	e000      	b.n	8008706 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b086      	sub	sp, #24
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	460b      	mov	r3, r1
 8008718:	607a      	str	r2, [r7, #4]
 800871a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800871c:	7afb      	ldrb	r3, [r7, #11]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d16b      	bne.n	80087fa <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	3314      	adds	r3, #20
 8008726:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800872e:	2b02      	cmp	r3, #2
 8008730:	d156      	bne.n	80087e0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	429a      	cmp	r2, r3
 800873c:	d914      	bls.n	8008768 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	1ad2      	subs	r2, r2, r3
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	461a      	mov	r2, r3
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 ff4d 	bl	80095f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800875a:	2300      	movs	r3, #0
 800875c:	2200      	movs	r2, #0
 800875e:	2100      	movs	r1, #0
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f001 fb65 	bl	8009e30 <USBD_LL_PrepareReceive>
 8008766:	e03b      	b.n	80087e0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	429a      	cmp	r2, r3
 8008772:	d11c      	bne.n	80087ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800877c:	429a      	cmp	r2, r3
 800877e:	d316      	bcc.n	80087ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800878a:	429a      	cmp	r2, r3
 800878c:	d20f      	bcs.n	80087ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800878e:	2200      	movs	r2, #0
 8008790:	2100      	movs	r1, #0
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 ff2e 	bl	80095f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087a0:	2300      	movs	r3, #0
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f001 fb42 	bl	8009e30 <USBD_LL_PrepareReceive>
 80087ac:	e018      	b.n	80087e0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d10b      	bne.n	80087d2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087d2:	2180      	movs	r1, #128	@ 0x80
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f001 fa81 	bl	8009cdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 ff5c 	bl	8009698 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d122      	bne.n	8008830 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff fe98 	bl	8008520 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80087f8:	e01a      	b.n	8008830 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b03      	cmp	r3, #3
 8008804:	d114      	bne.n	8008830 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00e      	beq.n	8008830 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	7afa      	ldrb	r2, [r7, #11]
 800881c:	4611      	mov	r1, r2
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	4798      	blx	r3
 8008822:	4603      	mov	r3, r0
 8008824:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	e000      	b.n	8008832 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800886a:	2303      	movs	r3, #3
 800886c:	e02f      	b.n	80088ce <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00f      	beq.n	8008898 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d009      	beq.n	8008898 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	6852      	ldr	r2, [r2, #4]
 8008890:	b2d2      	uxtb	r2, r2
 8008892:	4611      	mov	r1, r2
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008898:	2340      	movs	r3, #64	@ 0x40
 800889a:	2200      	movs	r2, #0
 800889c:	2100      	movs	r1, #0
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 f9f6 	bl	8009c90 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2240      	movs	r2, #64	@ 0x40
 80088b0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088b4:	2340      	movs	r3, #64	@ 0x40
 80088b6:	2200      	movs	r2, #0
 80088b8:	2180      	movs	r1, #128	@ 0x80
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f001 f9e8 	bl	8009c90 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2240      	movs	r2, #64	@ 0x40
 80088ca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008904:	b2da      	uxtb	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2204      	movs	r2, #4
 8008910:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b04      	cmp	r3, #4
 8008934:	d106      	bne.n	8008944 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800893c:	b2da      	uxtb	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008964:	2303      	movs	r3, #3
 8008966:	e012      	b.n	800898e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b03      	cmp	r3, #3
 8008972:	d10b      	bne.n	800898c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d005      	beq.n	800898c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008996:	b480      	push	{r7}
 8008998:	b087      	sub	sp, #28
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	3301      	adds	r3, #1
 80089ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	b21a      	sxth	r2, r3
 80089bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	b21b      	sxth	r3, r3
 80089c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089c6:	89fb      	ldrh	r3, [r7, #14]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089ea:	2b40      	cmp	r3, #64	@ 0x40
 80089ec:	d005      	beq.n	80089fa <USBD_StdDevReq+0x26>
 80089ee:	2b40      	cmp	r3, #64	@ 0x40
 80089f0:	d853      	bhi.n	8008a9a <USBD_StdDevReq+0xc6>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <USBD_StdDevReq+0x3a>
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	d14f      	bne.n	8008a9a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	4798      	blx	r3
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a0c:	e04a      	b.n	8008aa4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	785b      	ldrb	r3, [r3, #1]
 8008a12:	2b09      	cmp	r3, #9
 8008a14:	d83b      	bhi.n	8008a8e <USBD_StdDevReq+0xba>
 8008a16:	a201      	add	r2, pc, #4	@ (adr r2, 8008a1c <USBD_StdDevReq+0x48>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a71 	.word	0x08008a71
 8008a20:	08008a85 	.word	0x08008a85
 8008a24:	08008a8f 	.word	0x08008a8f
 8008a28:	08008a7b 	.word	0x08008a7b
 8008a2c:	08008a8f 	.word	0x08008a8f
 8008a30:	08008a4f 	.word	0x08008a4f
 8008a34:	08008a45 	.word	0x08008a45
 8008a38:	08008a8f 	.word	0x08008a8f
 8008a3c:	08008a67 	.word	0x08008a67
 8008a40:	08008a59 	.word	0x08008a59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f9de 	bl	8008e08 <USBD_GetDescriptor>
          break;
 8008a4c:	e024      	b.n	8008a98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fb7f 	bl	8009154 <USBD_SetAddress>
          break;
 8008a56:	e01f      	b.n	8008a98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fbbe 	bl	80091dc <USBD_SetConfig>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]
          break;
 8008a64:	e018      	b.n	8008a98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fc5d 	bl	8009328 <USBD_GetConfig>
          break;
 8008a6e:	e013      	b.n	8008a98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fc8e 	bl	8009394 <USBD_GetStatus>
          break;
 8008a78:	e00e      	b.n	8008a98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fcbd 	bl	80093fc <USBD_SetFeature>
          break;
 8008a82:	e009      	b.n	8008a98 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fccc 	bl	8009424 <USBD_ClrFeature>
          break;
 8008a8c:	e004      	b.n	8008a98 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fd23 	bl	80094dc <USBD_CtlError>
          break;
 8008a96:	bf00      	nop
      }
      break;
 8008a98:	e004      	b.n	8008aa4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fd1d 	bl	80094dc <USBD_CtlError>
      break;
 8008aa2:	bf00      	nop
  }

  return ret;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop

08008ab0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ac6:	2b40      	cmp	r3, #64	@ 0x40
 8008ac8:	d005      	beq.n	8008ad6 <USBD_StdItfReq+0x26>
 8008aca:	2b40      	cmp	r3, #64	@ 0x40
 8008acc:	d82f      	bhi.n	8008b2e <USBD_StdItfReq+0x7e>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <USBD_StdItfReq+0x26>
 8008ad2:	2b20      	cmp	r3, #32
 8008ad4:	d12b      	bne.n	8008b2e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d81d      	bhi.n	8008b20 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	889b      	ldrh	r3, [r3, #4]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d813      	bhi.n	8008b16 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	4798      	blx	r3
 8008afc:	4603      	mov	r3, r0
 8008afe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	88db      	ldrh	r3, [r3, #6]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d110      	bne.n	8008b2a <USBD_StdItfReq+0x7a>
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10d      	bne.n	8008b2a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fdaf 	bl	8009672 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b14:	e009      	b.n	8008b2a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fcdf 	bl	80094dc <USBD_CtlError>
          break;
 8008b1e:	e004      	b.n	8008b2a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fcda 	bl	80094dc <USBD_CtlError>
          break;
 8008b28:	e000      	b.n	8008b2c <USBD_StdItfReq+0x7c>
          break;
 8008b2a:	bf00      	nop
      }
      break;
 8008b2c:	e004      	b.n	8008b38 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fcd3 	bl	80094dc <USBD_CtlError>
      break;
 8008b36:	bf00      	nop
  }

  return ret;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	889b      	ldrh	r3, [r3, #4]
 8008b54:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b5e:	2b40      	cmp	r3, #64	@ 0x40
 8008b60:	d007      	beq.n	8008b72 <USBD_StdEPReq+0x30>
 8008b62:	2b40      	cmp	r3, #64	@ 0x40
 8008b64:	f200 8145 	bhi.w	8008df2 <USBD_StdEPReq+0x2b0>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00c      	beq.n	8008b86 <USBD_StdEPReq+0x44>
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	f040 8140 	bne.w	8008df2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4798      	blx	r3
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]
      break;
 8008b84:	e13a      	b.n	8008dfc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d007      	beq.n	8008b9e <USBD_StdEPReq+0x5c>
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	f300 8129 	bgt.w	8008de6 <USBD_StdEPReq+0x2a4>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d07f      	beq.n	8008c98 <USBD_StdEPReq+0x156>
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d03c      	beq.n	8008c16 <USBD_StdEPReq+0xd4>
 8008b9c:	e123      	b.n	8008de6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d002      	beq.n	8008bb0 <USBD_StdEPReq+0x6e>
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d016      	beq.n	8008bdc <USBD_StdEPReq+0x9a>
 8008bae:	e02c      	b.n	8008c0a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00d      	beq.n	8008bd2 <USBD_StdEPReq+0x90>
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	2b80      	cmp	r3, #128	@ 0x80
 8008bba:	d00a      	beq.n	8008bd2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 f88b 	bl	8009cdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bc6:	2180      	movs	r1, #128	@ 0x80
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 f887 	bl	8009cdc <USBD_LL_StallEP>
 8008bce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bd0:	e020      	b.n	8008c14 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fc81 	bl	80094dc <USBD_CtlError>
              break;
 8008bda:	e01b      	b.n	8008c14 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	885b      	ldrh	r3, [r3, #2]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10e      	bne.n	8008c02 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00b      	beq.n	8008c02 <USBD_StdEPReq+0xc0>
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	2b80      	cmp	r3, #128	@ 0x80
 8008bee:	d008      	beq.n	8008c02 <USBD_StdEPReq+0xc0>
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	88db      	ldrh	r3, [r3, #6]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d104      	bne.n	8008c02 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bf8:	7bbb      	ldrb	r3, [r7, #14]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 f86d 	bl	8009cdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fd35 	bl	8009672 <USBD_CtlSendStatus>

              break;
 8008c08:	e004      	b.n	8008c14 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fc65 	bl	80094dc <USBD_CtlError>
              break;
 8008c12:	bf00      	nop
          }
          break;
 8008c14:	e0ec      	b.n	8008df0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d002      	beq.n	8008c28 <USBD_StdEPReq+0xe6>
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d016      	beq.n	8008c54 <USBD_StdEPReq+0x112>
 8008c26:	e030      	b.n	8008c8a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00d      	beq.n	8008c4a <USBD_StdEPReq+0x108>
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	2b80      	cmp	r3, #128	@ 0x80
 8008c32:	d00a      	beq.n	8008c4a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 f84f 	bl	8009cdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c3e:	2180      	movs	r1, #128	@ 0x80
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 f84b 	bl	8009cdc <USBD_LL_StallEP>
 8008c46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c48:	e025      	b.n	8008c96 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc45 	bl	80094dc <USBD_CtlError>
              break;
 8008c52:	e020      	b.n	8008c96 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	885b      	ldrh	r3, [r3, #2]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d11b      	bne.n	8008c94 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d004      	beq.n	8008c70 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 f855 	bl	8009d1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fcfe 	bl	8009672 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	4798      	blx	r3
 8008c84:	4603      	mov	r3, r0
 8008c86:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008c88:	e004      	b.n	8008c94 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fc25 	bl	80094dc <USBD_CtlError>
              break;
 8008c92:	e000      	b.n	8008c96 <USBD_StdEPReq+0x154>
              break;
 8008c94:	bf00      	nop
          }
          break;
 8008c96:	e0ab      	b.n	8008df0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d002      	beq.n	8008caa <USBD_StdEPReq+0x168>
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d032      	beq.n	8008d0e <USBD_StdEPReq+0x1cc>
 8008ca8:	e097      	b.n	8008dda <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d007      	beq.n	8008cc0 <USBD_StdEPReq+0x17e>
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	2b80      	cmp	r3, #128	@ 0x80
 8008cb4:	d004      	beq.n	8008cc0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fc0f 	bl	80094dc <USBD_CtlError>
                break;
 8008cbe:	e091      	b.n	8008de4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	da0b      	bge.n	8008ce0 <USBD_StdEPReq+0x19e>
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	3310      	adds	r3, #16
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	4413      	add	r3, r2
 8008cdc:	3304      	adds	r3, #4
 8008cde:	e00b      	b.n	8008cf8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2202      	movs	r2, #2
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fc59 	bl	80095be <USBD_CtlSendData>
              break;
 8008d0c:	e06a      	b.n	8008de4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	da11      	bge.n	8008d3a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	f003 020f 	and.w	r2, r3, #15
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	440b      	add	r3, r1
 8008d28:	3324      	adds	r3, #36	@ 0x24
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d117      	bne.n	8008d60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fbd2 	bl	80094dc <USBD_CtlError>
                  break;
 8008d38:	e054      	b.n	8008de4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	f003 020f 	and.w	r2, r3, #15
 8008d40:	6879      	ldr	r1, [r7, #4]
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	440b      	add	r3, r1
 8008d4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d104      	bne.n	8008d60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fbbf 	bl	80094dc <USBD_CtlError>
                  break;
 8008d5e:	e041      	b.n	8008de4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	da0b      	bge.n	8008d80 <USBD_StdEPReq+0x23e>
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	3310      	adds	r3, #16
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	e00b      	b.n	8008d98 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	4413      	add	r3, r2
 8008d96:	3304      	adds	r3, #4
 8008d98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <USBD_StdEPReq+0x264>
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	2b80      	cmp	r3, #128	@ 0x80
 8008da4:	d103      	bne.n	8008dae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	e00e      	b.n	8008dcc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 ffd0 	bl	8009d58 <USBD_LL_IsStallEP>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	e002      	b.n	8008dcc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fbf3 	bl	80095be <USBD_CtlSendData>
              break;
 8008dd8:	e004      	b.n	8008de4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fb7d 	bl	80094dc <USBD_CtlError>
              break;
 8008de2:	bf00      	nop
          }
          break;
 8008de4:	e004      	b.n	8008df0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fb77 	bl	80094dc <USBD_CtlError>
          break;
 8008dee:	bf00      	nop
      }
      break;
 8008df0:	e004      	b.n	8008dfc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fb71 	bl	80094dc <USBD_CtlError>
      break;
 8008dfa:	bf00      	nop
  }

  return ret;
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	885b      	ldrh	r3, [r3, #2]
 8008e22:	0a1b      	lsrs	r3, r3, #8
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	3b01      	subs	r3, #1
 8008e28:	2b0e      	cmp	r3, #14
 8008e2a:	f200 8165 	bhi.w	80090f8 <USBD_GetDescriptor+0x2f0>
 8008e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <USBD_GetDescriptor+0x2c>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008ea5 	.word	0x08008ea5
 8008e38:	08008ebd 	.word	0x08008ebd
 8008e3c:	08008efd 	.word	0x08008efd
 8008e40:	080090f9 	.word	0x080090f9
 8008e44:	080090f9 	.word	0x080090f9
 8008e48:	08009099 	.word	0x08009099
 8008e4c:	080090c5 	.word	0x080090c5
 8008e50:	080090f9 	.word	0x080090f9
 8008e54:	080090f9 	.word	0x080090f9
 8008e58:	080090f9 	.word	0x080090f9
 8008e5c:	080090f9 	.word	0x080090f9
 8008e60:	080090f9 	.word	0x080090f9
 8008e64:	080090f9 	.word	0x080090f9
 8008e68:	080090f9 	.word	0x080090f9
 8008e6c:	08008e71 	.word	0x08008e71
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	7c12      	ldrb	r2, [r2, #16]
 8008e88:	f107 0108 	add.w	r1, r7, #8
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e92:	e139      	b.n	8009108 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fb20 	bl	80094dc <USBD_CtlError>
        err++;
 8008e9c:	7afb      	ldrb	r3, [r7, #11]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ea2:	e131      	b.n	8009108 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	7c12      	ldrb	r2, [r2, #16]
 8008eb0:	f107 0108 	add.w	r1, r7, #8
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	4798      	blx	r3
 8008eb8:	60f8      	str	r0, [r7, #12]
      break;
 8008eba:	e125      	b.n	8009108 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	7c1b      	ldrb	r3, [r3, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10d      	bne.n	8008ee0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ecc:	f107 0208 	add.w	r2, r7, #8
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	2202      	movs	r2, #2
 8008edc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ede:	e113      	b.n	8009108 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee8:	f107 0208 	add.w	r2, r7, #8
 8008eec:	4610      	mov	r0, r2
 8008eee:	4798      	blx	r3
 8008ef0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	701a      	strb	r2, [r3, #0]
      break;
 8008efa:	e105      	b.n	8009108 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	885b      	ldrh	r3, [r3, #2]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b05      	cmp	r3, #5
 8008f04:	f200 80ac 	bhi.w	8009060 <USBD_GetDescriptor+0x258>
 8008f08:	a201      	add	r2, pc, #4	@ (adr r2, 8008f10 <USBD_GetDescriptor+0x108>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008f29 	.word	0x08008f29
 8008f14:	08008f5d 	.word	0x08008f5d
 8008f18:	08008f91 	.word	0x08008f91
 8008f1c:	08008fc5 	.word	0x08008fc5
 8008f20:	08008ff9 	.word	0x08008ff9
 8008f24:	0800902d 	.word	0x0800902d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	7c12      	ldrb	r2, [r2, #16]
 8008f40:	f107 0108 	add.w	r1, r7, #8
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f4a:	e0a4      	b.n	8009096 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fac4 	bl	80094dc <USBD_CtlError>
            err++;
 8008f54:	7afb      	ldrb	r3, [r7, #11]
 8008f56:	3301      	adds	r3, #1
 8008f58:	72fb      	strb	r3, [r7, #11]
          break;
 8008f5a:	e09c      	b.n	8009096 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	7c12      	ldrb	r2, [r2, #16]
 8008f74:	f107 0108 	add.w	r1, r7, #8
 8008f78:	4610      	mov	r0, r2
 8008f7a:	4798      	blx	r3
 8008f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f7e:	e08a      	b.n	8009096 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 faaa 	bl	80094dc <USBD_CtlError>
            err++;
 8008f88:	7afb      	ldrb	r3, [r7, #11]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f8e:	e082      	b.n	8009096 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00b      	beq.n	8008fb4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	7c12      	ldrb	r2, [r2, #16]
 8008fa8:	f107 0108 	add.w	r1, r7, #8
 8008fac:	4610      	mov	r0, r2
 8008fae:	4798      	blx	r3
 8008fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fb2:	e070      	b.n	8009096 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fa90 	bl	80094dc <USBD_CtlError>
            err++;
 8008fbc:	7afb      	ldrb	r3, [r7, #11]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fc2:	e068      	b.n	8009096 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	7c12      	ldrb	r2, [r2, #16]
 8008fdc:	f107 0108 	add.w	r1, r7, #8
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
 8008fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe6:	e056      	b.n	8009096 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fa76 	bl	80094dc <USBD_CtlError>
            err++;
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff6:	e04e      	b.n	8009096 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7c12      	ldrb	r2, [r2, #16]
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901a:	e03c      	b.n	8009096 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa5c 	bl	80094dc <USBD_CtlError>
            err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
          break;
 800902a:	e034      	b.n	8009096 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7c12      	ldrb	r2, [r2, #16]
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904e:	e022      	b.n	8009096 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa42 	bl	80094dc <USBD_CtlError>
            err++;
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	3301      	adds	r3, #1
 800905c:	72fb      	strb	r3, [r7, #11]
          break;
 800905e:	e01a      	b.n	8009096 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00c      	beq.n	8009086 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	8852      	ldrh	r2, [r2, #2]
 8009078:	b2d1      	uxtb	r1, r2
 800907a:	f107 0208 	add.w	r2, r7, #8
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	4798      	blx	r3
 8009082:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8009084:	e006      	b.n	8009094 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fa27 	bl	80094dc <USBD_CtlError>
            err++;
 800908e:	7afb      	ldrb	r3, [r7, #11]
 8009090:	3301      	adds	r3, #1
 8009092:	72fb      	strb	r3, [r7, #11]
          break;
 8009094:	bf00      	nop
      }
      break;
 8009096:	e037      	b.n	8009108 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	7c1b      	ldrb	r3, [r3, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d109      	bne.n	80090b4 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a8:	f107 0208 	add.w	r2, r7, #8
 80090ac:	4610      	mov	r0, r2
 80090ae:	4798      	blx	r3
 80090b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090b2:	e029      	b.n	8009108 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fa10 	bl	80094dc <USBD_CtlError>
        err++;
 80090bc:	7afb      	ldrb	r3, [r7, #11]
 80090be:	3301      	adds	r3, #1
 80090c0:	72fb      	strb	r3, [r7, #11]
      break;
 80090c2:	e021      	b.n	8009108 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	7c1b      	ldrb	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10d      	bne.n	80090e8 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d4:	f107 0208 	add.w	r2, r7, #8
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3301      	adds	r3, #1
 80090e2:	2207      	movs	r2, #7
 80090e4:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090e6:	e00f      	b.n	8009108 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f9f6 	bl	80094dc <USBD_CtlError>
        err++;
 80090f0:	7afb      	ldrb	r3, [r7, #11]
 80090f2:	3301      	adds	r3, #1
 80090f4:	72fb      	strb	r3, [r7, #11]
      break;
 80090f6:	e007      	b.n	8009108 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f9ee 	bl	80094dc <USBD_CtlError>
      err++;
 8009100:	7afb      	ldrb	r3, [r7, #11]
 8009102:	3301      	adds	r3, #1
 8009104:	72fb      	strb	r3, [r7, #11]
      break;
 8009106:	bf00      	nop
  }

  if (err != 0U)
 8009108:	7afb      	ldrb	r3, [r7, #11]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d11e      	bne.n	800914c <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	88db      	ldrh	r3, [r3, #6]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d016      	beq.n	8009144 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 8009116:	893b      	ldrh	r3, [r7, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00e      	beq.n	800913a <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	88da      	ldrh	r2, [r3, #6]
 8009120:	893b      	ldrh	r3, [r7, #8]
 8009122:	4293      	cmp	r3, r2
 8009124:	bf28      	it	cs
 8009126:	4613      	movcs	r3, r2
 8009128:	b29b      	uxth	r3, r3
 800912a:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800912c:	893b      	ldrh	r3, [r7, #8]
 800912e:	461a      	mov	r2, r3
 8009130:	68f9      	ldr	r1, [r7, #12]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fa43 	bl	80095be <USBD_CtlSendData>
 8009138:	e009      	b.n	800914e <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f9cd 	bl	80094dc <USBD_CtlError>
 8009142:	e004      	b.n	800914e <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa94 	bl	8009672 <USBD_CtlSendStatus>
 800914a:	e000      	b.n	800914e <USBD_GetDescriptor+0x346>
    return;
 800914c:	bf00      	nop
  }
}
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	889b      	ldrh	r3, [r3, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d131      	bne.n	80091ca <USBD_SetAddress+0x76>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	88db      	ldrh	r3, [r3, #6]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d12d      	bne.n	80091ca <USBD_SetAddress+0x76>
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	885b      	ldrh	r3, [r3, #2]
 8009172:	2b7f      	cmp	r3, #127	@ 0x7f
 8009174:	d829      	bhi.n	80091ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	885b      	ldrh	r3, [r3, #2]
 800917a:	b2db      	uxtb	r3, r3
 800917c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009180:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b03      	cmp	r3, #3
 800918c:	d104      	bne.n	8009198 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f9a3 	bl	80094dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009196:	e01d      	b.n	80091d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	7bfa      	ldrb	r2, [r7, #15]
 800919c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fe03 	bl	8009db0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fa61 	bl	8009672 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d004      	beq.n	80091c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2202      	movs	r2, #2
 80091ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091be:	e009      	b.n	80091d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c8:	e004      	b.n	80091d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f985 	bl	80094dc <USBD_CtlError>
  }
}
 80091d2:	bf00      	nop
 80091d4:	bf00      	nop
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	885b      	ldrh	r3, [r3, #2]
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	4b4c      	ldr	r3, [pc, #304]	@ (8009324 <USBD_SetConfig+0x148>)
 80091f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091f4:	4b4b      	ldr	r3, [pc, #300]	@ (8009324 <USBD_SetConfig+0x148>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d905      	bls.n	8009208 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f96c 	bl	80094dc <USBD_CtlError>
    return USBD_FAIL;
 8009204:	2303      	movs	r3, #3
 8009206:	e088      	b.n	800931a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	d002      	beq.n	800921a <USBD_SetConfig+0x3e>
 8009214:	2b03      	cmp	r3, #3
 8009216:	d025      	beq.n	8009264 <USBD_SetConfig+0x88>
 8009218:	e071      	b.n	80092fe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800921a:	4b42      	ldr	r3, [pc, #264]	@ (8009324 <USBD_SetConfig+0x148>)
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d01c      	beq.n	800925c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009222:	4b40      	ldr	r3, [pc, #256]	@ (8009324 <USBD_SetConfig+0x148>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800922c:	4b3d      	ldr	r3, [pc, #244]	@ (8009324 <USBD_SetConfig+0x148>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff f97f 	bl	8008536 <USBD_SetClassConfig>
 8009238:	4603      	mov	r3, r0
 800923a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d004      	beq.n	800924c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f949 	bl	80094dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800924a:	e065      	b.n	8009318 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fa10 	bl	8009672 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2203      	movs	r2, #3
 8009256:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800925a:	e05d      	b.n	8009318 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fa08 	bl	8009672 <USBD_CtlSendStatus>
      break;
 8009262:	e059      	b.n	8009318 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009264:	4b2f      	ldr	r3, [pc, #188]	@ (8009324 <USBD_SetConfig+0x148>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d112      	bne.n	8009292 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009274:	4b2b      	ldr	r3, [pc, #172]	@ (8009324 <USBD_SetConfig+0x148>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	461a      	mov	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800927e:	4b29      	ldr	r3, [pc, #164]	@ (8009324 <USBD_SetConfig+0x148>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff f972 	bl	800856e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f9f1 	bl	8009672 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009290:	e042      	b.n	8009318 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009292:	4b24      	ldr	r3, [pc, #144]	@ (8009324 <USBD_SetConfig+0x148>)
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	429a      	cmp	r2, r3
 800929e:	d02a      	beq.n	80092f6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff f960 	bl	800856e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092ae:	4b1d      	ldr	r3, [pc, #116]	@ (8009324 <USBD_SetConfig+0x148>)
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009324 <USBD_SetConfig+0x148>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff f939 	bl	8008536 <USBD_SetClassConfig>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00f      	beq.n	80092ee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f903 	bl	80094dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7ff f945 	bl	800856e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092ec:	e014      	b.n	8009318 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f9bf 	bl	8009672 <USBD_CtlSendStatus>
      break;
 80092f4:	e010      	b.n	8009318 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f9bb 	bl	8009672 <USBD_CtlSendStatus>
      break;
 80092fc:	e00c      	b.n	8009318 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f8eb 	bl	80094dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009306:	4b07      	ldr	r3, [pc, #28]	@ (8009324 <USBD_SetConfig+0x148>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff f92e 	bl	800856e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009312:	2303      	movs	r3, #3
 8009314:	73fb      	strb	r3, [r7, #15]
      break;
 8009316:	bf00      	nop
  }

  return ret;
 8009318:	7bfb      	ldrb	r3, [r7, #15]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	200002af 	.word	0x200002af

08009328 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	88db      	ldrh	r3, [r3, #6]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d004      	beq.n	8009344 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f8cd 	bl	80094dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009342:	e023      	b.n	800938c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b02      	cmp	r3, #2
 800934e:	dc02      	bgt.n	8009356 <USBD_GetConfig+0x2e>
 8009350:	2b00      	cmp	r3, #0
 8009352:	dc03      	bgt.n	800935c <USBD_GetConfig+0x34>
 8009354:	e015      	b.n	8009382 <USBD_GetConfig+0x5a>
 8009356:	2b03      	cmp	r3, #3
 8009358:	d00b      	beq.n	8009372 <USBD_GetConfig+0x4a>
 800935a:	e012      	b.n	8009382 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	3308      	adds	r3, #8
 8009366:	2201      	movs	r2, #1
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f927 	bl	80095be <USBD_CtlSendData>
        break;
 8009370:	e00c      	b.n	800938c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	3304      	adds	r3, #4
 8009376:	2201      	movs	r2, #1
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f91f 	bl	80095be <USBD_CtlSendData>
        break;
 8009380:	e004      	b.n	800938c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f8a9 	bl	80094dc <USBD_CtlError>
        break;
 800938a:	bf00      	nop
}
 800938c:	bf00      	nop
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	3b01      	subs	r3, #1
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d81e      	bhi.n	80093ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	88db      	ldrh	r3, [r3, #6]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d004      	beq.n	80093be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f890 	bl	80094dc <USBD_CtlError>
        break;
 80093bc:	e01a      	b.n	80093f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d005      	beq.n	80093da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f043 0202 	orr.w	r2, r3, #2
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	330c      	adds	r3, #12
 80093de:	2202      	movs	r2, #2
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f8eb 	bl	80095be <USBD_CtlSendData>
      break;
 80093e8:	e004      	b.n	80093f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f875 	bl	80094dc <USBD_CtlError>
      break;
 80093f2:	bf00      	nop
  }
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	885b      	ldrh	r3, [r3, #2]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d106      	bne.n	800941c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f92b 	bl	8009672 <USBD_CtlSendStatus>
  }
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009434:	b2db      	uxtb	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	2b02      	cmp	r3, #2
 800943a:	d80b      	bhi.n	8009454 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	885b      	ldrh	r3, [r3, #2]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d10c      	bne.n	800945e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f910 	bl	8009672 <USBD_CtlSendStatus>
      }
      break;
 8009452:	e004      	b.n	800945e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f840 	bl	80094dc <USBD_CtlError>
      break;
 800945c:	e000      	b.n	8009460 <USBD_ClrFeature+0x3c>
      break;
 800945e:	bf00      	nop
  }
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	781a      	ldrb	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3301      	adds	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	781a      	ldrb	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3301      	adds	r3, #1
 8009490:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f7ff fa7f 	bl	8008996 <SWAPBYTE>
 8009498:	4603      	mov	r3, r0
 800949a:	461a      	mov	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	3301      	adds	r3, #1
 80094a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3301      	adds	r3, #1
 80094aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f7ff fa72 	bl	8008996 <SWAPBYTE>
 80094b2:	4603      	mov	r3, r0
 80094b4:	461a      	mov	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3301      	adds	r3, #1
 80094be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3301      	adds	r3, #1
 80094c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff fa65 	bl	8008996 <SWAPBYTE>
 80094cc:	4603      	mov	r3, r0
 80094ce:	461a      	mov	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	80da      	strh	r2, [r3, #6]
}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094e6:	2180      	movs	r1, #128	@ 0x80
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fbf7 	bl	8009cdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094ee:	2100      	movs	r1, #0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fbf3 	bl	8009cdc <USBD_LL_StallEP>
}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b086      	sub	sp, #24
 8009502:	af00      	add	r7, sp, #0
 8009504:	60f8      	str	r0, [r7, #12]
 8009506:	60b9      	str	r1, [r7, #8]
 8009508:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d036      	beq.n	8009582 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009518:	6938      	ldr	r0, [r7, #16]
 800951a:	f000 f836 	bl	800958a <USBD_GetLen>
 800951e:	4603      	mov	r3, r0
 8009520:	3301      	adds	r3, #1
 8009522:	b29b      	uxth	r3, r3
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	b29a      	uxth	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	4413      	add	r3, r2
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	7812      	ldrb	r2, [r2, #0]
 8009536:	701a      	strb	r2, [r3, #0]
  idx++;
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	3301      	adds	r3, #1
 800953c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	4413      	add	r3, r2
 8009544:	2203      	movs	r2, #3
 8009546:	701a      	strb	r2, [r3, #0]
  idx++;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	3301      	adds	r3, #1
 800954c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800954e:	e013      	b.n	8009578 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009550:	7dfb      	ldrb	r3, [r7, #23]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	4413      	add	r3, r2
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	7812      	ldrb	r2, [r2, #0]
 800955a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	3301      	adds	r3, #1
 8009560:	613b      	str	r3, [r7, #16]
    idx++;
 8009562:	7dfb      	ldrb	r3, [r7, #23]
 8009564:	3301      	adds	r3, #1
 8009566:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	4413      	add	r3, r2
 800956e:	2200      	movs	r2, #0
 8009570:	701a      	strb	r2, [r3, #0]
    idx++;
 8009572:	7dfb      	ldrb	r3, [r7, #23]
 8009574:	3301      	adds	r3, #1
 8009576:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e7      	bne.n	8009550 <USBD_GetString+0x52>
 8009580:	e000      	b.n	8009584 <USBD_GetString+0x86>
    return;
 8009582:	bf00      	nop
  }
}
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800958a:	b480      	push	{r7}
 800958c:	b085      	sub	sp, #20
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800959a:	e005      	b.n	80095a8 <USBD_GetLen+0x1e>
  {
    len++;
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	3301      	adds	r3, #1
 80095a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	3301      	adds	r3, #1
 80095a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1f5      	bne.n	800959c <USBD_GetLen+0x12>
  }

  return len;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	60b9      	str	r1, [r7, #8]
 80095c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2202      	movs	r2, #2
 80095ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	2100      	movs	r1, #0
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 fc02 	bl	8009dee <USBD_LL_Transmit>

  return USBD_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	2100      	movs	r1, #0
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 fbf1 	bl	8009dee <USBD_LL_Transmit>

  return USBD_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2203      	movs	r2, #3
 8009626:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	2100      	movs	r1, #0
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 fbf5 	bl	8009e30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	2100      	movs	r1, #0
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 fbe4 	bl	8009e30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b082      	sub	sp, #8
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2204      	movs	r2, #4
 800967e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009682:	2300      	movs	r3, #0
 8009684:	2200      	movs	r2, #0
 8009686:	2100      	movs	r1, #0
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fbb0 	bl	8009dee <USBD_LL_Transmit>

  return USBD_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2205      	movs	r2, #5
 80096a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096a8:	2300      	movs	r3, #0
 80096aa:	2200      	movs	r2, #0
 80096ac:	2100      	movs	r1, #0
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fbbe 	bl	8009e30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 80096c4:	2200      	movs	r2, #0
 80096c6:	4912      	ldr	r1, [pc, #72]	@ (8009710 <MX_USB_Device_Init+0x50>)
 80096c8:	4812      	ldr	r0, [pc, #72]	@ (8009714 <MX_USB_Device_Init+0x54>)
 80096ca:	f7fe feab 	bl	8008424 <USBD_Init>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80096d4:	f7f6 ffb0 	bl	8000638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 80096d8:	490f      	ldr	r1, [pc, #60]	@ (8009718 <MX_USB_Device_Init+0x58>)
 80096da:	480e      	ldr	r0, [pc, #56]	@ (8009714 <MX_USB_Device_Init+0x54>)
 80096dc:	f7fe fed2 	bl	8008484 <USBD_RegisterClass>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80096e6:	f7f6 ffa7 	bl	8000638 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 80096ea:	490c      	ldr	r1, [pc, #48]	@ (800971c <MX_USB_Device_Init+0x5c>)
 80096ec:	4809      	ldr	r0, [pc, #36]	@ (8009714 <MX_USB_Device_Init+0x54>)
 80096ee:	f7fe fb17 	bl	8007d20 <USBD_DFU_RegisterMedia>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80096f8:	f7f6 ff9e 	bl	8000638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80096fc:	4805      	ldr	r0, [pc, #20]	@ (8009714 <MX_USB_Device_Init+0x54>)
 80096fe:	f7fe fee8 	bl	80084d2 <USBD_Start>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009708:	f7f6 ff96 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800970c:	bf00      	nop
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20000070 	.word	0x20000070
 8009714:	200002b0 	.word	0x200002b0
 8009718:	2000000c 	.word	0x2000000c
 800971c:	200000c4 	.word	0x200000c4

08009720 <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	6039      	str	r1, [r7, #0]
 800972a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2212      	movs	r2, #18
 8009730:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 8009732:	4b03      	ldr	r3, [pc, #12]	@ (8009740 <USBD_DFU_DeviceDescriptor+0x20>)
}
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	20000090 	.word	0x20000090

08009744 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2204      	movs	r2, #4
 8009754:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009756:	4b03      	ldr	r3, [pc, #12]	@ (8009764 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr
 8009764:	200000a4 	.word	0x200000a4

08009768 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	4603      	mov	r3, r0
 8009770:	6039      	str	r1, [r7, #0]
 8009772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d105      	bne.n	8009786 <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	4907      	ldr	r1, [pc, #28]	@ (800979c <USBD_DFU_ProductStrDescriptor+0x34>)
 800977e:	4808      	ldr	r0, [pc, #32]	@ (80097a0 <USBD_DFU_ProductStrDescriptor+0x38>)
 8009780:	f7ff febd 	bl	80094fe <USBD_GetString>
 8009784:	e004      	b.n	8009790 <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	4904      	ldr	r1, [pc, #16]	@ (800979c <USBD_DFU_ProductStrDescriptor+0x34>)
 800978a:	4805      	ldr	r0, [pc, #20]	@ (80097a0 <USBD_DFU_ProductStrDescriptor+0x38>)
 800978c:	f7ff feb7 	bl	80094fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8009790:	4b02      	ldr	r3, [pc, #8]	@ (800979c <USBD_DFU_ProductStrDescriptor+0x34>)
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20000580 	.word	0x20000580
 80097a0:	08009fe4 	.word	0x08009fe4

080097a4 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	4904      	ldr	r1, [pc, #16]	@ (80097c4 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 80097b4:	4804      	ldr	r0, [pc, #16]	@ (80097c8 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 80097b6:	f7ff fea2 	bl	80094fe <USBD_GetString>
  return USBD_StrDesc;
 80097ba:	4b02      	ldr	r3, [pc, #8]	@ (80097c4 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20000580 	.word	0x20000580
 80097c8:	0800a004 	.word	0x0800a004

080097cc <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	6039      	str	r1, [r7, #0]
 80097d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	221a      	movs	r2, #26
 80097dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097de:	f000 f843 	bl	8009868 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80097e2:	4b02      	ldr	r3, [pc, #8]	@ (80097ec <USBD_DFU_SerialStrDescriptor+0x20>)
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	200000a8 	.word	0x200000a8

080097f0 <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	6039      	str	r1, [r7, #0]
 80097fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d105      	bne.n	800980e <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	4907      	ldr	r1, [pc, #28]	@ (8009824 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8009806:	4808      	ldr	r0, [pc, #32]	@ (8009828 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8009808:	f7ff fe79 	bl	80094fe <USBD_GetString>
 800980c:	e004      	b.n	8009818 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	4904      	ldr	r1, [pc, #16]	@ (8009824 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8009812:	4805      	ldr	r0, [pc, #20]	@ (8009828 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8009814:	f7ff fe73 	bl	80094fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8009818:	4b02      	ldr	r3, [pc, #8]	@ (8009824 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20000580 	.word	0x20000580
 8009828:	0800a018 	.word	0x0800a018

0800982c <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	6039      	str	r1, [r7, #0]
 8009836:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009838:	79fb      	ldrb	r3, [r7, #7]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d105      	bne.n	800984a <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	4907      	ldr	r1, [pc, #28]	@ (8009860 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8009842:	4808      	ldr	r0, [pc, #32]	@ (8009864 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8009844:	f7ff fe5b 	bl	80094fe <USBD_GetString>
 8009848:	e004      	b.n	8009854 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	4904      	ldr	r1, [pc, #16]	@ (8009860 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 800984e:	4805      	ldr	r0, [pc, #20]	@ (8009864 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8009850:	f7ff fe55 	bl	80094fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8009854:	4b02      	ldr	r3, [pc, #8]	@ (8009860 <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 8009856:	4618      	mov	r0, r3
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20000580 	.word	0x20000580
 8009864:	0800a024 	.word	0x0800a024

08009868 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800986e:	4b0f      	ldr	r3, [pc, #60]	@ (80098ac <Get_SerialNum+0x44>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009874:	4b0e      	ldr	r3, [pc, #56]	@ (80098b0 <Get_SerialNum+0x48>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800987a:	4b0e      	ldr	r3, [pc, #56]	@ (80098b4 <Get_SerialNum+0x4c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4413      	add	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d009      	beq.n	80098a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800988e:	2208      	movs	r2, #8
 8009890:	4909      	ldr	r1, [pc, #36]	@ (80098b8 <Get_SerialNum+0x50>)
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 f814 	bl	80098c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009898:	2204      	movs	r2, #4
 800989a:	4908      	ldr	r1, [pc, #32]	@ (80098bc <Get_SerialNum+0x54>)
 800989c:	68b8      	ldr	r0, [r7, #8]
 800989e:	f000 f80f 	bl	80098c0 <IntToUnicode>
  }
}
 80098a2:	bf00      	nop
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	1fff7590 	.word	0x1fff7590
 80098b0:	1fff7594 	.word	0x1fff7594
 80098b4:	1fff7598 	.word	0x1fff7598
 80098b8:	200000aa 	.word	0x200000aa
 80098bc:	200000ba 	.word	0x200000ba

080098c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098d2:	2300      	movs	r3, #0
 80098d4:	75fb      	strb	r3, [r7, #23]
 80098d6:	e027      	b.n	8009928 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	0f1b      	lsrs	r3, r3, #28
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d80b      	bhi.n	80098f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	0f1b      	lsrs	r3, r3, #28
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	4619      	mov	r1, r3
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	440b      	add	r3, r1
 80098f0:	3230      	adds	r2, #48	@ 0x30
 80098f2:	b2d2      	uxtb	r2, r2
 80098f4:	701a      	strb	r2, [r3, #0]
 80098f6:	e00a      	b.n	800990e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	0f1b      	lsrs	r3, r3, #28
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4619      	mov	r1, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	440b      	add	r3, r1
 8009908:	3237      	adds	r2, #55	@ 0x37
 800990a:	b2d2      	uxtb	r2, r2
 800990c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	3301      	adds	r3, #1
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	4413      	add	r3, r2
 800991e:	2200      	movs	r2, #0
 8009920:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009922:	7dfb      	ldrb	r3, [r7, #23]
 8009924:	3301      	adds	r3, #1
 8009926:	75fb      	strb	r3, [r7, #23]
 8009928:	7dfa      	ldrb	r2, [r7, #23]
 800992a:	79fb      	ldrb	r3, [r7, #7]
 800992c:	429a      	cmp	r2, r3
 800992e:	d3d3      	bcc.n	80098d8 <IntToUnicode+0x18>
  }
}
 8009930:	bf00      	nop
 8009932:	bf00      	nop
 8009934:	371c      	adds	r7, #28
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 800993e:	b480      	push	{r7}
 8009940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8009942:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8009944:	4618      	mov	r0, r3
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr

0800994e <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 800994e:	b480      	push	{r7}
 8009950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8009952:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8009954:	4618      	mov	r0, r3
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 800995e:	b480      	push	{r7}
 8009960:	b083      	sub	sp, #12
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8009966:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8009980:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800998e:	b480      	push	{r7}
 8009990:	b085      	sub	sp, #20
 8009992:	af00      	add	r7, sp, #0
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 800999a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b085      	sub	sp, #20
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	460b      	mov	r3, r1
 80099b4:	607a      	str	r2, [r7, #4]
 80099b6:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 80099b8:	7afb      	ldrb	r3, [r7, #11]
 80099ba:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 80099bc:	bf00      	nop
  }
  return (USBD_OK);
 80099be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b094      	sub	sp, #80	@ 0x50
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80099d4:	f107 030c 	add.w	r3, r7, #12
 80099d8:	2244      	movs	r2, #68	@ 0x44
 80099da:	2100      	movs	r1, #0
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 fac9 	bl	8009f74 <memset>
  if(pcdHandle->Instance==USB)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a15      	ldr	r2, [pc, #84]	@ (8009a3c <HAL_PCD_MspInit+0x70>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d123      	bne.n	8009a34 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80099ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80099f0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80099f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099f6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80099f8:	f107 030c 	add.w	r3, r7, #12
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fb fa8d 	bl	8004f1c <HAL_RCCEx_PeriphCLKConfig>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009a08:	f7f6 fe16 	bl	8000638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a40 <HAL_PCD_MspInit+0x74>)
 8009a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a10:	4a0b      	ldr	r2, [pc, #44]	@ (8009a40 <HAL_PCD_MspInit+0x74>)
 8009a12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a18:	4b09      	ldr	r3, [pc, #36]	@ (8009a40 <HAL_PCD_MspInit+0x74>)
 8009a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a20:	60bb      	str	r3, [r7, #8]
 8009a22:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009a24:	2200      	movs	r2, #0
 8009a26:	2100      	movs	r1, #0
 8009a28:	2014      	movs	r0, #20
 8009a2a:	f7f7 f8e0 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009a2e:	2014      	movs	r0, #20
 8009a30:	f7f7 f8f7 	bl	8000c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a34:	bf00      	nop
 8009a36:	3750      	adds	r7, #80	@ 0x50
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	40005c00 	.word	0x40005c00
 8009a40:	40021000 	.word	0x40021000

08009a44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	f7fe fd9f 	bl	800859e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009a7a:	78fa      	ldrb	r2, [r7, #3]
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	440b      	add	r3, r1
 8009a88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	4619      	mov	r1, r3
 8009a92:	f7fe fdd9 	bl	8008648 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009ab0:	78fa      	ldrb	r2, [r7, #3]
 8009ab2:	6879      	ldr	r1, [r7, #4]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	440b      	add	r3, r1
 8009abe:	3324      	adds	r3, #36	@ 0x24
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	f7fe fe22 	bl	800870e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009aca:	bf00      	nop
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fe ff36 	bl	8008952 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009ae6:	bf00      	nop
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009af6:	2301      	movs	r3, #1
 8009af8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	795b      	ldrb	r3, [r3, #5]
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d001      	beq.n	8009b06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b02:	f7f6 fd99 	bl	8000638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009b0c:	7bfa      	ldrb	r2, [r7, #15]
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fe fee0 	bl	80088d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe fe8c 	bl	800883a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009b22:	bf00      	nop
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe fedb 	bl	80088f6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	7a5b      	ldrb	r3, [r3, #9]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d005      	beq.n	8009b54 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b48:	4b04      	ldr	r3, [pc, #16]	@ (8009b5c <HAL_PCD_SuspendCallback+0x30>)
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	4a03      	ldr	r2, [pc, #12]	@ (8009b5c <HAL_PCD_SuspendCallback+0x30>)
 8009b4e:	f043 0306 	orr.w	r3, r3, #6
 8009b52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	e000ed00 	.word	0xe000ed00

08009b60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	7a5b      	ldrb	r3, [r3, #9]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d007      	beq.n	8009b80 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b70:	4b08      	ldr	r3, [pc, #32]	@ (8009b94 <HAL_PCD_ResumeCallback+0x34>)
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	4a07      	ldr	r2, [pc, #28]	@ (8009b94 <HAL_PCD_ResumeCallback+0x34>)
 8009b76:	f023 0306 	bic.w	r3, r3, #6
 8009b7a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009b7c:	f000 f9c8 	bl	8009f10 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe fecb 	bl	8008922 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009b8c:	bf00      	nop
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	e000ed00 	.word	0xe000ed00

08009b98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8009c1c <USBD_LL_Init+0x84>)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a1c      	ldr	r2, [pc, #112]	@ (8009c1c <USBD_LL_Init+0x84>)
 8009bac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8009c1c <USBD_LL_Init+0x84>)
 8009bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8009c20 <USBD_LL_Init+0x88>)
 8009bb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009bb6:	4b19      	ldr	r3, [pc, #100]	@ (8009c1c <USBD_LL_Init+0x84>)
 8009bb8:	2208      	movs	r2, #8
 8009bba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009bbc:	4b17      	ldr	r3, [pc, #92]	@ (8009c1c <USBD_LL_Init+0x84>)
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bc2:	4b16      	ldr	r3, [pc, #88]	@ (8009c1c <USBD_LL_Init+0x84>)
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009bc8:	4b14      	ldr	r3, [pc, #80]	@ (8009c1c <USBD_LL_Init+0x84>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009bce:	4b13      	ldr	r3, [pc, #76]	@ (8009c1c <USBD_LL_Init+0x84>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009bd4:	4b11      	ldr	r3, [pc, #68]	@ (8009c1c <USBD_LL_Init+0x84>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009bda:	4b10      	ldr	r3, [pc, #64]	@ (8009c1c <USBD_LL_Init+0x84>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009be0:	480e      	ldr	r0, [pc, #56]	@ (8009c1c <USBD_LL_Init+0x84>)
 8009be2:	f7f8 ff2e 	bl	8002a42 <HAL_PCD_Init>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009bec:	f7f6 fd24 	bl	8000638 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009bf6:	2318      	movs	r3, #24
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	f7fa fb77 	bl	80042ee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009c06:	2358      	movs	r3, #88	@ 0x58
 8009c08:	2200      	movs	r2, #0
 8009c0a:	2180      	movs	r1, #128	@ 0x80
 8009c0c:	f7fa fb6f 	bl	80042ee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20000780 	.word	0x20000780
 8009c20:	40005c00 	.word	0x40005c00

08009c24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7f8 ffcf 	bl	8002bde <HAL_PCD_Start>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 f968 	bl	8009f1c <USBD_Get_USB_Status>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7f8 ffd6 	bl	8002c22 <HAL_PCD_Stop>
 8009c76:	4603      	mov	r3, r0
 8009c78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 f94d 	bl	8009f1c <USBD_Get_USB_Status>
 8009c82:	4603      	mov	r3, r0
 8009c84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	4608      	mov	r0, r1
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	70fb      	strb	r3, [r7, #3]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	70bb      	strb	r3, [r7, #2]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009cb8:	78bb      	ldrb	r3, [r7, #2]
 8009cba:	883a      	ldrh	r2, [r7, #0]
 8009cbc:	78f9      	ldrb	r1, [r7, #3]
 8009cbe:	f7f9 f91d 	bl	8002efc <HAL_PCD_EP_Open>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 f927 	bl	8009f1c <USBD_Get_USB_Status>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009cf6:	78fa      	ldrb	r2, [r7, #3]
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7f9 f9c5 	bl	800308a <HAL_PCD_EP_SetStall>
 8009d00:	4603      	mov	r3, r0
 8009d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 f908 	bl	8009f1c <USBD_Get_USB_Status>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009d34:	78fa      	ldrb	r2, [r7, #3]
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7f9 f9f8 	bl	800312e <HAL_PCD_EP_ClrStall>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 f8e9 	bl	8009f1c <USBD_Get_USB_Status>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009d6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	da0b      	bge.n	8009d8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d7a:	68f9      	ldr	r1, [r7, #12]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4413      	add	r3, r2
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	440b      	add	r3, r1
 8009d86:	3312      	adds	r3, #18
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	e00b      	b.n	8009da4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d8c:	78fb      	ldrb	r3, [r7, #3]
 8009d8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d92:	68f9      	ldr	r1, [r7, #12]
 8009d94:	4613      	mov	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	00db      	lsls	r3, r3, #3
 8009d9c:	440b      	add	r3, r1
 8009d9e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009da2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	460b      	mov	r3, r1
 8009dba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009dca:	78fa      	ldrb	r2, [r7, #3]
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7f9 f870 	bl	8002eb4 <HAL_PCD_SetAddress>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 f89e 	bl	8009f1c <USBD_Get_USB_Status>
 8009de0:	4603      	mov	r3, r0
 8009de2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b086      	sub	sp, #24
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	603b      	str	r3, [r7, #0]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009e0c:	7af9      	ldrb	r1, [r7, #11]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	f7f9 f903 	bl	800301c <HAL_PCD_EP_Transmit>
 8009e16:	4603      	mov	r3, r0
 8009e18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f87d 	bl	8009f1c <USBD_Get_USB_Status>
 8009e22:	4603      	mov	r3, r0
 8009e24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e26:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	607a      	str	r2, [r7, #4]
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009e4e:	7af9      	ldrb	r1, [r7, #11]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	f7f9 f8b1 	bl	8002fba <HAL_PCD_EP_Receive>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 f85c 	bl	8009f1c <USBD_Get_USB_Status>
 8009e64:	4603      	mov	r3, r0
 8009e66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e68:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <HAL_PCDEx_LPM_Callback+0x18>
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d013      	beq.n	8009eb2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009e8a:	e023      	b.n	8009ed4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	7a5b      	ldrb	r3, [r3, #9]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d007      	beq.n	8009ea4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009e94:	f000 f83c 	bl	8009f10 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e98:	4b10      	ldr	r3, [pc, #64]	@ (8009edc <HAL_PCDEx_LPM_Callback+0x68>)
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8009edc <HAL_PCDEx_LPM_Callback+0x68>)
 8009e9e:	f023 0306 	bic.w	r3, r3, #6
 8009ea2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fe fd39 	bl	8008922 <USBD_LL_Resume>
    break;
 8009eb0:	e010      	b.n	8009ed4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fe fd1c 	bl	80088f6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	7a5b      	ldrb	r3, [r3, #9]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d005      	beq.n	8009ed2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ec6:	4b05      	ldr	r3, [pc, #20]	@ (8009edc <HAL_PCDEx_LPM_Callback+0x68>)
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	4a04      	ldr	r2, [pc, #16]	@ (8009edc <HAL_PCDEx_LPM_Callback+0x68>)
 8009ecc:	f043 0306 	orr.w	r3, r3, #6
 8009ed0:	6113      	str	r3, [r2, #16]
    break;
 8009ed2:	bf00      	nop
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	e000ed00 	.word	0xe000ed00

08009ee0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ee8:	4b03      	ldr	r3, [pc, #12]	@ (8009ef8 <USBD_static_malloc+0x18>)
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	20000a5c 	.word	0x20000a5c

08009efc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]

}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009f14:	f7f6 fa56 	bl	80003c4 <SystemClock_Config>
}
 8009f18:	bf00      	nop
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	4603      	mov	r3, r0
 8009f24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f2a:	79fb      	ldrb	r3, [r7, #7]
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d817      	bhi.n	8009f60 <USBD_Get_USB_Status+0x44>
 8009f30:	a201      	add	r2, pc, #4	@ (adr r2, 8009f38 <USBD_Get_USB_Status+0x1c>)
 8009f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f36:	bf00      	nop
 8009f38:	08009f49 	.word	0x08009f49
 8009f3c:	08009f4f 	.word	0x08009f4f
 8009f40:	08009f55 	.word	0x08009f55
 8009f44:	08009f5b 	.word	0x08009f5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f4c:	e00b      	b.n	8009f66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	73fb      	strb	r3, [r7, #15]
    break;
 8009f52:	e008      	b.n	8009f66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f54:	2301      	movs	r3, #1
 8009f56:	73fb      	strb	r3, [r7, #15]
    break;
 8009f58:	e005      	b.n	8009f66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f5e:	e002      	b.n	8009f66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f60:	2303      	movs	r3, #3
 8009f62:	73fb      	strb	r3, [r7, #15]
    break;
 8009f64:	bf00      	nop
  }
  return usb_status;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <memset>:
 8009f74:	4402      	add	r2, r0
 8009f76:	4603      	mov	r3, r0
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d100      	bne.n	8009f7e <memset+0xa>
 8009f7c:	4770      	bx	lr
 8009f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f82:	e7f9      	b.n	8009f78 <memset+0x4>

08009f84 <__libc_init_array>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	4d0d      	ldr	r5, [pc, #52]	@ (8009fbc <__libc_init_array+0x38>)
 8009f88:	4c0d      	ldr	r4, [pc, #52]	@ (8009fc0 <__libc_init_array+0x3c>)
 8009f8a:	1b64      	subs	r4, r4, r5
 8009f8c:	10a4      	asrs	r4, r4, #2
 8009f8e:	2600      	movs	r6, #0
 8009f90:	42a6      	cmp	r6, r4
 8009f92:	d109      	bne.n	8009fa8 <__libc_init_array+0x24>
 8009f94:	4d0b      	ldr	r5, [pc, #44]	@ (8009fc4 <__libc_init_array+0x40>)
 8009f96:	4c0c      	ldr	r4, [pc, #48]	@ (8009fc8 <__libc_init_array+0x44>)
 8009f98:	f000 f818 	bl	8009fcc <_init>
 8009f9c:	1b64      	subs	r4, r4, r5
 8009f9e:	10a4      	asrs	r4, r4, #2
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	42a6      	cmp	r6, r4
 8009fa4:	d105      	bne.n	8009fb2 <__libc_init_array+0x2e>
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
 8009fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fac:	4798      	blx	r3
 8009fae:	3601      	adds	r6, #1
 8009fb0:	e7ee      	b.n	8009f90 <__libc_init_array+0xc>
 8009fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fb6:	4798      	blx	r3
 8009fb8:	3601      	adds	r6, #1
 8009fba:	e7f2      	b.n	8009fa2 <__libc_init_array+0x1e>
 8009fbc:	0800a0a4 	.word	0x0800a0a4
 8009fc0:	0800a0a4 	.word	0x0800a0a4
 8009fc4:	0800a0a4 	.word	0x0800a0a4
 8009fc8:	0800a0a8 	.word	0x0800a0a8

08009fcc <_init>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	bf00      	nop
 8009fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd2:	bc08      	pop	{r3}
 8009fd4:	469e      	mov	lr, r3
 8009fd6:	4770      	bx	lr

08009fd8 <_fini>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	bf00      	nop
 8009fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	469e      	mov	lr, r3
 8009fe2:	4770      	bx	lr
