
Torpedo Controller - Juan Garnica - 8-5-2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bf0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009dc8  08009dc8  0000adc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e20  08009e20  0000b184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009e20  08009e20  0000b184  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009e20  08009e20  0000b184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e20  08009e20  0000ae20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e24  08009e24  0000ae24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08009e28  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a4  20000184  08009fac  0000b184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001428  08009fac  0000b428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019324  00000000  00000000  0000b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e17  00000000  00000000  000244d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  000282f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000118c  00000000  00000000  000299d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fd1  00000000  00000000  0002ab64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c45c  00000000  00000000  0004bb35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7a01  00000000  00000000  00067f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f992  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f84  00000000  00000000  0012f9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0013595c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009db0 	.word	0x08009db0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009db0 	.word	0x08009db0

08000218 <process_data>:
int countAddr = 0;
int countrxcplt = 0;
int counterror = 0;

void process_data (void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
	int startREG = RxData[0];  // get the register address
 800021e:	4b16      	ldr	r3, [pc, #88]	@ (8000278 <process_data+0x60>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	617b      	str	r3, [r7, #20]
	int numREG = rxcount-1;  // Get the number of registers
 8000224:	4b15      	ldr	r3, [pc, #84]	@ (800027c <process_data+0x64>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3b01      	subs	r3, #1
 800022a:	60bb      	str	r3, [r7, #8]
	int endREG = startREG + numREG -1;  // calculate the end register
 800022c:	697a      	ldr	r2, [r7, #20]
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	4413      	add	r3, r2
 8000232:	3b01      	subs	r3, #1
 8000234:	607b      	str	r3, [r7, #4]
	if (endREG>9)  // There are a total of 10 registers (0-9)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2b09      	cmp	r3, #9
 800023a:	dd01      	ble.n	8000240 <process_data+0x28>
	{
		Error_Handler();
 800023c:	f000 f9fc 	bl	8000638 <Error_Handler>
	}

	int indx = 1;  // set the indx to 1 in order to start reading from RxData[1]
 8000240:	2301      	movs	r3, #1
 8000242:	613b      	str	r3, [r7, #16]
	for (int i=0; i<numREG; i++)
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e00c      	b.n	8000264 <process_data+0x4c>
	{
		I2C_REGISTERS[startREG++] = RxData[indx++];  // Read the data from RxData and save it in the I2C_REGISTERS
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	1c53      	adds	r3, r2, #1
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	1c59      	adds	r1, r3, #1
 8000254:	6179      	str	r1, [r7, #20]
 8000256:	4908      	ldr	r1, [pc, #32]	@ (8000278 <process_data+0x60>)
 8000258:	5c89      	ldrb	r1, [r1, r2]
 800025a:	4a09      	ldr	r2, [pc, #36]	@ (8000280 <process_data+0x68>)
 800025c:	54d1      	strb	r1, [r2, r3]
	for (int i=0; i<numREG; i++)
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	3301      	adds	r3, #1
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	429a      	cmp	r2, r3
 800026a:	dbee      	blt.n	800024a <process_data+0x32>
	}
}
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	3718      	adds	r7, #24
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	200001ac 	.word	0x200001ac
 800027c:	200001ae 	.word	0x200001ae
 8000280:	200001a0 	.word	0x200001a0

08000284 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f001 f81d 	bl	80012cc <HAL_I2C_EnableListen_IT>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	460b      	mov	r3, r1
 80002a6:	70fb      	strb	r3, [r7, #3]
 80002a8:	4613      	mov	r3, r2
 80002aa:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d10d      	bne.n	80002ce <HAL_I2C_AddrCallback+0x32>
	{
		rxcount = 0;
 80002b2:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <HAL_I2C_AddrCallback+0x40>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 80002b8:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <HAL_I2C_AddrCallback+0x40>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	461a      	mov	r2, r3
 80002be:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <HAL_I2C_AddrCallback+0x44>)
 80002c0:	18d1      	adds	r1, r2, r3
 80002c2:	2300      	movs	r3, #0
 80002c4:	2201      	movs	r2, #1
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f000 ff4e 	bl	8001168 <HAL_I2C_Slave_Seq_Receive_IT>

	else
	{
		Error_Handler();
	}
}
 80002cc:	e001      	b.n	80002d2 <HAL_I2C_AddrCallback+0x36>
		Error_Handler();
 80002ce:	f000 f9b3 	bl	8000638 <Error_Handler>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200001ae 	.word	0x200001ae
 80002e0:	200001ac 	.word	0x200001ac

080002e4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	rxcount++;
 80002ec:	4b17      	ldr	r3, [pc, #92]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	3301      	adds	r3, #1
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002f6:	701a      	strb	r2, [r3, #0]
	if (rxcount < RxSIZE)
 80002f8:	4b14      	ldr	r3, [pc, #80]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d81a      	bhi.n	8000336 <HAL_I2C_SlaveRxCpltCallback+0x52>
	{
		if (rxcount == RxSIZE-1)
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d10b      	bne.n	8000320 <HAL_I2C_SlaveRxCpltCallback+0x3c>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 8000308:	4b10      	ldr	r3, [pc, #64]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8000310:	18d1      	adds	r1, r2, r3
 8000312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000316:	2201      	movs	r2, #1
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 ff25 	bl	8001168 <HAL_I2C_Slave_Seq_Receive_IT>
 800031e:	e00a      	b.n	8000336 <HAL_I2C_SlaveRxCpltCallback+0x52>
		}
		else
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 8000320:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8000328:	18d1      	adds	r1, r2, r3
 800032a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800032e:	2201      	movs	r2, #1
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f000 ff19 	bl	8001168 <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (rxcount == RxSIZE)
 8000336:	4b05      	ldr	r3, [pc, #20]	@ (800034c <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d101      	bne.n	8000342 <HAL_I2C_SlaveRxCpltCallback+0x5e>
	{
		process_data();
 800033e:	f7ff ff6b 	bl	8000218 <process_data>
	}
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200001ae 	.word	0x200001ae
 8000350:	200001ac 	.word	0x200001ac

08000354 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	counterror++;
 800035c:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <HAL_I2C_ErrorCallback+0x34>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <HAL_I2C_ErrorCallback+0x34>)
 8000364:	6013      	str	r3, [r2, #0]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f001 f887 	bl	800147a <HAL_I2C_GetError>
 800036c:	60f8      	str	r0, [r7, #12]
	if (errorcode == 4)  // AF error
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	2b04      	cmp	r3, #4
 8000372:	d101      	bne.n	8000378 <HAL_I2C_ErrorCallback+0x24>
	{
		process_data();
 8000374:	f7ff ff50 	bl	8000218 <process_data>
	}
	HAL_I2C_EnableListen_IT(hi2c);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f000 ffa7 	bl	80012cc <HAL_I2C_EnableListen_IT>
}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200001b0 	.word	0x200001b0

0800038c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000390:	f000 fabf 	bl	8000912 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000394:	f000 f816 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000398:	f000 f904 	bl	80005a4 <MX_GPIO_Init>
  MX_I2C2_Init();
 800039c:	f000 f85e 	bl	800045c <MX_I2C2_Init>
  MX_TIM2_Init();
 80003a0:	f000 f89c 	bl	80004dc <MX_TIM2_Init>
  MX_USB_Device_Init();
 80003a4:	f008 fff4 	bl	8009390 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK)
 80003a8:	4805      	ldr	r0, [pc, #20]	@ (80003c0 <main+0x34>)
 80003aa:	f000 ff8f 	bl	80012cc <HAL_I2C_EnableListen_IT>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <main+0x2e>
  {
	  Error_Handler();
 80003b4:	f000 f940 	bl	8000638 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	bf00      	nop
 80003bc:	e7fd      	b.n	80003ba <main+0x2e>
 80003be:	bf00      	nop
 80003c0:	200001b4 	.word	0x200001b4

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b094      	sub	sp, #80	@ 0x50
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	2238      	movs	r2, #56	@ 0x38
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f009 fcc0 	bl	8009d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003ea:	f004 f809 	bl	8004400 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ee:	2302      	movs	r3, #2
 80003f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f8:	2340      	movs	r3, #64	@ 0x40
 80003fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	2302      	movs	r3, #2
 80003fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000400:	2302      	movs	r3, #2
 8000402:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000404:	2301      	movs	r3, #1
 8000406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000408:	230c      	movs	r3, #12
 800040a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800040c:	2302      	movs	r3, #2
 800040e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000410:	2304      	movs	r3, #4
 8000412:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000414:	2302      	movs	r3, #2
 8000416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0318 	add.w	r3, r7, #24
 800041c:	4618      	mov	r0, r3
 800041e:	f004 f8a3 	bl	8004568 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000428:	f000 f906 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
 800042e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000430:	2301      	movs	r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f004 fba1 	bl	8004b8c <HAL_RCC_ClockConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000450:	f000 f8f2 	bl	8000638 <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3750      	adds	r7, #80	@ 0x50
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000460:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000462:	4a1c      	ldr	r2, [pc, #112]	@ (80004d4 <MX_I2C2_Init+0x78>)
 8000464:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000466:	4b1a      	ldr	r3, [pc, #104]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000468:	4a1b      	ldr	r2, [pc, #108]	@ (80004d8 <MX_I2C2_Init+0x7c>)
 800046a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 158;
 800046c:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <MX_I2C2_Init+0x74>)
 800046e:	229e      	movs	r2, #158	@ 0x9e
 8000470:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000472:	4b17      	ldr	r3, [pc, #92]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000474:	2201      	movs	r2, #1
 8000476:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000478:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <MX_I2C2_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800047e:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000484:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <MX_I2C2_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000490:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000496:	480e      	ldr	r0, [pc, #56]	@ (80004d0 <MX_I2C2_Init+0x74>)
 8000498:	f000 fdca 	bl	8001030 <HAL_I2C_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80004a2:	f000 f8c9 	bl	8000638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004a6:	2100      	movs	r1, #0
 80004a8:	4809      	ldr	r0, [pc, #36]	@ (80004d0 <MX_I2C2_Init+0x74>)
 80004aa:	f002 fa11 	bl	80028d0 <HAL_I2CEx_ConfigAnalogFilter>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004b4:	f000 f8c0 	bl	8000638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004b8:	2100      	movs	r1, #0
 80004ba:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <MX_I2C2_Init+0x74>)
 80004bc:	f002 fa53 	bl	8002966 <HAL_I2CEx_ConfigDigitalFilter>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f8b7 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200001b4 	.word	0x200001b4
 80004d4:	40005800 	.word	0x40005800
 80004d8:	00503d58 	.word	0x00503d58

080004dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	@ 0x28
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ee:	463b      	mov	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
 80004fc:	615a      	str	r2, [r3, #20]
 80004fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000500:	4b27      	ldr	r3, [pc, #156]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000502:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000506:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8000508:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 800050a:	f240 623f 	movw	r2, #1599	@ 0x63f
 800050e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000510:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000516:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000518:	2263      	movs	r2, #99	@ 0x63
 800051a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051c:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000522:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000528:	481d      	ldr	r0, [pc, #116]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 800052a:	f004 ff03 	bl	8005334 <HAL_TIM_PWM_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000534:	f000 f880 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	4619      	mov	r1, r3
 8000546:	4816      	ldr	r0, [pc, #88]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000548:	f005 fbf2 	bl	8005d30 <HAL_TIMEx_MasterConfigSynchronization>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000552:	f000 f871 	bl	8000638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000556:	2360      	movs	r3, #96	@ 0x60
 8000558:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	4619      	mov	r1, r3
 800056c:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 800056e:	f004 ff39 	bl	80053e4 <HAL_TIM_PWM_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000578:	f000 f85e 	bl	8000638 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	2204      	movs	r2, #4
 8000580:	4619      	mov	r1, r3
 8000582:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000584:	f004 ff2e 	bl	80053e4 <HAL_TIM_PWM_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800058e:	f000 f853 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000592:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <MX_TIM2_Init+0xc4>)
 8000594:	f000 f900 	bl	8000798 <HAL_TIM_MspPostInit>

}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	@ 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000208 	.word	0x20000208

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	4a1d      	ldr	r2, [pc, #116]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005c0:	f043 0320 	orr.w	r3, r3, #32
 80005c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	f003 0320 	and.w	r3, r3, #32
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	4a17      	ldr	r2, [pc, #92]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	4a11      	ldr	r2, [pc, #68]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_GPIO_Init+0x90>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2101      	movs	r1, #1
 8000606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060a:	f000 fcf9 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060e:	2301      	movs	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000628:	f000 fb68 	bl	8000cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <Error_Handler+0x8>

08000644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <HAL_MspInit+0x44>)
 800064c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800064e:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <HAL_MspInit+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6613      	str	r3, [r2, #96]	@ 0x60
 8000656:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <HAL_MspInit+0x44>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <HAL_MspInit+0x44>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000666:	4a08      	ldr	r2, [pc, #32]	@ (8000688 <HAL_MspInit+0x44>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066c:	6593      	str	r3, [r2, #88]	@ 0x58
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_MspInit+0x44>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800067a:	f003 ff65 	bl	8004548 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09a      	sub	sp, #104	@ 0x68
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2244      	movs	r2, #68	@ 0x44
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f009 fb53 	bl	8009d58 <memset>
  if(hi2c->Instance==I2C2)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a27      	ldr	r2, [pc, #156]	@ (8000754 <HAL_I2C_MspInit+0xc8>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d147      	bne.n	800074c <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006bc:	2380      	movs	r3, #128	@ 0x80
 80006be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fc43 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006d4:	f7ff ffb0 	bl	8000638 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 80006da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f6:	2312      	movs	r3, #18
 80006f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000702:	2304      	movs	r3, #4
 8000704:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800070a:	4619      	mov	r1, r3
 800070c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000710:	f000 faf4 	bl	8000cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000714:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 8000716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000718:	4a0f      	ldr	r2, [pc, #60]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 800071a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800071e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000720:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <HAL_I2C_MspInit+0xcc>)
 8000722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	2021      	movs	r0, #33	@ 0x21
 8000732:	f000 fa3a 	bl	8000baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000736:	2021      	movs	r0, #33	@ 0x21
 8000738:	f000 fa51 	bl	8000bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2022      	movs	r0, #34	@ 0x22
 8000742:	f000 fa32 	bl	8000baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000746:	2022      	movs	r0, #34	@ 0x22
 8000748:	f000 fa49 	bl	8000bde <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800074c:	bf00      	nop
 800074e:	3768      	adds	r7, #104	@ 0x68
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40005800 	.word	0x40005800
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800076c:	d10b      	bne.n	8000786 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <HAL_TIM_PWM_MspInit+0x38>)
 8000770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000772:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <HAL_TIM_PWM_MspInit+0x38>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6593      	str	r3, [r2, #88]	@ 0x58
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_TIM_PWM_MspInit+0x38>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007b8:	d11c      	bne.n	80007f4 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <HAL_TIM_MspPostInit+0x64>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a0f      	ldr	r2, [pc, #60]	@ (80007fc <HAL_TIM_MspPostInit+0x64>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <HAL_TIM_MspPostInit+0x64>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80007d2:	2322      	movs	r3, #34	@ 0x22
 80007d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f0:	f000 fa84 	bl	8000cfc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <NMI_Handler+0x4>

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <MemManage_Handler+0x4>

08000818 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <UsageFault_Handler+0x4>

08000828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000856:	f000 f8af 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000864:	4802      	ldr	r0, [pc, #8]	@ (8000870 <USB_LP_IRQHandler+0x10>)
 8000866:	f002 f9ba 	bl	8002bde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000f2c 	.word	0x20000f2c

08000874 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000878:	4802      	ldr	r0, [pc, #8]	@ (8000884 <I2C2_EV_IRQHandler+0x10>)
 800087a:	f000 fd47 	bl	800130c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200001b4 	.word	0x200001b4

08000888 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800088c:	4802      	ldr	r0, [pc, #8]	@ (8000898 <I2C2_ER_IRQHandler+0x10>)
 800088e:	f000 fd57 	bl	8001340 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001b4 	.word	0x200001b4

0800089c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c0:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c4:	f7ff ffea 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	@ (8000900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	@ (800090c <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80008ee:	f009 fa3b 	bl	8009d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008f2:	f7ff fd4b 	bl	800038c <main>

080008f6 <LoopForever>:

LoopForever:
    b LoopForever
 80008f6:	e7fe      	b.n	80008f6 <LoopForever>
  ldr   r0, =_estack
 80008f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000904:	08009e28 	.word	0x08009e28
  ldr r2, =_sbss
 8000908:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800090c:	20001428 	.word	0x20001428

08000910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC1_2_IRQHandler>

08000912 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000918:	2300      	movs	r3, #0
 800091a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f939 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000922:	200f      	movs	r0, #15
 8000924:	f000 f80e 	bl	8000944 <HAL_InitTick>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	e001      	b.n	8000938 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000934:	f7ff fe86 	bl	8000644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000938:	79fb      	ldrb	r3, [r7, #7]

}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000950:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <HAL_InitTick+0x68>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d022      	beq.n	800099e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <HAL_InitTick+0x6c>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <HAL_InitTick+0x68>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000964:	fbb1 f3f3 	udiv	r3, r1, r3
 8000968:	fbb2 f3f3 	udiv	r3, r2, r3
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f944 	bl	8000bfa <HAL_SYSTICK_Config>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d10f      	bne.n	8000998 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	d809      	bhi.n	8000992 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097e:	2200      	movs	r2, #0
 8000980:	6879      	ldr	r1, [r7, #4]
 8000982:	f04f 30ff 	mov.w	r0, #4294967295
 8000986:	f000 f910 	bl	8000baa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <HAL_InitTick+0x70>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e007      	b.n	80009a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e004      	b.n	80009a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	e001      	b.n	80009a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_IncTick+0x1c>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <HAL_IncTick+0x20>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a03      	ldr	r2, [pc, #12]	@ (80009d4 <HAL_IncTick+0x1c>)
 80009c8:	6013      	str	r3, [r2, #0]
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	20000254 	.word	0x20000254
 80009d8:	20000008 	.word	0x20000008

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000254 	.word	0x20000254

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4907      	ldr	r1, [pc, #28]	@ (8000a90 <__NVIC_EnableIRQ+0x38>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	@ (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	@ (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	@ 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	@ 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b60:	d301      	bcc.n	8000b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00f      	b.n	8000b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <SysTick_Config+0x40>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6e:	210f      	movs	r1, #15
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f7ff ff8e 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <SysTick_Config+0x40>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <SysTick_Config+0x40>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff29 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff40 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff90 	bl	8000ae8 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5f 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff33 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa4 	bl	8000b50 <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d00d      	beq.n	8000c46 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2201      	movs	r2, #1
 8000c34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e047      	b.n	8000cd6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 020e 	bic.w	r2, r2, #14
 8000c54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0201 	bic.w	r2, r2, #1
 8000c64:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000c74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	f003 021f 	and.w	r2, r3, #31
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	2101      	movs	r1, #1
 8000c84:	fa01 f202 	lsl.w	r2, r1, r2
 8000c88:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000c92:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00c      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ca6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000caa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000cb4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	4798      	blx	r3
    }
  }
  return status;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cee:	b2db      	uxtb	r3, r3
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d0a:	e15a      	b.n	8000fc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	fa01 f303 	lsl.w	r3, r1, r3
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 814c 	beq.w	8000fbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d005      	beq.n	8000d3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d130      	bne.n	8000d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d72:	2201      	movs	r2, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	f003 0201 	and.w	r2, r3, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d017      	beq.n	8000dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d123      	bne.n	8000e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	6939      	ldr	r1, [r7, #16]
 8000e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0203 	and.w	r2, r3, #3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80a6 	beq.w	8000fbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e70:	4b5b      	ldr	r3, [pc, #364]	@ (8000fe0 <HAL_GPIO_Init+0x2e4>)
 8000e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e74:	4a5a      	ldr	r2, [pc, #360]	@ (8000fe0 <HAL_GPIO_Init+0x2e4>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e7c:	4b58      	ldr	r3, [pc, #352]	@ (8000fe0 <HAL_GPIO_Init+0x2e4>)
 8000e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e88:	4a56      	ldr	r2, [pc, #344]	@ (8000fe4 <HAL_GPIO_Init+0x2e8>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000eb2:	d01f      	beq.n	8000ef4 <HAL_GPIO_Init+0x1f8>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d019      	beq.n	8000ef0 <HAL_GPIO_Init+0x1f4>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a4b      	ldr	r2, [pc, #300]	@ (8000fec <HAL_GPIO_Init+0x2f0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d013      	beq.n	8000eec <HAL_GPIO_Init+0x1f0>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8000ff0 <HAL_GPIO_Init+0x2f4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d00d      	beq.n	8000ee8 <HAL_GPIO_Init+0x1ec>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a49      	ldr	r2, [pc, #292]	@ (8000ff4 <HAL_GPIO_Init+0x2f8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d007      	beq.n	8000ee4 <HAL_GPIO_Init+0x1e8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a48      	ldr	r2, [pc, #288]	@ (8000ff8 <HAL_GPIO_Init+0x2fc>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d101      	bne.n	8000ee0 <HAL_GPIO_Init+0x1e4>
 8000edc:	2305      	movs	r3, #5
 8000ede:	e00a      	b.n	8000ef6 <HAL_GPIO_Init+0x1fa>
 8000ee0:	2306      	movs	r3, #6
 8000ee2:	e008      	b.n	8000ef6 <HAL_GPIO_Init+0x1fa>
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	e006      	b.n	8000ef6 <HAL_GPIO_Init+0x1fa>
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e004      	b.n	8000ef6 <HAL_GPIO_Init+0x1fa>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e002      	b.n	8000ef6 <HAL_GPIO_Init+0x1fa>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <HAL_GPIO_Init+0x1fa>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	f002 0203 	and.w	r2, r2, #3
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4093      	lsls	r3, r2
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f06:	4937      	ldr	r1, [pc, #220]	@ (8000fe4 <HAL_GPIO_Init+0x2e8>)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f14:	4b39      	ldr	r3, [pc, #228]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f38:	4a30      	ldr	r2, [pc, #192]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f62:	4a26      	ldr	r2, [pc, #152]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fb6:	4a11      	ldr	r2, [pc, #68]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f47f ae9d 	bne.w	8000d0c <HAL_GPIO_Init+0x10>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010000 	.word	0x40010000
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	48000800 	.word	0x48000800
 8000ff0:	48000c00 	.word	0x48000c00
 8000ff4:	48001000 	.word	0x48001000
 8000ff8:	48001400 	.word	0x48001400
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800101c:	e002      	b.n	8001024 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e08d      	b.n	800115e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d106      	bne.n	800105c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fb18 	bl	800068c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2224      	movs	r2, #36	@ 0x24
 8001060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0201 	bic.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001080:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001090:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d107      	bne.n	80010aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	e006      	b.n	80010b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80010b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d108      	bne.n	80010d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	e007      	b.n	80010e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001104:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69d9      	ldr	r1, [r3, #28]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a1a      	ldr	r2, [r3, #32]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2220      	movs	r2, #32
 800114a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001184:	2b28      	cmp	r3, #40	@ 0x28
 8001186:	f040 8098 	bne.w	80012ba <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d105      	bne.n	80011a2 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800119c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e08c      	b.n	80012bc <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80011a2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f001 fb34 	bl	8002814 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e080      	b.n	80012bc <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b29      	cmp	r3, #41	@ 0x29
 80011cc:	d12a      	bne.n	8001224 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80011ce:	2101      	movs	r1, #1
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f001 fb1f 	bl	8002814 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80011e4:	d11e      	bne.n	8001224 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011f4:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d012      	beq.n	8001224 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001202:	4a30      	ldr	r2, [pc, #192]	@ (80012c4 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001204:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fd01 	bl	8000c12 <HAL_DMA_Abort_IT>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800121a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001220:	4610      	mov	r0, r2
 8001222:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	222a      	movs	r2, #42	@ 0x2a
 8001228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2220      	movs	r2, #32
 8001230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001248:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	88fa      	ldrh	r2, [r7, #6]
 8001254:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800125a:	b29a      	uxth	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 800126a:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b08      	cmp	r3, #8
 8001278:	bf0c      	ite	eq
 800127a:	2301      	moveq	r3, #1
 800127c:	2300      	movne	r3, #0
 800127e:	b2db      	uxtb	r3, r3
 8001280:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	0c1b      	lsrs	r3, r3, #16
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d106      	bne.n	80012a4 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8001296:	7dfb      	ldrb	r3, [r7, #23]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2208      	movs	r2, #8
 80012a2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80012ac:	f248 0102 	movw	r1, #32770	@ 0x8002
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f001 fa2b 	bl	800270c <I2C_Enable_IRQ>

    return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
  }
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	0800266b 	.word	0x0800266b
 80012c8:	08001493 	.word	0x08001493

080012cc <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b20      	cmp	r3, #32
 80012de:	d10d      	bne.n	80012fc <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2228      	movs	r2, #40	@ 0x28
 80012e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <HAL_I2C_EnableListen_IT+0x3c>)
 80012ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80012ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f001 fa0a 	bl	800270c <I2C_Enable_IRQ>

    return HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	e000      	b.n	80012fe <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80012fc:	2302      	movs	r3, #2
  }
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	08001493 	.word	0x08001493

0800130c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001328:	2b00      	cmp	r3, #0
 800132a:	d005      	beq.n	8001338 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	68f9      	ldr	r1, [r7, #12]
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	4798      	blx	r3
  }
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d010      	beq.n	8001386 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	09db      	lsrs	r3, r3, #7
 8001368:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00a      	beq.n	8001386 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001374:	f043 0201 	orr.w	r2, r3, #1
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001384:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	0a9b      	lsrs	r3, r3, #10
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d010      	beq.n	80013b4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	09db      	lsrs	r3, r3, #7
 8001396:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00a      	beq.n	80013b4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	f043 0208 	orr.w	r2, r3, #8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	0a5b      	lsrs	r3, r3, #9
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d010      	beq.n	80013e2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	09db      	lsrs	r3, r3, #7
 80013c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00a      	beq.n	80013e2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d0:	f043 0202 	orr.w	r2, r3, #2
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 030b 	and.w	r3, r3, #11
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80013f2:	68f9      	ldr	r1, [r7, #12]
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fffd 	bl	80023f4 <I2C_ITError>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <I2C_Slave_ISR_IT+0x24>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e0ed      	b.n	8001692 <I2C_Slave_ISR_IT+0x200>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	095b      	lsrs	r3, r3, #5
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00a      	beq.n	80014e0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d004      	beq.n	80014e0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80014d6:	6939      	ldr	r1, [r7, #16]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 fdcb 	bl	8002074 <I2C_ITSlaveCplt>
 80014de:	e0d3      	b.n	8001688 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d04d      	beq.n	8001588 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d047      	beq.n	8001588 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d128      	bne.n	8001554 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b28      	cmp	r3, #40	@ 0x28
 800150c:	d108      	bne.n	8001520 <I2C_Slave_ISR_IT+0x8e>
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001514:	d104      	bne.n	8001520 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001516:	6939      	ldr	r1, [r7, #16]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 ff15 	bl	8002348 <I2C_ITListenCplt>
 800151e:	e032      	b.n	8001586 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b29      	cmp	r3, #41	@ 0x29
 800152a:	d10e      	bne.n	800154a <I2C_Slave_ISR_IT+0xb8>
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001532:	d00a      	beq.n	800154a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2210      	movs	r2, #16
 800153a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f001 f870 	bl	8002622 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 fc6e 	bl	8001e24 <I2C_ITSlaveSeqCplt>
 8001548:	e01d      	b.n	8001586 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2210      	movs	r2, #16
 8001550:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001552:	e096      	b.n	8001682 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2210      	movs	r2, #16
 800155a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001560:	f043 0204 	orr.w	r2, r3, #4
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <I2C_Slave_ISR_IT+0xe6>
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001574:	f040 8085 	bne.w	8001682 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157c:	4619      	mov	r1, r3
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 ff38 	bl	80023f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001584:	e07d      	b.n	8001682 <I2C_Slave_ISR_IT+0x1f0>
 8001586:	e07c      	b.n	8001682 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d030      	beq.n	80015f6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800159c:	2b00      	cmp	r3, #0
 800159e:	d02a      	beq.n	80015f6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d018      	beq.n	80015dc <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d14f      	bne.n	8001686 <I2C_Slave_ISR_IT+0x1f4>
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80015ec:	d04b      	beq.n	8001686 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f000 fc18 	bl	8001e24 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80015f4:	e047      	b.n	8001686 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00a      	beq.n	8001618 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800160e:	6939      	ldr	r1, [r7, #16]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 fb46 	bl	8001ca2 <I2C_ITAddrCplt>
 8001616:	e037      	b.n	8001688 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	d031      	beq.n	8001688 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800162c:	2b00      	cmp	r3, #0
 800162e:	d02b      	beq.n	8001688 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001634:	b29b      	uxth	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d018      	beq.n	800166c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	3b01      	subs	r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001662:	3b01      	subs	r3, #1
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	851a      	strh	r2, [r3, #40]	@ 0x28
 800166a:	e00d      	b.n	8001688 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001672:	d002      	beq.n	800167a <I2C_Slave_ISR_IT+0x1e8>
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d106      	bne.n	8001688 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 fbd2 	bl	8001e24 <I2C_ITSlaveSeqCplt>
 8001680:	e002      	b.n	8001688 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8001682:	bf00      	nop
 8001684:	e000      	b.n	8001688 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8001686:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b088      	sub	sp, #32
 800169e:	af02      	add	r7, sp, #8
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <I2C_Master_ISR_DMA+0x1a>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e0e1      	b.n	8001878 <I2C_Master_ISR_DMA+0x1de>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d011      	beq.n	80016f8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2210      	movs	r2, #16
 80016da:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e0:	f043 0204 	orr.w	r2, r3, #4
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80016e8:	2120      	movs	r1, #32
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f001 f80e 	bl	800270c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 ff96 	bl	8002622 <I2C_Flush_TXDR>
 80016f6:	e0ba      	b.n	800186e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	09db      	lsrs	r3, r3, #7
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d072      	beq.n	80017ea <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	099b      	lsrs	r3, r3, #6
 8001708:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800170c:	2b00      	cmp	r3, #0
 800170e:	d06c      	beq.n	80017ea <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800171e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001724:	b29b      	uxth	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d04e      	beq.n	80017c8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	b29b      	uxth	r3, r3
 8001732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001736:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800173c:	b29b      	uxth	r3, r3
 800173e:	2bff      	cmp	r3, #255	@ 0xff
 8001740:	d906      	bls.n	8001750 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	22ff      	movs	r2, #255	@ 0xff
 8001746:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8001748:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e010      	b.n	8001772 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001762:	d003      	beq.n	800176c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e002      	b.n	8001772 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800176c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001770:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001776:	b2da      	uxtb	r2, r3
 8001778:	8a79      	ldrh	r1, [r7, #18]
 800177a:	2300      	movs	r3, #0
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 ff91 	bl	80026a8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178a:	b29a      	uxth	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b22      	cmp	r3, #34	@ 0x22
 80017a2:	d108      	bne.n	80017b6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017b2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80017b4:	e05b      	b.n	800186e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80017c6:	e052      	b.n	800186e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80017d6:	d003      	beq.n	80017e0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 fae6 	bl	8001daa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80017de:	e046      	b.n	800186e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80017e0:	2140      	movs	r1, #64	@ 0x40
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fe06 	bl	80023f4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80017e8:	e041      	b.n	800186e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d029      	beq.n	800184a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d023      	beq.n	800184a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001806:	b29b      	uxth	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d119      	bne.n	8001840 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800181a:	d027      	beq.n	800186c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001824:	d108      	bne.n	8001838 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001834:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001836:	e019      	b.n	800186c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 fab6 	bl	8001daa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800183e:	e015      	b.n	800186c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001840:	2140      	movs	r1, #64	@ 0x40
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 fdd6 	bl	80023f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001848:	e010      	b.n	800186c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	095b      	lsrs	r3, r3, #5
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	095b      	lsrs	r3, r3, #5
 800185a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 fb3b 	bl	8001ee0 <I2C_ITMasterCplt>
 800186a:	e000      	b.n	800186e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800186c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af02      	add	r7, sp, #8
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800188c:	4b92      	ldr	r3, [pc, #584]	@ (8001ad8 <I2C_Mem_ISR_DMA+0x258>)
 800188e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <I2C_Mem_ISR_DMA+0x1e>
 800189a:	2302      	movs	r3, #2
 800189c:	e118      	b.n	8001ad0 <I2C_Mem_ISR_DMA+0x250>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d017      	beq.n	80018e2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d011      	beq.n	80018e2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2210      	movs	r2, #16
 80018c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f043 0204 	orr.w	r2, r3, #4
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80018d2:	2120      	movs	r1, #32
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 ff19 	bl	800270c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fea1 	bl	8002622 <I2C_Flush_TXDR>
 80018e0:	e0f1      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	085b      	lsrs	r3, r3, #1
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00f      	beq.n	800190e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001902:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f04f 32ff 	mov.w	r2, #4294967295
 800190a:	651a      	str	r2, [r3, #80]	@ 0x50
 800190c:	e0db      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	09db      	lsrs	r3, r3, #7
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d060      	beq.n	80019dc <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001922:	2b00      	cmp	r3, #0
 8001924:	d05a      	beq.n	80019dc <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001926:	2101      	movs	r1, #1
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 ff73 	bl	8002814 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800192e:	2110      	movs	r1, #16
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 feeb 	bl	800270c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800193a:	b29b      	uxth	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d048      	beq.n	80019d2 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001944:	b29b      	uxth	r3, r3
 8001946:	2bff      	cmp	r3, #255	@ 0xff
 8001948:	d910      	bls.n	800196c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	22ff      	movs	r2, #255	@ 0xff
 800194e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001954:	b299      	uxth	r1, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195a:	b2da      	uxtb	r2, r3
 800195c:	2300      	movs	r3, #0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 fe9f 	bl	80026a8 <I2C_TransferConfig>
 800196a:	e011      	b.n	8001990 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197a:	b299      	uxth	r1, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001980:	b2da      	uxtb	r2, r3
 8001982:	2300      	movs	r3, #0
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fe8c 	bl	80026a8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b22      	cmp	r3, #34	@ 0x22
 80019ac:	d108      	bne.n	80019c0 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80019be:	e082      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80019d0:	e079      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80019d2:	2140      	movs	r1, #64	@ 0x40
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fd0d 	bl	80023f4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80019da:	e074      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d05e      	beq.n	8001aa6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d058      	beq.n	8001aa6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80019f4:	2101      	movs	r1, #1
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 ff0c 	bl	8002814 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80019fc:	2110      	movs	r1, #16
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fe84 	bl	800270c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b22      	cmp	r3, #34	@ 0x22
 8001a0e:	d101      	bne.n	8001a14 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8001a10:	4b32      	ldr	r3, [pc, #200]	@ (8001adc <I2C_Mem_ISR_DMA+0x25c>)
 8001a12:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	2bff      	cmp	r3, #255	@ 0xff
 8001a1c:	d910      	bls.n	8001a40 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	22ff      	movs	r2, #255	@ 0xff
 8001a22:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a28:	b299      	uxth	r1, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 fe35 	bl	80026a8 <I2C_TransferConfig>
 8001a3e:	e011      	b.n	8001a64 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	b299      	uxth	r1, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fe22 	bl	80026a8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b22      	cmp	r3, #34	@ 0x22
 8001a80:	d108      	bne.n	8001a94 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a90:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a92:	e018      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001aa2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001aa4:	e00f      	b.n	8001ac6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	095b      	lsrs	r3, r3, #5
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	095b      	lsrs	r3, r3, #5
 8001ab6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fa0d 	bl	8001ee0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	80002000 	.word	0x80002000
 8001adc:	80002400 	.word	0x80002400

08001ae0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <I2C_Slave_ISR_DMA+0x24>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0ca      	b.n	8001c9a <I2C_Slave_ISR_DMA+0x1ba>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00a      	beq.n	8001b2e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 faa4 	bl	8002074 <I2C_ITSlaveCplt>
 8001b2c:	e0b0      	b.n	8001c90 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 809a 	beq.w	8001c70 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8093 	beq.w	8001c70 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	0b9b      	lsrs	r3, r3, #14
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0bdb      	lsrs	r3, r3, #15
 8001b5a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d07f      	beq.n	8001c62 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00d      	beq.n	8001b86 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	0bdb      	lsrs	r3, r3, #15
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0b9b      	lsrs	r3, r3, #14
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d128      	bne.n	8001c02 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b28      	cmp	r3, #40	@ 0x28
 8001bba:	d108      	bne.n	8001bce <I2C_Slave_ISR_DMA+0xee>
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bc2:	d104      	bne.n	8001bce <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fbbe 	bl	8002348 <I2C_ITListenCplt>
 8001bcc:	e048      	b.n	8001c60 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b29      	cmp	r3, #41	@ 0x29
 8001bd8:	d10e      	bne.n	8001bf8 <I2C_Slave_ISR_DMA+0x118>
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001be0:	d00a      	beq.n	8001bf8 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2210      	movs	r2, #16
 8001be8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fd19 	bl	8002622 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 f917 	bl	8001e24 <I2C_ITSlaveSeqCplt>
 8001bf6:	e033      	b.n	8001c60 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001c00:	e034      	b.n	8001c6c <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2210      	movs	r2, #16
 8001c08:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	f043 0204 	orr.w	r2, r3, #4
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c1c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <I2C_Slave_ISR_DMA+0x14c>
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c2a:	d11f      	bne.n	8001c6c <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b21      	cmp	r3, #33	@ 0x21
 8001c30:	d002      	beq.n	8001c38 <I2C_Slave_ISR_DMA+0x158>
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	2b29      	cmp	r3, #41	@ 0x29
 8001c36:	d103      	bne.n	8001c40 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2221      	movs	r2, #33	@ 0x21
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c3e:	e008      	b.n	8001c52 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b22      	cmp	r3, #34	@ 0x22
 8001c44:	d002      	beq.n	8001c4c <I2C_Slave_ISR_DMA+0x16c>
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c4a:	d102      	bne.n	8001c52 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2222      	movs	r2, #34	@ 0x22
 8001c50:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	4619      	mov	r1, r3
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fbcb 	bl	80023f4 <I2C_ITError>
      if (treatdmanack == 1U)
 8001c5e:	e005      	b.n	8001c6c <I2C_Slave_ISR_DMA+0x18c>
 8001c60:	e004      	b.n	8001c6c <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2210      	movs	r2, #16
 8001c68:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c6a:	e011      	b.n	8001c90 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8001c6c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c6e:	e00f      	b.n	8001c90 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	08db      	lsrs	r3, r3, #3
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	08db      	lsrs	r3, r3, #3
 8001c80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 f809 	bl	8001ca2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001cb8:	2b28      	cmp	r3, #40	@ 0x28
 8001cba:	d16a      	bne.n	8001d92 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	0c1b      	lsrs	r3, r3, #16
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	0c1b      	lsrs	r3, r3, #16
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001cda:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001cf6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d138      	bne.n	8001d72 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001d00:	897b      	ldrh	r3, [r7, #10]
 8001d02:	09db      	lsrs	r3, r3, #7
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	89bb      	ldrh	r3, [r7, #12]
 8001d08:	4053      	eors	r3, r2
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f003 0306 	and.w	r3, r3, #6
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d11c      	bne.n	8001d4e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001d14:	897b      	ldrh	r3, [r7, #10]
 8001d16:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d13b      	bne.n	8001da2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2208      	movs	r2, #8
 8001d36:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d40:	89ba      	ldrh	r2, [r7, #12]
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7fe faa8 	bl	800029c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001d4c:	e029      	b.n	8001da2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001d4e:	893b      	ldrh	r3, [r7, #8]
 8001d50:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fd5c 	bl	8002814 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d64:	89ba      	ldrh	r2, [r7, #12]
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fa96 	bl	800029c <HAL_I2C_AddrCallback>
}
 8001d70:	e017      	b.n	8001da2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fd4c 	bl	8002814 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d84:	89ba      	ldrh	r2, [r7, #12]
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fa86 	bl	800029c <HAL_I2C_AddrCallback>
}
 8001d90:	e007      	b.n	8001da2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2208      	movs	r2, #8
 8001d98:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b21      	cmp	r3, #33	@ 0x21
 8001dc4:	d115      	bne.n	8001df2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2211      	movs	r2, #17
 8001dd2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001dda:	2101      	movs	r1, #1
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fd19 	bl	8002814 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fb09 	bl	8001402 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001df0:	e014      	b.n	8001e1c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2212      	movs	r2, #18
 8001dfe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001e06:	2102      	movs	r1, #2
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fd03 	bl	8002814 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff fafd 	bl	8001416 <HAL_I2C_MasterRxCpltCallback>
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	0b9b      	lsrs	r3, r3, #14
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e00d      	b.n	8001e76 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	0bdb      	lsrs	r3, r3, #15
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e74:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b29      	cmp	r3, #41	@ 0x29
 8001e80:	d112      	bne.n	8001ea8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2228      	movs	r2, #40	@ 0x28
 8001e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2221      	movs	r2, #33	@ 0x21
 8001e8e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e90:	2101      	movs	r1, #1
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fcbe 	bl	8002814 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff fac2 	bl	800142a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001ea6:	e017      	b.n	8001ed8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001eb2:	d111      	bne.n	8001ed8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2228      	movs	r2, #40	@ 0x28
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2222      	movs	r2, #34	@ 0x22
 8001ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fca5 	bl	8002814 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe fa06 	bl	80002e4 <HAL_I2C_SlaveRxCpltCallback>
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b21      	cmp	r3, #33	@ 0x21
 8001f00:	d107      	bne.n	8001f12 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f02:	2101      	movs	r1, #1
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fc85 	bl	8002814 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2211      	movs	r2, #17
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f10:	e00c      	b.n	8001f2c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b22      	cmp	r3, #34	@ 0x22
 8001f1c:	d106      	bne.n	8001f2c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f1e:	2102      	movs	r1, #2
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fc77 	bl	8002814 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2212      	movs	r2, #18
 8001f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6859      	ldr	r1, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b4d      	ldr	r3, [pc, #308]	@ (800206c <I2C_ITMasterCplt+0x18c>)
 8001f38:	400b      	ands	r3, r1
 8001f3a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4a      	ldr	r2, [pc, #296]	@ (8002070 <I2C_ITMasterCplt+0x190>)
 8001f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2210      	movs	r2, #16
 8001f5a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f60:	f043 0204 	orr.w	r2, r3, #4
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b60      	cmp	r3, #96	@ 0x60
 8001f72:	d10b      	bne.n	8001f8c <I2C_ITMasterCplt+0xac>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fb48 	bl	8002622 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b60      	cmp	r3, #96	@ 0x60
 8001fa2:	d002      	beq.n	8001faa <I2C_ITMasterCplt+0xca>
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fa1f 	bl	80023f4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001fb6:	e054      	b.n	8002062 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b21      	cmp	r3, #33	@ 0x21
 8001fc2:	d124      	bne.n	800200e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b40      	cmp	r3, #64	@ 0x40
 8001fdc:	d10b      	bne.n	8001ff6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fa25 	bl	800143e <HAL_I2C_MemTxCpltCallback>
}
 8001ff4:	e035      	b.n	8002062 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff f9fb 	bl	8001402 <HAL_I2C_MasterTxCpltCallback>
}
 800200c:	e029      	b.n	8002062 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b22      	cmp	r3, #34	@ 0x22
 8002018:	d123      	bne.n	8002062 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b40      	cmp	r3, #64	@ 0x40
 8002032:	d10b      	bne.n	800204c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fa04 	bl	8001452 <HAL_I2C_MemRxCpltCallback>
}
 800204a:	e00a      	b.n	8002062 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff f9da 	bl	8001416 <HAL_I2C_MasterRxCpltCallback>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	fe00e800 	.word	0xfe00e800
 8002070:	ffff0000 	.word	0xffff0000

08002074 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002096:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2220      	movs	r2, #32
 800209e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	2b21      	cmp	r3, #33	@ 0x21
 80020a4:	d002      	beq.n	80020ac <I2C_ITSlaveCplt+0x38>
 80020a6:	7afb      	ldrb	r3, [r7, #11]
 80020a8:	2b29      	cmp	r3, #41	@ 0x29
 80020aa:	d108      	bne.n	80020be <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80020ac:	f248 0101 	movw	r1, #32769	@ 0x8001
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fbaf 	bl	8002814 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2221      	movs	r2, #33	@ 0x21
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80020bc:	e019      	b.n	80020f2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80020be:	7afb      	ldrb	r3, [r7, #11]
 80020c0:	2b22      	cmp	r3, #34	@ 0x22
 80020c2:	d002      	beq.n	80020ca <I2C_ITSlaveCplt+0x56>
 80020c4:	7afb      	ldrb	r3, [r7, #11]
 80020c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80020c8:	d108      	bne.n	80020dc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80020ca:	f248 0102 	movw	r1, #32770	@ 0x8002
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fba0 	bl	8002814 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2222      	movs	r2, #34	@ 0x22
 80020d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80020da:	e00a      	b.n	80020f2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80020dc:	7afb      	ldrb	r3, [r7, #11]
 80020de:	2b28      	cmp	r3, #40	@ 0x28
 80020e0:	d107      	bne.n	80020f2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80020e2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fb94 	bl	8002814 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002100:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b8c      	ldr	r3, [pc, #560]	@ (8002340 <I2C_ITSlaveCplt+0x2cc>)
 800210e:	400b      	ands	r3, r1
 8002110:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fa85 	bl	8002622 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	0b9b      	lsrs	r3, r3, #14
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002132:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	b29a      	uxth	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800214a:	e018      	b.n	800217e <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	0bdb      	lsrs	r3, r3, #15
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d012      	beq.n	800217e <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002166:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	b29a      	uxth	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d020      	beq.n	80021cc <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f043 0204 	orr.w	r2, r3, #4
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d04a      	beq.n	8002284 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d044      	beq.n	8002284 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d128      	bne.n	8002256 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b28      	cmp	r3, #40	@ 0x28
 800220e:	d108      	bne.n	8002222 <I2C_ITSlaveCplt+0x1ae>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002216:	d104      	bne.n	8002222 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002218:	6979      	ldr	r1, [r7, #20]
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f894 	bl	8002348 <I2C_ITListenCplt>
 8002220:	e030      	b.n	8002284 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b29      	cmp	r3, #41	@ 0x29
 800222c:	d10e      	bne.n	800224c <I2C_ITSlaveCplt+0x1d8>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002234:	d00a      	beq.n	800224c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2210      	movs	r2, #16
 800223c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f9ef 	bl	8002622 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff fded 	bl	8001e24 <I2C_ITSlaveSeqCplt>
 800224a:	e01b      	b.n	8002284 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2210      	movs	r2, #16
 8002252:	61da      	str	r2, [r3, #28]
 8002254:	e016      	b.n	8002284 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2210      	movs	r2, #16
 800225c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	f043 0204 	orr.w	r2, r3, #4
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <I2C_ITSlaveCplt+0x204>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002276:	d105      	bne.n	8002284 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227c:	4619      	mov	r1, r3
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f8b8 	bl	80023f4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	2b00      	cmp	r3, #0
 8002298:	d010      	beq.n	80022bc <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f8a7 	bl	80023f4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b28      	cmp	r3, #40	@ 0x28
 80022b0:	d141      	bne.n	8002336 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80022b2:	6979      	ldr	r1, [r7, #20]
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f847 	bl	8002348 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80022ba:	e03c      	b.n	8002336 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022c4:	d014      	beq.n	80022f0 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fdac 	bl	8001e24 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002344 <I2C_ITSlaveCplt+0x2d0>)
 80022d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7fd ffcb 	bl	8000284 <HAL_I2C_ListenCpltCallback>
}
 80022ee:	e022      	b.n	8002336 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b22      	cmp	r3, #34	@ 0x22
 80022fa:	d10e      	bne.n	800231a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fd ffe6 	bl	80002e4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002318:	e00d      	b.n	8002336 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff f87a 	bl	800142a <HAL_I2C_SlaveTxCpltCallback>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	fe00e800 	.word	0xfe00e800
 8002344:	ffff0000 	.word	0xffff0000

08002348 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a26      	ldr	r2, [pc, #152]	@ (80023f0 <I2C_ITListenCplt+0xa8>)
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d022      	beq.n	80023c6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d012      	beq.n	80023c6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f043 0204 	orr.w	r2, r3, #4
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023c6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa22 	bl	8002814 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2210      	movs	r2, #16
 80023d6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7fd ff4f 	bl	8000284 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	ffff0000 	.word	0xffff0000

080023f4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002404:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a6d      	ldr	r2, [pc, #436]	@ (80025c8 <I2C_ITError+0x1d4>)
 8002412:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	2b28      	cmp	r3, #40	@ 0x28
 800242a:	d005      	beq.n	8002438 <I2C_ITError+0x44>
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2b29      	cmp	r3, #41	@ 0x29
 8002430:	d002      	beq.n	8002438 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b2a      	cmp	r3, #42	@ 0x2a
 8002436:	d10b      	bne.n	8002450 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002438:	2103      	movs	r1, #3
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f9ea 	bl	8002814 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2228      	movs	r2, #40	@ 0x28
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a60      	ldr	r2, [pc, #384]	@ (80025cc <I2C_ITError+0x1d8>)
 800244c:	635a      	str	r2, [r3, #52]	@ 0x34
 800244e:	e030      	b.n	80024b2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002450:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f9dd 	bl	8002814 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8e1 	bl	8002622 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b60      	cmp	r3, #96	@ 0x60
 800246a:	d01f      	beq.n	80024ac <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b20      	cmp	r3, #32
 8002480:	d114      	bne.n	80024ac <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b10      	cmp	r3, #16
 800248e:	d109      	bne.n	80024a4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2210      	movs	r2, #16
 8002496:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249c:	f043 0204 	orr.w	r2, r3, #4
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2220      	movs	r2, #32
 80024aa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d039      	beq.n	8002534 <I2C_ITError+0x140>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b11      	cmp	r3, #17
 80024c4:	d002      	beq.n	80024cc <I2C_ITError+0xd8>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b21      	cmp	r3, #33	@ 0x21
 80024ca:	d133      	bne.n	8002534 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024da:	d107      	bne.n	80024ec <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fbf5 	bl	8000ce0 <HAL_DMA_GetState>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d017      	beq.n	800252c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002500:	4a33      	ldr	r2, [pc, #204]	@ (80025d0 <I2C_ITError+0x1dc>)
 8002502:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fb7e 	bl	8000c12 <HAL_DMA_Abort_IT>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d04d      	beq.n	80025b8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002526:	4610      	mov	r0, r2
 8002528:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800252a:	e045      	b.n	80025b8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f851 	bl	80025d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002532:	e041      	b.n	80025b8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d039      	beq.n	80025b0 <I2C_ITError+0x1bc>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b12      	cmp	r3, #18
 8002540:	d002      	beq.n	8002548 <I2C_ITError+0x154>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b22      	cmp	r3, #34	@ 0x22
 8002546:	d133      	bne.n	80025b0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002556:	d107      	bne.n	8002568 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002566:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fbb7 	bl	8000ce0 <HAL_DMA_GetState>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d017      	beq.n	80025a8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257c:	4a14      	ldr	r2, [pc, #80]	@ (80025d0 <I2C_ITError+0x1dc>)
 800257e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fb40 	bl	8000c12 <HAL_DMA_Abort_IT>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d011      	beq.n	80025bc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025a2:	4610      	mov	r0, r2
 80025a4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025a6:	e009      	b.n	80025bc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f813 	bl	80025d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025ae:	e005      	b.n	80025bc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f80f 	bl	80025d4 <I2C_TreatErrorCallback>
  }
}
 80025b6:	e002      	b.n	80025be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025b8:	bf00      	nop
 80025ba:	e000      	b.n	80025be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025bc:	bf00      	nop
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	ffff0000 	.word	0xffff0000
 80025cc:	08001493 	.word	0x08001493
 80025d0:	0800266b 	.word	0x0800266b

080025d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b60      	cmp	r3, #96	@ 0x60
 80025e6:	d10e      	bne.n	8002606 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe ff31 	bl	8001466 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002604:	e009      	b.n	800261a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fd fe9d 	bl	8000354 <HAL_I2C_ErrorCallback>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b02      	cmp	r3, #2
 8002636:	d103      	bne.n	8002640 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2200      	movs	r2, #0
 800263e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d007      	beq.n	800265e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	619a      	str	r2, [r3, #24]
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002676:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002684:	2200      	movs	r2, #0
 8002686:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002694:	2200      	movs	r2, #0
 8002696:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff ff9b 	bl	80025d4 <I2C_TreatErrorCallback>
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	817b      	strh	r3, [r7, #10]
 80026b6:	4613      	mov	r3, r2
 80026b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ba:	897b      	ldrh	r3, [r7, #10]
 80026bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026c0:	7a7b      	ldrb	r3, [r7, #9]
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	0d5b      	lsrs	r3, r3, #21
 80026e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80026e6:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <I2C_TransferConfig+0x60>)
 80026e8:	430b      	orrs	r3, r1
 80026ea:	43db      	mvns	r3, r3
 80026ec:	ea02 0103 	and.w	r1, r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	03ff63ff 	.word	0x03ff63ff

0800270c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002720:	4a39      	ldr	r2, [pc, #228]	@ (8002808 <I2C_Enable_IRQ+0xfc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d032      	beq.n	800278c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800272a:	4a38      	ldr	r2, [pc, #224]	@ (800280c <I2C_Enable_IRQ+0x100>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d02d      	beq.n	800278c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002734:	4a36      	ldr	r2, [pc, #216]	@ (8002810 <I2C_Enable_IRQ+0x104>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d028      	beq.n	800278c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800273a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800273e:	2b00      	cmp	r3, #0
 8002740:	da03      	bge.n	800274a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002748:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800275a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800276c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	2b10      	cmp	r3, #16
 8002772:	d103      	bne.n	800277c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800277a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	2b20      	cmp	r3, #32
 8002780:	d133      	bne.n	80027ea <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f043 0320 	orr.w	r3, r3, #32
 8002788:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800278a:	e02e      	b.n	80027ea <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800278c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002790:	2b00      	cmp	r3, #0
 8002792:	da03      	bge.n	800279c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800279a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80027ac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027ae:	887b      	ldrh	r3, [r7, #2]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80027be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d103      	bne.n	80027ce <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80027cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d103      	bne.n	80027dc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80027da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	2b40      	cmp	r3, #64	@ 0x40
 80027e0:	d103      	bne.n	80027ea <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027e8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	0800169b 	.word	0x0800169b
 800280c:	08001ae1 	.word	0x08001ae1
 8002810:	08001881 	.word	0x08001881

08002814 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00f      	beq.n	800284e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002834:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002842:	2b28      	cmp	r3, #40	@ 0x28
 8002844:	d003      	beq.n	800284e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800284c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800284e:	887b      	ldrh	r3, [r7, #2]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00f      	beq.n	8002878 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800285e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800286c:	2b28      	cmp	r3, #40	@ 0x28
 800286e:	d003      	beq.n	8002878 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002876:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002878:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800287c:	2b00      	cmp	r3, #0
 800287e:	da03      	bge.n	8002888 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002886:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002888:	887b      	ldrh	r3, [r7, #2]
 800288a:	2b10      	cmp	r3, #16
 800288c:	d103      	bne.n	8002896 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002894:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002896:	887b      	ldrh	r3, [r7, #2]
 8002898:	2b20      	cmp	r3, #32
 800289a:	d103      	bne.n	80028a4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f043 0320 	orr.w	r3, r3, #32
 80028a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80028a4:	887b      	ldrh	r3, [r7, #2]
 80028a6:	2b40      	cmp	r3, #64	@ 0x40
 80028a8:	d103      	bne.n	80028b2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6819      	ldr	r1, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	43da      	mvns	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	400a      	ands	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d138      	bne.n	8002958 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e032      	b.n	800295a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	@ 0x24
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002922:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b20      	cmp	r3, #32
 800297a:	d139      	bne.n	80029f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002986:	2302      	movs	r3, #2
 8002988:	e033      	b.n	80029f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2224      	movs	r2, #36	@ 0x24
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0c0      	b.n	8002b92 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d106      	bne.n	8002a2a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f006 fe93 	bl	8009750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fa13 	bl	8005e62 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e03e      	b.n	8002ac0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	3311      	adds	r3, #17
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	3310      	adds	r3, #16
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	3313      	adds	r3, #19
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3320      	adds	r3, #32
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3324      	adds	r3, #36	@ 0x24
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	3301      	adds	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	791b      	ldrb	r3, [r3, #4]
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d3bb      	bcc.n	8002a42 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e044      	b.n	8002b5a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	3301      	adds	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	791b      	ldrb	r3, [r3, #4]
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3b5      	bcc.n	8002ad0 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b70:	f003 f992 	bl	8005e98 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7a9b      	ldrb	r3, [r3, #10]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d102      	bne.n	8002b90 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f001 fc0e 	bl	80043ac <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_PCD_Start+0x16>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e012      	b.n	8002bd6 <HAL_PCD_Start+0x3c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f003 f939 	bl	8005e34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f004 ff16 	bl	80079f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 ff1b 	bl	8007a26 <USB_ReadInterrupts>
 8002bf0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fb06 	bl	800320e <PCD_EP_ISR_Handler>

    return;
 8002c02:	e110      	b.n	8002e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d013      	beq.n	8002c36 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c20:	b292      	uxth	r2, r2
 8002c22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f006 fe23 	bl	8009872 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f8fc 	bl	8002e2c <HAL_PCD_SetAddress>

    return;
 8002c34:	e0f7      	b.n	8002e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00c      	beq.n	8002c5a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c52:	b292      	uxth	r2, r2
 8002c54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c58:	e0e5      	b.n	8002e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00c      	beq.n	8002c7e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c76:	b292      	uxth	r2, r2
 8002c78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c7c:	e0d3      	b.n	8002e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d034      	beq.n	8002cf2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0208 	bic.w	r2, r2, #8
 8002cb2:	b292      	uxth	r2, r2
 8002cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f006 ffc3 	bl	8009c58 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f006 fe06 	bl	80098e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cea:	b292      	uxth	r2, r2
 8002cec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002cf0:	e099      	b.n	8002e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d027      	beq.n	8002d4c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0208 	orr.w	r2, r2, #8
 8002d0e:	b292      	uxth	r2, r2
 8002d10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d26:	b292      	uxth	r2, r2
 8002d28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0204 	orr.w	r2, r2, #4
 8002d3e:	b292      	uxth	r2, r2
 8002d40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f006 fdb3 	bl	80098b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002d4a:	e06c      	b.n	8002e26 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d040      	beq.n	8002dd8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d68:	b292      	uxth	r2, r2
 8002d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d12b      	bne.n	8002dd0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0204 	orr.w	r2, r2, #4
 8002d8a:	b292      	uxth	r2, r2
 8002d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0208 	orr.w	r2, r2, #8
 8002da2:	b292      	uxth	r2, r2
 8002da4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f006 ff45 	bl	8009c58 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002dce:	e02a      	b.n	8002e26 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f006 fd6d 	bl	80098b0 <HAL_PCD_SuspendCallback>
    return;
 8002dd6:	e026      	b.n	8002e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00f      	beq.n	8002e02 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002df4:	b292      	uxth	r2, r2
 8002df6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f006 fd2b 	bl	8009856 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e00:	e011      	b.n	8002e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00c      	beq.n	8002e26 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e24:	bf00      	nop
  }
}
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_PCD_SetAddress+0x1a>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e012      	b.n	8002e6c <HAL_PCD_SetAddress+0x40>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f004 fdb7 	bl	80079d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	461a      	mov	r2, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	70fb      	strb	r3, [r7, #3]
 8002e86:	460b      	mov	r3, r1
 8002e88:	803b      	strh	r3, [r7, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	da0e      	bge.n	8002eb8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	f003 0207 	and.w	r2, r3, #7
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	3310      	adds	r3, #16
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	705a      	strb	r2, [r3, #1]
 8002eb6:	e00e      	b.n	8002ed6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 0207 	and.w	r2, r3, #7
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002ee2:	883b      	ldrh	r3, [r7, #0]
 8002ee4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	78ba      	ldrb	r2, [r7, #2]
 8002ef0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ef2:	78bb      	ldrb	r3, [r7, #2]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d102      	bne.n	8002efe <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_PCD_EP_Open+0x98>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e00e      	b.n	8002f2a <HAL_PCD_EP_Open+0xb6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68f9      	ldr	r1, [r7, #12]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 ffda 	bl	8005ed4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002f28:	7afb      	ldrb	r3, [r7, #11]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da0e      	bge.n	8002f64 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	f003 0207 	and.w	r2, r3, #7
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	3310      	adds	r3, #16
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	705a      	strb	r2, [r3, #1]
 8002f62:	e00e      	b.n	8002f82 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	f003 0207 	and.w	r2, r3, #7
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_PCD_EP_Close+0x6a>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e00e      	b.n	8002fba <HAL_PCD_EP_Close+0x88>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68f9      	ldr	r1, [r7, #12]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 fc7a 	bl	80068a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b086      	sub	sp, #24
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd2:	7afb      	ldrb	r3, [r7, #11]
 8002fd4:	f003 0207 	and.w	r2, r3, #7
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2200      	movs	r2, #0
 8003000:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003002:	7afb      	ldrb	r3, [r7, #11]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	b2da      	uxtb	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6979      	ldr	r1, [r7, #20]
 8003014:	4618      	mov	r0, r3
 8003016:	f003 fe32 	bl	8006c7e <USB_EPStartXfer>

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f003 0207 	and.w	r2, r3, #7
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	440b      	add	r3, r1
 8003042:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	460b      	mov	r3, r1
 8003062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003064:	7afb      	ldrb	r3, [r7, #11]
 8003066:	f003 0207 	and.w	r2, r3, #7
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	3310      	adds	r3, #16
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2201      	movs	r2, #1
 800309e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a0:	7afb      	ldrb	r3, [r7, #11]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6979      	ldr	r1, [r7, #20]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fde3 	bl	8006c7e <USB_EPStartXfer>

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	7912      	ldrb	r2, [r2, #4]
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e03e      	b.n	800315e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	da0e      	bge.n	8003106 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 0207 	and.w	r2, r3, #7
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	3310      	adds	r3, #16
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	705a      	strb	r2, [r3, #1]
 8003104:	e00c      	b.n	8003120 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_PCD_EP_SetStall+0x7e>
 800313c:	2302      	movs	r3, #2
 800313e:	e00e      	b.n	800315e <HAL_PCD_EP_SetStall+0x9c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68f9      	ldr	r1, [r7, #12]
 800314e:	4618      	mov	r0, r3
 8003150:	f004 fb44 	bl	80077dc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	7912      	ldrb	r2, [r2, #4]
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e040      	b.n	8003206 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003188:	2b00      	cmp	r3, #0
 800318a:	da0e      	bge.n	80031aa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	f003 0207 	and.w	r2, r3, #7
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	3310      	adds	r3, #16
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	705a      	strb	r2, [r3, #1]
 80031a8:	e00e      	b.n	80031c8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	f003 0207 	and.w	r2, r3, #7
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_PCD_EP_ClrStall+0x82>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e00e      	b.n	8003206 <HAL_PCD_EP_ClrStall+0xa0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68f9      	ldr	r1, [r7, #12]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f004 fb41 	bl	800787e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b092      	sub	sp, #72	@ 0x48
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003216:	e333      	b.n	8003880 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003220:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003222:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800322e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 8108 	bne.w	8003448 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003238:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d14c      	bne.n	80032dc <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800324e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003252:	813b      	strh	r3, [r7, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	893b      	ldrh	r3, [r7, #8]
 800325a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800325e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003262:	b29b      	uxth	r3, r3
 8003264:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3310      	adds	r3, #16
 800326a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003274:	b29b      	uxth	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4413      	add	r3, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	4413      	add	r3, r2
 8003286:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003292:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	441a      	add	r2, r3
 800329e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80032a2:	2100      	movs	r1, #0
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f006 fabc 	bl	8009822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7b1b      	ldrb	r3, [r3, #12]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 82e5 	beq.w	8003880 <PCD_EP_ISR_Handler+0x672>
 80032b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 82e0 	bne.w	8003880 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	7b1b      	ldrb	r3, [r3, #12]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	731a      	strb	r2, [r3, #12]
 80032da:	e2d1      	b.n	8003880 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032e2:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80032ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80032ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d032      	beq.n	800335c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	4413      	add	r3, r2
 8003310:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800331a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800331c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800332a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800332c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800332e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003330:	b29b      	uxth	r3, r3
 8003332:	f004 fbcb 	bl	8007acc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29a      	uxth	r2, r3
 800333e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003342:	4013      	ands	r3, r2
 8003344:	817b      	strh	r3, [r7, #10]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	897a      	ldrh	r2, [r7, #10]
 800334c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003350:	b292      	uxth	r2, r2
 8003352:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f006 fa37 	bl	80097c8 <HAL_PCD_SetupStageCallback>
 800335a:	e291      	b.n	8003880 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800335c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003360:	2b00      	cmp	r3, #0
 8003362:	f280 828d 	bge.w	8003880 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29a      	uxth	r2, r3
 800336e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003372:	4013      	ands	r3, r2
 8003374:	81fb      	strh	r3, [r7, #14]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	89fa      	ldrh	r2, [r7, #14]
 800337c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003380:	b292      	uxth	r2, r2
 8003382:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800338c:	b29b      	uxth	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4413      	add	r3, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	4413      	add	r3, r2
 800339e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80033ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d019      	beq.n	80033e8 <PCD_EP_ISR_Handler+0x1da>
 80033b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d015      	beq.n	80033e8 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c2:	6959      	ldr	r1, [r3, #20]
 80033c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80033c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f004 fb7d 	bl	8007acc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80033d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	441a      	add	r2, r3
 80033dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80033e0:	2100      	movs	r1, #0
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f006 fa02 	bl	80097ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80033f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80033f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 8242 	bne.w	8003880 <PCD_EP_ISR_Handler+0x672>
 80033fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80033fe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003402:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003406:	f000 823b 	beq.w	8003880 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800341a:	81bb      	strh	r3, [r7, #12]
 800341c:	89bb      	ldrh	r3, [r7, #12]
 800341e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003422:	81bb      	strh	r3, [r7, #12]
 8003424:	89bb      	ldrh	r3, [r7, #12]
 8003426:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800342a:	81bb      	strh	r3, [r7, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	89bb      	ldrh	r3, [r7, #12]
 8003432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800343a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800343e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003442:	b29b      	uxth	r3, r3
 8003444:	8013      	strh	r3, [r2, #0]
 8003446:	e21b      	b.n	8003880 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800345a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800345e:	2b00      	cmp	r3, #0
 8003460:	f280 80f1 	bge.w	8003646 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	b29a      	uxth	r2, r3
 8003476:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800347a:	4013      	ands	r3, r2
 800347c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800348e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003492:	b292      	uxth	r2, r2
 8003494:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003496:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80034ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ae:	7b1b      	ldrb	r3, [r3, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d123      	bne.n	80034fc <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	4413      	add	r3, r2
 80034ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034d8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80034dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 808b 	beq.w	80035fc <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ec:	6959      	ldr	r1, [r3, #20]
 80034ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f0:	88da      	ldrh	r2, [r3, #6]
 80034f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034f6:	f004 fae9 	bl	8007acc <USB_ReadPMA>
 80034fa:	e07f      	b.n	80035fc <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80034fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034fe:	78db      	ldrb	r3, [r3, #3]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d109      	bne.n	8003518 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003504:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003506:	461a      	mov	r2, r3
 8003508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f9c6 	bl	800389c <HAL_PCD_EP_DB_Receive>
 8003510:	4603      	mov	r3, r0
 8003512:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003516:	e071      	b.n	80035fc <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800352e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003532:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	441a      	add	r2, r3
 8003542:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800354c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003550:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003554:	b29b      	uxth	r3, r3
 8003556:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d022      	beq.n	80035b8 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800357a:	b29b      	uxth	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	4413      	add	r3, r2
 800358c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003596:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800359a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d02c      	beq.n	80035fc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a8:	6959      	ldr	r1, [r3, #20]
 80035aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ac:	891a      	ldrh	r2, [r3, #8]
 80035ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80035b2:	f004 fa8b 	bl	8007acc <USB_ReadPMA>
 80035b6:	e021      	b.n	80035fc <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035dc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80035e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d009      	beq.n	80035fc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ee:	6959      	ldr	r1, [r3, #20]
 80035f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f2:	895a      	ldrh	r2, [r3, #10]
 80035f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80035f8:	f004 fa68 	bl	8007acc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80035fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003604:	441a      	add	r2, r3
 8003606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003608:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800360a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003612:	441a      	add	r2, r3
 8003614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003616:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <PCD_EP_ISR_Handler+0x41e>
 8003620:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	429a      	cmp	r2, r3
 800362a:	d206      	bcs.n	800363a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800362c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f006 f8da 	bl	80097ec <HAL_PCD_DataOutStageCallback>
 8003638:	e005      	b.n	8003646 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003640:	4618      	mov	r0, r3
 8003642:	f003 fb1c 	bl	8006c7e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003646:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8117 	beq.w	8003880 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003652:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	3310      	adds	r3, #16
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800367c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003680:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	441a      	add	r2, r3
 8003690:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369a:	b29b      	uxth	r3, r3
 800369c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800369e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a0:	78db      	ldrb	r3, [r3, #3]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	f040 80a1 	bne.w	80037ea <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80036a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036aa:	2200      	movs	r2, #0
 80036ac:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80036ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b0:	7b1b      	ldrb	r3, [r3, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8092 	beq.w	80037dc <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d046      	beq.n	8003750 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c4:	785b      	ldrb	r3, [r3, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d126      	bne.n	8003718 <PCD_EP_ISR_Handler+0x50a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036d8:	b29b      	uxth	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	4413      	add	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	00da      	lsls	r2, r3, #3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	4413      	add	r3, r2
 80036ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800370c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003710:	b29a      	uxth	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	e061      	b.n	80037dc <PCD_EP_ISR_Handler+0x5ce>
 8003718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371a:	785b      	ldrb	r3, [r3, #1]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d15d      	bne.n	80037dc <PCD_EP_ISR_Handler+0x5ce>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800372e:	b29b      	uxth	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	4413      	add	r3, r2
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	00da      	lsls	r2, r3, #3
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2200      	movs	r2, #0
 800374c:	801a      	strh	r2, [r3, #0]
 800374e:	e045      	b.n	80037dc <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d126      	bne.n	80037ac <PCD_EP_ISR_Handler+0x59e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	4413      	add	r3, r2
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
 8003776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	00da      	lsls	r2, r3, #3
 800377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377e:	4413      	add	r3, r2
 8003780:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003784:	623b      	str	r3, [r7, #32]
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003790:	b29a      	uxth	r2, r3
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	801a      	strh	r2, [r3, #0]
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	801a      	strh	r2, [r3, #0]
 80037aa:	e017      	b.n	80037dc <PCD_EP_ISR_Handler+0x5ce>
 80037ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ae:	785b      	ldrb	r3, [r3, #1]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d113      	bne.n	80037dc <PCD_EP_ISR_Handler+0x5ce>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037bc:	b29b      	uxth	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c2:	4413      	add	r3, r2
 80037c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	00da      	lsls	r2, r3, #3
 80037cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ce:	4413      	add	r3, r2
 80037d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d8:	2200      	movs	r2, #0
 80037da:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	4619      	mov	r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f006 f81d 	bl	8009822 <HAL_PCD_DataInStageCallback>
 80037e8:	e04a      	b.n	8003880 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80037ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80037ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d13f      	bne.n	8003874 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	4413      	add	r3, r2
 800380e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003818:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800381a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003820:	429a      	cmp	r2, r3
 8003822:	d906      	bls.n	8003832 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800382a:	1ad2      	subs	r2, r2, r3
 800382c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800382e:	619a      	str	r2, [r3, #24]
 8003830:	e002      	b.n	8003838 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003834:	2200      	movs	r2, #0
 8003836:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f005 ffeb 	bl	8009822 <HAL_PCD_DataInStageCallback>
 800384c:	e018      	b.n	8003880 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800384e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003854:	441a      	add	r2, r3
 8003856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003858:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800385a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003860:	441a      	add	r2, r3
 8003862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003864:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800386c:	4618      	mov	r0, r3
 800386e:	f003 fa06 	bl	8006c7e <USB_EPStartXfer>
 8003872:	e005      	b.n	8003880 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003874:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003876:	461a      	mov	r2, r3
 8003878:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f917 	bl	8003aae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003888:	b29b      	uxth	r3, r3
 800388a:	b21b      	sxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	f6ff acc3 	blt.w	8003218 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3748      	adds	r7, #72	@ 0x48
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d07c      	beq.n	80039ae <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038bc:	b29b      	uxth	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	4413      	add	r3, r2
 80038ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	8b7b      	ldrh	r3, [r7, #26]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d306      	bcc.n	80038f2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	8b7b      	ldrh	r3, [r7, #26]
 80038ea:	1ad2      	subs	r2, r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	619a      	str	r2, [r3, #24]
 80038f0:	e002      	b.n	80038f8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2200      	movs	r2, #0
 80038f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d123      	bne.n	8003948 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391a:	833b      	strh	r3, [r7, #24]
 800391c:	8b3b      	ldrh	r3, [r7, #24]
 800391e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003922:	833b      	strh	r3, [r7, #24]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	441a      	add	r2, r3
 8003932:	8b3b      	ldrh	r3, [r7, #24]
 8003934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800393c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003944:	b29b      	uxth	r3, r3
 8003946:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01f      	beq.n	8003992 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29b      	uxth	r3, r3
 8003964:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800396c:	82fb      	strh	r3, [r7, #22]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	441a      	add	r2, r3
 800397c:	8afb      	ldrh	r3, [r7, #22]
 800397e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800398a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800398e:	b29b      	uxth	r3, r3
 8003990:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003992:	8b7b      	ldrh	r3, [r7, #26]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8085 	beq.w	8003aa4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	6959      	ldr	r1, [r3, #20]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	891a      	ldrh	r2, [r3, #8]
 80039a6:	8b7b      	ldrh	r3, [r7, #26]
 80039a8:	f004 f890 	bl	8007acc <USB_ReadPMA>
 80039ac:	e07a      	b.n	8003aa4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	699a      	ldr	r2, [r3, #24]
 80039d8:	8b7b      	ldrh	r3, [r7, #26]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d306      	bcc.n	80039ec <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	8b7b      	ldrh	r3, [r7, #26]
 80039e4:	1ad2      	subs	r2, r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	619a      	str	r2, [r3, #24]
 80039ea:	e002      	b.n	80039f2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2200      	movs	r2, #0
 80039f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d123      	bne.n	8003a42 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a14:	83fb      	strh	r3, [r7, #30]
 8003a16:	8bfb      	ldrh	r3, [r7, #30]
 8003a18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a1c:	83fb      	strh	r3, [r7, #30]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	441a      	add	r2, r3
 8003a2c:	8bfb      	ldrh	r3, [r7, #30]
 8003a2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11f      	bne.n	8003a8c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a66:	83bb      	strh	r3, [r7, #28]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	8bbb      	ldrh	r3, [r7, #28]
 8003a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a8c:	8b7b      	ldrh	r3, [r7, #26]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6959      	ldr	r1, [r3, #20]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	895a      	ldrh	r2, [r3, #10]
 8003a9e:	8b7b      	ldrh	r3, [r7, #26]
 8003aa0:	f004 f814 	bl	8007acc <USB_ReadPMA>
    }
  }

  return count;
 8003aa4:	8b7b      	ldrh	r3, [r7, #26]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b0a6      	sub	sp, #152	@ 0x98
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 81f7 	beq.w	8003eb6 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aec:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d907      	bls.n	8003b0c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003b04:	1ad2      	subs	r2, r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	619a      	str	r2, [r3, #24]
 8003b0a:	e002      	b.n	8003b12 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 80e1 	bne.w	8003cde <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d126      	bne.n	8003b72 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	4413      	add	r3, r2
 8003b3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	00da      	lsls	r2, r3, #3
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	4413      	add	r3, r2
 8003b46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5a:	801a      	strh	r2, [r3, #0]
 8003b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6e:	801a      	strh	r2, [r3, #0]
 8003b70:	e01a      	b.n	8003ba8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d116      	bne.n	8003ba8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8e:	4413      	add	r3, r2
 8003b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	00da      	lsls	r2, r3, #3
 8003b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	785b      	ldrb	r3, [r3, #1]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d126      	bne.n	8003c04 <HAL_PCD_EP_DB_Transmit+0x156>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	4413      	add	r3, r2
 8003bcc:	623b      	str	r3, [r7, #32]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	00da      	lsls	r2, r3, #3
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	801a      	strh	r2, [r3, #0]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	801a      	strh	r2, [r3, #0]
 8003c02:	e017      	b.n	8003c34 <HAL_PCD_EP_DB_Transmit+0x186>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	785b      	ldrb	r3, [r3, #1]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d113      	bne.n	8003c34 <HAL_PCD_EP_DB_Transmit+0x186>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	4413      	add	r3, r2
 8003c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	00da      	lsls	r2, r3, #3
 8003c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c26:	4413      	add	r3, r2
 8003c28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	2200      	movs	r2, #0
 8003c32:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	78db      	ldrb	r3, [r3, #3]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d123      	bne.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c56:	837b      	strh	r3, [r7, #26]
 8003c58:	8b7b      	ldrh	r3, [r7, #26]
 8003c5a:	f083 0320 	eor.w	r3, r3, #32
 8003c5e:	837b      	strh	r3, [r7, #26]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	441a      	add	r2, r3
 8003c6e:	8b7b      	ldrh	r3, [r7, #26]
 8003c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f005 fdc9 	bl	8009822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01f      	beq.n	8003cda <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb4:	833b      	strh	r3, [r7, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	441a      	add	r2, r3
 8003cc4:	8b3b      	ldrh	r3, [r7, #24]
 8003cc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e31f      	b.n	800431e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d021      	beq.n	8003d2c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d02:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	441a      	add	r2, r3
 8003d14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	f040 82ca 	bne.w	80042cc <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d40:	441a      	add	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d4e:	441a      	add	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	6a1a      	ldr	r2, [r3, #32]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d309      	bcc.n	8003d74 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	6a1a      	ldr	r2, [r3, #32]
 8003d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d6c:	1ad2      	subs	r2, r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	621a      	str	r2, [r3, #32]
 8003d72:	e015      	b.n	8003da0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d107      	bne.n	8003d8c <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003d7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d80:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d8a:	e009      	b.n	8003da0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	785b      	ldrb	r3, [r3, #1]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d15f      	bne.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dbc:	4413      	add	r3, r2
 8003dbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	00da      	lsls	r2, r3, #3
 8003dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc8:	4413      	add	r3, r2
 8003dca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dde:	801a      	strh	r2, [r3, #0]
 8003de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <HAL_PCD_EP_DB_Transmit+0x34e>
 8003de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e051      	b.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003dfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dfe:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e00:	d816      	bhi.n	8003e30 <HAL_PCD_EP_DB_Transmit+0x382>
 8003e02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e14:	3301      	adds	r3, #1
 8003e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	029b      	lsls	r3, r3, #10
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	4313      	orrs	r3, r2
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2c:	801a      	strh	r2, [r3, #0]
 8003e2e:	e037      	b.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003e30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <HAL_PCD_EP_DB_Transmit+0x398>
 8003e40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e42:	3b01      	subs	r3, #1
 8003e44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	029b      	lsls	r3, r3, #10
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	4313      	orrs	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	e01b      	b.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d117      	bne.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e84:	4413      	add	r3, r2
 8003e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	00da      	lsls	r2, r3, #3
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e90:	4413      	add	r3, r2
 8003e92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e9e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6959      	ldr	r1, [r3, #20]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	891a      	ldrh	r2, [r3, #8]
 8003eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f003 fdc9 	bl	8007a46 <USB_WritePMA>
 8003eb4:	e20a      	b.n	80042cc <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eda:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d307      	bcc.n	8003efa <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	619a      	str	r2, [r3, #24]
 8003ef8:	e002      	b.n	8003f00 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f040 80f6 	bne.w	80040f6 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	785b      	ldrb	r3, [r3, #1]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d126      	bne.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f26:	4413      	add	r3, r2
 8003f28:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	00da      	lsls	r2, r3, #3
 8003f30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f32:	4413      	add	r3, r2
 8003f34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f38:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f48:	801a      	strh	r2, [r3, #0]
 8003f4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f5c:	801a      	strh	r2, [r3, #0]
 8003f5e:	e01a      	b.n	8003f96 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	785b      	ldrb	r3, [r3, #1]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d116      	bne.n	8003f96 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f7c:	4413      	add	r3, r2
 8003f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	00da      	lsls	r2, r3, #3
 8003f86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f88:	4413      	add	r3, r2
 8003f8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f92:	2200      	movs	r2, #0
 8003f94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	785b      	ldrb	r3, [r3, #1]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d12f      	bne.n	8004006 <HAL_PCD_EP_DB_Transmit+0x558>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	00da      	lsls	r2, r3, #3
 8003fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fce:	4413      	add	r3, r2
 8003fd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004002:	801a      	strh	r2, [r3, #0]
 8004004:	e01c      	b.n	8004040 <HAL_PCD_EP_DB_Transmit+0x592>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d118      	bne.n	8004040 <HAL_PCD_EP_DB_Transmit+0x592>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004016:	b29b      	uxth	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800401e:	4413      	add	r3, r2
 8004020:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	00da      	lsls	r2, r3, #3
 800402a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800402e:	4413      	add	r3, r2
 8004030:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004034:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004038:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800403c:	2200      	movs	r2, #0
 800403e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	78db      	ldrb	r3, [r3, #3]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d127      	bne.n	8004098 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800405e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004062:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004066:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800406a:	f083 0320 	eor.w	r3, r3, #32
 800406e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	441a      	add	r2, r3
 8004080:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800408c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004094:	b29b      	uxth	r3, r3
 8004096:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	4619      	mov	r1, r3
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f005 fbbf 	bl	8009822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d121      	bne.n	80040f2 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	441a      	add	r2, r3
 80040da:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80040de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e113      	b.n	800431e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d121      	bne.n	8004144 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	441a      	add	r2, r3
 800412c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004138:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800413c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004140:	b29b      	uxth	r3, r3
 8004142:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800414a:	2b01      	cmp	r3, #1
 800414c:	f040 80be 	bne.w	80042cc <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004158:	441a      	add	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004166:	441a      	add	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	6a1a      	ldr	r2, [r3, #32]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	429a      	cmp	r2, r3
 8004176:	d309      	bcc.n	800418c <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004184:	1ad2      	subs	r2, r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	621a      	str	r2, [r3, #32]
 800418a:	e015      	b.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d107      	bne.n	80041a4 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004194:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004198:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80041a2:	e009      	b.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2200      	movs	r2, #0
 80041ae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d15f      	bne.n	8004286 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041da:	4413      	add	r3, r2
 80041dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	00da      	lsls	r2, r3, #3
 80041e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041e6:	4413      	add	r3, r2
 80041e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80041ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <HAL_PCD_EP_DB_Transmit+0x76c>
 8004204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800420e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004212:	b29a      	uxth	r2, r3
 8004214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004216:	801a      	strh	r2, [r3, #0]
 8004218:	e04e      	b.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800421a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800421c:	2b3e      	cmp	r3, #62	@ 0x3e
 800421e:	d816      	bhi.n	800424e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	663b      	str	r3, [r7, #96]	@ 0x60
 8004226:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_PCD_EP_DB_Transmit+0x788>
 8004230:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004232:	3301      	adds	r3, #1
 8004234:	663b      	str	r3, [r7, #96]	@ 0x60
 8004236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	b29a      	uxth	r2, r3
 800423c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800423e:	b29b      	uxth	r3, r3
 8004240:	029b      	lsls	r3, r3, #10
 8004242:	b29b      	uxth	r3, r3
 8004244:	4313      	orrs	r3, r2
 8004246:	b29a      	uxth	r2, r3
 8004248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	e034      	b.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800424e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	663b      	str	r3, [r7, #96]	@ 0x60
 8004254:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800425e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004260:	3b01      	subs	r3, #1
 8004262:	663b      	str	r3, [r7, #96]	@ 0x60
 8004264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b29a      	uxth	r2, r3
 800426a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800426c:	b29b      	uxth	r3, r3
 800426e:	029b      	lsls	r3, r3, #10
 8004270:	b29b      	uxth	r3, r3
 8004272:	4313      	orrs	r3, r2
 8004274:	b29b      	uxth	r3, r3
 8004276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800427e:	b29a      	uxth	r2, r3
 8004280:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004282:	801a      	strh	r2, [r3, #0]
 8004284:	e018      	b.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	785b      	ldrb	r3, [r3, #1]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d114      	bne.n	80042b8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004296:	b29b      	uxth	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800429c:	4413      	add	r3, r2
 800429e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	00da      	lsls	r2, r3, #3
 80042a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042a8:	4413      	add	r3, r2
 80042aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	6959      	ldr	r1, [r3, #20]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	895a      	ldrh	r2, [r3, #10]
 80042c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f003 fbbd 	bl	8007a46 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042e6:	82fb      	strh	r3, [r7, #22]
 80042e8:	8afb      	ldrh	r3, [r7, #22]
 80042ea:	f083 0310 	eor.w	r3, r3, #16
 80042ee:	82fb      	strh	r3, [r7, #22]
 80042f0:	8afb      	ldrh	r3, [r7, #22]
 80042f2:	f083 0320 	eor.w	r3, r3, #32
 80042f6:	82fb      	strh	r3, [r7, #22]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	441a      	add	r2, r3
 8004306:	8afb      	ldrh	r3, [r7, #22]
 8004308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800430c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004318:	b29b      	uxth	r3, r3
 800431a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3798      	adds	r7, #152	@ 0x98
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004326:	b480      	push	{r7}
 8004328:	b087      	sub	sp, #28
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	817b      	strh	r3, [r7, #10]
 8004334:	4613      	mov	r3, r2
 8004336:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004338:	897b      	ldrh	r3, [r7, #10]
 800433a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00b      	beq.n	800435c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004344:	897b      	ldrh	r3, [r7, #10]
 8004346:	f003 0207 	and.w	r2, r3, #7
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	3310      	adds	r3, #16
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e009      	b.n	8004370 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800435c:	897a      	ldrh	r2, [r7, #10]
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004370:	893b      	ldrh	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d107      	bne.n	8004386 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2200      	movs	r2, #0
 800437a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	b29a      	uxth	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	80da      	strh	r2, [r3, #6]
 8004384:	e00b      	b.n	800439e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2201      	movs	r2, #1
 800438a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	b29a      	uxth	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	0c1b      	lsrs	r3, r3, #16
 8004398:	b29a      	uxth	r2, r3
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f043 0302 	orr.w	r3, r3, #2
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d141      	bne.n	8004492 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800440e:	4b4b      	ldr	r3, [pc, #300]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800441a:	d131      	bne.n	8004480 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800441c:	4b47      	ldr	r3, [pc, #284]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004422:	4a46      	ldr	r2, [pc, #280]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004428:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800442c:	4b43      	ldr	r3, [pc, #268]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004434:	4a41      	ldr	r2, [pc, #260]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004436:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800443a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800443c:	4b40      	ldr	r3, [pc, #256]	@ (8004540 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2232      	movs	r2, #50	@ 0x32
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	4a3f      	ldr	r2, [pc, #252]	@ (8004544 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	0c9b      	lsrs	r3, r3, #18
 800444e:	3301      	adds	r3, #1
 8004450:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004452:	e002      	b.n	800445a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b01      	subs	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800445a:	4b38      	ldr	r3, [pc, #224]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004466:	d102      	bne.n	800446e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f2      	bne.n	8004454 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800446e:	4b33      	ldr	r3, [pc, #204]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800447a:	d158      	bne.n	800452e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e057      	b.n	8004530 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004480:	4b2e      	ldr	r3, [pc, #184]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004486:	4a2d      	ldr	r2, [pc, #180]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800448c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004490:	e04d      	b.n	800452e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004498:	d141      	bne.n	800451e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800449a:	4b28      	ldr	r3, [pc, #160]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a6:	d131      	bne.n	800450c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044a8:	4b24      	ldr	r3, [pc, #144]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ae:	4a23      	ldr	r2, [pc, #140]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044b8:	4b20      	ldr	r3, [pc, #128]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044c0:	4a1e      	ldr	r2, [pc, #120]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004540 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2232      	movs	r2, #50	@ 0x32
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004544 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044d4:	fba2 2303 	umull	r2, r3, r2, r3
 80044d8:	0c9b      	lsrs	r3, r3, #18
 80044da:	3301      	adds	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044de:	e002      	b.n	80044e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044e6:	4b15      	ldr	r3, [pc, #84]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f2:	d102      	bne.n	80044fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f2      	bne.n	80044e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044fa:	4b10      	ldr	r3, [pc, #64]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004506:	d112      	bne.n	800452e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e011      	b.n	8004530 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800450c:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800450e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004512:	4a0a      	ldr	r2, [pc, #40]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004518:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800451c:	e007      	b.n	800452e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800451e:	4b07      	ldr	r3, [pc, #28]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004526:	4a05      	ldr	r2, [pc, #20]	@ (800453c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004528:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800452c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40007000 	.word	0x40007000
 8004540:	20000000 	.word	0x20000000
 8004544:	431bde83 	.word	0x431bde83

08004548 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4a04      	ldr	r2, [pc, #16]	@ (8004564 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004556:	6093      	str	r3, [r2, #8]
}
 8004558:	bf00      	nop
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40007000 	.word	0x40007000

08004568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e2fe      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d075      	beq.n	8004672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004586:	4b97      	ldr	r3, [pc, #604]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004590:	4b94      	ldr	r3, [pc, #592]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d102      	bne.n	80045a6 <HAL_RCC_OscConfig+0x3e>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d002      	beq.n	80045ac <HAL_RCC_OscConfig+0x44>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d10b      	bne.n	80045c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ac:	4b8d      	ldr	r3, [pc, #564]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d05b      	beq.n	8004670 <HAL_RCC_OscConfig+0x108>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d157      	bne.n	8004670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e2d9      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045cc:	d106      	bne.n	80045dc <HAL_RCC_OscConfig+0x74>
 80045ce:	4b85      	ldr	r3, [pc, #532]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a84      	ldr	r2, [pc, #528]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e01d      	b.n	8004618 <HAL_RCC_OscConfig+0xb0>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045e4:	d10c      	bne.n	8004600 <HAL_RCC_OscConfig+0x98>
 80045e6:	4b7f      	ldr	r3, [pc, #508]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7e      	ldr	r2, [pc, #504]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80045ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	4b7c      	ldr	r3, [pc, #496]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a7b      	ldr	r2, [pc, #492]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e00b      	b.n	8004618 <HAL_RCC_OscConfig+0xb0>
 8004600:	4b78      	ldr	r3, [pc, #480]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a77      	ldr	r2, [pc, #476]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	4b75      	ldr	r3, [pc, #468]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a74      	ldr	r2, [pc, #464]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004612:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d013      	beq.n	8004648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fc f9dc 	bl	80009dc <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004628:	f7fc f9d8 	bl	80009dc <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b64      	cmp	r3, #100	@ 0x64
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e29e      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463a:	4b6a      	ldr	r3, [pc, #424]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0xc0>
 8004646:	e014      	b.n	8004672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fc f9c8 	bl	80009dc <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004650:	f7fc f9c4 	bl	80009dc <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b64      	cmp	r3, #100	@ 0x64
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e28a      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004662:	4b60      	ldr	r3, [pc, #384]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0xe8>
 800466e:	e000      	b.n	8004672 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d075      	beq.n	800476a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467e:	4b59      	ldr	r3, [pc, #356]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004688:	4b56      	ldr	r3, [pc, #344]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b0c      	cmp	r3, #12
 8004696:	d102      	bne.n	800469e <HAL_RCC_OscConfig+0x136>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d002      	beq.n	80046a4 <HAL_RCC_OscConfig+0x13c>
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d11f      	bne.n	80046e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a4:	4b4f      	ldr	r3, [pc, #316]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_RCC_OscConfig+0x154>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e25d      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046bc:	4b49      	ldr	r3, [pc, #292]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	061b      	lsls	r3, r3, #24
 80046ca:	4946      	ldr	r1, [pc, #280]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046d0:	4b45      	ldr	r3, [pc, #276]	@ (80047e8 <HAL_RCC_OscConfig+0x280>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fc f935 	bl	8000944 <HAL_InitTick>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d043      	beq.n	8004768 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e249      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d023      	beq.n	8004734 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ec:	4b3d      	ldr	r3, [pc, #244]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a3c      	ldr	r2, [pc, #240]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80046f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fc f970 	bl	80009dc <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004700:	f7fc f96c 	bl	80009dc <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e232      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004712:	4b34      	ldr	r3, [pc, #208]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471e:	4b31      	ldr	r3, [pc, #196]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	061b      	lsls	r3, r3, #24
 800472c:	492d      	ldr	r1, [pc, #180]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
 8004732:	e01a      	b.n	800476a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004734:	4b2b      	ldr	r3, [pc, #172]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2a      	ldr	r2, [pc, #168]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 800473a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800473e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fc f94c 	bl	80009dc <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004748:	f7fc f948 	bl	80009dc <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e20e      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800475a:	4b22      	ldr	r3, [pc, #136]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x1e0>
 8004766:	e000      	b.n	800476a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004768:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d041      	beq.n	80047fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01c      	beq.n	80047b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800477e:	4b19      	ldr	r3, [pc, #100]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004784:	4a17      	ldr	r2, [pc, #92]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478e:	f7fc f925 	bl	80009dc <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004796:	f7fc f921 	bl	80009dc <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e1e7      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a8:	4b0e      	ldr	r3, [pc, #56]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80047aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0ef      	beq.n	8004796 <HAL_RCC_OscConfig+0x22e>
 80047b6:	e020      	b.n	80047fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b8:	4b0a      	ldr	r3, [pc, #40]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80047ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047be:	4a09      	ldr	r2, [pc, #36]	@ (80047e4 <HAL_RCC_OscConfig+0x27c>)
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fc f908 	bl	80009dc <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047ce:	e00d      	b.n	80047ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d0:	f7fc f904 	bl	80009dc <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d906      	bls.n	80047ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e1ca      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80047ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1ea      	bne.n	80047d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80a6 	beq.w	8004954 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004808:	2300      	movs	r3, #0
 800480a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800480c:	4b84      	ldr	r3, [pc, #528]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_OscConfig+0x2b4>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x2b6>
 800481c:	2300      	movs	r3, #0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00d      	beq.n	800483e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004822:	4b7f      	ldr	r3, [pc, #508]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004826:	4a7e      	ldr	r2, [pc, #504]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 8004828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800482c:	6593      	str	r3, [r2, #88]	@ 0x58
 800482e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 8004830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800483a:	2301      	movs	r3, #1
 800483c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483e:	4b79      	ldr	r3, [pc, #484]	@ (8004a24 <HAL_RCC_OscConfig+0x4bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d118      	bne.n	800487c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800484a:	4b76      	ldr	r3, [pc, #472]	@ (8004a24 <HAL_RCC_OscConfig+0x4bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a75      	ldr	r2, [pc, #468]	@ (8004a24 <HAL_RCC_OscConfig+0x4bc>)
 8004850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004856:	f7fc f8c1 	bl	80009dc <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485e:	f7fc f8bd 	bl	80009dc <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e183      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004870:	4b6c      	ldr	r3, [pc, #432]	@ (8004a24 <HAL_RCC_OscConfig+0x4bc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d108      	bne.n	8004896 <HAL_RCC_OscConfig+0x32e>
 8004884:	4b66      	ldr	r3, [pc, #408]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488a:	4a65      	ldr	r2, [pc, #404]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004894:	e024      	b.n	80048e0 <HAL_RCC_OscConfig+0x378>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b05      	cmp	r3, #5
 800489c:	d110      	bne.n	80048c0 <HAL_RCC_OscConfig+0x358>
 800489e:	4b60      	ldr	r3, [pc, #384]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80048a6:	f043 0304 	orr.w	r3, r3, #4
 80048aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048be:	e00f      	b.n	80048e0 <HAL_RCC_OscConfig+0x378>
 80048c0:	4b57      	ldr	r3, [pc, #348]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c6:	4a56      	ldr	r2, [pc, #344]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048d0:	4b53      	ldr	r3, [pc, #332]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d6:	4a52      	ldr	r2, [pc, #328]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80048d8:	f023 0304 	bic.w	r3, r3, #4
 80048dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d016      	beq.n	8004916 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e8:	f7fc f878 	bl	80009dc <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f0:	f7fc f874 	bl	80009dc <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e138      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004906:	4b46      	ldr	r3, [pc, #280]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0ed      	beq.n	80048f0 <HAL_RCC_OscConfig+0x388>
 8004914:	e015      	b.n	8004942 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004916:	f7fc f861 	bl	80009dc <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800491c:	e00a      	b.n	8004934 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491e:	f7fc f85d 	bl	80009dc <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492c:	4293      	cmp	r3, r2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e121      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004934:	4b3a      	ldr	r3, [pc, #232]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ed      	bne.n	800491e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004942:	7ffb      	ldrb	r3, [r7, #31]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d105      	bne.n	8004954 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004948:	4b35      	ldr	r3, [pc, #212]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	4a34      	ldr	r2, [pc, #208]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 800494e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004952:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d03c      	beq.n	80049da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01c      	beq.n	80049a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004968:	4b2d      	ldr	r3, [pc, #180]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 800496a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800496e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7fc f830 	bl	80009dc <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004980:	f7fc f82c 	bl	80009dc <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e0f2      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004992:	4b23      	ldr	r3, [pc, #140]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 8004994:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0ef      	beq.n	8004980 <HAL_RCC_OscConfig+0x418>
 80049a0:	e01b      	b.n	80049da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80049a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b2:	f7fc f813 	bl	80009dc <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ba:	f7fc f80f 	bl	80009dc <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e0d5      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049cc:	4b14      	ldr	r3, [pc, #80]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80049ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1ef      	bne.n	80049ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80c9 	beq.w	8004b76 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 030c 	and.w	r3, r3, #12
 80049ec:	2b0c      	cmp	r3, #12
 80049ee:	f000 8083 	beq.w	8004af8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d15e      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fa:	4b09      	ldr	r3, [pc, #36]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a08      	ldr	r2, [pc, #32]	@ (8004a20 <HAL_RCC_OscConfig+0x4b8>)
 8004a00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a06:	f7fb ffe9 	bl	80009dc <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0c:	e00c      	b.n	8004a28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fb ffe5 	bl	80009dc <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d905      	bls.n	8004a28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e0ab      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a28:	4b55      	ldr	r3, [pc, #340]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1ec      	bne.n	8004a0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a34:	4b52      	ldr	r3, [pc, #328]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	4b52      	ldr	r3, [pc, #328]	@ (8004b84 <HAL_RCC_OscConfig+0x61c>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6a11      	ldr	r1, [r2, #32]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a44:	3a01      	subs	r2, #1
 8004a46:	0112      	lsls	r2, r2, #4
 8004a48:	4311      	orrs	r1, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004a4e:	0212      	lsls	r2, r2, #8
 8004a50:	4311      	orrs	r1, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a56:	0852      	lsrs	r2, r2, #1
 8004a58:	3a01      	subs	r2, #1
 8004a5a:	0552      	lsls	r2, r2, #21
 8004a5c:	4311      	orrs	r1, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a62:	0852      	lsrs	r2, r2, #1
 8004a64:	3a01      	subs	r2, #1
 8004a66:	0652      	lsls	r2, r2, #25
 8004a68:	4311      	orrs	r1, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a6e:	06d2      	lsls	r2, r2, #27
 8004a70:	430a      	orrs	r2, r1
 8004a72:	4943      	ldr	r1, [pc, #268]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a78:	4b41      	ldr	r3, [pc, #260]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a40      	ldr	r2, [pc, #256]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a84:	4b3e      	ldr	r3, [pc, #248]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a3d      	ldr	r2, [pc, #244]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7fb ffa4 	bl	80009dc <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fb ffa0 	bl	80009dc <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e066      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aaa:	4b35      	ldr	r3, [pc, #212]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x530>
 8004ab6:	e05e      	b.n	8004b76 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab8:	4b31      	ldr	r3, [pc, #196]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a30      	ldr	r2, [pc, #192]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fb ff8a 	bl	80009dc <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fb ff86 	bl	80009dc <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e04c      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ade:	4b28      	ldr	r3, [pc, #160]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004aea:	4b25      	ldr	r3, [pc, #148]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	4924      	ldr	r1, [pc, #144]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004af0:	4b25      	ldr	r3, [pc, #148]	@ (8004b88 <HAL_RCC_OscConfig+0x620>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	60cb      	str	r3, [r1, #12]
 8004af6:	e03e      	b.n	8004b76 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e039      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004b04:	4b1e      	ldr	r3, [pc, #120]	@ (8004b80 <HAL_RCC_OscConfig+0x618>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 0203 	and.w	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d12c      	bne.n	8004b72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	3b01      	subs	r3, #1
 8004b24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d123      	bne.n	8004b72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d11b      	bne.n	8004b72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d113      	bne.n	8004b72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	3b01      	subs	r3, #1
 8004b58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d109      	bne.n	8004b72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b68:	085b      	lsrs	r3, r3, #1
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d001      	beq.n	8004b76 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	019f800c 	.word	0x019f800c
 8004b88:	feeefffc 	.word	0xfeeefffc

08004b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e11e      	b.n	8004de2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b91      	ldr	r3, [pc, #580]	@ (8004dec <HAL_RCC_ClockConfig+0x260>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d910      	bls.n	8004bd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b8e      	ldr	r3, [pc, #568]	@ (8004dec <HAL_RCC_ClockConfig+0x260>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 020f 	bic.w	r2, r3, #15
 8004bba:	498c      	ldr	r1, [pc, #560]	@ (8004dec <HAL_RCC_ClockConfig+0x260>)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc2:	4b8a      	ldr	r3, [pc, #552]	@ (8004dec <HAL_RCC_ClockConfig+0x260>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e106      	b.n	8004de2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d073      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d129      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be8:	4b81      	ldr	r3, [pc, #516]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0f4      	b.n	8004de2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004bf8:	f000 f966 	bl	8004ec8 <RCC_GetSysClockFreqFromPLLSource>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4a7c      	ldr	r2, [pc, #496]	@ (8004df4 <HAL_RCC_ClockConfig+0x268>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d93f      	bls.n	8004c86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c06:	4b7a      	ldr	r3, [pc, #488]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d033      	beq.n	8004c86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d12f      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c26:	4b72      	ldr	r3, [pc, #456]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c2e:	4a70      	ldr	r2, [pc, #448]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c36:	2380      	movs	r3, #128	@ 0x80
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	e024      	b.n	8004c86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d107      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c44:	4b6a      	ldr	r3, [pc, #424]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0c6      	b.n	8004de2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c54:	4b66      	ldr	r3, [pc, #408]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0be      	b.n	8004de2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c64:	f000 f8ce 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4a61      	ldr	r2, [pc, #388]	@ (8004df4 <HAL_RCC_ClockConfig+0x268>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d909      	bls.n	8004c86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c72:	4b5f      	ldr	r3, [pc, #380]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c7a:	4a5d      	ldr	r2, [pc, #372]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c82:	2380      	movs	r3, #128	@ 0x80
 8004c84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b5a      	ldr	r3, [pc, #360]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4957      	ldr	r1, [pc, #348]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fb fea0 	bl	80009dc <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fb fe9c 	bl	80009dc <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e095      	b.n	8004de2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b4e      	ldr	r3, [pc, #312]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d023      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ce0:	4b43      	ldr	r3, [pc, #268]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a42      	ldr	r2, [pc, #264]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004ce6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d007      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d00:	4a3b      	ldr	r2, [pc, #236]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004d02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d08:	4b39      	ldr	r3, [pc, #228]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4936      	ldr	r1, [pc, #216]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b80      	cmp	r3, #128	@ 0x80
 8004d20:	d105      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d22:	4b33      	ldr	r3, [pc, #204]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	4a32      	ldr	r2, [pc, #200]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004d28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004dec <HAL_RCC_ClockConfig+0x260>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d21d      	bcs.n	8004d78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dec <HAL_RCC_ClockConfig+0x260>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f023 020f 	bic.w	r2, r3, #15
 8004d44:	4929      	ldr	r1, [pc, #164]	@ (8004dec <HAL_RCC_ClockConfig+0x260>)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d4c:	f7fb fe46 	bl	80009dc <HAL_GetTick>
 8004d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	e00a      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d54:	f7fb fe42 	bl	80009dc <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e03b      	b.n	8004de2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6a:	4b20      	ldr	r3, [pc, #128]	@ (8004dec <HAL_RCC_ClockConfig+0x260>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d1ed      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d84:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4917      	ldr	r1, [pc, #92]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004da2:	4b13      	ldr	r3, [pc, #76]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	490f      	ldr	r1, [pc, #60]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004db6:	f000 f825 	bl	8004e04 <HAL_RCC_GetSysClockFreq>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <HAL_RCC_ClockConfig+0x264>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	490c      	ldr	r1, [pc, #48]	@ (8004df8 <HAL_RCC_ClockConfig+0x26c>)
 8004dc8:	5ccb      	ldrb	r3, [r1, r3]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004dfc <HAL_RCC_ClockConfig+0x270>)
 8004dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e00 <HAL_RCC_ClockConfig+0x274>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fb fdb2 	bl	8000944 <HAL_InitTick>
 8004de0:	4603      	mov	r3, r0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40022000 	.word	0x40022000
 8004df0:	40021000 	.word	0x40021000
 8004df4:	04c4b400 	.word	0x04c4b400
 8004df8:	08009e10 	.word	0x08009e10
 8004dfc:	20000000 	.word	0x20000000
 8004e00:	20000004 	.word	0x20000004

08004e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d102      	bne.n	8004e1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e16:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	e047      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e1c:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 030c 	and.w	r3, r3, #12
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d102      	bne.n	8004e2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e28:	4b26      	ldr	r3, [pc, #152]	@ (8004ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	e03e      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e2e:	4b23      	ldr	r3, [pc, #140]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b0c      	cmp	r3, #12
 8004e38:	d136      	bne.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e3a:	4b20      	ldr	r3, [pc, #128]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e44:	4b1d      	ldr	r3, [pc, #116]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	3301      	adds	r3, #1
 8004e50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d10c      	bne.n	8004e72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e58:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	4a16      	ldr	r2, [pc, #88]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e62:	68d2      	ldr	r2, [r2, #12]
 8004e64:	0a12      	lsrs	r2, r2, #8
 8004e66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e6a:	fb02 f303 	mul.w	r3, r2, r3
 8004e6e:	617b      	str	r3, [r7, #20]
      break;
 8004e70:	e00c      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e72:	4a13      	ldr	r2, [pc, #76]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	4a10      	ldr	r2, [pc, #64]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e7c:	68d2      	ldr	r2, [r2, #12]
 8004e7e:	0a12      	lsrs	r2, r2, #8
 8004e80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e84:	fb02 f303 	mul.w	r3, r2, r3
 8004e88:	617b      	str	r3, [r7, #20]
      break;
 8004e8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	0e5b      	lsrs	r3, r3, #25
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	3301      	adds	r3, #1
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	e001      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004eac:	693b      	ldr	r3, [r7, #16]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	00f42400 	.word	0x00f42400
 8004ec4:	007a1200 	.word	0x007a1200

08004ec8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ece:	4b1e      	ldr	r3, [pc, #120]	@ (8004f48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	091b      	lsrs	r3, r3, #4
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d10c      	bne.n	8004f06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eec:	4a17      	ldr	r2, [pc, #92]	@ (8004f4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	4a14      	ldr	r2, [pc, #80]	@ (8004f48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ef6:	68d2      	ldr	r2, [r2, #12]
 8004ef8:	0a12      	lsrs	r2, r2, #8
 8004efa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	617b      	str	r3, [r7, #20]
    break;
 8004f04:	e00c      	b.n	8004f20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f06:	4a12      	ldr	r2, [pc, #72]	@ (8004f50 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8004f48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f10:	68d2      	ldr	r2, [r2, #12]
 8004f12:	0a12      	lsrs	r2, r2, #8
 8004f14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	617b      	str	r3, [r7, #20]
    break;
 8004f1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f20:	4b09      	ldr	r3, [pc, #36]	@ (8004f48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	0e5b      	lsrs	r3, r3, #25
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f3a:	687b      	ldr	r3, [r7, #4]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	007a1200 	.word	0x007a1200
 8004f50:	00f42400 	.word	0x00f42400

08004f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f60:	2300      	movs	r3, #0
 8004f62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8098 	beq.w	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f72:	2300      	movs	r3, #0
 8004f74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f76:	4b43      	ldr	r3, [pc, #268]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10d      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f82:	4b40      	ldr	r3, [pc, #256]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f86:	4a3f      	ldr	r2, [pc, #252]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f96:	60bb      	str	r3, [r7, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a39      	ldr	r2, [pc, #228]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004faa:	f7fb fd17 	bl	80009dc <HAL_GetTick>
 8004fae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb0:	e009      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb2:	f7fb fd13 	bl	80009dc <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d902      	bls.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	74fb      	strb	r3, [r7, #19]
        break;
 8004fc4:	e005      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc6:	4b30      	ldr	r3, [pc, #192]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0ef      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004fd2:	7cfb      	ldrb	r3, [r7, #19]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d159      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01e      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d019      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ff4:	4b23      	ldr	r3, [pc, #140]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005000:	4b20      	ldr	r3, [pc, #128]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005006:	4a1f      	ldr	r2, [pc, #124]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800500c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005010:	4b1c      	ldr	r3, [pc, #112]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005016:	4a1b      	ldr	r2, [pc, #108]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005020:	4a18      	ldr	r2, [pc, #96]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d016      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005032:	f7fb fcd3 	bl	80009dc <HAL_GetTick>
 8005036:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005038:	e00b      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503a:	f7fb fccf 	bl	80009dc <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005048:	4293      	cmp	r3, r2
 800504a:	d902      	bls.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	74fb      	strb	r3, [r7, #19]
            break;
 8005050:	e006      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005052:	4b0c      	ldr	r3, [pc, #48]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0ec      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005060:	7cfb      	ldrb	r3, [r7, #19]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10b      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005066:	4b07      	ldr	r3, [pc, #28]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005074:	4903      	ldr	r1, [pc, #12]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800507c:	e008      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800507e:	7cfb      	ldrb	r3, [r7, #19]
 8005080:	74bb      	strb	r3, [r7, #18]
 8005082:	e005      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005084:	40021000 	.word	0x40021000
 8005088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	7cfb      	ldrb	r3, [r7, #19]
 800508e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005090:	7c7b      	ldrb	r3, [r7, #17]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d105      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005096:	4ba6      	ldr	r3, [pc, #664]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509a:	4aa5      	ldr	r2, [pc, #660]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050ae:	4ba0      	ldr	r3, [pc, #640]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b4:	f023 0203 	bic.w	r2, r3, #3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	499c      	ldr	r1, [pc, #624]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050d0:	4b97      	ldr	r3, [pc, #604]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d6:	f023 020c 	bic.w	r2, r3, #12
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	4994      	ldr	r1, [pc, #592]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	498b      	ldr	r1, [pc, #556]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005114:	4b86      	ldr	r3, [pc, #536]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	4983      	ldr	r1, [pc, #524]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005136:	4b7e      	ldr	r3, [pc, #504]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	497a      	ldr	r1, [pc, #488]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005158:	4b75      	ldr	r3, [pc, #468]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	4972      	ldr	r1, [pc, #456]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800517a:	4b6d      	ldr	r3, [pc, #436]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005180:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	4969      	ldr	r1, [pc, #420]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800519c:	4b64      	ldr	r3, [pc, #400]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	4961      	ldr	r1, [pc, #388]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051be:	4b5c      	ldr	r3, [pc, #368]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	4958      	ldr	r1, [pc, #352]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d015      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051e0:	4b53      	ldr	r3, [pc, #332]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ee:	4950      	ldr	r1, [pc, #320]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051fe:	d105      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005200:	4b4b      	ldr	r3, [pc, #300]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a4a      	ldr	r2, [pc, #296]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800520a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005214:	2b00      	cmp	r3, #0
 8005216:	d015      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005218:	4b45      	ldr	r3, [pc, #276]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005226:	4942      	ldr	r1, [pc, #264]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005236:	d105      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005238:	4b3d      	ldr	r3, [pc, #244]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4a3c      	ldr	r2, [pc, #240]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005242:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d015      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005250:	4b37      	ldr	r3, [pc, #220]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525e:	4934      	ldr	r1, [pc, #208]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800526e:	d105      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005270:	4b2f      	ldr	r3, [pc, #188]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4a2e      	ldr	r2, [pc, #184]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800527a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d015      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005288:	4b29      	ldr	r3, [pc, #164]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005296:	4926      	ldr	r1, [pc, #152]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052a6:	d105      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a8:	4b21      	ldr	r3, [pc, #132]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4a20      	ldr	r2, [pc, #128]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ce:	4918      	ldr	r1, [pc, #96]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052de:	d105      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e0:	4b13      	ldr	r3, [pc, #76]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a12      	ldr	r2, [pc, #72]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d015      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005306:	490a      	ldr	r1, [pc, #40]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005312:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005316:	d105      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005318:	4b05      	ldr	r3, [pc, #20]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a04      	ldr	r2, [pc, #16]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005322:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005324:	7cbb      	ldrb	r3, [r7, #18]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40021000 	.word	0x40021000

08005334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e049      	b.n	80053da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fb f9fe 	bl	800075c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f000 f94a 	bl	800560c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053fe:	2302      	movs	r3, #2
 8005400:	e0ff      	b.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b14      	cmp	r3, #20
 800540e:	f200 80f0 	bhi.w	80055f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005412:	a201      	add	r2, pc, #4	@ (adr r2, 8005418 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	0800546d 	.word	0x0800546d
 800541c:	080055f3 	.word	0x080055f3
 8005420:	080055f3 	.word	0x080055f3
 8005424:	080055f3 	.word	0x080055f3
 8005428:	080054ad 	.word	0x080054ad
 800542c:	080055f3 	.word	0x080055f3
 8005430:	080055f3 	.word	0x080055f3
 8005434:	080055f3 	.word	0x080055f3
 8005438:	080054ef 	.word	0x080054ef
 800543c:	080055f3 	.word	0x080055f3
 8005440:	080055f3 	.word	0x080055f3
 8005444:	080055f3 	.word	0x080055f3
 8005448:	0800552f 	.word	0x0800552f
 800544c:	080055f3 	.word	0x080055f3
 8005450:	080055f3 	.word	0x080055f3
 8005454:	080055f3 	.word	0x080055f3
 8005458:	08005571 	.word	0x08005571
 800545c:	080055f3 	.word	0x080055f3
 8005460:	080055f3 	.word	0x080055f3
 8005464:	080055f3 	.word	0x080055f3
 8005468:	080055b1 	.word	0x080055b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f966 	bl	8005744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0208 	orr.w	r2, r2, #8
 8005486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0204 	bic.w	r2, r2, #4
 8005496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6999      	ldr	r1, [r3, #24]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	619a      	str	r2, [r3, #24]
      break;
 80054aa:	e0a5      	b.n	80055f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 f9d6 	bl	8005864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6999      	ldr	r1, [r3, #24]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	021a      	lsls	r2, r3, #8
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	619a      	str	r2, [r3, #24]
      break;
 80054ec:	e084      	b.n	80055f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fa3f 	bl	8005978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0208 	orr.w	r2, r2, #8
 8005508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0204 	bic.w	r2, r2, #4
 8005518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69d9      	ldr	r1, [r3, #28]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	61da      	str	r2, [r3, #28]
      break;
 800552c:	e064      	b.n	80055f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	4618      	mov	r0, r3
 8005536:	f000 faa7 	bl	8005a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69d9      	ldr	r1, [r3, #28]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	021a      	lsls	r2, r3, #8
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	61da      	str	r2, [r3, #28]
      break;
 800556e:	e043      	b.n	80055f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fb10 	bl	8005b9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0208 	orr.w	r2, r2, #8
 800558a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0204 	bic.w	r2, r2, #4
 800559a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80055ae:	e023      	b.n	80055f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fb54 	bl	8005c64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	021a      	lsls	r2, r3, #8
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80055f0:	e002      	b.n	80055f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	75fb      	strb	r3, [r7, #23]
      break;
 80055f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop

0800560c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a42      	ldr	r2, [pc, #264]	@ (8005728 <TIM_Base_SetConfig+0x11c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00f      	beq.n	8005644 <TIM_Base_SetConfig+0x38>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562a:	d00b      	beq.n	8005644 <TIM_Base_SetConfig+0x38>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a3f      	ldr	r2, [pc, #252]	@ (800572c <TIM_Base_SetConfig+0x120>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d007      	beq.n	8005644 <TIM_Base_SetConfig+0x38>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a3e      	ldr	r2, [pc, #248]	@ (8005730 <TIM_Base_SetConfig+0x124>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_Base_SetConfig+0x38>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a3d      	ldr	r2, [pc, #244]	@ (8005734 <TIM_Base_SetConfig+0x128>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d108      	bne.n	8005656 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a33      	ldr	r2, [pc, #204]	@ (8005728 <TIM_Base_SetConfig+0x11c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d01b      	beq.n	8005696 <TIM_Base_SetConfig+0x8a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005664:	d017      	beq.n	8005696 <TIM_Base_SetConfig+0x8a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a30      	ldr	r2, [pc, #192]	@ (800572c <TIM_Base_SetConfig+0x120>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <TIM_Base_SetConfig+0x8a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a2f      	ldr	r2, [pc, #188]	@ (8005730 <TIM_Base_SetConfig+0x124>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00f      	beq.n	8005696 <TIM_Base_SetConfig+0x8a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2e      	ldr	r2, [pc, #184]	@ (8005734 <TIM_Base_SetConfig+0x128>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00b      	beq.n	8005696 <TIM_Base_SetConfig+0x8a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a2d      	ldr	r2, [pc, #180]	@ (8005738 <TIM_Base_SetConfig+0x12c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d007      	beq.n	8005696 <TIM_Base_SetConfig+0x8a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2c      	ldr	r2, [pc, #176]	@ (800573c <TIM_Base_SetConfig+0x130>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d003      	beq.n	8005696 <TIM_Base_SetConfig+0x8a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2b      	ldr	r2, [pc, #172]	@ (8005740 <TIM_Base_SetConfig+0x134>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d108      	bne.n	80056a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800569c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a16      	ldr	r2, [pc, #88]	@ (8005728 <TIM_Base_SetConfig+0x11c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00f      	beq.n	80056f4 <TIM_Base_SetConfig+0xe8>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a17      	ldr	r2, [pc, #92]	@ (8005734 <TIM_Base_SetConfig+0x128>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00b      	beq.n	80056f4 <TIM_Base_SetConfig+0xe8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a16      	ldr	r2, [pc, #88]	@ (8005738 <TIM_Base_SetConfig+0x12c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d007      	beq.n	80056f4 <TIM_Base_SetConfig+0xe8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a15      	ldr	r2, [pc, #84]	@ (800573c <TIM_Base_SetConfig+0x130>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_Base_SetConfig+0xe8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a14      	ldr	r2, [pc, #80]	@ (8005740 <TIM_Base_SetConfig+0x134>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d103      	bne.n	80056fc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d105      	bne.n	800571a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f023 0201 	bic.w	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	611a      	str	r2, [r3, #16]
  }
}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40013400 	.word	0x40013400
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800

08005744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f023 0201 	bic.w	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 0302 	bic.w	r3, r3, #2
 8005790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a2c      	ldr	r2, [pc, #176]	@ (8005850 <TIM_OC1_SetConfig+0x10c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00f      	beq.n	80057c4 <TIM_OC1_SetConfig+0x80>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005854 <TIM_OC1_SetConfig+0x110>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_OC1_SetConfig+0x80>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005858 <TIM_OC1_SetConfig+0x114>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_OC1_SetConfig+0x80>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a29      	ldr	r2, [pc, #164]	@ (800585c <TIM_OC1_SetConfig+0x118>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_OC1_SetConfig+0x80>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a28      	ldr	r2, [pc, #160]	@ (8005860 <TIM_OC1_SetConfig+0x11c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d10c      	bne.n	80057de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0308 	bic.w	r3, r3, #8
 80057ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f023 0304 	bic.w	r3, r3, #4
 80057dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005850 <TIM_OC1_SetConfig+0x10c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00f      	beq.n	8005806 <TIM_OC1_SetConfig+0xc2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005854 <TIM_OC1_SetConfig+0x110>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00b      	beq.n	8005806 <TIM_OC1_SetConfig+0xc2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a19      	ldr	r2, [pc, #100]	@ (8005858 <TIM_OC1_SetConfig+0x114>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <TIM_OC1_SetConfig+0xc2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a18      	ldr	r2, [pc, #96]	@ (800585c <TIM_OC1_SetConfig+0x118>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_OC1_SetConfig+0xc2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a17      	ldr	r2, [pc, #92]	@ (8005860 <TIM_OC1_SetConfig+0x11c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d111      	bne.n	800582a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800580c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40013400 	.word	0x40013400
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800

08005864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f023 0210 	bic.w	r2, r3, #16
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0320 	bic.w	r3, r3, #32
 80058b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a28      	ldr	r2, [pc, #160]	@ (8005964 <TIM_OC2_SetConfig+0x100>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_OC2_SetConfig+0x6c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a27      	ldr	r2, [pc, #156]	@ (8005968 <TIM_OC2_SetConfig+0x104>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10d      	bne.n	80058ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005964 <TIM_OC2_SetConfig+0x100>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00f      	beq.n	8005914 <TIM_OC2_SetConfig+0xb0>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005968 <TIM_OC2_SetConfig+0x104>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00b      	beq.n	8005914 <TIM_OC2_SetConfig+0xb0>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a1b      	ldr	r2, [pc, #108]	@ (800596c <TIM_OC2_SetConfig+0x108>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d007      	beq.n	8005914 <TIM_OC2_SetConfig+0xb0>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a1a      	ldr	r2, [pc, #104]	@ (8005970 <TIM_OC2_SetConfig+0x10c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d003      	beq.n	8005914 <TIM_OC2_SetConfig+0xb0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a19      	ldr	r2, [pc, #100]	@ (8005974 <TIM_OC2_SetConfig+0x110>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d113      	bne.n	800593c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800591a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40012c00 	.word	0x40012c00
 8005968:	40013400 	.word	0x40013400
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a27      	ldr	r2, [pc, #156]	@ (8005a74 <TIM_OC3_SetConfig+0xfc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC3_SetConfig+0x6a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a26      	ldr	r2, [pc, #152]	@ (8005a78 <TIM_OC3_SetConfig+0x100>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10d      	bne.n	80059fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a1c      	ldr	r2, [pc, #112]	@ (8005a74 <TIM_OC3_SetConfig+0xfc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00f      	beq.n	8005a26 <TIM_OC3_SetConfig+0xae>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a1b      	ldr	r2, [pc, #108]	@ (8005a78 <TIM_OC3_SetConfig+0x100>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00b      	beq.n	8005a26 <TIM_OC3_SetConfig+0xae>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a1a      	ldr	r2, [pc, #104]	@ (8005a7c <TIM_OC3_SetConfig+0x104>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d007      	beq.n	8005a26 <TIM_OC3_SetConfig+0xae>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a19      	ldr	r2, [pc, #100]	@ (8005a80 <TIM_OC3_SetConfig+0x108>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_OC3_SetConfig+0xae>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <TIM_OC3_SetConfig+0x10c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d113      	bne.n	8005a4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	621a      	str	r2, [r3, #32]
}
 8005a68:	bf00      	nop
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40013400 	.word	0x40013400
 8005a7c:	40014000 	.word	0x40014000
 8005a80:	40014400 	.word	0x40014400
 8005a84:	40014800 	.word	0x40014800

08005a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	031b      	lsls	r3, r3, #12
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a28      	ldr	r2, [pc, #160]	@ (8005b88 <TIM_OC4_SetConfig+0x100>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC4_SetConfig+0x6c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a27      	ldr	r2, [pc, #156]	@ (8005b8c <TIM_OC4_SetConfig+0x104>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10d      	bne.n	8005b10 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	031b      	lsls	r3, r3, #12
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a1d      	ldr	r2, [pc, #116]	@ (8005b88 <TIM_OC4_SetConfig+0x100>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00f      	beq.n	8005b38 <TIM_OC4_SetConfig+0xb0>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b8c <TIM_OC4_SetConfig+0x104>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00b      	beq.n	8005b38 <TIM_OC4_SetConfig+0xb0>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a1b      	ldr	r2, [pc, #108]	@ (8005b90 <TIM_OC4_SetConfig+0x108>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d007      	beq.n	8005b38 <TIM_OC4_SetConfig+0xb0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8005b94 <TIM_OC4_SetConfig+0x10c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_OC4_SetConfig+0xb0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a19      	ldr	r2, [pc, #100]	@ (8005b98 <TIM_OC4_SetConfig+0x110>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d113      	bne.n	8005b60 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	019b      	lsls	r3, r3, #6
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	019b      	lsls	r3, r3, #6
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005be0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a17      	ldr	r2, [pc, #92]	@ (8005c50 <TIM_OC5_SetConfig+0xb4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00f      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a16      	ldr	r2, [pc, #88]	@ (8005c54 <TIM_OC5_SetConfig+0xb8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00b      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a15      	ldr	r2, [pc, #84]	@ (8005c58 <TIM_OC5_SetConfig+0xbc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d007      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a14      	ldr	r2, [pc, #80]	@ (8005c5c <TIM_OC5_SetConfig+0xc0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d003      	beq.n	8005c16 <TIM_OC5_SetConfig+0x7a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a13      	ldr	r2, [pc, #76]	@ (8005c60 <TIM_OC5_SetConfig+0xc4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d109      	bne.n	8005c2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	621a      	str	r2, [r3, #32]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40013400 	.word	0x40013400
 8005c58:	40014000 	.word	0x40014000
 8005c5c:	40014400 	.word	0x40014400
 8005c60:	40014800 	.word	0x40014800

08005c64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	051b      	lsls	r3, r3, #20
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a18      	ldr	r2, [pc, #96]	@ (8005d1c <TIM_OC6_SetConfig+0xb8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00f      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a17      	ldr	r2, [pc, #92]	@ (8005d20 <TIM_OC6_SetConfig+0xbc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a16      	ldr	r2, [pc, #88]	@ (8005d24 <TIM_OC6_SetConfig+0xc0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d007      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a15      	ldr	r2, [pc, #84]	@ (8005d28 <TIM_OC6_SetConfig+0xc4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_OC6_SetConfig+0x7c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a14      	ldr	r2, [pc, #80]	@ (8005d2c <TIM_OC6_SetConfig+0xc8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d109      	bne.n	8005cf4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	029b      	lsls	r3, r3, #10
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400
 8005d2c:	40014800 	.word	0x40014800

08005d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e065      	b.n	8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d004      	beq.n	8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2b      	ldr	r2, [pc, #172]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d108      	bne.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d018      	beq.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dbe:	d013      	beq.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a18      	ldr	r2, [pc, #96]	@ (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00e      	beq.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a17      	ldr	r2, [pc, #92]	@ (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d009      	beq.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a12      	ldr	r2, [pc, #72]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d004      	beq.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a13      	ldr	r2, [pc, #76]	@ (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d10c      	bne.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40013400 	.word	0x40013400
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40014000 	.word	0x40014000

08005e34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e44:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005e48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e6a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005e6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	4013      	ands	r3, r2
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	1d3b      	adds	r3, r7, #4
 8005ea2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b0a7      	sub	sp, #156	@ 0x9c
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	78db      	ldrb	r3, [r3, #3]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d81f      	bhi.n	8005f46 <USB_ActivateEndpoint+0x72>
 8005f06:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <USB_ActivateEndpoint+0x38>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f1d 	.word	0x08005f1d
 8005f10:	08005f39 	.word	0x08005f39
 8005f14:	08005f4f 	.word	0x08005f4f
 8005f18:	08005f2b 	.word	0x08005f2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f1c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f24:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005f28:	e012      	b.n	8005f50 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f2a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f2e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005f32:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005f36:	e00b      	b.n	8005f50 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f38:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f40:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005f44:	e004      	b.n	8005f50 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8005f4c:	e000      	b.n	8005f50 <USB_ActivateEndpoint+0x7c>
      break;
 8005f4e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	441a      	add	r2, r3
 8005f5a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	b21b      	sxth	r3, r3
 8005f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8a:	b21a      	sxth	r2, r3
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	b21b      	sxth	r3, r3
 8005f92:	4313      	orrs	r3, r2
 8005f94:	b21b      	sxth	r3, r3
 8005f96:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	441a      	add	r2, r3
 8005fa4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005fa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	7b1b      	ldrb	r3, [r3, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f040 8180 	bne.w	80062c6 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8084 	beq.w	80060d8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	00da      	lsls	r2, r3, #3
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	88db      	ldrh	r3, [r3, #6]
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	827b      	strh	r3, [r7, #18]
 8006012:	8a7b      	ldrh	r3, [r7, #18]
 8006014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <USB_ActivateEndpoint+0x180>
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800602e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006032:	823b      	strh	r3, [r7, #16]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	441a      	add	r2, r3
 800603e:	8a3b      	ldrh	r3, [r7, #16]
 8006040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800604c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006050:	b29b      	uxth	r3, r3
 8006052:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	78db      	ldrb	r3, [r3, #3]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d020      	beq.n	800609e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006072:	81bb      	strh	r3, [r7, #12]
 8006074:	89bb      	ldrh	r3, [r7, #12]
 8006076:	f083 0320 	eor.w	r3, r3, #32
 800607a:	81bb      	strh	r3, [r7, #12]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	441a      	add	r2, r3
 8006086:	89bb      	ldrh	r3, [r7, #12]
 8006088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800608c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006098:	b29b      	uxth	r3, r3
 800609a:	8013      	strh	r3, [r2, #0]
 800609c:	e3f9      	b.n	8006892 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060b4:	81fb      	strh	r3, [r7, #14]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	89fb      	ldrh	r3, [r7, #14]
 80060c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	8013      	strh	r3, [r2, #0]
 80060d6:	e3dc      	b.n	8006892 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	633b      	str	r3, [r7, #48]	@ 0x30
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	4413      	add	r3, r2
 80060ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	00da      	lsls	r2, r3, #3
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	4413      	add	r3, r2
 80060f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	88db      	ldrh	r3, [r3, #6]
 8006100:	085b      	lsrs	r3, r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611c:	4413      	add	r3, r2
 800611e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	00da      	lsls	r2, r3, #3
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	4413      	add	r3, r2
 800612a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800612e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800613a:	b29a      	uxth	r2, r3
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <USB_ActivateEndpoint+0x28a>
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006156:	b29a      	uxth	r2, r3
 8006158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	e041      	b.n	80061e2 <USB_ActivateEndpoint+0x30e>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b3e      	cmp	r3, #62	@ 0x3e
 8006164:	d81c      	bhi.n	80061a0 <USB_ActivateEndpoint+0x2cc>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <USB_ActivateEndpoint+0x2b2>
 800617c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006180:	3301      	adds	r3, #1
 8006182:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29a      	uxth	r2, r3
 800618c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006190:	b29b      	uxth	r3, r3
 8006192:	029b      	lsls	r3, r3, #10
 8006194:	b29b      	uxth	r3, r3
 8006196:	4313      	orrs	r3, r2
 8006198:	b29a      	uxth	r2, r3
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e020      	b.n	80061e2 <USB_ActivateEndpoint+0x30e>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d104      	bne.n	80061c0 <USB_ActivateEndpoint+0x2ec>
 80061b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061ba:	3b01      	subs	r3, #1
 80061bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	029b      	lsls	r3, r3, #10
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	4313      	orrs	r3, r2
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061dc:	b29a      	uxth	r2, r3
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	847b      	strh	r3, [r7, #34]	@ 0x22
 80061f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01b      	beq.n	8006232 <USB_ActivateEndpoint+0x35e>
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006210:	843b      	strh	r3, [r7, #32]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	441a      	add	r2, r3
 800621c:	8c3b      	ldrh	r3, [r7, #32]
 800621e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006226:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800622a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800622e:	b29b      	uxth	r3, r3
 8006230:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d124      	bne.n	8006284 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800624c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006250:	83bb      	strh	r3, [r7, #28]
 8006252:	8bbb      	ldrh	r3, [r7, #28]
 8006254:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006258:	83bb      	strh	r3, [r7, #28]
 800625a:	8bbb      	ldrh	r3, [r7, #28]
 800625c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006260:	83bb      	strh	r3, [r7, #28]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	441a      	add	r2, r3
 800626c:	8bbb      	ldrh	r3, [r7, #28]
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800627a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]
 8006282:	e306      	b.n	8006892 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629a:	83fb      	strh	r3, [r7, #30]
 800629c:	8bfb      	ldrh	r3, [r7, #30]
 800629e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062a2:	83fb      	strh	r3, [r7, #30]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	441a      	add	r2, r3
 80062ae:	8bfb      	ldrh	r3, [r7, #30]
 80062b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	8013      	strh	r3, [r2, #0]
 80062c4:	e2e5      	b.n	8006892 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	78db      	ldrb	r3, [r3, #3]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d11e      	bne.n	800630c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	441a      	add	r2, r3
 80062f2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80062f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062fe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006306:	b29b      	uxth	r3, r3
 8006308:	8013      	strh	r3, [r2, #0]
 800630a:	e01d      	b.n	8006348 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800631e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006322:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	441a      	add	r2, r3
 8006330:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006334:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006338:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800633c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006344:	b29b      	uxth	r3, r3
 8006346:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006352:	b29b      	uxth	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006358:	4413      	add	r3, r2
 800635a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	00da      	lsls	r2, r3, #3
 8006362:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006364:	4413      	add	r3, r2
 8006366:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800636a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	891b      	ldrh	r3, [r3, #8]
 8006370:	085b      	lsrs	r3, r3, #1
 8006372:	b29b      	uxth	r3, r3
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006386:	b29b      	uxth	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800638c:	4413      	add	r3, r2
 800638e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	00da      	lsls	r2, r3, #3
 8006396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006398:	4413      	add	r3, r2
 800639a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800639e:	673b      	str	r3, [r7, #112]	@ 0x70
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	895b      	ldrh	r3, [r3, #10]
 80063a4:	085b      	lsrs	r3, r3, #1
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f040 81af 	bne.w	8006718 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80063ca:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80063ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01d      	beq.n	8006412 <USB_ActivateEndpoint+0x53e>
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ec:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	441a      	add	r2, r3
 80063fa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80063fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006406:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800640a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800640e:	b29b      	uxth	r3, r3
 8006410:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006422:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01d      	beq.n	800646a <USB_ActivateEndpoint+0x596>
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006444:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	441a      	add	r2, r3
 8006452:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800645a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800645e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006462:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006466:	b29b      	uxth	r3, r3
 8006468:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	785b      	ldrb	r3, [r3, #1]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d16b      	bne.n	800654a <USB_ActivateEndpoint+0x676>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800647c:	b29b      	uxth	r3, r3
 800647e:	461a      	mov	r2, r3
 8006480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006482:	4413      	add	r3, r2
 8006484:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	00da      	lsls	r2, r3, #3
 800648c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800648e:	4413      	add	r3, r2
 8006490:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006494:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064a4:	801a      	strh	r2, [r3, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <USB_ActivateEndpoint+0x5f0>
 80064ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064bc:	b29a      	uxth	r2, r3
 80064be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064c0:	801a      	strh	r2, [r3, #0]
 80064c2:	e05d      	b.n	8006580 <USB_ActivateEndpoint+0x6ac>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80064ca:	d81c      	bhi.n	8006506 <USB_ActivateEndpoint+0x632>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <USB_ActivateEndpoint+0x618>
 80064e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064e6:	3301      	adds	r3, #1
 80064e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	029b      	lsls	r3, r3, #10
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	4313      	orrs	r3, r2
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	e03c      	b.n	8006580 <USB_ActivateEndpoint+0x6ac>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <USB_ActivateEndpoint+0x652>
 800651c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006520:	3b01      	subs	r3, #1
 8006522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29a      	uxth	r2, r3
 800652c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006530:	b29b      	uxth	r3, r3
 8006532:	029b      	lsls	r3, r3, #10
 8006534:	b29b      	uxth	r3, r3
 8006536:	4313      	orrs	r3, r2
 8006538:	b29b      	uxth	r3, r3
 800653a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006542:	b29a      	uxth	r2, r3
 8006544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	e01a      	b.n	8006580 <USB_ActivateEndpoint+0x6ac>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d116      	bne.n	8006580 <USB_ActivateEndpoint+0x6ac>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	657b      	str	r3, [r7, #84]	@ 0x54
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800655c:	b29b      	uxth	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006562:	4413      	add	r3, r2
 8006564:	657b      	str	r3, [r7, #84]	@ 0x54
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	00da      	lsls	r2, r3, #3
 800656c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800656e:	4413      	add	r3, r2
 8006570:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006574:	653b      	str	r3, [r7, #80]	@ 0x50
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	b29a      	uxth	r2, r3
 800657c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	647b      	str	r3, [r7, #68]	@ 0x44
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	785b      	ldrb	r3, [r3, #1]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d16b      	bne.n	8006664 <USB_ActivateEndpoint+0x790>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006596:	b29b      	uxth	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659c:	4413      	add	r3, r2
 800659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	00da      	lsls	r2, r3, #3
 80065a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a8:	4413      	add	r3, r2
 80065aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065be:	801a      	strh	r2, [r3, #0]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <USB_ActivateEndpoint+0x70a>
 80065c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	e05b      	b.n	8006696 <USB_ActivateEndpoint+0x7c2>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80065e4:	d81c      	bhi.n	8006620 <USB_ActivateEndpoint+0x74c>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <USB_ActivateEndpoint+0x732>
 80065fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006600:	3301      	adds	r3, #1
 8006602:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29a      	uxth	r2, r3
 800660c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006610:	b29b      	uxth	r3, r3
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	b29b      	uxth	r3, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	e03a      	b.n	8006696 <USB_ActivateEndpoint+0x7c2>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <USB_ActivateEndpoint+0x76c>
 8006636:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800663a:	3b01      	subs	r3, #1
 800663c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29a      	uxth	r2, r3
 8006646:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800664a:	b29b      	uxth	r3, r3
 800664c:	029b      	lsls	r3, r3, #10
 800664e:	b29b      	uxth	r3, r3
 8006650:	4313      	orrs	r3, r2
 8006652:	b29b      	uxth	r3, r3
 8006654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665c:	b29a      	uxth	r2, r3
 800665e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006660:	801a      	strh	r2, [r3, #0]
 8006662:	e018      	b.n	8006696 <USB_ActivateEndpoint+0x7c2>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d114      	bne.n	8006696 <USB_ActivateEndpoint+0x7c2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006672:	b29b      	uxth	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006678:	4413      	add	r3, r2
 800667a:	647b      	str	r3, [r7, #68]	@ 0x44
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	00da      	lsls	r2, r3, #3
 8006682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006684:	4413      	add	r3, r2
 8006686:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800668a:	643b      	str	r3, [r7, #64]	@ 0x40
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	b29a      	uxth	r2, r3
 8006692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006694:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80066ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80066b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80066bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	441a      	add	r2, r3
 8006700:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800670a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800670e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006712:	b29b      	uxth	r3, r3
 8006714:	8013      	strh	r3, [r2, #0]
 8006716:	e0bc      	b.n	8006892 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8006728:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800672c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01d      	beq.n	8006770 <USB_ActivateEndpoint+0x89c>
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	441a      	add	r2, r3
 8006758:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800675c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006760:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006764:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800676c:	b29b      	uxth	r3, r3
 800676e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006780:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01d      	beq.n	80067c8 <USB_ActivateEndpoint+0x8f4>
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	441a      	add	r2, r3
 80067b0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80067b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	78db      	ldrb	r3, [r3, #3]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d024      	beq.n	800681a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80067ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80067ee:	f083 0320 	eor.w	r3, r3, #32
 80067f2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	441a      	add	r2, r3
 8006800:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800680c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]
 8006818:	e01d      	b.n	8006856 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800682c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006830:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	441a      	add	r2, r3
 800683e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006842:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800684a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800684e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006852:	b29b      	uxth	r3, r3
 8006854:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	441a      	add	r2, r3
 800687a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800688a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006892:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006896:	4618      	mov	r0, r3
 8006898:	379c      	adds	r7, #156	@ 0x9c
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop

080068a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b08d      	sub	sp, #52	@ 0x34
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	7b1b      	ldrb	r3, [r3, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f040 808e 	bne.w	80069d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d044      	beq.n	800694a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	81bb      	strh	r3, [r7, #12]
 80068ce:	89bb      	ldrh	r3, [r7, #12]
 80068d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01b      	beq.n	8006910 <USB_DeactivateEndpoint+0x6c>
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ee:	817b      	strh	r3, [r7, #10]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	441a      	add	r2, r3
 80068fa:	897b      	ldrh	r3, [r7, #10]
 80068fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006908:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800690c:	b29b      	uxth	r3, r3
 800690e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006926:	813b      	strh	r3, [r7, #8]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	893b      	ldrh	r3, [r7, #8]
 8006934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006944:	b29b      	uxth	r3, r3
 8006946:	8013      	strh	r3, [r2, #0]
 8006948:	e192      	b.n	8006c70 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	827b      	strh	r3, [r7, #18]
 8006958:	8a7b      	ldrh	r3, [r7, #18]
 800695a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01b      	beq.n	800699a <USB_DeactivateEndpoint+0xf6>
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006978:	823b      	strh	r3, [r7, #16]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	441a      	add	r2, r3
 8006984:	8a3b      	ldrh	r3, [r7, #16]
 8006986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800698a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006996:	b29b      	uxth	r3, r3
 8006998:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b0:	81fb      	strh	r3, [r7, #14]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	441a      	add	r2, r3
 80069bc:	89fb      	ldrh	r3, [r7, #14]
 80069be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	8013      	strh	r3, [r2, #0]
 80069d2:	e14d      	b.n	8006c70 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f040 80a5 	bne.w	8006b28 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	843b      	strh	r3, [r7, #32]
 80069ec:	8c3b      	ldrh	r3, [r7, #32]
 80069ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d01b      	beq.n	8006a2e <USB_DeactivateEndpoint+0x18a>
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a0c:	83fb      	strh	r3, [r7, #30]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	441a      	add	r2, r3
 8006a18:	8bfb      	ldrh	r3, [r7, #30]
 8006a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	83bb      	strh	r3, [r7, #28]
 8006a3c:	8bbb      	ldrh	r3, [r7, #28]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01b      	beq.n	8006a7e <USB_DeactivateEndpoint+0x1da>
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5c:	837b      	strh	r3, [r7, #26]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	441a      	add	r2, r3
 8006a68:	8b7b      	ldrh	r3, [r7, #26]
 8006a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a94:	833b      	strh	r3, [r7, #24]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	441a      	add	r2, r3
 8006aa0:	8b3b      	ldrh	r3, [r7, #24]
 8006aa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006acc:	82fb      	strh	r3, [r7, #22]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	441a      	add	r2, r3
 8006ad8:	8afb      	ldrh	r3, [r7, #22]
 8006ada:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ade:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b04:	82bb      	strh	r3, [r7, #20]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	441a      	add	r2, r3
 8006b10:	8abb      	ldrh	r3, [r7, #20]
 8006b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	8013      	strh	r3, [r2, #0]
 8006b26:	e0a3      	b.n	8006c70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006b36:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01b      	beq.n	8006b78 <USB_DeactivateEndpoint+0x2d4>
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006b86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01b      	beq.n	8006bc8 <USB_DeactivateEndpoint+0x324>
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	441a      	add	r2, r3
 8006bb2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bde:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	441a      	add	r2, r3
 8006bea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c4e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	441a      	add	r2, r3
 8006c5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3734      	adds	r7, #52	@ 0x34
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b0ac      	sub	sp, #176	@ 0xb0
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	785b      	ldrb	r3, [r3, #1]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	f040 84ca 	bne.w	8007626 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d904      	bls.n	8006ca8 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ca6:	e003      	b.n	8006cb0 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	7b1b      	ldrb	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d122      	bne.n	8006cfe <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	6959      	ldr	r1, [r3, #20]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	88da      	ldrh	r2, [r3, #6]
 8006cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 febd 	bl	8007a46 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	4413      	add	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	00da      	lsls	r2, r3, #3
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	f000 bc6f 	b.w	80075dc <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	78db      	ldrb	r3, [r3, #3]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	f040 831e 	bne.w	8007344 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	f240 82cf 	bls.w	80072b4 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	441a      	add	r2, r3
 8006d3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006d3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d46:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6a1a      	ldr	r2, [r3, #32]
 8006d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d5a:	1ad2      	subs	r2, r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 814f 	beq.w	8007016 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d16b      	bne.n	8006e5c <USB_EPStartXfer+0x1de>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d94:	4413      	add	r3, r2
 8006d96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	00da      	lsls	r2, r3, #3
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	4413      	add	r3, r2
 8006da2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db6:	801a      	strh	r2, [r3, #0]
 8006db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <USB_EPStartXfer+0x158>
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	801a      	strh	r2, [r3, #0]
 8006dd4:	e05b      	b.n	8006e8e <USB_EPStartXfer+0x210>
 8006dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dda:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ddc:	d81c      	bhi.n	8006e18 <USB_EPStartXfer+0x19a>
 8006dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006de2:	085b      	lsrs	r3, r3, #1
 8006de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <USB_EPStartXfer+0x180>
 8006df4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006df8:	3301      	adds	r3, #1
 8006dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	029b      	lsls	r3, r3, #10
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	801a      	strh	r2, [r3, #0]
 8006e16:	e03a      	b.n	8006e8e <USB_EPStartXfer+0x210>
 8006e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d104      	bne.n	8006e38 <USB_EPStartXfer+0x1ba>
 8006e2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e32:	3b01      	subs	r3, #1
 8006e34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	029b      	lsls	r3, r3, #10
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	e018      	b.n	8006e8e <USB_EPStartXfer+0x210>
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d114      	bne.n	8006e8e <USB_EPStartXfer+0x210>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	4413      	add	r3, r2
 8006e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	00da      	lsls	r2, r3, #3
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	895b      	ldrh	r3, [r3, #10]
 8006e92:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6959      	ldr	r1, [r3, #20]
 8006e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fdce 	bl	8007a46 <USB_WritePMA>
            ep->xfer_buff += len;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eb2:	441a      	add	r2, r3
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	6a1a      	ldr	r2, [r3, #32]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d907      	bls.n	8006ed4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	6a1a      	ldr	r2, [r3, #32]
 8006ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ecc:	1ad2      	subs	r2, r2, r3
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	621a      	str	r2, [r3, #32]
 8006ed2:	e006      	b.n	8006ee2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d16b      	bne.n	8006fc2 <USB_EPStartXfer+0x344>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	4413      	add	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	00da      	lsls	r2, r3, #3
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	4413      	add	r3, r2
 8006f08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <USB_EPStartXfer+0x2be>
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	801a      	strh	r2, [r3, #0]
 8006f3a:	e05d      	b.n	8006ff8 <USB_EPStartXfer+0x37a>
 8006f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f40:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f42:	d81c      	bhi.n	8006f7e <USB_EPStartXfer+0x300>
 8006f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d004      	beq.n	8006f64 <USB_EPStartXfer+0x2e6>
 8006f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f5e:	3301      	adds	r3, #1
 8006f60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	029b      	lsls	r3, r3, #10
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	4313      	orrs	r3, r2
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	801a      	strh	r2, [r3, #0]
 8006f7c:	e03c      	b.n	8006ff8 <USB_EPStartXfer+0x37a>
 8006f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f82:	095b      	lsrs	r3, r3, #5
 8006f84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f8c:	f003 031f 	and.w	r3, r3, #31
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <USB_EPStartXfer+0x320>
 8006f94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	029b      	lsls	r3, r3, #10
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	801a      	strh	r2, [r3, #0]
 8006fc0:	e01a      	b.n	8006ff8 <USB_EPStartXfer+0x37a>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d116      	bne.n	8006ff8 <USB_EPStartXfer+0x37a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	623b      	str	r3, [r7, #32]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	4413      	add	r3, r2
 8006fdc:	623b      	str	r3, [r7, #32]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	00da      	lsls	r2, r3, #3
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fec:	61fb      	str	r3, [r7, #28]
 8006fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	891b      	ldrh	r3, [r3, #8]
 8006ffc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	6959      	ldr	r1, [r3, #20]
 8007004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007008:	b29b      	uxth	r3, r3
 800700a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fd19 	bl	8007a46 <USB_WritePMA>
 8007014:	e2e2      	b.n	80075dc <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d16b      	bne.n	80070f6 <USB_EPStartXfer+0x478>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007028:	b29b      	uxth	r3, r3
 800702a:	461a      	mov	r2, r3
 800702c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800702e:	4413      	add	r3, r2
 8007030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	00da      	lsls	r2, r3, #3
 8007038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800703a:	4413      	add	r3, r2
 800703c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007040:	647b      	str	r3, [r7, #68]	@ 0x44
 8007042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	b29b      	uxth	r3, r3
 8007048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800704c:	b29a      	uxth	r2, r3
 800704e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007050:	801a      	strh	r2, [r3, #0]
 8007052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <USB_EPStartXfer+0x3f2>
 800705a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007068:	b29a      	uxth	r2, r3
 800706a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	e05d      	b.n	800712c <USB_EPStartXfer+0x4ae>
 8007070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007074:	2b3e      	cmp	r3, #62	@ 0x3e
 8007076:	d81c      	bhi.n	80070b2 <USB_EPStartXfer+0x434>
 8007078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800707c:	085b      	lsrs	r3, r3, #1
 800707e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <USB_EPStartXfer+0x41a>
 800708e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007092:	3301      	adds	r3, #1
 8007094:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29a      	uxth	r2, r3
 800709e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	4313      	orrs	r3, r2
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	e03c      	b.n	800712c <USB_EPStartXfer+0x4ae>
 80070b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <USB_EPStartXfer+0x454>
 80070c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070cc:	3b01      	subs	r3, #1
 80070ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070dc:	b29b      	uxth	r3, r3
 80070de:	029b      	lsls	r3, r3, #10
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	4313      	orrs	r3, r2
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	e01a      	b.n	800712c <USB_EPStartXfer+0x4ae>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	785b      	ldrb	r3, [r3, #1]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d116      	bne.n	800712c <USB_EPStartXfer+0x4ae>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	653b      	str	r3, [r7, #80]	@ 0x50
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007108:	b29b      	uxth	r3, r3
 800710a:	461a      	mov	r2, r3
 800710c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800710e:	4413      	add	r3, r2
 8007110:	653b      	str	r3, [r7, #80]	@ 0x50
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	00da      	lsls	r2, r3, #3
 8007118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800711a:	4413      	add	r3, r2
 800711c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007120:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007126:	b29a      	uxth	r2, r3
 8007128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800712a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	891b      	ldrh	r3, [r3, #8]
 8007130:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	6959      	ldr	r1, [r3, #20]
 8007138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800713c:	b29b      	uxth	r3, r3
 800713e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fc7f 	bl	8007a46 <USB_WritePMA>
            ep->xfer_buff += len;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	695a      	ldr	r2, [r3, #20]
 800714c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007150:	441a      	add	r2, r3
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	6a1a      	ldr	r2, [r3, #32]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	d907      	bls.n	8007172 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	6a1a      	ldr	r2, [r3, #32]
 8007166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800716a:	1ad2      	subs	r2, r2, r3
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	621a      	str	r2, [r3, #32]
 8007170:	e006      	b.n	8007180 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2200      	movs	r2, #0
 800717e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	643b      	str	r3, [r7, #64]	@ 0x40
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	785b      	ldrb	r3, [r3, #1]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d16b      	bne.n	8007264 <USB_EPStartXfer+0x5e6>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719c:	4413      	add	r3, r2
 800719e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	00da      	lsls	r2, r3, #3
 80071a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a8:	4413      	add	r3, r2
 80071aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80071ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071be:	801a      	strh	r2, [r3, #0]
 80071c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <USB_EPStartXfer+0x560>
 80071c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071da:	801a      	strh	r2, [r3, #0]
 80071dc:	e05b      	b.n	8007296 <USB_EPStartXfer+0x618>
 80071de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80071e4:	d81c      	bhi.n	8007220 <USB_EPStartXfer+0x5a2>
 80071e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ea:	085b      	lsrs	r3, r3, #1
 80071ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <USB_EPStartXfer+0x588>
 80071fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007200:	3301      	adds	r3, #1
 8007202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29a      	uxth	r2, r3
 800720c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007210:	b29b      	uxth	r3, r3
 8007212:	029b      	lsls	r3, r3, #10
 8007214:	b29b      	uxth	r3, r3
 8007216:	4313      	orrs	r3, r2
 8007218:	b29a      	uxth	r2, r3
 800721a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800721c:	801a      	strh	r2, [r3, #0]
 800721e:	e03a      	b.n	8007296 <USB_EPStartXfer+0x618>
 8007220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007224:	095b      	lsrs	r3, r3, #5
 8007226:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800722a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800722e:	f003 031f 	and.w	r3, r3, #31
 8007232:	2b00      	cmp	r3, #0
 8007234:	d104      	bne.n	8007240 <USB_EPStartXfer+0x5c2>
 8007236:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800723a:	3b01      	subs	r3, #1
 800723c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29a      	uxth	r2, r3
 8007246:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800724a:	b29b      	uxth	r3, r3
 800724c:	029b      	lsls	r3, r3, #10
 800724e:	b29b      	uxth	r3, r3
 8007250:	4313      	orrs	r3, r2
 8007252:	b29b      	uxth	r3, r3
 8007254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725c:	b29a      	uxth	r2, r3
 800725e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007260:	801a      	strh	r2, [r3, #0]
 8007262:	e018      	b.n	8007296 <USB_EPStartXfer+0x618>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d114      	bne.n	8007296 <USB_EPStartXfer+0x618>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007272:	b29b      	uxth	r3, r3
 8007274:	461a      	mov	r2, r3
 8007276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007278:	4413      	add	r3, r2
 800727a:	643b      	str	r3, [r7, #64]	@ 0x40
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	00da      	lsls	r2, r3, #3
 8007282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007284:	4413      	add	r3, r2
 8007286:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800728c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007290:	b29a      	uxth	r2, r3
 8007292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007294:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	895b      	ldrh	r3, [r3, #10]
 800729a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6959      	ldr	r1, [r3, #20]
 80072a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fbca 	bl	8007a46 <USB_WritePMA>
 80072b2:	e193      	b.n	80075dc <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80072ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	441a      	add	r2, r3
 80072e0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80072e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007302:	b29b      	uxth	r3, r3
 8007304:	461a      	mov	r2, r3
 8007306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007308:	4413      	add	r3, r2
 800730a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	00da      	lsls	r2, r3, #3
 8007312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007314:	4413      	add	r3, r2
 8007316:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800731a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800731c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007320:	b29a      	uxth	r2, r3
 8007322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007324:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	891b      	ldrh	r3, [r3, #8]
 800732a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	6959      	ldr	r1, [r3, #20]
 8007332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007336:	b29b      	uxth	r3, r3
 8007338:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fb82 	bl	8007a46 <USB_WritePMA>
 8007342:	e14b      	b.n	80075dc <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	6a1a      	ldr	r2, [r3, #32]
 8007348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800734c:	1ad2      	subs	r2, r2, r3
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 809a 	beq.w	800749e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	673b      	str	r3, [r7, #112]	@ 0x70
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	785b      	ldrb	r3, [r3, #1]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d16b      	bne.n	800744e <USB_EPStartXfer+0x7d0>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007380:	b29b      	uxth	r3, r3
 8007382:	461a      	mov	r2, r3
 8007384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007386:	4413      	add	r3, r2
 8007388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	00da      	lsls	r2, r3, #3
 8007390:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007392:	4413      	add	r3, r2
 8007394:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007398:	667b      	str	r3, [r7, #100]	@ 0x64
 800739a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10a      	bne.n	80073c8 <USB_EPStartXfer+0x74a>
 80073b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	e05b      	b.n	8007480 <USB_EPStartXfer+0x802>
 80073c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80073ce:	d81c      	bhi.n	800740a <USB_EPStartXfer+0x78c>
 80073d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073d4:	085b      	lsrs	r3, r3, #1
 80073d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <USB_EPStartXfer+0x772>
 80073e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073ea:	3301      	adds	r3, #1
 80073ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	029b      	lsls	r3, r3, #10
 80073fe:	b29b      	uxth	r3, r3
 8007400:	4313      	orrs	r3, r2
 8007402:	b29a      	uxth	r2, r3
 8007404:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007406:	801a      	strh	r2, [r3, #0]
 8007408:	e03a      	b.n	8007480 <USB_EPStartXfer+0x802>
 800740a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007418:	f003 031f 	and.w	r3, r3, #31
 800741c:	2b00      	cmp	r3, #0
 800741e:	d104      	bne.n	800742a <USB_EPStartXfer+0x7ac>
 8007420:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007424:	3b01      	subs	r3, #1
 8007426:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800742a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29a      	uxth	r2, r3
 8007430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007434:	b29b      	uxth	r3, r3
 8007436:	029b      	lsls	r3, r3, #10
 8007438:	b29b      	uxth	r3, r3
 800743a:	4313      	orrs	r3, r2
 800743c:	b29b      	uxth	r3, r3
 800743e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007446:	b29a      	uxth	r2, r3
 8007448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800744a:	801a      	strh	r2, [r3, #0]
 800744c:	e018      	b.n	8007480 <USB_EPStartXfer+0x802>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	785b      	ldrb	r3, [r3, #1]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d114      	bne.n	8007480 <USB_EPStartXfer+0x802>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800745c:	b29b      	uxth	r3, r3
 800745e:	461a      	mov	r2, r3
 8007460:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007462:	4413      	add	r3, r2
 8007464:	673b      	str	r3, [r7, #112]	@ 0x70
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	00da      	lsls	r2, r3, #3
 800746c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800746e:	4413      	add	r3, r2
 8007470:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007474:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800747a:	b29a      	uxth	r2, r3
 800747c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800747e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	895b      	ldrh	r3, [r3, #10]
 8007484:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	6959      	ldr	r1, [r3, #20]
 800748c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007490:	b29b      	uxth	r3, r3
 8007492:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fad5 	bl	8007a46 <USB_WritePMA>
 800749c:	e09e      	b.n	80075dc <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d16b      	bne.n	800757e <USB_EPStartXfer+0x900>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074b6:	4413      	add	r3, r2
 80074b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	00da      	lsls	r2, r3, #3
 80074c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074c2:	4413      	add	r3, r2
 80074c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10a      	bne.n	80074f8 <USB_EPStartXfer+0x87a>
 80074e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	e063      	b.n	80075c0 <USB_EPStartXfer+0x942>
 80074f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80074fe:	d81c      	bhi.n	800753a <USB_EPStartXfer+0x8bc>
 8007500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800750a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d004      	beq.n	8007520 <USB_EPStartXfer+0x8a2>
 8007516:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800751a:	3301      	adds	r3, #1
 800751c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007520:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	b29a      	uxth	r2, r3
 8007526:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800752a:	b29b      	uxth	r3, r3
 800752c:	029b      	lsls	r3, r3, #10
 800752e:	b29b      	uxth	r3, r3
 8007530:	4313      	orrs	r3, r2
 8007532:	b29a      	uxth	r2, r3
 8007534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007536:	801a      	strh	r2, [r3, #0]
 8007538:	e042      	b.n	80075c0 <USB_EPStartXfer+0x942>
 800753a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800753e:	095b      	lsrs	r3, r3, #5
 8007540:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <USB_EPStartXfer+0x8dc>
 8007550:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007554:	3b01      	subs	r3, #1
 8007556:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800755a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29a      	uxth	r2, r3
 8007560:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007564:	b29b      	uxth	r3, r3
 8007566:	029b      	lsls	r3, r3, #10
 8007568:	b29b      	uxth	r3, r3
 800756a:	4313      	orrs	r3, r2
 800756c:	b29b      	uxth	r3, r3
 800756e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007576:	b29a      	uxth	r2, r3
 8007578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	e020      	b.n	80075c0 <USB_EPStartXfer+0x942>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	785b      	ldrb	r3, [r3, #1]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d11c      	bne.n	80075c0 <USB_EPStartXfer+0x942>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007592:	b29b      	uxth	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800759a:	4413      	add	r3, r2
 800759c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	00da      	lsls	r2, r3, #3
 80075a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075aa:	4413      	add	r3, r2
 80075ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80075be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	891b      	ldrh	r3, [r3, #8]
 80075c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	6959      	ldr	r1, [r3, #20]
 80075cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa35 	bl	8007a46 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075f2:	817b      	strh	r3, [r7, #10]
 80075f4:	897b      	ldrh	r3, [r7, #10]
 80075f6:	f083 0310 	eor.w	r3, r3, #16
 80075fa:	817b      	strh	r3, [r7, #10]
 80075fc:	897b      	ldrh	r3, [r7, #10]
 80075fe:	f083 0320 	eor.w	r3, r3, #32
 8007602:	817b      	strh	r3, [r7, #10]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	441a      	add	r2, r3
 800760e:	897b      	ldrh	r3, [r7, #10]
 8007610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800761c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007620:	b29b      	uxth	r3, r3
 8007622:	8013      	strh	r3, [r2, #0]
 8007624:	e0d5      	b.n	80077d2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	7b1b      	ldrb	r3, [r3, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d156      	bne.n	80076dc <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d122      	bne.n	800767c <USB_EPStartXfer+0x9fe>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	78db      	ldrb	r3, [r3, #3]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d11e      	bne.n	800767c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007654:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	441a      	add	r2, r3
 8007662:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800766a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800766e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007676:	b29b      	uxth	r3, r3
 8007678:	8013      	strh	r3, [r2, #0]
 800767a:	e01d      	b.n	80076b8 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	b29b      	uxth	r3, r3
 800768a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800768e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007692:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	441a      	add	r2, r3
 80076a0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80076a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	699a      	ldr	r2, [r3, #24]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d907      	bls.n	80076d4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	699a      	ldr	r2, [r3, #24]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	1ad2      	subs	r2, r2, r3
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	619a      	str	r2, [r3, #24]
 80076d2:	e054      	b.n	800777e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2200      	movs	r2, #0
 80076d8:	619a      	str	r2, [r3, #24]
 80076da:	e050      	b.n	800777e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	78db      	ldrb	r3, [r3, #3]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d142      	bne.n	800776a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d048      	beq.n	800777e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <USB_EPStartXfer+0xa96>
 8007708:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800770c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10b      	bne.n	800772c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007714:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800771c:	2b00      	cmp	r3, #0
 800771e:	d12e      	bne.n	800777e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007720:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d128      	bne.n	800777e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800773e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007742:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	441a      	add	r2, r3
 8007750:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800775c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007760:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007764:	b29b      	uxth	r3, r3
 8007766:	8013      	strh	r3, [r2, #0]
 8007768:	e009      	b.n	800777e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	78db      	ldrb	r3, [r3, #3]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d103      	bne.n	800777a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2200      	movs	r2, #0
 8007776:	619a      	str	r2, [r3, #24]
 8007778:	e001      	b.n	800777e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e02a      	b.n	80077d4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007794:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007798:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800779c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80077a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80077a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80077a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80077ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	441a      	add	r2, r3
 80077ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80077be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	37b0      	adds	r7, #176	@ 0xb0
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d020      	beq.n	8007830 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007804:	81bb      	strh	r3, [r7, #12]
 8007806:	89bb      	ldrh	r3, [r7, #12]
 8007808:	f083 0310 	eor.w	r3, r3, #16
 800780c:	81bb      	strh	r3, [r7, #12]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	441a      	add	r2, r3
 8007818:	89bb      	ldrh	r3, [r7, #12]
 800781a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800781e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800782a:	b29b      	uxth	r3, r3
 800782c:	8013      	strh	r3, [r2, #0]
 800782e:	e01f      	b.n	8007870 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007846:	81fb      	strh	r3, [r7, #14]
 8007848:	89fb      	ldrh	r3, [r7, #14]
 800784a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800784e:	81fb      	strh	r3, [r7, #14]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	441a      	add	r2, r3
 800785a:	89fb      	ldrh	r3, [r7, #14]
 800785c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800786c:	b29b      	uxth	r3, r3
 800786e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800787e:	b480      	push	{r7}
 8007880:	b087      	sub	sp, #28
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d04c      	beq.n	800792a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	823b      	strh	r3, [r7, #16]
 800789e:	8a3b      	ldrh	r3, [r7, #16]
 80078a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01b      	beq.n	80078e0 <USB_EPClearStall+0x62>
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078be:	81fb      	strh	r3, [r7, #14]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	441a      	add	r2, r3
 80078ca:	89fb      	ldrh	r3, [r7, #14]
 80078cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80078dc:	b29b      	uxth	r3, r3
 80078de:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	78db      	ldrb	r3, [r3, #3]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d06c      	beq.n	80079c2 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078fe:	81bb      	strh	r3, [r7, #12]
 8007900:	89bb      	ldrh	r3, [r7, #12]
 8007902:	f083 0320 	eor.w	r3, r3, #32
 8007906:	81bb      	strh	r3, [r7, #12]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	441a      	add	r2, r3
 8007912:	89bb      	ldrh	r3, [r7, #12]
 8007914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800791c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007924:	b29b      	uxth	r3, r3
 8007926:	8013      	strh	r3, [r2, #0]
 8007928:	e04b      	b.n	80079c2 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	82fb      	strh	r3, [r7, #22]
 8007938:	8afb      	ldrh	r3, [r7, #22]
 800793a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01b      	beq.n	800797a <USB_EPClearStall+0xfc>
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	b29b      	uxth	r3, r3
 8007950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007958:	82bb      	strh	r3, [r7, #20]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	441a      	add	r2, r3
 8007964:	8abb      	ldrh	r3, [r7, #20]
 8007966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800796a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800796e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007976:	b29b      	uxth	r3, r3
 8007978:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	b29b      	uxth	r3, r3
 8007988:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800798c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007990:	827b      	strh	r3, [r7, #18]
 8007992:	8a7b      	ldrh	r3, [r7, #18]
 8007994:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007998:	827b      	strh	r3, [r7, #18]
 800799a:	8a7b      	ldrh	r3, [r7, #18]
 800799c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80079a0:	827b      	strh	r3, [r7, #18]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	441a      	add	r2, r3
 80079ac:	8a7b      	ldrh	r3, [r7, #18]
 80079ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079be:	b29b      	uxth	r3, r3
 80079c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d103      	bne.n	80079ea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2280      	movs	r2, #128	@ 0x80
 80079e6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a38:	68fb      	ldr	r3, [r7, #12]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b08b      	sub	sp, #44	@ 0x2c
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	4611      	mov	r1, r2
 8007a52:	461a      	mov	r2, r3
 8007a54:	460b      	mov	r3, r1
 8007a56:	80fb      	strh	r3, [r7, #6]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a5c:	88bb      	ldrh	r3, [r7, #4]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a6c:	88fa      	ldrh	r2, [r7, #6]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a76:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a7c:	e01c      	b.n	8007ab8 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	3301      	adds	r3, #1
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	b21b      	sxth	r3, r3
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	b21a      	sxth	r2, r3
 8007a90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	b21b      	sxth	r3, r3
 8007a98:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	8a7a      	ldrh	r2, [r7, #18]
 8007a9e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1df      	bne.n	8007a7e <USB_WritePMA+0x38>
  }
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	372c      	adds	r7, #44	@ 0x2c
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b08b      	sub	sp, #44	@ 0x2c
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	461a      	mov	r2, r3
 8007ada:	460b      	mov	r3, r1
 8007adc:	80fb      	strh	r3, [r7, #6]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ae2:	88bb      	ldrh	r3, [r7, #4]
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007af2:	88fa      	ldrh	r2, [r7, #6]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007afc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b02:	e018      	b.n	8007b36 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	3302      	adds	r3, #2
 8007b10:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	0a1b      	lsrs	r3, r3, #8
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	3b01      	subs	r3, #1
 8007b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e3      	bne.n	8007b04 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007b3c:	88bb      	ldrh	r3, [r7, #4]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d007      	beq.n	8007b58 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	701a      	strb	r2, [r3, #0]
  }
}
 8007b58:	bf00      	nop
 8007b5a:	372c      	adds	r7, #44	@ 0x2c
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b70:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b74:	f002 f8a6 	bl	8009cc4 <USBD_static_malloc>
 8007b78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d105      	bne.n	8007b8c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e066      	b.n	8007c5a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7c1b      	ldrb	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d119      	bne.n	8007bd0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	2181      	movs	r1, #129	@ 0x81
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 ff34 	bl	8009a12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007bb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 ff2a 	bl	8009a12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2210      	movs	r2, #16
 8007bca:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8007bce:	e016      	b.n	8007bfe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bd0:	2340      	movs	r3, #64	@ 0x40
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	2181      	movs	r1, #129	@ 0x81
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 ff1b 	bl	8009a12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007be2:	2340      	movs	r3, #64	@ 0x40
 8007be4:	2202      	movs	r2, #2
 8007be6:	2101      	movs	r1, #1
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 ff12 	bl	8009a12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2210      	movs	r2, #16
 8007bfa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bfe:	2308      	movs	r3, #8
 8007c00:	2203      	movs	r2, #3
 8007c02:	2182      	movs	r1, #130	@ 0x82
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 ff04 	bl	8009a12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	7c1b      	ldrb	r3, [r3, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d109      	bne.n	8007c48 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c3e:	2101      	movs	r1, #1
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 ffd5 	bl	8009bf0 <USBD_LL_PrepareReceive>
 8007c46:	e007      	b.n	8007c58 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c4e:	2340      	movs	r3, #64	@ 0x40
 8007c50:	2101      	movs	r1, #1
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 ffcc 	bl	8009bf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c6e:	2181      	movs	r1, #129	@ 0x81
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 fef4 	bl	8009a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f001 feed 	bl	8009a5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c8c:	2182      	movs	r1, #130	@ 0x82
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 fee5 	bl	8009a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00e      	beq.n	8007ccc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f002 f80e 	bl	8009ce0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ce8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e0af      	b.n	8007e60 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d03f      	beq.n	8007d8c <USBD_CDC_Setup+0xb4>
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	f040 809f 	bne.w	8007e50 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	88db      	ldrh	r3, [r3, #6]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d02e      	beq.n	8007d78 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	b25b      	sxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	da16      	bge.n	8007d52 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007d30:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	88d2      	ldrh	r2, [r2, #6]
 8007d36:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	88db      	ldrh	r3, [r3, #6]
 8007d3c:	2b07      	cmp	r3, #7
 8007d3e:	bf28      	it	cs
 8007d40:	2307      	movcs	r3, #7
 8007d42:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	89fa      	ldrh	r2, [r7, #14]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f001 fa9f 	bl	800928e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007d50:	e085      	b.n	8007e5e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	785a      	ldrb	r2, [r3, #1]
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	88db      	ldrh	r3, [r3, #6]
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d68:	6939      	ldr	r1, [r7, #16]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	88db      	ldrh	r3, [r3, #6]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fab8 	bl	80092e6 <USBD_CtlPrepareRx>
      break;
 8007d76:	e072      	b.n	8007e5e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	7850      	ldrb	r0, [r2, #1]
 8007d84:	2200      	movs	r2, #0
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	4798      	blx	r3
      break;
 8007d8a:	e068      	b.n	8007e5e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	2b0b      	cmp	r3, #11
 8007d92:	d852      	bhi.n	8007e3a <USBD_CDC_Setup+0x162>
 8007d94:	a201      	add	r2, pc, #4	@ (adr r2, 8007d9c <USBD_CDC_Setup+0xc4>)
 8007d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9a:	bf00      	nop
 8007d9c:	08007dcd 	.word	0x08007dcd
 8007da0:	08007e49 	.word	0x08007e49
 8007da4:	08007e3b 	.word	0x08007e3b
 8007da8:	08007e3b 	.word	0x08007e3b
 8007dac:	08007e3b 	.word	0x08007e3b
 8007db0:	08007e3b 	.word	0x08007e3b
 8007db4:	08007e3b 	.word	0x08007e3b
 8007db8:	08007e3b 	.word	0x08007e3b
 8007dbc:	08007e3b 	.word	0x08007e3b
 8007dc0:	08007e3b 	.word	0x08007e3b
 8007dc4:	08007df7 	.word	0x08007df7
 8007dc8:	08007e21 	.word	0x08007e21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d107      	bne.n	8007de8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007dd8:	f107 030a 	add.w	r3, r7, #10
 8007ddc:	2202      	movs	r2, #2
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 fa54 	bl	800928e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007de6:	e032      	b.n	8007e4e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 f9de 	bl	80091ac <USBD_CtlError>
            ret = USBD_FAIL;
 8007df0:	2303      	movs	r3, #3
 8007df2:	75fb      	strb	r3, [r7, #23]
          break;
 8007df4:	e02b      	b.n	8007e4e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	d107      	bne.n	8007e12 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e02:	f107 030d 	add.w	r3, r7, #13
 8007e06:	2201      	movs	r2, #1
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 fa3f 	bl	800928e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e10:	e01d      	b.n	8007e4e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 f9c9 	bl	80091ac <USBD_CtlError>
            ret = USBD_FAIL;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e1e:	e016      	b.n	8007e4e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d00f      	beq.n	8007e4c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 f9bc 	bl	80091ac <USBD_CtlError>
            ret = USBD_FAIL;
 8007e34:	2303      	movs	r3, #3
 8007e36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e38:	e008      	b.n	8007e4c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 f9b5 	bl	80091ac <USBD_CtlError>
          ret = USBD_FAIL;
 8007e42:	2303      	movs	r3, #3
 8007e44:	75fb      	strb	r3, [r7, #23]
          break;
 8007e46:	e002      	b.n	8007e4e <USBD_CDC_Setup+0x176>
          break;
 8007e48:	bf00      	nop
 8007e4a:	e008      	b.n	8007e5e <USBD_CDC_Setup+0x186>
          break;
 8007e4c:	bf00      	nop
      }
      break;
 8007e4e:	e006      	b.n	8007e5e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 f9aa 	bl	80091ac <USBD_CtlError>
      ret = USBD_FAIL;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8007e7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e04f      	b.n	8007f2a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	3318      	adds	r3, #24
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d029      	beq.n	8007efc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007ea8:	78fa      	ldrb	r2, [r7, #3]
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	4613      	mov	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	3318      	adds	r3, #24
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	78f9      	ldrb	r1, [r7, #3]
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	440b      	add	r3, r1
 8007ec4:	00db      	lsls	r3, r3, #3
 8007ec6:	4403      	add	r3, r0
 8007ec8:	3320      	adds	r3, #32
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ed0:	fb01 f303 	mul.w	r3, r1, r3
 8007ed4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d110      	bne.n	8007efc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	440b      	add	r3, r1
 8007ee8:	3318      	adds	r3, #24
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007eee:	78f9      	ldrb	r1, [r7, #3]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 fe5a 	bl	8009bae <USBD_LL_Transmit>
 8007efa:	e015      	b.n	8007f28 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007f24:	78fa      	ldrb	r2, [r7, #3]
 8007f26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e015      	b.n	8007f80 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 fe6a 	bl	8009c32 <USBD_LL_GetRxDataSize>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f96:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e01a      	b.n	8007fd8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d014      	beq.n	8007fd6 <USBD_CDC_EP0_RxReady+0x4e>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007fb2:	2bff      	cmp	r3, #255	@ 0xff
 8007fb4:	d00f      	beq.n	8007fd6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8007fc4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fcc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	22ff      	movs	r2, #255	@ 0xff
 8007fd2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2243      	movs	r2, #67	@ 0x43
 8007fec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007fee:	4b03      	ldr	r3, [pc, #12]	@ (8007ffc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	20000094 	.word	0x20000094

08008000 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2243      	movs	r2, #67	@ 0x43
 800800c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800800e:	4b03      	ldr	r3, [pc, #12]	@ (800801c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20000050 	.word	0x20000050

08008020 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2243      	movs	r2, #67	@ 0x43
 800802c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800802e:	4b03      	ldr	r3, [pc, #12]	@ (800803c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	200000d8 	.word	0x200000d8

08008040 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	220a      	movs	r2, #10
 800804c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800804e:	4b03      	ldr	r3, [pc, #12]	@ (800805c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	2000000c 	.word	0x2000000c

08008060 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008070:	2303      	movs	r3, #3
 8008072:	e004      	b.n	800807e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800808a:	b480      	push	{r7}
 800808c:	b087      	sub	sp, #28
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800809c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e008      	b.n	80080ba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80080de:	2303      	movs	r3, #3
 80080e0:	e004      	b.n	80080ec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008106:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008112:	2303      	movs	r3, #3
 8008114:	e016      	b.n	8008144 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	7c1b      	ldrb	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008124:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008128:	2101      	movs	r1, #1
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f001 fd60 	bl	8009bf0 <USBD_LL_PrepareReceive>
 8008130:	e007      	b.n	8008142 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008138:	2340      	movs	r3, #64	@ 0x40
 800813a:	2101      	movs	r1, #1
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 fd57 	bl	8009bf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4613      	mov	r3, r2
 8008158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008160:	2303      	movs	r3, #3
 8008162:	e01f      	b.n	80081a4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	79fa      	ldrb	r2, [r7, #7]
 8008196:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f001 fbbf 	bl	800991c <USBD_LL_Init>
 800819e:	4603      	mov	r3, r0
 80081a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e016      	b.n	80081f2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e0:	f107 020e 	add.w	r2, r7, #14
 80081e4:	4610      	mov	r0, r2
 80081e6:	4798      	blx	r3
 80081e8:	4602      	mov	r2, r0
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 fbea 	bl	80099dc <USBD_LL_Start>
 8008208:	4603      	mov	r3, r0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800823e:	2b00      	cmp	r3, #0
 8008240:	d009      	beq.n	8008256 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	4611      	mov	r1, r2
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
 8008252:	4603      	mov	r3, r0
 8008254:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	78fa      	ldrb	r2, [r7, #3]
 8008280:	4611      	mov	r1, r2
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	4798      	blx	r3
  }

  return USBD_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 ff48 	bl	8009138 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082c4:	f003 031f 	and.w	r3, r3, #31
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d01a      	beq.n	8008302 <USBD_LL_SetupStage+0x72>
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d822      	bhi.n	8008316 <USBD_LL_SetupStage+0x86>
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <USBD_LL_SetupStage+0x4a>
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d00a      	beq.n	80082ee <USBD_LL_SetupStage+0x5e>
 80082d8:	e01d      	b.n	8008316 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f9f0 	bl	80086c8 <USBD_StdDevReq>
 80082e8:	4603      	mov	r3, r0
 80082ea:	73fb      	strb	r3, [r7, #15]
      break;
 80082ec:	e020      	b.n	8008330 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fa54 	bl	80087a4 <USBD_StdItfReq>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008300:	e016      	b.n	8008330 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa93 	bl	8008836 <USBD_StdEPReq>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]
      break;
 8008314:	e00c      	b.n	8008330 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800831c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008320:	b2db      	uxtb	r3, r3
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fbb9 	bl	8009a9c <USBD_LL_StallEP>
 800832a:	4603      	mov	r3, r0
 800832c:	73fb      	strb	r3, [r7, #15]
      break;
 800832e:	bf00      	nop
  }

  return ret;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b086      	sub	sp, #24
 800833e:	af00      	add	r7, sp, #0
 8008340:	60f8      	str	r0, [r7, #12]
 8008342:	460b      	mov	r3, r1
 8008344:	607a      	str	r2, [r7, #4]
 8008346:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008348:	7afb      	ldrb	r3, [r7, #11]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d138      	bne.n	80083c0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008354:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800835c:	2b03      	cmp	r3, #3
 800835e:	d14a      	bne.n	80083f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	429a      	cmp	r2, r3
 800836a:	d913      	bls.n	8008394 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	1ad2      	subs	r2, r2, r3
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	4293      	cmp	r3, r2
 8008384:	bf28      	it	cs
 8008386:	4613      	movcs	r3, r2
 8008388:	461a      	mov	r2, r3
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 ffc7 	bl	8009320 <USBD_CtlContinueRx>
 8008392:	e030      	b.n	80083f6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b03      	cmp	r3, #3
 800839e:	d10b      	bne.n	80083b8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 ffc2 	bl	8009342 <USBD_CtlSendStatus>
 80083be:	e01a      	b.n	80083f6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d114      	bne.n	80083f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00e      	beq.n	80083f6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	7afa      	ldrb	r2, [r7, #11]
 80083e2:	4611      	mov	r1, r2
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	4798      	blx	r3
 80083e8:	4603      	mov	r3, r0
 80083ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	e000      	b.n	80083f8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	460b      	mov	r3, r1
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800840e:	7afb      	ldrb	r3, [r7, #11]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d16b      	bne.n	80084ec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3314      	adds	r3, #20
 8008418:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008420:	2b02      	cmp	r3, #2
 8008422:	d156      	bne.n	80084d2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	429a      	cmp	r2, r3
 800842e:	d914      	bls.n	800845a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	1ad2      	subs	r2, r2, r3
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	461a      	mov	r2, r3
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 ff3c 	bl	80092c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800844c:	2300      	movs	r3, #0
 800844e:	2200      	movs	r2, #0
 8008450:	2100      	movs	r1, #0
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f001 fbcc 	bl	8009bf0 <USBD_LL_PrepareReceive>
 8008458:	e03b      	b.n	80084d2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	68da      	ldr	r2, [r3, #12]
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	429a      	cmp	r2, r3
 8008464:	d11c      	bne.n	80084a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800846e:	429a      	cmp	r2, r3
 8008470:	d316      	bcc.n	80084a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800847c:	429a      	cmp	r2, r3
 800847e:	d20f      	bcs.n	80084a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008480:	2200      	movs	r2, #0
 8008482:	2100      	movs	r1, #0
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 ff1d 	bl	80092c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008492:	2300      	movs	r3, #0
 8008494:	2200      	movs	r2, #0
 8008496:	2100      	movs	r1, #0
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f001 fba9 	bl	8009bf0 <USBD_LL_PrepareReceive>
 800849e:	e018      	b.n	80084d2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d10b      	bne.n	80084c4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d005      	beq.n	80084c4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084c4:	2180      	movs	r1, #128	@ 0x80
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f001 fae8 	bl	8009a9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 ff4b 	bl	8009368 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d122      	bne.n	8008522 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7ff fe98 	bl	8008212 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80084ea:	e01a      	b.n	8008522 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	d114      	bne.n	8008522 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00e      	beq.n	8008522 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	7afa      	ldrb	r2, [r7, #11]
 800850e:	4611      	mov	r1, r2
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	4798      	blx	r3
 8008514:	4603      	mov	r3, r0
 8008516:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008518:	7dfb      	ldrb	r3, [r7, #23]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800851e:	7dfb      	ldrb	r3, [r7, #23]
 8008520:	e000      	b.n	8008524 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800855c:	2303      	movs	r3, #3
 800855e:	e02f      	b.n	80085c0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00f      	beq.n	800858a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d009      	beq.n	800858a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	6852      	ldr	r2, [r2, #4]
 8008582:	b2d2      	uxtb	r2, r2
 8008584:	4611      	mov	r1, r2
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800858a:	2340      	movs	r3, #64	@ 0x40
 800858c:	2200      	movs	r2, #0
 800858e:	2100      	movs	r1, #0
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 fa3e 	bl	8009a12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2240      	movs	r2, #64	@ 0x40
 80085a2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085a6:	2340      	movs	r3, #64	@ 0x40
 80085a8:	2200      	movs	r2, #0
 80085aa:	2180      	movs	r1, #128	@ 0x80
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 fa30 	bl	8009a12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2240      	movs	r2, #64	@ 0x40
 80085bc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	78fa      	ldrb	r2, [r7, #3]
 80085d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2204      	movs	r2, #4
 8008602:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b04      	cmp	r3, #4
 8008626:	d106      	bne.n	8008636 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800862e:	b2da      	uxtb	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	e012      	b.n	8008680 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b03      	cmp	r3, #3
 8008664:	d10b      	bne.n	800867e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	3301      	adds	r3, #1
 800869e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80086aa:	021b      	lsls	r3, r3, #8
 80086ac:	b21a      	sxth	r2, r3
 80086ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	b21b      	sxth	r3, r3
 80086b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086b8:	89fb      	ldrh	r3, [r7, #14]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
	...

080086c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086de:	2b40      	cmp	r3, #64	@ 0x40
 80086e0:	d005      	beq.n	80086ee <USBD_StdDevReq+0x26>
 80086e2:	2b40      	cmp	r3, #64	@ 0x40
 80086e4:	d853      	bhi.n	800878e <USBD_StdDevReq+0xc6>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00b      	beq.n	8008702 <USBD_StdDevReq+0x3a>
 80086ea:	2b20      	cmp	r3, #32
 80086ec:	d14f      	bne.n	800878e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	4798      	blx	r3
 80086fc:	4603      	mov	r3, r0
 80086fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008700:	e04a      	b.n	8008798 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	2b09      	cmp	r3, #9
 8008708:	d83b      	bhi.n	8008782 <USBD_StdDevReq+0xba>
 800870a:	a201      	add	r2, pc, #4	@ (adr r2, 8008710 <USBD_StdDevReq+0x48>)
 800870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008710:	08008765 	.word	0x08008765
 8008714:	08008779 	.word	0x08008779
 8008718:	08008783 	.word	0x08008783
 800871c:	0800876f 	.word	0x0800876f
 8008720:	08008783 	.word	0x08008783
 8008724:	08008743 	.word	0x08008743
 8008728:	08008739 	.word	0x08008739
 800872c:	08008783 	.word	0x08008783
 8008730:	0800875b 	.word	0x0800875b
 8008734:	0800874d 	.word	0x0800874d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f9de 	bl	8008afc <USBD_GetDescriptor>
          break;
 8008740:	e024      	b.n	800878c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fb6d 	bl	8008e24 <USBD_SetAddress>
          break;
 800874a:	e01f      	b.n	800878c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fbac 	bl	8008eac <USBD_SetConfig>
 8008754:	4603      	mov	r3, r0
 8008756:	73fb      	strb	r3, [r7, #15]
          break;
 8008758:	e018      	b.n	800878c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fc4b 	bl	8008ff8 <USBD_GetConfig>
          break;
 8008762:	e013      	b.n	800878c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fc7c 	bl	8009064 <USBD_GetStatus>
          break;
 800876c:	e00e      	b.n	800878c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fcab 	bl	80090cc <USBD_SetFeature>
          break;
 8008776:	e009      	b.n	800878c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fcba 	bl	80090f4 <USBD_ClrFeature>
          break;
 8008780:	e004      	b.n	800878c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fd11 	bl	80091ac <USBD_CtlError>
          break;
 800878a:	bf00      	nop
      }
      break;
 800878c:	e004      	b.n	8008798 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fd0b 	bl	80091ac <USBD_CtlError>
      break;
 8008796:	bf00      	nop
  }

  return ret;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop

080087a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087ba:	2b40      	cmp	r3, #64	@ 0x40
 80087bc:	d005      	beq.n	80087ca <USBD_StdItfReq+0x26>
 80087be:	2b40      	cmp	r3, #64	@ 0x40
 80087c0:	d82f      	bhi.n	8008822 <USBD_StdItfReq+0x7e>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <USBD_StdItfReq+0x26>
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d12b      	bne.n	8008822 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d81d      	bhi.n	8008814 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	889b      	ldrh	r3, [r3, #4]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d813      	bhi.n	800880a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	4798      	blx	r3
 80087f0:	4603      	mov	r3, r0
 80087f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	88db      	ldrh	r3, [r3, #6]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d110      	bne.n	800881e <USBD_StdItfReq+0x7a>
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10d      	bne.n	800881e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fd9d 	bl	8009342 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008808:	e009      	b.n	800881e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fccd 	bl	80091ac <USBD_CtlError>
          break;
 8008812:	e004      	b.n	800881e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fcc8 	bl	80091ac <USBD_CtlError>
          break;
 800881c:	e000      	b.n	8008820 <USBD_StdItfReq+0x7c>
          break;
 800881e:	bf00      	nop
      }
      break;
 8008820:	e004      	b.n	800882c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fcc1 	bl	80091ac <USBD_CtlError>
      break;
 800882a:	bf00      	nop
  }

  return ret;
 800882c:	7bfb      	ldrb	r3, [r7, #15]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	889b      	ldrh	r3, [r3, #4]
 8008848:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008852:	2b40      	cmp	r3, #64	@ 0x40
 8008854:	d007      	beq.n	8008866 <USBD_StdEPReq+0x30>
 8008856:	2b40      	cmp	r3, #64	@ 0x40
 8008858:	f200 8145 	bhi.w	8008ae6 <USBD_StdEPReq+0x2b0>
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00c      	beq.n	800887a <USBD_StdEPReq+0x44>
 8008860:	2b20      	cmp	r3, #32
 8008862:	f040 8140 	bne.w	8008ae6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	4798      	blx	r3
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]
      break;
 8008878:	e13a      	b.n	8008af0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	2b03      	cmp	r3, #3
 8008880:	d007      	beq.n	8008892 <USBD_StdEPReq+0x5c>
 8008882:	2b03      	cmp	r3, #3
 8008884:	f300 8129 	bgt.w	8008ada <USBD_StdEPReq+0x2a4>
 8008888:	2b00      	cmp	r3, #0
 800888a:	d07f      	beq.n	800898c <USBD_StdEPReq+0x156>
 800888c:	2b01      	cmp	r3, #1
 800888e:	d03c      	beq.n	800890a <USBD_StdEPReq+0xd4>
 8008890:	e123      	b.n	8008ada <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b02      	cmp	r3, #2
 800889c:	d002      	beq.n	80088a4 <USBD_StdEPReq+0x6e>
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d016      	beq.n	80088d0 <USBD_StdEPReq+0x9a>
 80088a2:	e02c      	b.n	80088fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00d      	beq.n	80088c6 <USBD_StdEPReq+0x90>
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b80      	cmp	r3, #128	@ 0x80
 80088ae:	d00a      	beq.n	80088c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 f8f1 	bl	8009a9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ba:	2180      	movs	r1, #128	@ 0x80
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 f8ed 	bl	8009a9c <USBD_LL_StallEP>
 80088c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088c4:	e020      	b.n	8008908 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fc6f 	bl	80091ac <USBD_CtlError>
              break;
 80088ce:	e01b      	b.n	8008908 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10e      	bne.n	80088f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00b      	beq.n	80088f6 <USBD_StdEPReq+0xc0>
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	2b80      	cmp	r3, #128	@ 0x80
 80088e2:	d008      	beq.n	80088f6 <USBD_StdEPReq+0xc0>
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	88db      	ldrh	r3, [r3, #6]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d104      	bne.n	80088f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 f8d3 	bl	8009a9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fd23 	bl	8009342 <USBD_CtlSendStatus>

              break;
 80088fc:	e004      	b.n	8008908 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fc53 	bl	80091ac <USBD_CtlError>
              break;
 8008906:	bf00      	nop
          }
          break;
 8008908:	e0ec      	b.n	8008ae4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b02      	cmp	r3, #2
 8008914:	d002      	beq.n	800891c <USBD_StdEPReq+0xe6>
 8008916:	2b03      	cmp	r3, #3
 8008918:	d016      	beq.n	8008948 <USBD_StdEPReq+0x112>
 800891a:	e030      	b.n	800897e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00d      	beq.n	800893e <USBD_StdEPReq+0x108>
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b80      	cmp	r3, #128	@ 0x80
 8008926:	d00a      	beq.n	800893e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 f8b5 	bl	8009a9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008932:	2180      	movs	r1, #128	@ 0x80
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f001 f8b1 	bl	8009a9c <USBD_LL_StallEP>
 800893a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800893c:	e025      	b.n	800898a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fc33 	bl	80091ac <USBD_CtlError>
              break;
 8008946:	e020      	b.n	800898a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	885b      	ldrh	r3, [r3, #2]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d11b      	bne.n	8008988 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008956:	2b00      	cmp	r3, #0
 8008958:	d004      	beq.n	8008964 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 f8bb 	bl	8009ada <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fcec 	bl	8009342 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800897c:	e004      	b.n	8008988 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fc13 	bl	80091ac <USBD_CtlError>
              break;
 8008986:	e000      	b.n	800898a <USBD_StdEPReq+0x154>
              break;
 8008988:	bf00      	nop
          }
          break;
 800898a:	e0ab      	b.n	8008ae4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b02      	cmp	r3, #2
 8008996:	d002      	beq.n	800899e <USBD_StdEPReq+0x168>
 8008998:	2b03      	cmp	r3, #3
 800899a:	d032      	beq.n	8008a02 <USBD_StdEPReq+0x1cc>
 800899c:	e097      	b.n	8008ace <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d007      	beq.n	80089b4 <USBD_StdEPReq+0x17e>
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	2b80      	cmp	r3, #128	@ 0x80
 80089a8:	d004      	beq.n	80089b4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fbfd 	bl	80091ac <USBD_CtlError>
                break;
 80089b2:	e091      	b.n	8008ad8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	da0b      	bge.n	80089d4 <USBD_StdEPReq+0x19e>
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089c2:	4613      	mov	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	3310      	adds	r3, #16
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	4413      	add	r3, r2
 80089d0:	3304      	adds	r3, #4
 80089d2:	e00b      	b.n	80089ec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	4413      	add	r3, r2
 80089ea:	3304      	adds	r3, #4
 80089ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2202      	movs	r2, #2
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fc47 	bl	800928e <USBD_CtlSendData>
              break;
 8008a00:	e06a      	b.n	8008ad8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	da11      	bge.n	8008a2e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	f003 020f 	and.w	r2, r3, #15
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	440b      	add	r3, r1
 8008a1c:	3324      	adds	r3, #36	@ 0x24
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d117      	bne.n	8008a54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fbc0 	bl	80091ac <USBD_CtlError>
                  break;
 8008a2c:	e054      	b.n	8008ad8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	f003 020f 	and.w	r2, r3, #15
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d104      	bne.n	8008a54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fbad 	bl	80091ac <USBD_CtlError>
                  break;
 8008a52:	e041      	b.n	8008ad8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	da0b      	bge.n	8008a74 <USBD_StdEPReq+0x23e>
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	3310      	adds	r3, #16
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	4413      	add	r3, r2
 8008a70:	3304      	adds	r3, #4
 8008a72:	e00b      	b.n	8008a8c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
 8008a76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	4413      	add	r3, r2
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a8e:	7bbb      	ldrb	r3, [r7, #14]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <USBD_StdEPReq+0x264>
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
 8008a96:	2b80      	cmp	r3, #128	@ 0x80
 8008a98:	d103      	bne.n	8008aa2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	e00e      	b.n	8008ac0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 f836 	bl	8009b18 <USBD_LL_IsStallEP>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	e002      	b.n	8008ac0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2200      	movs	r2, #0
 8008abe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fbe1 	bl	800928e <USBD_CtlSendData>
              break;
 8008acc:	e004      	b.n	8008ad8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fb6b 	bl	80091ac <USBD_CtlError>
              break;
 8008ad6:	bf00      	nop
          }
          break;
 8008ad8:	e004      	b.n	8008ae4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fb65 	bl	80091ac <USBD_CtlError>
          break;
 8008ae2:	bf00      	nop
      }
      break;
 8008ae4:	e004      	b.n	8008af0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fb5f 	bl	80091ac <USBD_CtlError>
      break;
 8008aee:	bf00      	nop
  }

  return ret;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	885b      	ldrh	r3, [r3, #2]
 8008b16:	0a1b      	lsrs	r3, r3, #8
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	2b0e      	cmp	r3, #14
 8008b1e:	f200 8152 	bhi.w	8008dc6 <USBD_GetDescriptor+0x2ca>
 8008b22:	a201      	add	r2, pc, #4	@ (adr r2, 8008b28 <USBD_GetDescriptor+0x2c>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008b99 	.word	0x08008b99
 8008b2c:	08008bb1 	.word	0x08008bb1
 8008b30:	08008bf1 	.word	0x08008bf1
 8008b34:	08008dc7 	.word	0x08008dc7
 8008b38:	08008dc7 	.word	0x08008dc7
 8008b3c:	08008d67 	.word	0x08008d67
 8008b40:	08008d93 	.word	0x08008d93
 8008b44:	08008dc7 	.word	0x08008dc7
 8008b48:	08008dc7 	.word	0x08008dc7
 8008b4c:	08008dc7 	.word	0x08008dc7
 8008b50:	08008dc7 	.word	0x08008dc7
 8008b54:	08008dc7 	.word	0x08008dc7
 8008b58:	08008dc7 	.word	0x08008dc7
 8008b5c:	08008dc7 	.word	0x08008dc7
 8008b60:	08008b65 	.word	0x08008b65
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	7c12      	ldrb	r2, [r2, #16]
 8008b7c:	f107 0108 	add.w	r1, r7, #8
 8008b80:	4610      	mov	r0, r2
 8008b82:	4798      	blx	r3
 8008b84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b86:	e126      	b.n	8008dd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fb0e 	bl	80091ac <USBD_CtlError>
        err++;
 8008b90:	7afb      	ldrb	r3, [r7, #11]
 8008b92:	3301      	adds	r3, #1
 8008b94:	72fb      	strb	r3, [r7, #11]
      break;
 8008b96:	e11e      	b.n	8008dd6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	7c12      	ldrb	r2, [r2, #16]
 8008ba4:	f107 0108 	add.w	r1, r7, #8
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
 8008bac:	60f8      	str	r0, [r7, #12]
      break;
 8008bae:	e112      	b.n	8008dd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7c1b      	ldrb	r3, [r3, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10d      	bne.n	8008bd4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc0:	f107 0208 	add.w	r2, r7, #8
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4798      	blx	r3
 8008bc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	2202      	movs	r2, #2
 8008bd0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bd2:	e100      	b.n	8008dd6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bdc:	f107 0208 	add.w	r2, r7, #8
 8008be0:	4610      	mov	r0, r2
 8008be2:	4798      	blx	r3
 8008be4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3301      	adds	r3, #1
 8008bea:	2202      	movs	r2, #2
 8008bec:	701a      	strb	r2, [r3, #0]
      break;
 8008bee:	e0f2      	b.n	8008dd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	885b      	ldrh	r3, [r3, #2]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b05      	cmp	r3, #5
 8008bf8:	f200 80ac 	bhi.w	8008d54 <USBD_GetDescriptor+0x258>
 8008bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8008c04 <USBD_GetDescriptor+0x108>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c1d 	.word	0x08008c1d
 8008c08:	08008c51 	.word	0x08008c51
 8008c0c:	08008c85 	.word	0x08008c85
 8008c10:	08008cb9 	.word	0x08008cb9
 8008c14:	08008ced 	.word	0x08008ced
 8008c18:	08008d21 	.word	0x08008d21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00b      	beq.n	8008c40 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	7c12      	ldrb	r2, [r2, #16]
 8008c34:	f107 0108 	add.w	r1, r7, #8
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4798      	blx	r3
 8008c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c3e:	e091      	b.n	8008d64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fab2 	bl	80091ac <USBD_CtlError>
            err++;
 8008c48:	7afb      	ldrb	r3, [r7, #11]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c4e:	e089      	b.n	8008d64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00b      	beq.n	8008c74 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	7c12      	ldrb	r2, [r2, #16]
 8008c68:	f107 0108 	add.w	r1, r7, #8
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
 8008c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c72:	e077      	b.n	8008d64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa98 	bl	80091ac <USBD_CtlError>
            err++;
 8008c7c:	7afb      	ldrb	r3, [r7, #11]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	72fb      	strb	r3, [r7, #11]
          break;
 8008c82:	e06f      	b.n	8008d64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	7c12      	ldrb	r2, [r2, #16]
 8008c9c:	f107 0108 	add.w	r1, r7, #8
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4798      	blx	r3
 8008ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ca6:	e05d      	b.n	8008d64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa7e 	bl	80091ac <USBD_CtlError>
            err++;
 8008cb0:	7afb      	ldrb	r3, [r7, #11]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cb6:	e055      	b.n	8008d64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	7c12      	ldrb	r2, [r2, #16]
 8008cd0:	f107 0108 	add.w	r1, r7, #8
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4798      	blx	r3
 8008cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cda:	e043      	b.n	8008d64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa64 	bl	80091ac <USBD_CtlError>
            err++;
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cea:	e03b      	b.n	8008d64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00b      	beq.n	8008d10 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	7c12      	ldrb	r2, [r2, #16]
 8008d04:	f107 0108 	add.w	r1, r7, #8
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
 8008d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d0e:	e029      	b.n	8008d64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa4a 	bl	80091ac <USBD_CtlError>
            err++;
 8008d18:	7afb      	ldrb	r3, [r7, #11]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d1e:	e021      	b.n	8008d64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00b      	beq.n	8008d44 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	7c12      	ldrb	r2, [r2, #16]
 8008d38:	f107 0108 	add.w	r1, r7, #8
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d42:	e00f      	b.n	8008d64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa30 	bl	80091ac <USBD_CtlError>
            err++;
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	72fb      	strb	r3, [r7, #11]
          break;
 8008d52:	e007      	b.n	8008d64 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa28 	bl	80091ac <USBD_CtlError>
          err++;
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008d62:	bf00      	nop
      }
      break;
 8008d64:	e037      	b.n	8008dd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7c1b      	ldrb	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d109      	bne.n	8008d82 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d76:	f107 0208 	add.w	r2, r7, #8
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	4798      	blx	r3
 8008d7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d80:	e029      	b.n	8008dd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fa11 	bl	80091ac <USBD_CtlError>
        err++;
 8008d8a:	7afb      	ldrb	r3, [r7, #11]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d90:	e021      	b.n	8008dd6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	7c1b      	ldrb	r3, [r3, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10d      	bne.n	8008db6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da2:	f107 0208 	add.w	r2, r7, #8
 8008da6:	4610      	mov	r0, r2
 8008da8:	4798      	blx	r3
 8008daa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3301      	adds	r3, #1
 8008db0:	2207      	movs	r2, #7
 8008db2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008db4:	e00f      	b.n	8008dd6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f9f7 	bl	80091ac <USBD_CtlError>
        err++;
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008dc4:	e007      	b.n	8008dd6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f9ef 	bl	80091ac <USBD_CtlError>
      err++;
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8008dd4:	bf00      	nop
  }

  if (err != 0U)
 8008dd6:	7afb      	ldrb	r3, [r7, #11]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d11e      	bne.n	8008e1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	88db      	ldrh	r3, [r3, #6]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d016      	beq.n	8008e12 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008de4:	893b      	ldrh	r3, [r7, #8]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00e      	beq.n	8008e08 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	88da      	ldrh	r2, [r3, #6]
 8008dee:	893b      	ldrh	r3, [r7, #8]
 8008df0:	4293      	cmp	r3, r2
 8008df2:	bf28      	it	cs
 8008df4:	4613      	movcs	r3, r2
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dfa:	893b      	ldrh	r3, [r7, #8]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fa44 	bl	800928e <USBD_CtlSendData>
 8008e06:	e009      	b.n	8008e1c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f9ce 	bl	80091ac <USBD_CtlError>
 8008e10:	e004      	b.n	8008e1c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa95 	bl	8009342 <USBD_CtlSendStatus>
 8008e18:	e000      	b.n	8008e1c <USBD_GetDescriptor+0x320>
    return;
 8008e1a:	bf00      	nop
  }
}
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop

08008e24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	889b      	ldrh	r3, [r3, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d131      	bne.n	8008e9a <USBD_SetAddress+0x76>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	88db      	ldrh	r3, [r3, #6]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d12d      	bne.n	8008e9a <USBD_SetAddress+0x76>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	885b      	ldrh	r3, [r3, #2]
 8008e42:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e44:	d829      	bhi.n	8008e9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	885b      	ldrh	r3, [r3, #2]
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d104      	bne.n	8008e68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f9a3 	bl	80091ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e66:	e01d      	b.n	8008ea4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	7bfa      	ldrb	r2, [r7, #15]
 8008e6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fe7b 	bl	8009b70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fa61 	bl	8009342 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d004      	beq.n	8008e90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8e:	e009      	b.n	8008ea4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e98:	e004      	b.n	8008ea4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f985 	bl	80091ac <USBD_CtlError>
  }
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	885b      	ldrh	r3, [r3, #2]
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008ec2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d905      	bls.n	8008ed8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f96c 	bl	80091ac <USBD_CtlError>
    return USBD_FAIL;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e088      	b.n	8008fea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d002      	beq.n	8008eea <USBD_SetConfig+0x3e>
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d025      	beq.n	8008f34 <USBD_SetConfig+0x88>
 8008ee8:	e071      	b.n	8008fce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008eea:	4b42      	ldr	r3, [pc, #264]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d01c      	beq.n	8008f2c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008ef2:	4b40      	ldr	r3, [pc, #256]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008efc:	4b3d      	ldr	r3, [pc, #244]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff f990 	bl	8008228 <USBD_SetClassConfig>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d004      	beq.n	8008f1c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f949 	bl	80091ac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f1a:	e065      	b.n	8008fe8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fa10 	bl	8009342 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2203      	movs	r2, #3
 8008f26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f2a:	e05d      	b.n	8008fe8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fa08 	bl	8009342 <USBD_CtlSendStatus>
      break;
 8008f32:	e059      	b.n	8008fe8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f34:	4b2f      	ldr	r3, [pc, #188]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d112      	bne.n	8008f62 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008f44:	4b2b      	ldr	r3, [pc, #172]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f4e:	4b29      	ldr	r3, [pc, #164]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff f983 	bl	8008260 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f9f1 	bl	8009342 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f60:	e042      	b.n	8008fe8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008f62:	4b24      	ldr	r3, [pc, #144]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d02a      	beq.n	8008fc6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff f971 	bl	8008260 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f88:	4b1a      	ldr	r3, [pc, #104]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff f94a 	bl	8008228 <USBD_SetClassConfig>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00f      	beq.n	8008fbe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f903 	bl	80091ac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7ff f956 	bl	8008260 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008fbc:	e014      	b.n	8008fe8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9bf 	bl	8009342 <USBD_CtlSendStatus>
      break;
 8008fc4:	e010      	b.n	8008fe8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f9bb 	bl	8009342 <USBD_CtlSendStatus>
      break;
 8008fcc:	e00c      	b.n	8008fe8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f8eb 	bl	80091ac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fd6:	4b07      	ldr	r3, [pc, #28]	@ (8008ff4 <USBD_SetConfig+0x148>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff f93f 	bl	8008260 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe6:	bf00      	nop
  }

  return ret;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20000258 	.word	0x20000258

08008ff8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	88db      	ldrh	r3, [r3, #6]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d004      	beq.n	8009014 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f8cd 	bl	80091ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009012:	e023      	b.n	800905c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b02      	cmp	r3, #2
 800901e:	dc02      	bgt.n	8009026 <USBD_GetConfig+0x2e>
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc03      	bgt.n	800902c <USBD_GetConfig+0x34>
 8009024:	e015      	b.n	8009052 <USBD_GetConfig+0x5a>
 8009026:	2b03      	cmp	r3, #3
 8009028:	d00b      	beq.n	8009042 <USBD_GetConfig+0x4a>
 800902a:	e012      	b.n	8009052 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3308      	adds	r3, #8
 8009036:	2201      	movs	r2, #1
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f927 	bl	800928e <USBD_CtlSendData>
        break;
 8009040:	e00c      	b.n	800905c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3304      	adds	r3, #4
 8009046:	2201      	movs	r2, #1
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f91f 	bl	800928e <USBD_CtlSendData>
        break;
 8009050:	e004      	b.n	800905c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f8a9 	bl	80091ac <USBD_CtlError>
        break;
 800905a:	bf00      	nop
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009074:	b2db      	uxtb	r3, r3
 8009076:	3b01      	subs	r3, #1
 8009078:	2b02      	cmp	r3, #2
 800907a:	d81e      	bhi.n	80090ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	88db      	ldrh	r3, [r3, #6]
 8009080:	2b02      	cmp	r3, #2
 8009082:	d004      	beq.n	800908e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f890 	bl	80091ac <USBD_CtlError>
        break;
 800908c:	e01a      	b.n	80090c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800909a:	2b00      	cmp	r3, #0
 800909c:	d005      	beq.n	80090aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	f043 0202 	orr.w	r2, r3, #2
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	330c      	adds	r3, #12
 80090ae:	2202      	movs	r2, #2
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f8eb 	bl	800928e <USBD_CtlSendData>
      break;
 80090b8:	e004      	b.n	80090c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f875 	bl	80091ac <USBD_CtlError>
      break;
 80090c2:	bf00      	nop
  }
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	885b      	ldrh	r3, [r3, #2]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d106      	bne.n	80090ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f92b 	bl	8009342 <USBD_CtlSendStatus>
  }
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009104:	b2db      	uxtb	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	2b02      	cmp	r3, #2
 800910a:	d80b      	bhi.n	8009124 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	885b      	ldrh	r3, [r3, #2]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d10c      	bne.n	800912e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f910 	bl	8009342 <USBD_CtlSendStatus>
      }
      break;
 8009122:	e004      	b.n	800912e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f840 	bl	80091ac <USBD_CtlError>
      break;
 800912c:	e000      	b.n	8009130 <USBD_ClrFeature+0x3c>
      break;
 800912e:	bf00      	nop
  }
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	781a      	ldrb	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3301      	adds	r3, #1
 8009152:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	781a      	ldrb	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3301      	adds	r3, #1
 8009160:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7ff fa90 	bl	8008688 <SWAPBYTE>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	3301      	adds	r3, #1
 8009174:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3301      	adds	r3, #1
 800917a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f7ff fa83 	bl	8008688 <SWAPBYTE>
 8009182:	4603      	mov	r3, r0
 8009184:	461a      	mov	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3301      	adds	r3, #1
 800918e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3301      	adds	r3, #1
 8009194:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff fa76 	bl	8008688 <SWAPBYTE>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	80da      	strh	r2, [r3, #6]
}
 80091a4:	bf00      	nop
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091b6:	2180      	movs	r1, #128	@ 0x80
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fc6f 	bl	8009a9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091be:	2100      	movs	r1, #0
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fc6b 	bl	8009a9c <USBD_LL_StallEP>
}
 80091c6:	bf00      	nop
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b086      	sub	sp, #24
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	60f8      	str	r0, [r7, #12]
 80091d6:	60b9      	str	r1, [r7, #8]
 80091d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d036      	beq.n	8009252 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091e8:	6938      	ldr	r0, [r7, #16]
 80091ea:	f000 f836 	bl	800925a <USBD_GetLen>
 80091ee:	4603      	mov	r3, r0
 80091f0:	3301      	adds	r3, #1
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	4413      	add	r3, r2
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	7812      	ldrb	r2, [r2, #0]
 8009206:	701a      	strb	r2, [r3, #0]
  idx++;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	3301      	adds	r3, #1
 800920c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	4413      	add	r3, r2
 8009214:	2203      	movs	r2, #3
 8009216:	701a      	strb	r2, [r3, #0]
  idx++;
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	3301      	adds	r3, #1
 800921c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800921e:	e013      	b.n	8009248 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009220:	7dfb      	ldrb	r3, [r7, #23]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	4413      	add	r3, r2
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	7812      	ldrb	r2, [r2, #0]
 800922a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	3301      	adds	r3, #1
 8009230:	613b      	str	r3, [r7, #16]
    idx++;
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	3301      	adds	r3, #1
 8009236:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009238:	7dfb      	ldrb	r3, [r7, #23]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	4413      	add	r3, r2
 800923e:	2200      	movs	r2, #0
 8009240:	701a      	strb	r2, [r3, #0]
    idx++;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	3301      	adds	r3, #1
 8009246:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1e7      	bne.n	8009220 <USBD_GetString+0x52>
 8009250:	e000      	b.n	8009254 <USBD_GetString+0x86>
    return;
 8009252:	bf00      	nop
  }
}
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800925a:	b480      	push	{r7}
 800925c:	b085      	sub	sp, #20
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800926a:	e005      	b.n	8009278 <USBD_GetLen+0x1e>
  {
    len++;
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	3301      	adds	r3, #1
 8009270:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	3301      	adds	r3, #1
 8009276:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1f5      	bne.n	800926c <USBD_GetLen+0x12>
  }

  return len;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2202      	movs	r2, #2
 800929e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	2100      	movs	r1, #0
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 fc7a 	bl	8009bae <USBD_LL_Transmit>

  return USBD_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	2100      	movs	r1, #0
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 fc69 	bl	8009bae <USBD_LL_Transmit>

  return USBD_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	60f8      	str	r0, [r7, #12]
 80092ee:	60b9      	str	r1, [r7, #8]
 80092f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2203      	movs	r2, #3
 80092f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	2100      	movs	r1, #0
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f000 fc6d 	bl	8009bf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	2100      	movs	r1, #0
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 fc5c 	bl	8009bf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2204      	movs	r2, #4
 800934e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009352:	2300      	movs	r3, #0
 8009354:	2200      	movs	r2, #0
 8009356:	2100      	movs	r1, #0
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fc28 	bl	8009bae <USBD_LL_Transmit>

  return USBD_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2205      	movs	r2, #5
 8009374:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009378:	2300      	movs	r3, #0
 800937a:	2200      	movs	r2, #0
 800937c:	2100      	movs	r1, #0
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fc36 	bl	8009bf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009394:	2200      	movs	r2, #0
 8009396:	4912      	ldr	r1, [pc, #72]	@ (80093e0 <MX_USB_Device_Init+0x50>)
 8009398:	4812      	ldr	r0, [pc, #72]	@ (80093e4 <MX_USB_Device_Init+0x54>)
 800939a:	f7fe fed7 	bl	800814c <USBD_Init>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80093a4:	f7f7 f948 	bl	8000638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80093a8:	490f      	ldr	r1, [pc, #60]	@ (80093e8 <MX_USB_Device_Init+0x58>)
 80093aa:	480e      	ldr	r0, [pc, #56]	@ (80093e4 <MX_USB_Device_Init+0x54>)
 80093ac:	f7fe fefe 	bl	80081ac <USBD_RegisterClass>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80093b6:	f7f7 f93f 	bl	8000638 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80093ba:	490c      	ldr	r1, [pc, #48]	@ (80093ec <MX_USB_Device_Init+0x5c>)
 80093bc:	4809      	ldr	r0, [pc, #36]	@ (80093e4 <MX_USB_Device_Init+0x54>)
 80093be:	f7fe fe4f 	bl	8008060 <USBD_CDC_RegisterInterface>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80093c8:	f7f7 f936 	bl	8000638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80093cc:	4805      	ldr	r0, [pc, #20]	@ (80093e4 <MX_USB_Device_Init+0x54>)
 80093ce:	f7fe ff14 	bl	80081fa <USBD_Start>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80093d8:	f7f7 f92e 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80093dc:	bf00      	nop
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20000130 	.word	0x20000130
 80093e4:	2000025c 	.word	0x2000025c
 80093e8:	20000018 	.word	0x20000018
 80093ec:	2000011c 	.word	0x2000011c

080093f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093f4:	2200      	movs	r2, #0
 80093f6:	4905      	ldr	r1, [pc, #20]	@ (800940c <CDC_Init_FS+0x1c>)
 80093f8:	4805      	ldr	r0, [pc, #20]	@ (8009410 <CDC_Init_FS+0x20>)
 80093fa:	f7fe fe46 	bl	800808a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093fe:	4905      	ldr	r1, [pc, #20]	@ (8009414 <CDC_Init_FS+0x24>)
 8009400:	4803      	ldr	r0, [pc, #12]	@ (8009410 <CDC_Init_FS+0x20>)
 8009402:	f7fe fe60 	bl	80080c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009406:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009408:	4618      	mov	r0, r3
 800940a:	bd80      	pop	{r7, pc}
 800940c:	2000092c 	.word	0x2000092c
 8009410:	2000025c 	.word	0x2000025c
 8009414:	2000052c 	.word	0x2000052c

08009418 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800941c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800941e:	4618      	mov	r0, r3
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	4603      	mov	r3, r0
 8009430:	6039      	str	r1, [r7, #0]
 8009432:	71fb      	strb	r3, [r7, #7]
 8009434:	4613      	mov	r3, r2
 8009436:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	2b23      	cmp	r3, #35	@ 0x23
 800943c:	d84a      	bhi.n	80094d4 <CDC_Control_FS+0xac>
 800943e:	a201      	add	r2, pc, #4	@ (adr r2, 8009444 <CDC_Control_FS+0x1c>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	080094d5 	.word	0x080094d5
 8009448:	080094d5 	.word	0x080094d5
 800944c:	080094d5 	.word	0x080094d5
 8009450:	080094d5 	.word	0x080094d5
 8009454:	080094d5 	.word	0x080094d5
 8009458:	080094d5 	.word	0x080094d5
 800945c:	080094d5 	.word	0x080094d5
 8009460:	080094d5 	.word	0x080094d5
 8009464:	080094d5 	.word	0x080094d5
 8009468:	080094d5 	.word	0x080094d5
 800946c:	080094d5 	.word	0x080094d5
 8009470:	080094d5 	.word	0x080094d5
 8009474:	080094d5 	.word	0x080094d5
 8009478:	080094d5 	.word	0x080094d5
 800947c:	080094d5 	.word	0x080094d5
 8009480:	080094d5 	.word	0x080094d5
 8009484:	080094d5 	.word	0x080094d5
 8009488:	080094d5 	.word	0x080094d5
 800948c:	080094d5 	.word	0x080094d5
 8009490:	080094d5 	.word	0x080094d5
 8009494:	080094d5 	.word	0x080094d5
 8009498:	080094d5 	.word	0x080094d5
 800949c:	080094d5 	.word	0x080094d5
 80094a0:	080094d5 	.word	0x080094d5
 80094a4:	080094d5 	.word	0x080094d5
 80094a8:	080094d5 	.word	0x080094d5
 80094ac:	080094d5 	.word	0x080094d5
 80094b0:	080094d5 	.word	0x080094d5
 80094b4:	080094d5 	.word	0x080094d5
 80094b8:	080094d5 	.word	0x080094d5
 80094bc:	080094d5 	.word	0x080094d5
 80094c0:	080094d5 	.word	0x080094d5
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094d5 	.word	0x080094d5
 80094cc:	080094d5 	.word	0x080094d5
 80094d0:	080094d5 	.word	0x080094d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094d4:	bf00      	nop
  }

  return (USBD_OK);
 80094d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4805      	ldr	r0, [pc, #20]	@ (8009508 <CDC_Receive_FS+0x24>)
 80094f2:	f7fe fde8 	bl	80080c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094f6:	4804      	ldr	r0, [pc, #16]	@ (8009508 <CDC_Receive_FS+0x24>)
 80094f8:	f7fe fdfe 	bl	80080f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	2000025c 	.word	0x2000025c

0800950c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	4613      	mov	r3, r2
 8009518:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800951e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009522:	4618      	mov	r0, r3
 8009524:	371c      	adds	r7, #28
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
	...

08009530 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	4603      	mov	r3, r0
 8009538:	6039      	str	r1, [r7, #0]
 800953a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2212      	movs	r2, #18
 8009540:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009542:	4b03      	ldr	r3, [pc, #12]	@ (8009550 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	20000150 	.word	0x20000150

08009554 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	6039      	str	r1, [r7, #0]
 800955e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2204      	movs	r2, #4
 8009564:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009566:	4b03      	ldr	r3, [pc, #12]	@ (8009574 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	20000164 	.word	0x20000164

08009578 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	6039      	str	r1, [r7, #0]
 8009582:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d105      	bne.n	8009596 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	4907      	ldr	r1, [pc, #28]	@ (80095ac <USBD_CDC_ProductStrDescriptor+0x34>)
 800958e:	4808      	ldr	r0, [pc, #32]	@ (80095b0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009590:	f7ff fe1d 	bl	80091ce <USBD_GetString>
 8009594:	e004      	b.n	80095a0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	4904      	ldr	r1, [pc, #16]	@ (80095ac <USBD_CDC_ProductStrDescriptor+0x34>)
 800959a:	4805      	ldr	r0, [pc, #20]	@ (80095b0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800959c:	f7ff fe17 	bl	80091ce <USBD_GetString>
  }
  return USBD_StrDesc;
 80095a0:	4b02      	ldr	r3, [pc, #8]	@ (80095ac <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20000d2c 	.word	0x20000d2c
 80095b0:	08009dc8 	.word	0x08009dc8

080095b4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	6039      	str	r1, [r7, #0]
 80095be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	4904      	ldr	r1, [pc, #16]	@ (80095d4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80095c4:	4804      	ldr	r0, [pc, #16]	@ (80095d8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80095c6:	f7ff fe02 	bl	80091ce <USBD_GetString>
  return USBD_StrDesc;
 80095ca:	4b02      	ldr	r3, [pc, #8]	@ (80095d4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	20000d2c 	.word	0x20000d2c
 80095d8:	08009de0 	.word	0x08009de0

080095dc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	6039      	str	r1, [r7, #0]
 80095e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	221a      	movs	r2, #26
 80095ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095ee:	f000 f843 	bl	8009678 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80095f2:	4b02      	ldr	r3, [pc, #8]	@ (80095fc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	20000168 	.word	0x20000168

08009600 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	6039      	str	r1, [r7, #0]
 800960a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d105      	bne.n	800961e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	4907      	ldr	r1, [pc, #28]	@ (8009634 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009616:	4808      	ldr	r0, [pc, #32]	@ (8009638 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009618:	f7ff fdd9 	bl	80091ce <USBD_GetString>
 800961c:	e004      	b.n	8009628 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	4904      	ldr	r1, [pc, #16]	@ (8009634 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009622:	4805      	ldr	r0, [pc, #20]	@ (8009638 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009624:	f7ff fdd3 	bl	80091ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8009628:	4b02      	ldr	r3, [pc, #8]	@ (8009634 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20000d2c 	.word	0x20000d2c
 8009638:	08009df4 	.word	0x08009df4

0800963c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d105      	bne.n	800965a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	4907      	ldr	r1, [pc, #28]	@ (8009670 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009652:	4808      	ldr	r0, [pc, #32]	@ (8009674 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009654:	f7ff fdbb 	bl	80091ce <USBD_GetString>
 8009658:	e004      	b.n	8009664 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	4904      	ldr	r1, [pc, #16]	@ (8009670 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800965e:	4805      	ldr	r0, [pc, #20]	@ (8009674 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009660:	f7ff fdb5 	bl	80091ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8009664:	4b02      	ldr	r3, [pc, #8]	@ (8009670 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000d2c 	.word	0x20000d2c
 8009674:	08009e00 	.word	0x08009e00

08009678 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800967e:	4b0f      	ldr	r3, [pc, #60]	@ (80096bc <Get_SerialNum+0x44>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009684:	4b0e      	ldr	r3, [pc, #56]	@ (80096c0 <Get_SerialNum+0x48>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800968a:	4b0e      	ldr	r3, [pc, #56]	@ (80096c4 <Get_SerialNum+0x4c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4413      	add	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d009      	beq.n	80096b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800969e:	2208      	movs	r2, #8
 80096a0:	4909      	ldr	r1, [pc, #36]	@ (80096c8 <Get_SerialNum+0x50>)
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f000 f814 	bl	80096d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096a8:	2204      	movs	r2, #4
 80096aa:	4908      	ldr	r1, [pc, #32]	@ (80096cc <Get_SerialNum+0x54>)
 80096ac:	68b8      	ldr	r0, [r7, #8]
 80096ae:	f000 f80f 	bl	80096d0 <IntToUnicode>
  }
}
 80096b2:	bf00      	nop
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	1fff7590 	.word	0x1fff7590
 80096c0:	1fff7594 	.word	0x1fff7594
 80096c4:	1fff7598 	.word	0x1fff7598
 80096c8:	2000016a 	.word	0x2000016a
 80096cc:	2000017a 	.word	0x2000017a

080096d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	4613      	mov	r3, r2
 80096dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096e2:	2300      	movs	r3, #0
 80096e4:	75fb      	strb	r3, [r7, #23]
 80096e6:	e027      	b.n	8009738 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	0f1b      	lsrs	r3, r3, #28
 80096ec:	2b09      	cmp	r3, #9
 80096ee:	d80b      	bhi.n	8009708 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	0f1b      	lsrs	r3, r3, #28
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	005b      	lsls	r3, r3, #1
 80096fa:	4619      	mov	r1, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	440b      	add	r3, r1
 8009700:	3230      	adds	r2, #48	@ 0x30
 8009702:	b2d2      	uxtb	r2, r2
 8009704:	701a      	strb	r2, [r3, #0]
 8009706:	e00a      	b.n	800971e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	0f1b      	lsrs	r3, r3, #28
 800970c:	b2da      	uxtb	r2, r3
 800970e:	7dfb      	ldrb	r3, [r7, #23]
 8009710:	005b      	lsls	r3, r3, #1
 8009712:	4619      	mov	r1, r3
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	440b      	add	r3, r1
 8009718:	3237      	adds	r2, #55	@ 0x37
 800971a:	b2d2      	uxtb	r2, r2
 800971c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	011b      	lsls	r3, r3, #4
 8009722:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009724:	7dfb      	ldrb	r3, [r7, #23]
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	3301      	adds	r3, #1
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	4413      	add	r3, r2
 800972e:	2200      	movs	r2, #0
 8009730:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	3301      	adds	r3, #1
 8009736:	75fb      	strb	r3, [r7, #23]
 8009738:	7dfa      	ldrb	r2, [r7, #23]
 800973a:	79fb      	ldrb	r3, [r7, #7]
 800973c:	429a      	cmp	r2, r3
 800973e:	d3d3      	bcc.n	80096e8 <IntToUnicode+0x18>
  }
}
 8009740:	bf00      	nop
 8009742:	bf00      	nop
 8009744:	371c      	adds	r7, #28
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
	...

08009750 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b094      	sub	sp, #80	@ 0x50
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009758:	f107 030c 	add.w	r3, r7, #12
 800975c:	2244      	movs	r2, #68	@ 0x44
 800975e:	2100      	movs	r1, #0
 8009760:	4618      	mov	r0, r3
 8009762:	f000 faf9 	bl	8009d58 <memset>
  if(pcdHandle->Instance==USB)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a15      	ldr	r2, [pc, #84]	@ (80097c0 <HAL_PCD_MspInit+0x70>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d123      	bne.n	80097b8 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009774:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009776:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800977a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800977c:	f107 030c 	add.w	r3, r7, #12
 8009780:	4618      	mov	r0, r3
 8009782:	f7fb fbe7 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800978c:	f7f6 ff54 	bl	8000638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009790:	4b0c      	ldr	r3, [pc, #48]	@ (80097c4 <HAL_PCD_MspInit+0x74>)
 8009792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009794:	4a0b      	ldr	r2, [pc, #44]	@ (80097c4 <HAL_PCD_MspInit+0x74>)
 8009796:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800979a:	6593      	str	r3, [r2, #88]	@ 0x58
 800979c:	4b09      	ldr	r3, [pc, #36]	@ (80097c4 <HAL_PCD_MspInit+0x74>)
 800979e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097a4:	60bb      	str	r3, [r7, #8]
 80097a6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80097a8:	2200      	movs	r2, #0
 80097aa:	2100      	movs	r1, #0
 80097ac:	2014      	movs	r0, #20
 80097ae:	f7f7 f9fc 	bl	8000baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80097b2:	2014      	movs	r0, #20
 80097b4:	f7f7 fa13 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80097b8:	bf00      	nop
 80097ba:	3750      	adds	r7, #80	@ 0x50
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	40005c00 	.word	0x40005c00
 80097c4:	40021000 	.word	0x40021000

080097c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80097dc:	4619      	mov	r1, r3
 80097de:	4610      	mov	r0, r2
 80097e0:	f7fe fd56 	bl	8008290 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80097e4:	bf00      	nop
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80097fe:	78fa      	ldrb	r2, [r7, #3]
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	440b      	add	r3, r1
 800980c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	78fb      	ldrb	r3, [r7, #3]
 8009814:	4619      	mov	r1, r3
 8009816:	f7fe fd90 	bl	800833a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800981a:	bf00      	nop
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8009834:	78fa      	ldrb	r2, [r7, #3]
 8009836:	6879      	ldr	r1, [r7, #4]
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	440b      	add	r3, r1
 8009842:	3324      	adds	r3, #36	@ 0x24
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	4619      	mov	r1, r3
 800984a:	f7fe fdd9 	bl	8008400 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800984e:	bf00      	nop
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe feed 	bl	8008644 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800987a:	2301      	movs	r3, #1
 800987c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	795b      	ldrb	r3, [r3, #5]
 8009882:	2b02      	cmp	r3, #2
 8009884:	d001      	beq.n	800988a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009886:	f7f6 fed7 	bl	8000638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009890:	7bfa      	ldrb	r2, [r7, #15]
 8009892:	4611      	mov	r1, r2
 8009894:	4618      	mov	r0, r3
 8009896:	f7fe fe97 	bl	80085c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fe fe43 	bl	800852c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80098a6:	bf00      	nop
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fe92 	bl	80085e8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	7a5b      	ldrb	r3, [r3, #9]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d005      	beq.n	80098d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098cc:	4b04      	ldr	r3, [pc, #16]	@ (80098e0 <HAL_PCD_SuspendCallback+0x30>)
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	4a03      	ldr	r2, [pc, #12]	@ (80098e0 <HAL_PCD_SuspendCallback+0x30>)
 80098d2:	f043 0306 	orr.w	r3, r3, #6
 80098d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80098d8:	bf00      	nop
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	e000ed00 	.word	0xe000ed00

080098e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	7a5b      	ldrb	r3, [r3, #9]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d007      	beq.n	8009904 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098f4:	4b08      	ldr	r3, [pc, #32]	@ (8009918 <HAL_PCD_ResumeCallback+0x34>)
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	4a07      	ldr	r2, [pc, #28]	@ (8009918 <HAL_PCD_ResumeCallback+0x34>)
 80098fa:	f023 0306 	bic.w	r3, r3, #6
 80098fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009900:	f000 f9f8 	bl	8009cf4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fe82 	bl	8008614 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009910:	bf00      	nop
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	e000ed00 	.word	0xe000ed00

0800991c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009924:	4a2b      	ldr	r2, [pc, #172]	@ (80099d4 <USBD_LL_Init+0xb8>)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a29      	ldr	r2, [pc, #164]	@ (80099d4 <USBD_LL_Init+0xb8>)
 8009930:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009934:	4b27      	ldr	r3, [pc, #156]	@ (80099d4 <USBD_LL_Init+0xb8>)
 8009936:	4a28      	ldr	r2, [pc, #160]	@ (80099d8 <USBD_LL_Init+0xbc>)
 8009938:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800993a:	4b26      	ldr	r3, [pc, #152]	@ (80099d4 <USBD_LL_Init+0xb8>)
 800993c:	2208      	movs	r2, #8
 800993e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009940:	4b24      	ldr	r3, [pc, #144]	@ (80099d4 <USBD_LL_Init+0xb8>)
 8009942:	2202      	movs	r2, #2
 8009944:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009946:	4b23      	ldr	r3, [pc, #140]	@ (80099d4 <USBD_LL_Init+0xb8>)
 8009948:	2202      	movs	r2, #2
 800994a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800994c:	4b21      	ldr	r3, [pc, #132]	@ (80099d4 <USBD_LL_Init+0xb8>)
 800994e:	2200      	movs	r2, #0
 8009950:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009952:	4b20      	ldr	r3, [pc, #128]	@ (80099d4 <USBD_LL_Init+0xb8>)
 8009954:	2200      	movs	r2, #0
 8009956:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009958:	4b1e      	ldr	r3, [pc, #120]	@ (80099d4 <USBD_LL_Init+0xb8>)
 800995a:	2200      	movs	r2, #0
 800995c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800995e:	4b1d      	ldr	r3, [pc, #116]	@ (80099d4 <USBD_LL_Init+0xb8>)
 8009960:	2200      	movs	r2, #0
 8009962:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009964:	481b      	ldr	r0, [pc, #108]	@ (80099d4 <USBD_LL_Init+0xb8>)
 8009966:	f7f9 f84a 	bl	80029fe <HAL_PCD_Init>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009970:	f7f6 fe62 	bl	8000638 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800997a:	2318      	movs	r3, #24
 800997c:	2200      	movs	r2, #0
 800997e:	2100      	movs	r1, #0
 8009980:	f7fa fcd1 	bl	8004326 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800998a:	2358      	movs	r3, #88	@ 0x58
 800998c:	2200      	movs	r2, #0
 800998e:	2180      	movs	r1, #128	@ 0x80
 8009990:	f7fa fcc9 	bl	8004326 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800999a:	23c0      	movs	r3, #192	@ 0xc0
 800999c:	2200      	movs	r2, #0
 800999e:	2181      	movs	r1, #129	@ 0x81
 80099a0:	f7fa fcc1 	bl	8004326 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80099aa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80099ae:	2200      	movs	r2, #0
 80099b0:	2101      	movs	r1, #1
 80099b2:	f7fa fcb8 	bl	8004326 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80099bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80099c0:	2200      	movs	r2, #0
 80099c2:	2182      	movs	r1, #130	@ 0x82
 80099c4:	f7fa fcaf 	bl	8004326 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000f2c 	.word	0x20000f2c
 80099d8:	40005c00 	.word	0x40005c00

080099dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7f9 f8d1 	bl	8002b9a <HAL_PCD_Start>
 80099f8:	4603      	mov	r3, r0
 80099fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	4618      	mov	r0, r3
 8009a00:	f000 f97e 	bl	8009d00 <USBD_Get_USB_Status>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	461a      	mov	r2, r3
 8009a20:	4603      	mov	r3, r0
 8009a22:	70fb      	strb	r3, [r7, #3]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70bb      	strb	r3, [r7, #2]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009a3a:	78bb      	ldrb	r3, [r7, #2]
 8009a3c:	883a      	ldrh	r2, [r7, #0]
 8009a3e:	78f9      	ldrb	r1, [r7, #3]
 8009a40:	f7f9 fa18 	bl	8002e74 <HAL_PCD_EP_Open>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f958 	bl	8009d00 <USBD_Get_USB_Status>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	460b      	mov	r3, r1
 8009a68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009a78:	78fa      	ldrb	r2, [r7, #3]
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7f9 fa58 	bl	8002f32 <HAL_PCD_EP_Close>
 8009a82:	4603      	mov	r3, r0
 8009a84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 f939 	bl	8009d00 <USBD_Get_USB_Status>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009ab6:	78fa      	ldrb	r2, [r7, #3]
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7f9 fb01 	bl	80030c2 <HAL_PCD_EP_SetStall>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 f91a 	bl	8009d00 <USBD_Get_USB_Status>
 8009acc:	4603      	mov	r3, r0
 8009ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009af4:	78fa      	ldrb	r2, [r7, #3]
 8009af6:	4611      	mov	r1, r2
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7f9 fb34 	bl	8003166 <HAL_PCD_EP_ClrStall>
 8009afe:	4603      	mov	r3, r0
 8009b00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 f8fb 	bl	8009d00 <USBD_Get_USB_Status>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009b2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	da0b      	bge.n	8009b4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b34:	78fb      	ldrb	r3, [r7, #3]
 8009b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b3a:	68f9      	ldr	r1, [r7, #12]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4413      	add	r3, r2
 8009b42:	00db      	lsls	r3, r3, #3
 8009b44:	440b      	add	r3, r1
 8009b46:	3312      	adds	r3, #18
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	e00b      	b.n	8009b64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b4c:	78fb      	ldrb	r3, [r7, #3]
 8009b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b52:	68f9      	ldr	r1, [r7, #12]
 8009b54:	4613      	mov	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	440b      	add	r3, r1
 8009b5e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009b62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009b8a:	78fa      	ldrb	r2, [r7, #3]
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7f9 f94c 	bl	8002e2c <HAL_PCD_SetAddress>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 f8b0 	bl	8009d00 <USBD_Get_USB_Status>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b086      	sub	sp, #24
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	603b      	str	r3, [r7, #0]
 8009bba:	460b      	mov	r3, r1
 8009bbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009bcc:	7af9      	ldrb	r1, [r7, #11]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	f7f9 fa3f 	bl	8003054 <HAL_PCD_EP_Transmit>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 f88f 	bl	8009d00 <USBD_Get_USB_Status>
 8009be2:	4603      	mov	r3, r0
 8009be4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009be6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	607a      	str	r2, [r7, #4]
 8009bfa:	603b      	str	r3, [r7, #0]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009c0e:	7af9      	ldrb	r1, [r7, #11]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	f7f9 f9d5 	bl	8002fc2 <HAL_PCD_EP_Receive>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 f86e 	bl	8009d00 <USBD_Get_USB_Status>
 8009c24:	4603      	mov	r3, r0
 8009c26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c28:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3718      	adds	r7, #24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b082      	sub	sp, #8
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009c44:	78fa      	ldrb	r2, [r7, #3]
 8009c46:	4611      	mov	r1, r2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7f9 f9eb 	bl	8003024 <HAL_PCD_EP_GetRxCount>
 8009c4e:	4603      	mov	r3, r0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <HAL_PCDEx_LPM_Callback+0x18>
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d013      	beq.n	8009c96 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009c6e:	e023      	b.n	8009cb8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	7a5b      	ldrb	r3, [r3, #9]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d007      	beq.n	8009c88 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009c78:	f000 f83c 	bl	8009cf4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c7c:	4b10      	ldr	r3, [pc, #64]	@ (8009cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	4a0f      	ldr	r2, [pc, #60]	@ (8009cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009c82:	f023 0306 	bic.w	r3, r3, #6
 8009c86:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe fcc0 	bl	8008614 <USBD_LL_Resume>
    break;
 8009c94:	e010      	b.n	8009cb8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fe fca3 	bl	80085e8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	7a5b      	ldrb	r3, [r3, #9]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009caa:	4b05      	ldr	r3, [pc, #20]	@ (8009cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	4a04      	ldr	r2, [pc, #16]	@ (8009cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009cb0:	f043 0306 	orr.w	r3, r3, #6
 8009cb4:	6113      	str	r3, [r2, #16]
    break;
 8009cb6:	bf00      	nop
}
 8009cb8:	bf00      	nop
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	e000ed00 	.word	0xe000ed00

08009cc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ccc:	4b03      	ldr	r3, [pc, #12]	@ (8009cdc <USBD_static_malloc+0x18>)
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20001208 	.word	0x20001208

08009ce0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]

}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009cf8:	f7f6 fb64 	bl	80003c4 <SystemClock_Config>
}
 8009cfc:	bf00      	nop
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	4603      	mov	r3, r0
 8009d08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	2b03      	cmp	r3, #3
 8009d12:	d817      	bhi.n	8009d44 <USBD_Get_USB_Status+0x44>
 8009d14:	a201      	add	r2, pc, #4	@ (adr r2, 8009d1c <USBD_Get_USB_Status+0x1c>)
 8009d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1a:	bf00      	nop
 8009d1c:	08009d2d 	.word	0x08009d2d
 8009d20:	08009d33 	.word	0x08009d33
 8009d24:	08009d39 	.word	0x08009d39
 8009d28:	08009d3f 	.word	0x08009d3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d30:	e00b      	b.n	8009d4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d32:	2303      	movs	r3, #3
 8009d34:	73fb      	strb	r3, [r7, #15]
    break;
 8009d36:	e008      	b.n	8009d4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d3c:	e005      	b.n	8009d4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	73fb      	strb	r3, [r7, #15]
    break;
 8009d42:	e002      	b.n	8009d4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d44:	2303      	movs	r3, #3
 8009d46:	73fb      	strb	r3, [r7, #15]
    break;
 8009d48:	bf00      	nop
  }
  return usb_status;
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <memset>:
 8009d58:	4402      	add	r2, r0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d100      	bne.n	8009d62 <memset+0xa>
 8009d60:	4770      	bx	lr
 8009d62:	f803 1b01 	strb.w	r1, [r3], #1
 8009d66:	e7f9      	b.n	8009d5c <memset+0x4>

08009d68 <__libc_init_array>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	4d0d      	ldr	r5, [pc, #52]	@ (8009da0 <__libc_init_array+0x38>)
 8009d6c:	4c0d      	ldr	r4, [pc, #52]	@ (8009da4 <__libc_init_array+0x3c>)
 8009d6e:	1b64      	subs	r4, r4, r5
 8009d70:	10a4      	asrs	r4, r4, #2
 8009d72:	2600      	movs	r6, #0
 8009d74:	42a6      	cmp	r6, r4
 8009d76:	d109      	bne.n	8009d8c <__libc_init_array+0x24>
 8009d78:	4d0b      	ldr	r5, [pc, #44]	@ (8009da8 <__libc_init_array+0x40>)
 8009d7a:	4c0c      	ldr	r4, [pc, #48]	@ (8009dac <__libc_init_array+0x44>)
 8009d7c:	f000 f818 	bl	8009db0 <_init>
 8009d80:	1b64      	subs	r4, r4, r5
 8009d82:	10a4      	asrs	r4, r4, #2
 8009d84:	2600      	movs	r6, #0
 8009d86:	42a6      	cmp	r6, r4
 8009d88:	d105      	bne.n	8009d96 <__libc_init_array+0x2e>
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d90:	4798      	blx	r3
 8009d92:	3601      	adds	r6, #1
 8009d94:	e7ee      	b.n	8009d74 <__libc_init_array+0xc>
 8009d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d9a:	4798      	blx	r3
 8009d9c:	3601      	adds	r6, #1
 8009d9e:	e7f2      	b.n	8009d86 <__libc_init_array+0x1e>
 8009da0:	08009e20 	.word	0x08009e20
 8009da4:	08009e20 	.word	0x08009e20
 8009da8:	08009e20 	.word	0x08009e20
 8009dac:	08009e24 	.word	0x08009e24

08009db0 <_init>:
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	bf00      	nop
 8009db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db6:	bc08      	pop	{r3}
 8009db8:	469e      	mov	lr, r3
 8009dba:	4770      	bx	lr

08009dbc <_fini>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	bf00      	nop
 8009dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dc2:	bc08      	pop	{r3}
 8009dc4:	469e      	mov	lr, r3
 8009dc6:	4770      	bx	lr
