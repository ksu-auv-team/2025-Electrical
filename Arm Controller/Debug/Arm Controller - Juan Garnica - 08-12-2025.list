
Arm Controller - Juan Garnica - 08-12-2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a594  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800a76c  0800a76c  0000b76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a82c  0800a82c  0000c0e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a82c  0800a82c  0000c0e0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a82c  0800a82c  0000c0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a82c  0800a82c  0000b82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a830  0800a830  0000b830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0800a834  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db4  200000e0  0800a914  0000c0e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e94  0800a914  0000ce94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193eb  00000000  00000000  0000c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dab  00000000  00000000  000254fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  000292a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b7  00000000  00000000  0002a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021035  00000000  00000000  0002bb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c890  00000000  00000000  0004cbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7d72  00000000  00000000  0006943c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001311ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000605c  00000000  00000000  001311f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00137250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a754 	.word	0x0800a754

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e4 	.word	0x200000e4
 8000214:	0800a754 	.word	0x0800a754

08000218 <i2c_listen>:
int countAddr = 0;
int countrxcplt = 0;
int counterror = 0;

static inline void i2c_listen(I2C_HandleTypeDef *hi2c)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(hi2c);
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f001 f92b 	bl	800147c <HAL_I2C_EnableListen_IT>
}
 8000226:	bf00      	nop
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <HAL_I2C_AddrCallback>:
			direction = 1;
	}
}

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	70fb      	strb	r3, [r7, #3]
 800023c:	4613      	mov	r3, r2
 800023e:	803b      	strh	r3, [r7, #0]
    (void)AddrMatchCode;

    if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8000240:	78fb      	ldrb	r3, [r7, #3]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d10a      	bne.n	800025c <HAL_I2C_AddrCallback+0x2c>
        // Master will WRITE to us: first byte is register/len etc. Receive header (1 byte)
        rx_len = 0;
 8000246:	4b14      	ldr	r3, [pc, #80]	@ (8000298 <HAL_I2C_AddrCallback+0x68>)
 8000248:	2200      	movs	r2, #0
 800024a:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Slave_Seq_Receive_IT(hi2c, &i2c_rx[0], 1, I2C_FIRST_AND_NEXT_FRAME);
 800024c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000250:	2201      	movs	r2, #1
 8000252:	4912      	ldr	r1, [pc, #72]	@ (800029c <HAL_I2C_AddrCallback+0x6c>)
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f001 f85f 	bl	8001318 <HAL_I2C_Slave_Seq_Receive_IT>
        i2c_tx[2] = I2C_REGISTERS[2];
        tx_len = 3;

        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, i2c_tx, tx_len, I2C_LAST_FRAME);
    }
}
 800025a:	e018      	b.n	800028e <HAL_I2C_AddrCallback+0x5e>
        i2c_tx[0] = I2C_REGISTERS[0];
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <HAL_I2C_AddrCallback+0x70>)
 800025e:	781a      	ldrb	r2, [r3, #0]
 8000260:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <HAL_I2C_AddrCallback+0x74>)
 8000262:	701a      	strb	r2, [r3, #0]
        i2c_tx[1] = I2C_REGISTERS[1];
 8000264:	4b0e      	ldr	r3, [pc, #56]	@ (80002a0 <HAL_I2C_AddrCallback+0x70>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <HAL_I2C_AddrCallback+0x74>)
 800026a:	705a      	strb	r2, [r3, #1]
        i2c_tx[2] = I2C_REGISTERS[2];
 800026c:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <HAL_I2C_AddrCallback+0x70>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <HAL_I2C_AddrCallback+0x74>)
 8000272:	709a      	strb	r2, [r3, #2]
        tx_len = 3;
 8000274:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <HAL_I2C_AddrCallback+0x78>)
 8000276:	2203      	movs	r2, #3
 8000278:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, i2c_tx, tx_len, I2C_LAST_FRAME);
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <HAL_I2C_AddrCallback+0x78>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	461a      	mov	r2, r3
 8000282:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000286:	4907      	ldr	r1, [pc, #28]	@ (80002a4 <HAL_I2C_AddrCallback+0x74>)
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 ff93 	bl	80011b4 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000112 	.word	0x20000112
 800029c:	200000fc 	.word	0x200000fc
 80002a0:	20000118 	.word	0x20000118
 80002a4:	20000108 	.word	0x20000108
 80002a8:	20000113 	.word	0x20000113

080002ac <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
    if (rx_len == 0) {
 80002b4:	4b10      	ldr	r3, [pc, #64]	@ (80002f8 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d115      	bne.n	80002ea <HAL_I2C_SlaveRxCpltCallback+0x3e>
        // We just received the header/length at i2c_rx[0]; now receive the payload
        uint8_t payload = i2c_rx[0];
 80002be:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <HAL_I2C_SlaveRxCpltCallback+0x50>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	73fb      	strb	r3, [r7, #15]
        if (payload > sizeof(i2c_rx)-1) payload = sizeof(i2c_rx)-1; // bound
 80002c4:	7bfb      	ldrb	r3, [r7, #15]
 80002c6:	2b09      	cmp	r3, #9
 80002c8:	d901      	bls.n	80002ce <HAL_I2C_SlaveRxCpltCallback+0x22>
 80002ca:	2309      	movs	r3, #9
 80002cc:	73fb      	strb	r3, [r7, #15]
        rx_len = 1 + payload;
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	3301      	adds	r3, #1
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80002d6:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Slave_Seq_Receive_IT(hi2c, &i2c_rx[1], payload, I2C_LAST_FRAME);
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	b29a      	uxth	r2, r3
 80002dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80002e0:	4907      	ldr	r1, [pc, #28]	@ (8000300 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f001 f818 	bl	8001318 <HAL_I2C_Slave_Seq_Receive_IT>
    } else {
        // Full message received: set a flag for main loop to process
        have_new_cmd = 1;
    }
}
 80002e8:	e002      	b.n	80002f0 <HAL_I2C_SlaveRxCpltCallback+0x44>
        have_new_cmd = 1;
 80002ea:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <HAL_I2C_SlaveRxCpltCallback+0x58>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	701a      	strb	r2, [r3, #0]
}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000112 	.word	0x20000112
 80002fc:	200000fc 	.word	0x200000fc
 8000300:	200000fd 	.word	0x200000fd
 8000304:	20000114 	.word	0x20000114

08000308 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
    // Done responding; go back to listening
    i2c_listen(hi2c);
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f7ff ff81 	bl	8000218 <i2c_listen>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b082      	sub	sp, #8
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
    // Re-enter listen mode right away
    i2c_listen(hi2c);
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f7ff ff76 	bl	8000218 <i2c_listen>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    // DO NOT heavy-handle in IRQ; just recover listen
    (void)HAL_I2C_GetError(hi2c);
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f001 f96a 	bl	8001616 <HAL_I2C_GetError>
    i2c_listen(hi2c);
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f7ff ff68 	bl	8000218 <i2c_listen>
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000354:	f000 fae1 	bl	800091a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000358:	f000 f81c 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035c:	f000 f926 	bl	80005ac <MX_GPIO_Init>
  MX_I2C2_Init();
 8000360:	f000 f862 	bl	8000428 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000364:	f000 f8a0 	bl	80004a8 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000368:	f009 fd6e 	bl	8009e48 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800036c:	2100      	movs	r1, #0
 800036e:	4807      	ldr	r0, [pc, #28]	@ (800038c <main+0x3c>)
 8000370:	f005 f924 	bl	80055bc <HAL_TIM_PWM_Start>
  //uint32_t position = 0;
  if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK) //Enters slave to listen for master requests
 8000374:	4806      	ldr	r0, [pc, #24]	@ (8000390 <main+0x40>)
 8000376:	f001 f881 	bl	800147c <HAL_I2C_EnableListen_IT>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d002      	beq.n	8000386 <main+0x36>
   	{
   		Error_Handler();
 8000380:	f000 f95e 	bl	8000640 <Error_Handler>
   	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	e7fd      	b.n	8000386 <main+0x36>
 800038a:	bf00      	nop
 800038c:	20000178 	.word	0x20000178
 8000390:	20000124 	.word	0x20000124

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b094      	sub	sp, #80	@ 0x50
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0318 	add.w	r3, r7, #24
 800039e:	2238      	movs	r2, #56	@ 0x38
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f00a f9aa 	bl	800a6fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003ba:	f004 f8b1 	bl	8004520 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003be:	2301      	movs	r3, #1
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c8:	2302      	movs	r3, #2
 80003ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003cc:	2303      	movs	r3, #3
 80003ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80003d4:	230c      	movs	r3, #12
 80003d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003d8:	2302      	movs	r3, #2
 80003da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80003dc:	2304      	movs	r3, #4
 80003de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003e0:	2302      	movs	r3, #2
 80003e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e4:	f107 0318 	add.w	r3, r7, #24
 80003e8:	4618      	mov	r0, r3
 80003ea:	f004 f94d 	bl	8004688 <HAL_RCC_OscConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80003f4:	f000 f924 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f8:	230f      	movs	r3, #15
 80003fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fc:	2303      	movs	r3, #3
 80003fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2103      	movs	r1, #3
 8000410:	4618      	mov	r0, r3
 8000412:	f004 fc4b 	bl	8004cac <HAL_RCC_ClockConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800041c:	f000 f910 	bl	8000640 <Error_Handler>
  }
}
 8000420:	bf00      	nop
 8000422:	3750      	adds	r7, #80	@ 0x50
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800042c:	4b1b      	ldr	r3, [pc, #108]	@ (800049c <MX_I2C2_Init+0x74>)
 800042e:	4a1c      	ldr	r2, [pc, #112]	@ (80004a0 <MX_I2C2_Init+0x78>)
 8000430:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B17DB6;
 8000432:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <MX_I2C2_Init+0x74>)
 8000434:	4a1b      	ldr	r2, [pc, #108]	@ (80004a4 <MX_I2C2_Init+0x7c>)
 8000436:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 100;
 8000438:	4b18      	ldr	r3, [pc, #96]	@ (800049c <MX_I2C2_Init+0x74>)
 800043a:	2264      	movs	r2, #100	@ 0x64
 800043c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800043e:	4b17      	ldr	r3, [pc, #92]	@ (800049c <MX_I2C2_Init+0x74>)
 8000440:	2201      	movs	r2, #1
 8000442:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000444:	4b15      	ldr	r3, [pc, #84]	@ (800049c <MX_I2C2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800044a:	4b14      	ldr	r3, [pc, #80]	@ (800049c <MX_I2C2_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000450:	4b12      	ldr	r3, [pc, #72]	@ (800049c <MX_I2C2_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000456:	4b11      	ldr	r3, [pc, #68]	@ (800049c <MX_I2C2_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800045c:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <MX_I2C2_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000462:	480e      	ldr	r0, [pc, #56]	@ (800049c <MX_I2C2_Init+0x74>)
 8000464:	f000 fe0a 	bl	800107c <HAL_I2C_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800046e:	f000 f8e7 	bl	8000640 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000472:	2100      	movs	r1, #0
 8000474:	4809      	ldr	r0, [pc, #36]	@ (800049c <MX_I2C2_Init+0x74>)
 8000476:	f002 faf9 	bl	8002a6c <HAL_I2CEx_ConfigAnalogFilter>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000480:	f000 f8de 	bl	8000640 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000484:	2100      	movs	r1, #0
 8000486:	4805      	ldr	r0, [pc, #20]	@ (800049c <MX_I2C2_Init+0x74>)
 8000488:	f002 fb3b 	bl	8002b02 <HAL_I2CEx_ConfigDigitalFilter>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000492:	f000 f8d5 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000124 	.word	0x20000124
 80004a0:	40005800 	.word	0x40005800
 80004a4:	20b17db6 	.word	0x20b17db6

080004a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08e      	sub	sp, #56	@ 0x38
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004bc:	f107 031c 	add.w	r3, r7, #28
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c8:	463b      	mov	r3, r7
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004da:	4b33      	ldr	r3, [pc, #204]	@ (80005a8 <MX_TIM2_Init+0x100>)
 80004dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 80004e2:	4b31      	ldr	r3, [pc, #196]	@ (80005a8 <MX_TIM2_Init+0x100>)
 80004e4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80004e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ea:	4b2f      	ldr	r3, [pc, #188]	@ (80005a8 <MX_TIM2_Init+0x100>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80004f0:	4b2d      	ldr	r3, [pc, #180]	@ (80005a8 <MX_TIM2_Init+0x100>)
 80004f2:	f04f 32ff 	mov.w	r2, #4294967295
 80004f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f8:	4b2b      	ldr	r3, [pc, #172]	@ (80005a8 <MX_TIM2_Init+0x100>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fe:	4b2a      	ldr	r3, [pc, #168]	@ (80005a8 <MX_TIM2_Init+0x100>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000504:	4828      	ldr	r0, [pc, #160]	@ (80005a8 <MX_TIM2_Init+0x100>)
 8000506:	f004 ffa1 	bl	800544c <HAL_TIM_Base_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000510:	f000 f896 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000518:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800051a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800051e:	4619      	mov	r1, r3
 8000520:	4821      	ldr	r0, [pc, #132]	@ (80005a8 <MX_TIM2_Init+0x100>)
 8000522:	f005 fa5f 	bl	80059e4 <HAL_TIM_ConfigClockSource>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800052c:	f000 f888 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000530:	481d      	ldr	r0, [pc, #116]	@ (80005a8 <MX_TIM2_Init+0x100>)
 8000532:	f004 ffe2 	bl	80054fa <HAL_TIM_PWM_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800053c:	f000 f880 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000540:	2300      	movs	r3, #0
 8000542:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000548:	f107 031c 	add.w	r3, r7, #28
 800054c:	4619      	mov	r1, r3
 800054e:	4816      	ldr	r0, [pc, #88]	@ (80005a8 <MX_TIM2_Init+0x100>)
 8000550:	f005 ff96 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800055a:	f000 f871 	bl	8000640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800055e:	2360      	movs	r3, #96	@ 0x60
 8000560:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	4619      	mov	r1, r3
 8000574:	480c      	ldr	r0, [pc, #48]	@ (80005a8 <MX_TIM2_Init+0x100>)
 8000576:	f005 f921 	bl	80057bc <HAL_TIM_PWM_ConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000580:	f000 f85e 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	2204      	movs	r2, #4
 8000588:	4619      	mov	r1, r3
 800058a:	4807      	ldr	r0, [pc, #28]	@ (80005a8 <MX_TIM2_Init+0x100>)
 800058c:	f005 f916 	bl	80057bc <HAL_TIM_PWM_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000596:	f000 f853 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800059a:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <MX_TIM2_Init+0x100>)
 800059c:	f000 f900 	bl	80007a0 <HAL_TIM_MspPostInit>

}
 80005a0:	bf00      	nop
 80005a2:	3738      	adds	r7, #56	@ 0x38
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000178 	.word	0x20000178

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c2:	4b1e      	ldr	r3, [pc, #120]	@ (800063c <MX_GPIO_Init+0x90>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	4a1d      	ldr	r2, [pc, #116]	@ (800063c <MX_GPIO_Init+0x90>)
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ce:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <MX_GPIO_Init+0x90>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	f003 0320 	and.w	r3, r3, #32
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_GPIO_Init+0x90>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	4a17      	ldr	r2, [pc, #92]	@ (800063c <MX_GPIO_Init+0x90>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_GPIO_Init+0x90>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_GPIO_Init+0x90>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a11      	ldr	r2, [pc, #68]	@ (800063c <MX_GPIO_Init+0x90>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_GPIO_Init+0x90>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2101      	movs	r1, #1
 800060e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000612:	f000 fd1b 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000616:	2301      	movs	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000630:	f000 fb8a 	bl	8000d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <Error_Handler+0x8>

0800064c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <HAL_MspInit+0x44>)
 8000654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_MspInit+0x44>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6613      	str	r3, [r2, #96]	@ 0x60
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <HAL_MspInit+0x44>)
 8000660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <HAL_MspInit+0x44>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066e:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <HAL_MspInit+0x44>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000674:	6593      	str	r3, [r2, #88]	@ 0x58
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_MspInit+0x44>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800067a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000682:	f003 fff1 	bl	8004668 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09a      	sub	sp, #104	@ 0x68
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	2244      	movs	r2, #68	@ 0x44
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00a f821 	bl	800a6fc <memset>
  if(hi2c->Instance==I2C2)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a27      	ldr	r2, [pc, #156]	@ (800075c <HAL_I2C_MspInit+0xc8>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d147      	bne.n	8000754 <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4618      	mov	r0, r3
 80006d2:	f004 fccb 	bl	800506c <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006dc:	f7ff ffb0 	bl	8000640 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006fe:	2312      	movs	r3, #18
 8000700:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800070a:	2304      	movs	r3, #4
 800070c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000712:	4619      	mov	r1, r3
 8000714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000718:	f000 fb16 	bl	8000d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800071c:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 800071e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000720:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 8000722:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000726:	6593      	str	r3, [r2, #88]	@ 0x58
 8000728:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 800072a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	2021      	movs	r0, #33	@ 0x21
 800073a:	f000 fa5c 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800073e:	2021      	movs	r0, #33	@ 0x21
 8000740:	f000 fa73 	bl	8000c2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	2022      	movs	r0, #34	@ 0x22
 800074a:	f000 fa54 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800074e:	2022      	movs	r0, #34	@ 0x22
 8000750:	f000 fa6b 	bl	8000c2a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000754:	bf00      	nop
 8000756:	3768      	adds	r7, #104	@ 0x68
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40005800 	.word	0x40005800
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000774:	d10b      	bne.n	800078e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_TIM_Base_MspInit+0x38>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_TIM_Base_MspInit+0x38>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6593      	str	r3, [r2, #88]	@ 0x58
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_TIM_Base_MspInit+0x38>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007c0:	d11c      	bne.n	80007fc <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <HAL_TIM_MspPostInit+0x64>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000804 <HAL_TIM_MspPostInit+0x64>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <HAL_TIM_MspPostInit+0x64>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80007da:	2322      	movs	r3, #34	@ 0x22
 80007dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f8:	f000 faa6 	bl	8000d48 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <NMI_Handler+0x4>

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <UsageFault_Handler+0x4>

08000830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085e:	f000 f8af 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800086c:	4802      	ldr	r0, [pc, #8]	@ (8000878 <USB_LP_IRQHandler+0x10>)
 800086e:	f002 faa6 	bl	8002dbe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000798 	.word	0x20000798

0800087c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000880:	4802      	ldr	r0, [pc, #8]	@ (800088c <I2C2_EV_IRQHandler+0x10>)
 8000882:	f000 fe1b 	bl	80014bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000124 	.word	0x20000124

08000890 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000894:	4802      	ldr	r0, [pc, #8]	@ (80008a0 <I2C2_ER_IRQHandler+0x10>)
 8000896:	f000 fe2b 	bl	80014f0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000124 	.word	0x20000124

080008a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <SystemInit+0x20>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ae:	4a05      	ldr	r2, [pc, #20]	@ (80008c4 <SystemInit+0x20>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c8:	480d      	ldr	r0, [pc, #52]	@ (8000900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008cc:	f7ff ffea 	bl	80008a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	@ (8000904 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	@ (8000908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <LoopForever+0xe>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000914 <LoopForever+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80008f6:	f009 ff09 	bl	800a70c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008fa:	f7ff fd29 	bl	8000350 <main>

080008fe <LoopForever>:

LoopForever:
    b LoopForever
 80008fe:	e7fe      	b.n	80008fe <LoopForever>
  ldr   r0, =_estack
 8000900:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 800090c:	0800a834 	.word	0x0800a834
  ldr r2, =_sbss
 8000910:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8000914:	20000e94 	.word	0x20000e94

08000918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_2_IRQHandler>

0800091a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 f95b 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800092a:	200f      	movs	r0, #15
 800092c:	f000 f80e 	bl	800094c <HAL_InitTick>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	71fb      	strb	r3, [r7, #7]
 800093a:	e001      	b.n	8000940 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800093c:	f7ff fe86 	bl	800064c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000940:	79fb      	ldrb	r3, [r7, #7]

}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000958:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <HAL_InitTick+0x68>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d022      	beq.n	80009a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <HAL_InitTick+0x6c>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <HAL_InitTick+0x68>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800096c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000970:	fbb2 f3f3 	udiv	r3, r2, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f000 f966 	bl	8000c46 <HAL_SYSTICK_Config>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10f      	bne.n	80009a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b0f      	cmp	r3, #15
 8000984:	d809      	bhi.n	800099a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000986:	2200      	movs	r2, #0
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	f04f 30ff 	mov.w	r0, #4294967295
 800098e:	f000 f932 	bl	8000bf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_InitTick+0x70>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	e007      	b.n	80009aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	e004      	b.n	80009aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e001      	b.n	80009aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <HAL_IncTick+0x1c>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <HAL_IncTick+0x20>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a03      	ldr	r2, [pc, #12]	@ (80009dc <HAL_IncTick+0x1c>)
 80009d0:	6013      	str	r3, [r2, #0]
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	200001c4 	.word	0x200001c4
 80009e0:	20000008 	.word	0x20000008

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	200001c4 	.word	0x200001c4

080009fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a04:	f7ff ffee 	bl	80009e4 <HAL_GetTick>
 8000a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a14:	d004      	beq.n	8000a20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_Delay+0x40>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a20:	bf00      	nop
 8000a22:	f7ff ffdf 	bl	80009e4 <HAL_GetTick>
 8000a26:	4602      	mov	r2, r0
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d8f7      	bhi.n	8000a22 <HAL_Delay+0x26>
  {
  }
}
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000008 	.word	0x20000008

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4907      	ldr	r1, [pc, #28]	@ (8000adc <__NVIC_EnableIRQ+0x38>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	@ (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	@ (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	@ 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	@ 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff29 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c04:	f7ff ff40 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff ff90 	bl	8000b34 <NVIC_EncodePriority>
 8000c14:	4602      	mov	r2, r0
 8000c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5f 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff33 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffa4 	bl	8000b9c <SysTick_Config>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b084      	sub	sp, #16
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d00d      	beq.n	8000c92 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2204      	movs	r2, #4
 8000c7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e047      	b.n	8000d22 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f022 020e 	bic.w	r2, r2, #14
 8000ca0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 0201 	bic.w	r2, r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	f003 021f 	and.w	r2, r3, #31
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000cde:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cf2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000cf6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000d00:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	4798      	blx	r3
    }
  }
  return status;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d3a:	b2db      	uxtb	r3, r3
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d56:	e15a      	b.n	800100e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	4013      	ands	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 814c 	beq.w	8001008 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d005      	beq.n	8000d88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d130      	bne.n	8000dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	091b      	lsrs	r3, r3, #4
 8000dd4:	f003 0201 	and.w	r2, r3, #1
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d017      	beq.n	8000e26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d123      	bne.n	8000e7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	08da      	lsrs	r2, r3, #3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3208      	adds	r2, #8
 8000e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	220f      	movs	r2, #15
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	691a      	ldr	r2, [r3, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	6939      	ldr	r1, [r7, #16]
 8000e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0203 	and.w	r2, r3, #3
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 80a6 	beq.w	8001008 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800102c <HAL_GPIO_Init+0x2e4>)
 8000ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800102c <HAL_GPIO_Init+0x2e4>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec8:	4b58      	ldr	r3, [pc, #352]	@ (800102c <HAL_GPIO_Init+0x2e4>)
 8000eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed4:	4a56      	ldr	r2, [pc, #344]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000efe:	d01f      	beq.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a4c      	ldr	r2, [pc, #304]	@ (8001034 <HAL_GPIO_Init+0x2ec>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d019      	beq.n	8000f3c <HAL_GPIO_Init+0x1f4>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a4b      	ldr	r2, [pc, #300]	@ (8001038 <HAL_GPIO_Init+0x2f0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d013      	beq.n	8000f38 <HAL_GPIO_Init+0x1f0>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a4a      	ldr	r2, [pc, #296]	@ (800103c <HAL_GPIO_Init+0x2f4>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d00d      	beq.n	8000f34 <HAL_GPIO_Init+0x1ec>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a49      	ldr	r2, [pc, #292]	@ (8001040 <HAL_GPIO_Init+0x2f8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d007      	beq.n	8000f30 <HAL_GPIO_Init+0x1e8>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a48      	ldr	r2, [pc, #288]	@ (8001044 <HAL_GPIO_Init+0x2fc>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d101      	bne.n	8000f2c <HAL_GPIO_Init+0x1e4>
 8000f28:	2305      	movs	r3, #5
 8000f2a:	e00a      	b.n	8000f42 <HAL_GPIO_Init+0x1fa>
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	e008      	b.n	8000f42 <HAL_GPIO_Init+0x1fa>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e006      	b.n	8000f42 <HAL_GPIO_Init+0x1fa>
 8000f34:	2303      	movs	r3, #3
 8000f36:	e004      	b.n	8000f42 <HAL_GPIO_Init+0x1fa>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e002      	b.n	8000f42 <HAL_GPIO_Init+0x1fa>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e000      	b.n	8000f42 <HAL_GPIO_Init+0x1fa>
 8000f40:	2300      	movs	r3, #0
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	f002 0203 	and.w	r2, r2, #3
 8000f48:	0092      	lsls	r2, r2, #2
 8000f4a:	4093      	lsls	r3, r2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f52:	4937      	ldr	r1, [pc, #220]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f60:	4b39      	ldr	r3, [pc, #228]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f84:	4a30      	ldr	r2, [pc, #192]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fae:	4a26      	ldr	r2, [pc, #152]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001002:	4a11      	ldr	r2, [pc, #68]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	f47f ae9d 	bne.w	8000d58 <HAL_GPIO_Init+0x10>
  }
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000
 8001034:	48000400 	.word	0x48000400
 8001038:	48000800 	.word	0x48000800
 800103c:	48000c00 	.word	0x48000c00
 8001040:	48001000 	.word	0x48001000
 8001044:	48001400 	.word	0x48001400
 8001048:	40010400 	.word	0x40010400

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001068:	e002      	b.n	8001070 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e08d      	b.n	80011aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d106      	bne.n	80010a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff faf6 	bl	8000694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2224      	movs	r2, #36	@ 0x24
 80010ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0201 	bic.w	r2, r2, #1
 80010be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d107      	bne.n	80010f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	e006      	b.n	8001104 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001102:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d108      	bne.n	800111e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	e007      	b.n	800112e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800112c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800113c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001140:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001150:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691a      	ldr	r2, [r3, #16]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69d9      	ldr	r1, [r3, #28]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1a      	ldr	r2, [r3, #32]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0201 	orr.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2220      	movs	r2, #32
 8001196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	4613      	mov	r3, r2
 80011c2:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80011d0:	2b28      	cmp	r3, #40	@ 0x28
 80011d2:	f040 8098 	bne.w	8001306 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e08c      	b.n	8001308 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80011ee:	f248 0101 	movw	r1, #32769	@ 0x8001
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f001 fbdc 	bl	80029b0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8001202:	2302      	movs	r3, #2
 8001204:	e080      	b.n	8001308 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b2a      	cmp	r3, #42	@ 0x2a
 8001218:	d12a      	bne.n	8001270 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800121a:	2102      	movs	r1, #2
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f001 fbc7 	bl	80029b0 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800122c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001230:	d11e      	bne.n	8001270 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001240:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001246:	2b00      	cmp	r3, #0
 8001248:	d012      	beq.n	8001270 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800124e:	4a30      	ldr	r2, [pc, #192]	@ (8001310 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8001250:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fd01 	bl	8000c5e <HAL_DMA_Abort_IT>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800126c:	4610      	mov	r0, r2
 800126e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2229      	movs	r2, #41	@ 0x29
 8001274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2220      	movs	r2, #32
 800127c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001294:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	88fa      	ldrh	r2, [r7, #6]
 80012a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 80012b6:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	bf0c      	ite	eq
 80012c6:	2301      	moveq	r3, #1
 80012c8:	2300      	movne	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	0c1b      	lsrs	r3, r3, #16
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d106      	bne.n	80012f0 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2208      	movs	r2, #8
 80012ee:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80012f8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f001 fad3 	bl	80028a8 <I2C_Enable_IRQ>

    return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
  }
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	08002807 	.word	0x08002807
 8001314:	0800162f 	.word	0x0800162f

08001318 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001334:	2b28      	cmp	r3, #40	@ 0x28
 8001336:	f040 8098 	bne.w	800146a <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d105      	bne.n	8001352 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800134c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e08c      	b.n	800146c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001352:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f001 fb2a 	bl	80029b0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8001366:	2302      	movs	r3, #2
 8001368:	e080      	b.n	800146c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b29      	cmp	r3, #41	@ 0x29
 800137c:	d12a      	bne.n	80013d4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800137e:	2101      	movs	r1, #1
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f001 fb15 	bl	80029b0 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001394:	d11e      	bne.n	80013d4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80013a4:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d012      	beq.n	80013d4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b2:	4a30      	ldr	r2, [pc, #192]	@ (8001474 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 80013b4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc4f 	bl	8000c5e <HAL_DMA_Abort_IT>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013d0:	4610      	mov	r0, r2
 80013d2:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	222a      	movs	r2, #42	@ 0x2a
 80013d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2220      	movs	r2, #32
 80013e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013f8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	88fa      	ldrh	r2, [r7, #6]
 8001404:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4a17      	ldr	r2, [pc, #92]	@ (8001478 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 800141a:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b08      	cmp	r3, #8
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d106      	bne.n	8001454 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2208      	movs	r2, #8
 8001452:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800145c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f001 fa21 	bl	80028a8 <I2C_Enable_IRQ>

    return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
  }
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	08002807 	.word	0x08002807
 8001478:	0800162f 	.word	0x0800162f

0800147c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b20      	cmp	r3, #32
 800148e:	d10d      	bne.n	80014ac <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2228      	movs	r2, #40	@ 0x28
 8001494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a07      	ldr	r2, [pc, #28]	@ (80014b8 <HAL_I2C_EnableListen_IT+0x3c>)
 800149c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800149e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f001 fa00 	bl	80028a8 <I2C_Enable_IRQ>

    return HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	e000      	b.n	80014ae <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80014ac:	2302      	movs	r3, #2
  }
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	0800162f 	.word	0x0800162f

080014bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	68f9      	ldr	r1, [r7, #12]
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	4798      	blx	r3
  }
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d010      	beq.n	8001536 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	09db      	lsrs	r3, r3, #7
 8001518:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00a      	beq.n	8001536 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001524:	f043 0201 	orr.w	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001534:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	0a9b      	lsrs	r3, r3, #10
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d010      	beq.n	8001564 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	09db      	lsrs	r3, r3, #7
 8001546:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00a      	beq.n	8001564 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f043 0208 	orr.w	r2, r3, #8
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001562:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	0a5b      	lsrs	r3, r3, #9
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d010      	beq.n	8001592 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	09db      	lsrs	r3, r3, #7
 8001574:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00a      	beq.n	8001592 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001580:	f043 0202 	orr.w	r2, r3, #2
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001590:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 030b 	and.w	r3, r3, #11
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80015a2:	68f9      	ldr	r1, [r7, #12]
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fff3 	bl	8002590 <I2C_ITError>
  }
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <I2C_Slave_ISR_IT+0x24>
 800164e:	2302      	movs	r3, #2
 8001650:	e0ed      	b.n	800182e <I2C_Slave_ISR_IT+0x200>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	095b      	lsrs	r3, r3, #5
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00a      	beq.n	800167c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	095b      	lsrs	r3, r3, #5
 800166a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001672:	6939      	ldr	r1, [r7, #16]
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 fdcb 	bl	8002210 <I2C_ITSlaveCplt>
 800167a:	e0d3      	b.n	8001824 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d04d      	beq.n	8001724 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001690:	2b00      	cmp	r3, #0
 8001692:	d047      	beq.n	8001724 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001698:	b29b      	uxth	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d128      	bne.n	80016f0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b28      	cmp	r3, #40	@ 0x28
 80016a8:	d108      	bne.n	80016bc <I2C_Slave_ISR_IT+0x8e>
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80016b0:	d104      	bne.n	80016bc <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80016b2:	6939      	ldr	r1, [r7, #16]
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 ff15 	bl	80024e4 <I2C_ITListenCplt>
 80016ba:	e032      	b.n	8001722 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b29      	cmp	r3, #41	@ 0x29
 80016c6:	d10e      	bne.n	80016e6 <I2C_Slave_ISR_IT+0xb8>
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80016ce:	d00a      	beq.n	80016e6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2210      	movs	r2, #16
 80016d6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f001 f870 	bl	80027be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 fc6e 	bl	8001fc0 <I2C_ITSlaveSeqCplt>
 80016e4:	e01d      	b.n	8001722 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2210      	movs	r2, #16
 80016ec:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80016ee:	e096      	b.n	800181e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2210      	movs	r2, #16
 80016f6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fc:	f043 0204 	orr.w	r2, r3, #4
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <I2C_Slave_ISR_IT+0xe6>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	f040 8085 	bne.w	800181e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001718:	4619      	mov	r1, r3
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 ff38 	bl	8002590 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001720:	e07d      	b.n	800181e <I2C_Slave_ISR_IT+0x1f0>
 8001722:	e07c      	b.n	800181e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d030      	beq.n	8001792 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001738:	2b00      	cmp	r3, #0
 800173a:	d02a      	beq.n	8001792 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d018      	beq.n	8001778 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001762:	3b01      	subs	r3, #1
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800176e:	b29b      	uxth	r3, r3
 8001770:	3b01      	subs	r3, #1
 8001772:	b29a      	uxth	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800177c:	b29b      	uxth	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d14f      	bne.n	8001822 <I2C_Slave_ISR_IT+0x1f4>
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001788:	d04b      	beq.n	8001822 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 fc18 	bl	8001fc0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001790:	e047      	b.n	8001822 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80017aa:	6939      	ldr	r1, [r7, #16]
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 fb46 	bl	8001e3e <I2C_ITAddrCplt>
 80017b2:	e037      	b.n	8001824 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d031      	beq.n	8001824 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d02b      	beq.n	8001824 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d018      	beq.n	8001808 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001806:	e00d      	b.n	8001824 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800180e:	d002      	beq.n	8001816 <I2C_Slave_ISR_IT+0x1e8>
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fbd2 	bl	8001fc0 <I2C_ITSlaveSeqCplt>
 800181c:	e002      	b.n	8001824 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800181e:	bf00      	nop
 8001820:	e000      	b.n	8001824 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8001822:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b088      	sub	sp, #32
 800183a:	af02      	add	r7, sp, #8
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <I2C_Master_ISR_DMA+0x1a>
 800184c:	2302      	movs	r3, #2
 800184e:	e0e1      	b.n	8001a14 <I2C_Master_ISR_DMA+0x1de>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d017      	beq.n	8001894 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800186c:	2b00      	cmp	r3, #0
 800186e:	d011      	beq.n	8001894 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2210      	movs	r2, #16
 8001876:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187c:	f043 0204 	orr.w	r2, r3, #4
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001884:	2120      	movs	r1, #32
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f001 f80e 	bl	80028a8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 ff96 	bl	80027be <I2C_Flush_TXDR>
 8001892:	e0ba      	b.n	8001a0a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	09db      	lsrs	r3, r3, #7
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d072      	beq.n	8001986 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d06c      	beq.n	8001986 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018ba:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d04e      	beq.n	8001964 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018d2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d8:	b29b      	uxth	r3, r3
 80018da:	2bff      	cmp	r3, #255	@ 0xff
 80018dc:	d906      	bls.n	80018ec <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	22ff      	movs	r2, #255	@ 0xff
 80018e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80018e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e010      	b.n	800190e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80018fe:	d003      	beq.n	8001908 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e002      	b.n	800190e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001908:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800190c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001912:	b2da      	uxtb	r2, r3
 8001914:	8a79      	ldrh	r1, [r7, #18]
 8001916:	2300      	movs	r3, #0
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 ff91 	bl	8002844 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b22      	cmp	r3, #34	@ 0x22
 800193e:	d108      	bne.n	8001952 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800194e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001950:	e05b      	b.n	8001a0a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001960:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001962:	e052      	b.n	8001a0a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001972:	d003      	beq.n	800197c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 fae6 	bl	8001f46 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800197a:	e046      	b.n	8001a0a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800197c:	2140      	movs	r1, #64	@ 0x40
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 fe06 	bl	8002590 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001984:	e041      	b.n	8001a0a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d029      	beq.n	80019e6 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	099b      	lsrs	r3, r3, #6
 8001996:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800199a:	2b00      	cmp	r3, #0
 800199c:	d023      	beq.n	80019e6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d119      	bne.n	80019dc <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019b6:	d027      	beq.n	8001a08 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80019c0:	d108      	bne.n	80019d4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019d0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80019d2:	e019      	b.n	8001a08 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 fab6 	bl	8001f46 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80019da:	e015      	b.n	8001a08 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80019dc:	2140      	movs	r1, #64	@ 0x40
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fdd6 	bl	8002590 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80019e4:	e010      	b.n	8001a08 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	095b      	lsrs	r3, r3, #5
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	095b      	lsrs	r3, r3, #5
 80019f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 fb3b 	bl	800207c <I2C_ITMasterCplt>
 8001a06:	e000      	b.n	8001a0a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001a08:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001a28:	4b92      	ldr	r3, [pc, #584]	@ (8001c74 <I2C_Mem_ISR_DMA+0x258>)
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <I2C_Mem_ISR_DMA+0x1e>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e118      	b.n	8001c6c <I2C_Mem_ISR_DMA+0x250>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d017      	beq.n	8001a7e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d011      	beq.n	8001a7e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2210      	movs	r2, #16
 8001a60:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	f043 0204 	orr.w	r2, r3, #4
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001a6e:	2120      	movs	r1, #32
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 ff19 	bl	80028a8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 fea1 	bl	80027be <I2C_Flush_TXDR>
 8001a7c:	e0f1      	b.n	8001c62 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00f      	beq.n	8001aaa <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001aa8:	e0db      	b.n	8001c62 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	09db      	lsrs	r3, r3, #7
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d060      	beq.n	8001b78 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	099b      	lsrs	r3, r3, #6
 8001aba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d05a      	beq.n	8001b78 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 ff73 	bl	80029b0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001aca:	2110      	movs	r1, #16
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 feeb 	bl	80028a8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d048      	beq.n	8001b6e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	2bff      	cmp	r3, #255	@ 0xff
 8001ae4:	d910      	bls.n	8001b08 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	22ff      	movs	r2, #255	@ 0xff
 8001aea:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af0:	b299      	uxth	r1, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	2300      	movs	r3, #0
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 fe9f 	bl	8002844 <I2C_TransferConfig>
 8001b06:	e011      	b.n	8001b2c <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	b299      	uxth	r1, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	2300      	movs	r3, #0
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 fe8c 	bl	8002844 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b22      	cmp	r3, #34	@ 0x22
 8001b48:	d108      	bne.n	8001b5c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001b5a:	e082      	b.n	8001c62 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b6a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001b6c:	e079      	b.n	8001c62 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001b6e:	2140      	movs	r1, #64	@ 0x40
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 fd0d 	bl	8002590 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001b76:	e074      	b.n	8001c62 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d05e      	beq.n	8001c42 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d058      	beq.n	8001c42 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b90:	2101      	movs	r1, #1
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 ff0c 	bl	80029b0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001b98:	2110      	movs	r1, #16
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 fe84 	bl	80028a8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b22      	cmp	r3, #34	@ 0x22
 8001baa:	d101      	bne.n	8001bb0 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8001bac:	4b32      	ldr	r3, [pc, #200]	@ (8001c78 <I2C_Mem_ISR_DMA+0x25c>)
 8001bae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2bff      	cmp	r3, #255	@ 0xff
 8001bb8:	d910      	bls.n	8001bdc <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	22ff      	movs	r2, #255	@ 0xff
 8001bbe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fe35 	bl	8002844 <I2C_TransferConfig>
 8001bda:	e011      	b.n	8001c00 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	b299      	uxth	r1, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 fe22 	bl	8002844 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b22      	cmp	r3, #34	@ 0x22
 8001c1c:	d108      	bne.n	8001c30 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c2c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c2e:	e018      	b.n	8001c62 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c3e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c40:	e00f      	b.n	8001c62 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	095b      	lsrs	r3, r3, #5
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 fa0d 	bl	800207c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	80002000 	.word	0x80002000
 8001c78:	80002400 	.word	0x80002400

08001c7c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <I2C_Slave_ISR_DMA+0x24>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e0ca      	b.n	8001e36 <I2C_Slave_ISR_DMA+0x1ba>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00a      	beq.n	8001cca <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 faa4 	bl	8002210 <I2C_ITSlaveCplt>
 8001cc8:	e0b0      	b.n	8001e2c <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 809a 	beq.w	8001e0c <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8093 	beq.w	8001e0c <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0b9b      	lsrs	r3, r3, #14
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d105      	bne.n	8001cfe <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	0bdb      	lsrs	r3, r3, #15
 8001cf6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d07f      	beq.n	8001dfe <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	0bdb      	lsrs	r3, r3, #15
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00d      	beq.n	8001d46 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	0b9b      	lsrs	r3, r3, #14
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d128      	bne.n	8001d9e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b28      	cmp	r3, #40	@ 0x28
 8001d56:	d108      	bne.n	8001d6a <I2C_Slave_ISR_DMA+0xee>
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d5e:	d104      	bne.n	8001d6a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fbbe 	bl	80024e4 <I2C_ITListenCplt>
 8001d68:	e048      	b.n	8001dfc <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b29      	cmp	r3, #41	@ 0x29
 8001d74:	d10e      	bne.n	8001d94 <I2C_Slave_ISR_DMA+0x118>
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d7c:	d00a      	beq.n	8001d94 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2210      	movs	r2, #16
 8001d84:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 fd19 	bl	80027be <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f917 	bl	8001fc0 <I2C_ITSlaveSeqCplt>
 8001d92:	e033      	b.n	8001dfc <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001d9c:	e034      	b.n	8001e08 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2210      	movs	r2, #16
 8001da4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	f043 0204 	orr.w	r2, r3, #4
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <I2C_Slave_ISR_DMA+0x14c>
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dc6:	d11f      	bne.n	8001e08 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b21      	cmp	r3, #33	@ 0x21
 8001dcc:	d002      	beq.n	8001dd4 <I2C_Slave_ISR_DMA+0x158>
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	2b29      	cmp	r3, #41	@ 0x29
 8001dd2:	d103      	bne.n	8001ddc <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2221      	movs	r2, #33	@ 0x21
 8001dd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dda:	e008      	b.n	8001dee <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b22      	cmp	r3, #34	@ 0x22
 8001de0:	d002      	beq.n	8001de8 <I2C_Slave_ISR_DMA+0x16c>
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001de6:	d102      	bne.n	8001dee <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2222      	movs	r2, #34	@ 0x22
 8001dec:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4619      	mov	r1, r3
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fbcb 	bl	8002590 <I2C_ITError>
      if (treatdmanack == 1U)
 8001dfa:	e005      	b.n	8001e08 <I2C_Slave_ISR_DMA+0x18c>
 8001dfc:	e004      	b.n	8001e08 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2210      	movs	r2, #16
 8001e04:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e06:	e011      	b.n	8001e2c <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8001e08:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e0a:	e00f      	b.n	8001e2c <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	08db      	lsrs	r3, r3, #3
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	08db      	lsrs	r3, r3, #3
 8001e1c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f809 	bl	8001e3e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001e54:	2b28      	cmp	r3, #40	@ 0x28
 8001e56:	d16a      	bne.n	8001f2e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	0c1b      	lsrs	r3, r3, #16
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	0c1b      	lsrs	r3, r3, #16
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001e76:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e84:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001e92:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d138      	bne.n	8001f0e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001e9c:	897b      	ldrh	r3, [r7, #10]
 8001e9e:	09db      	lsrs	r3, r3, #7
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	89bb      	ldrh	r3, [r7, #12]
 8001ea4:	4053      	eors	r3, r2
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	f003 0306 	and.w	r3, r3, #6
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d11c      	bne.n	8001eea <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001eb0:	897b      	ldrh	r3, [r7, #10]
 8001eb2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d13b      	bne.n	8001f3e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001edc:	89ba      	ldrh	r2, [r7, #12]
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe f9a4 	bl	8000230 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001ee8:	e029      	b.n	8001f3e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001eea:	893b      	ldrh	r3, [r7, #8]
 8001eec:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001eee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fd5c 	bl	80029b0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f00:	89ba      	ldrh	r2, [r7, #12]
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	4619      	mov	r1, r3
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe f992 	bl	8000230 <HAL_I2C_AddrCallback>
}
 8001f0c:	e017      	b.n	8001f3e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001f0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fd4c 	bl	80029b0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f20:	89ba      	ldrh	r2, [r7, #12]
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe f982 	bl	8000230 <HAL_I2C_AddrCallback>
}
 8001f2c:	e007      	b.n	8001f3e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2208      	movs	r2, #8
 8001f34:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b21      	cmp	r3, #33	@ 0x21
 8001f60:	d115      	bne.n	8001f8e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2211      	movs	r2, #17
 8001f6e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f76:	2101      	movs	r1, #1
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fd19 	bl	80029b0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fb13 	bl	80015b2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f8c:	e014      	b.n	8001fb8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2212      	movs	r2, #18
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fd03 	bl	80029b0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fb07 	bl	80015c6 <HAL_I2C_MasterRxCpltCallback>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	0b9b      	lsrs	r3, r3, #14
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e00d      	b.n	8002012 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	0bdb      	lsrs	r3, r3, #15
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002010:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b29      	cmp	r3, #41	@ 0x29
 800201c:	d112      	bne.n	8002044 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2228      	movs	r2, #40	@ 0x28
 8002022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2221      	movs	r2, #33	@ 0x21
 800202a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800202c:	2101      	movs	r1, #1
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fcbe 	bl	80029b0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7fe f963 	bl	8000308 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002042:	e017      	b.n	8002074 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b2a      	cmp	r3, #42	@ 0x2a
 800204e:	d111      	bne.n	8002074 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2228      	movs	r2, #40	@ 0x28
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2222      	movs	r2, #34	@ 0x22
 800205c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800205e:	2102      	movs	r1, #2
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 fca5 	bl	80029b0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe f91c 	bl	80002ac <HAL_I2C_SlaveRxCpltCallback>
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2220      	movs	r2, #32
 8002090:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b21      	cmp	r3, #33	@ 0x21
 800209c:	d107      	bne.n	80020ae <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800209e:	2101      	movs	r1, #1
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fc85 	bl	80029b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2211      	movs	r2, #17
 80020aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80020ac:	e00c      	b.n	80020c8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b22      	cmp	r3, #34	@ 0x22
 80020b8:	d106      	bne.n	80020c8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80020ba:	2102      	movs	r1, #2
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fc77 	bl	80029b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2212      	movs	r2, #18
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6859      	ldr	r1, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002208 <I2C_ITMasterCplt+0x18c>)
 80020d4:	400b      	ands	r3, r1
 80020d6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4a      	ldr	r2, [pc, #296]	@ (800220c <I2C_ITMasterCplt+0x190>)
 80020e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2210      	movs	r2, #16
 80020f6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fc:	f043 0204 	orr.w	r2, r3, #4
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b60      	cmp	r3, #96	@ 0x60
 800210e:	d10b      	bne.n	8002128 <I2C_ITMasterCplt+0xac>
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	b2db      	uxtb	r3, r3
 8002124:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002126:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fb48 	bl	80027be <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b60      	cmp	r3, #96	@ 0x60
 800213e:	d002      	beq.n	8002146 <I2C_ITMasterCplt+0xca>
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fa1f 	bl	8002590 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002152:	e054      	b.n	80021fe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b21      	cmp	r3, #33	@ 0x21
 800215e:	d124      	bne.n	80021aa <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b40      	cmp	r3, #64	@ 0x40
 8002178:	d10b      	bne.n	8002192 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fa25 	bl	80015da <HAL_I2C_MemTxCpltCallback>
}
 8002190:	e035      	b.n	80021fe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fa05 	bl	80015b2 <HAL_I2C_MasterTxCpltCallback>
}
 80021a8:	e029      	b.n	80021fe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b22      	cmp	r3, #34	@ 0x22
 80021b4:	d123      	bne.n	80021fe <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b40      	cmp	r3, #64	@ 0x40
 80021ce:	d10b      	bne.n	80021e8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fa04 	bl	80015ee <HAL_I2C_MemRxCpltCallback>
}
 80021e6:	e00a      	b.n	80021fe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff f9e4 	bl	80015c6 <HAL_I2C_MasterRxCpltCallback>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	fe00e800 	.word	0xfe00e800
 800220c:	ffff0000 	.word	0xffff0000

08002210 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002232:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2220      	movs	r2, #32
 800223a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800223c:	7afb      	ldrb	r3, [r7, #11]
 800223e:	2b21      	cmp	r3, #33	@ 0x21
 8002240:	d002      	beq.n	8002248 <I2C_ITSlaveCplt+0x38>
 8002242:	7afb      	ldrb	r3, [r7, #11]
 8002244:	2b29      	cmp	r3, #41	@ 0x29
 8002246:	d108      	bne.n	800225a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002248:	f248 0101 	movw	r1, #32769	@ 0x8001
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fbaf 	bl	80029b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2221      	movs	r2, #33	@ 0x21
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
 8002258:	e019      	b.n	800228e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	2b22      	cmp	r3, #34	@ 0x22
 800225e:	d002      	beq.n	8002266 <I2C_ITSlaveCplt+0x56>
 8002260:	7afb      	ldrb	r3, [r7, #11]
 8002262:	2b2a      	cmp	r3, #42	@ 0x2a
 8002264:	d108      	bne.n	8002278 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002266:	f248 0102 	movw	r1, #32770	@ 0x8002
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fba0 	bl	80029b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2222      	movs	r2, #34	@ 0x22
 8002274:	631a      	str	r2, [r3, #48]	@ 0x30
 8002276:	e00a      	b.n	800228e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002278:	7afb      	ldrb	r3, [r7, #11]
 800227a:	2b28      	cmp	r3, #40	@ 0x28
 800227c:	d107      	bne.n	800228e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800227e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fb94 	bl	80029b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800229c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b8c      	ldr	r3, [pc, #560]	@ (80024dc <I2C_ITSlaveCplt+0x2cc>)
 80022aa:	400b      	ands	r3, r1
 80022ac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa85 	bl	80027be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	0b9b      	lsrs	r3, r3, #14
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d013      	beq.n	80022e8 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022e6:	e018      	b.n	800231a <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	0bdb      	lsrs	r3, r3, #15
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d012      	beq.n	800231a <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002302:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d020      	beq.n	8002368 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f023 0304 	bic.w	r3, r3, #4
 800232c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00c      	beq.n	8002368 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f043 0204 	orr.w	r2, r3, #4
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d04a      	beq.n	8002420 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002392:	2b00      	cmp	r3, #0
 8002394:	d044      	beq.n	8002420 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d128      	bne.n	80023f2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b28      	cmp	r3, #40	@ 0x28
 80023aa:	d108      	bne.n	80023be <I2C_ITSlaveCplt+0x1ae>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023b2:	d104      	bne.n	80023be <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80023b4:	6979      	ldr	r1, [r7, #20]
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f894 	bl	80024e4 <I2C_ITListenCplt>
 80023bc:	e030      	b.n	8002420 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b29      	cmp	r3, #41	@ 0x29
 80023c8:	d10e      	bne.n	80023e8 <I2C_ITSlaveCplt+0x1d8>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023d0:	d00a      	beq.n	80023e8 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2210      	movs	r2, #16
 80023d8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f9ef 	bl	80027be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff fded 	bl	8001fc0 <I2C_ITSlaveSeqCplt>
 80023e6:	e01b      	b.n	8002420 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	61da      	str	r2, [r3, #28]
 80023f0:	e016      	b.n	8002420 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2210      	movs	r2, #16
 80023f8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	f043 0204 	orr.w	r2, r3, #4
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <I2C_ITSlaveCplt+0x204>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002412:	d105      	bne.n	8002420 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8b8 	bl	8002590 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	2b00      	cmp	r3, #0
 8002434:	d010      	beq.n	8002458 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	4619      	mov	r1, r3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f8a7 	bl	8002590 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b28      	cmp	r3, #40	@ 0x28
 800244c:	d141      	bne.n	80024d2 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800244e:	6979      	ldr	r1, [r7, #20]
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f847 	bl	80024e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002456:	e03c      	b.n	80024d2 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002460:	d014      	beq.n	800248c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fdac 	bl	8001fc0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <I2C_ITSlaveCplt+0x2d0>)
 800246c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7fd ff4a 	bl	800031e <HAL_I2C_ListenCpltCallback>
}
 800248a:	e022      	b.n	80024d2 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b22      	cmp	r3, #34	@ 0x22
 8002496:	d10e      	bne.n	80024b6 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fd fefc 	bl	80002ac <HAL_I2C_SlaveRxCpltCallback>
}
 80024b4:	e00d      	b.n	80024d2 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7fd ff1b 	bl	8000308 <HAL_I2C_SlaveTxCpltCallback>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	fe00e800 	.word	0xfe00e800
 80024e0:	ffff0000 	.word	0xffff0000

080024e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a26      	ldr	r2, [pc, #152]	@ (800258c <I2C_ITListenCplt+0xa8>)
 80024f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d022      	beq.n	8002562 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002538:	2b00      	cmp	r3, #0
 800253a:	d012      	beq.n	8002562 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f043 0204 	orr.w	r2, r3, #4
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002562:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa22 	bl	80029b0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2210      	movs	r2, #16
 8002572:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fd fece 	bl	800031e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	ffff0000 	.word	0xffff0000

08002590 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a6d      	ldr	r2, [pc, #436]	@ (8002764 <I2C_ITError+0x1d4>)
 80025ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b28      	cmp	r3, #40	@ 0x28
 80025c6:	d005      	beq.n	80025d4 <I2C_ITError+0x44>
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	2b29      	cmp	r3, #41	@ 0x29
 80025cc:	d002      	beq.n	80025d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80025d2:	d10b      	bne.n	80025ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025d4:	2103      	movs	r1, #3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f9ea 	bl	80029b0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2228      	movs	r2, #40	@ 0x28
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a60      	ldr	r2, [pc, #384]	@ (8002768 <I2C_ITError+0x1d8>)
 80025e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80025ea:	e030      	b.n	800264e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025ec:	f248 0103 	movw	r1, #32771	@ 0x8003
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f9dd 	bl	80029b0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f8e1 	bl	80027be <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b60      	cmp	r3, #96	@ 0x60
 8002606:	d01f      	beq.n	8002648 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b20      	cmp	r3, #32
 800261c:	d114      	bne.n	8002648 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b10      	cmp	r3, #16
 800262a:	d109      	bne.n	8002640 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2210      	movs	r2, #16
 8002632:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002638:	f043 0204 	orr.w	r2, r3, #4
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2220      	movs	r2, #32
 8002646:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002658:	2b00      	cmp	r3, #0
 800265a:	d039      	beq.n	80026d0 <I2C_ITError+0x140>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b11      	cmp	r3, #17
 8002660:	d002      	beq.n	8002668 <I2C_ITError+0xd8>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b21      	cmp	r3, #33	@ 0x21
 8002666:	d133      	bne.n	80026d0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002672:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002676:	d107      	bne.n	8002688 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002686:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fb4d 	bl	8000d2c <HAL_DMA_GetState>
 8002692:	4603      	mov	r3, r0
 8002694:	2b01      	cmp	r3, #1
 8002696:	d017      	beq.n	80026c8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269c:	4a33      	ldr	r2, [pc, #204]	@ (800276c <I2C_ITError+0x1dc>)
 800269e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fad6 	bl	8000c5e <HAL_DMA_Abort_IT>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d04d      	beq.n	8002754 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026c2:	4610      	mov	r0, r2
 80026c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026c6:	e045      	b.n	8002754 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f851 	bl	8002770 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026ce:	e041      	b.n	8002754 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d039      	beq.n	800274c <I2C_ITError+0x1bc>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b12      	cmp	r3, #18
 80026dc:	d002      	beq.n	80026e4 <I2C_ITError+0x154>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b22      	cmp	r3, #34	@ 0x22
 80026e2:	d133      	bne.n	800274c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026f2:	d107      	bne.n	8002704 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002702:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fb0f 	bl	8000d2c <HAL_DMA_GetState>
 800270e:	4603      	mov	r3, r0
 8002710:	2b01      	cmp	r3, #1
 8002712:	d017      	beq.n	8002744 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002718:	4a14      	ldr	r2, [pc, #80]	@ (800276c <I2C_ITError+0x1dc>)
 800271a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe fa98 	bl	8000c5e <HAL_DMA_Abort_IT>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d011      	beq.n	8002758 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800273e:	4610      	mov	r0, r2
 8002740:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002742:	e009      	b.n	8002758 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f813 	bl	8002770 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800274a:	e005      	b.n	8002758 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f80f 	bl	8002770 <I2C_TreatErrorCallback>
  }
}
 8002752:	e002      	b.n	800275a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002754:	bf00      	nop
 8002756:	e000      	b.n	800275a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002758:	bf00      	nop
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	ffff0000 	.word	0xffff0000
 8002768:	0800162f 	.word	0x0800162f
 800276c:	08002807 	.word	0x08002807

08002770 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b60      	cmp	r3, #96	@ 0x60
 8002782:	d10e      	bne.n	80027a2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe ff31 	bl	8001602 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80027a0:	e009      	b.n	80027b6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7fd fdbf 	bl	8000334 <HAL_I2C_ErrorCallback>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d103      	bne.n	80027dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d007      	beq.n	80027fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	619a      	str	r2, [r3, #24]
  }
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	2200      	movs	r2, #0
 8002822:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002830:	2200      	movs	r2, #0
 8002832:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7ff ff9b 	bl	8002770 <I2C_TreatErrorCallback>
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	4613      	mov	r3, r2
 8002854:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800285c:	7a7b      	ldrb	r3, [r7, #9]
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002864:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	4313      	orrs	r3, r2
 800286e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002872:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	0d5b      	lsrs	r3, r3, #21
 800287e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002882:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <I2C_TransferConfig+0x60>)
 8002884:	430b      	orrs	r3, r1
 8002886:	43db      	mvns	r3, r3
 8002888:	ea02 0103 	and.w	r1, r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	03ff63ff 	.word	0x03ff63ff

080028a8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028bc:	4a39      	ldr	r2, [pc, #228]	@ (80029a4 <I2C_Enable_IRQ+0xfc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d032      	beq.n	8002928 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80028c6:	4a38      	ldr	r2, [pc, #224]	@ (80029a8 <I2C_Enable_IRQ+0x100>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d02d      	beq.n	8002928 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80028d0:	4a36      	ldr	r2, [pc, #216]	@ (80029ac <I2C_Enable_IRQ+0x104>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d028      	beq.n	8002928 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80028d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	da03      	bge.n	80028e6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80028e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80028f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80028f8:	887b      	ldrh	r3, [r7, #2]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002908:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	2b10      	cmp	r3, #16
 800290e:	d103      	bne.n	8002918 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002916:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	2b20      	cmp	r3, #32
 800291c:	d133      	bne.n	8002986 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f043 0320 	orr.w	r3, r3, #32
 8002924:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002926:	e02e      	b.n	8002986 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002928:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800292c:	2b00      	cmp	r3, #0
 800292e:	da03      	bge.n	8002938 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002936:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002938:	887b      	ldrh	r3, [r7, #2]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002948:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800295a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	2b10      	cmp	r3, #16
 8002960:	d103      	bne.n	800296a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002968:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	2b20      	cmp	r3, #32
 800296e:	d103      	bne.n	8002978 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002976:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002978:	887b      	ldrh	r3, [r7, #2]
 800297a:	2b40      	cmp	r3, #64	@ 0x40
 800297c:	d103      	bne.n	8002986 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002984:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6819      	ldr	r1, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	08001837 	.word	0x08001837
 80029a8:	08001c7d 	.word	0x08001c7d
 80029ac:	08001a1d 	.word	0x08001a1d

080029b0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80029c0:	887b      	ldrh	r3, [r7, #2]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00f      	beq.n	80029ea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80029d0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80029de:	2b28      	cmp	r3, #40	@ 0x28
 80029e0:	d003      	beq.n	80029ea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80029e8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00f      	beq.n	8002a14 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80029fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a08:	2b28      	cmp	r3, #40	@ 0x28
 8002a0a:	d003      	beq.n	8002a14 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002a12:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	da03      	bge.n	8002a24 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002a22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a24:	887b      	ldrh	r3, [r7, #2]
 8002a26:	2b10      	cmp	r3, #16
 8002a28:	d103      	bne.n	8002a32 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002a30:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d103      	bne.n	8002a40 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f043 0320 	orr.w	r3, r3, #32
 8002a3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	2b40      	cmp	r3, #64	@ 0x40
 8002a44:	d103      	bne.n	8002a4e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6819      	ldr	r1, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43da      	mvns	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d138      	bne.n	8002af4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e032      	b.n	8002af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2224      	movs	r2, #36	@ 0x24
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002abe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6819      	ldr	r1, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e000      	b.n	8002af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d139      	bne.n	8002b8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e033      	b.n	8002b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2224      	movs	r2, #36	@ 0x24
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e000      	b.n	8002b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0c0      	b.n	8002d2e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d106      	bne.n	8002bc6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f007 fac7 	bl	800a154 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 fced 	bl	80065b2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	e03e      	b.n	8002c5c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	3311      	adds	r3, #17
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	3310      	adds	r3, #16
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	440b      	add	r3, r1
 8002c14:	3313      	adds	r3, #19
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	3320      	adds	r3, #32
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3324      	adds	r3, #36	@ 0x24
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	791b      	ldrb	r3, [r3, #4]
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d3bb      	bcc.n	8002bde <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
 8002c6a:	e044      	b.n	8002cf6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	791b      	ldrb	r3, [r3, #4]
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3b5      	bcc.n	8002c6c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d0c:	f003 fc6c 	bl	80065e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7a9b      	ldrb	r3, [r3, #10]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d102      	bne.n	8002d2c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f001 fbd0 	bl	80044cc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_PCD_Start+0x16>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e012      	b.n	8002d72 <HAL_PCD_Start+0x3c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f003 fc13 	bl	8006584 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f005 f803 	bl	8007d6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_PCD_Stop+0x16>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e012      	b.n	8002db6 <HAL_PCD_Stop+0x3c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 fc08 	bl	80065b2 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 fff8 	bl	8007d9c <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f004 fffb 	bl	8007dc6 <USB_ReadInterrupts>
 8002dd0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 faa6 	bl	800332e <PCD_EP_ISR_Handler>

    return;
 8002de2:	e110      	b.n	8003006 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d013      	beq.n	8002e16 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e00:	b292      	uxth	r2, r2
 8002e02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f007 fa35 	bl	800a276 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8fc 	bl	800300c <HAL_PCD_SetAddress>

    return;
 8002e14:	e0f7      	b.n	8003006 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e32:	b292      	uxth	r2, r2
 8002e34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e38:	e0e5      	b.n	8003006 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00c      	beq.n	8002e5e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e56:	b292      	uxth	r2, r2
 8002e58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e5c:	e0d3      	b.n	8003006 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d034      	beq.n	8002ed2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0204 	bic.w	r2, r2, #4
 8002e7a:	b292      	uxth	r2, r2
 8002e7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0208 	bic.w	r2, r2, #8
 8002e92:	b292      	uxth	r2, r2
 8002e94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002eaa:	2100      	movs	r1, #0
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f007 fba5 	bl	800a5fc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f007 fa18 	bl	800a2e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002eca:	b292      	uxth	r2, r2
 8002ecc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ed0:	e099      	b.n	8003006 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d027      	beq.n	8002f2c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0208 	orr.w	r2, r2, #8
 8002eee:	b292      	uxth	r2, r2
 8002ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f06:	b292      	uxth	r2, r2
 8002f08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0204 	orr.w	r2, r2, #4
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f007 f9c5 	bl	800a2b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f2a:	e06c      	b.n	8003006 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d040      	beq.n	8002fb8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f48:	b292      	uxth	r2, r2
 8002f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d12b      	bne.n	8002fb0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0204 	orr.w	r2, r2, #4
 8002f6a:	b292      	uxth	r2, r2
 8002f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0208 	orr.w	r2, r2, #8
 8002f82:	b292      	uxth	r2, r2
 8002f84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f007 fb27 	bl	800a5fc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002fae:	e02a      	b.n	8003006 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f007 f97f 	bl	800a2b4 <HAL_PCD_SuspendCallback>
    return;
 8002fb6:	e026      	b.n	8003006 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00f      	beq.n	8002fe2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fd4:	b292      	uxth	r2, r2
 8002fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f007 f93d 	bl	800a25a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fe0:	e011      	b.n	8003006 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00c      	beq.n	8003006 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ffe:	b292      	uxth	r2, r2
 8003000:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003004:	bf00      	nop
  }
}
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_PCD_SetAddress+0x1a>
 8003022:	2302      	movs	r3, #2
 8003024:	e012      	b.n	800304c <HAL_PCD_SetAddress+0x40>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f004 fe82 	bl	8007d46 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	461a      	mov	r2, r3
 8003062:	4603      	mov	r3, r0
 8003064:	70fb      	strb	r3, [r7, #3]
 8003066:	460b      	mov	r3, r1
 8003068:	803b      	strh	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003076:	2b00      	cmp	r3, #0
 8003078:	da0e      	bge.n	8003098 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 0207 	and.w	r2, r3, #7
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	3310      	adds	r3, #16
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	705a      	strb	r2, [r3, #1]
 8003096:	e00e      	b.n	80030b6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	f003 0207 	and.w	r2, r3, #7
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030c2:	883b      	ldrh	r3, [r7, #0]
 80030c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	78ba      	ldrb	r2, [r7, #2]
 80030d0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030d2:	78bb      	ldrb	r3, [r7, #2]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d102      	bne.n	80030de <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_PCD_EP_Open+0x98>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e00e      	b.n	800310a <HAL_PCD_EP_Open+0xb6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68f9      	ldr	r1, [r7, #12]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fa92 	bl	8006624 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003108:	7afb      	ldrb	r3, [r7, #11]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	460b      	mov	r3, r1
 8003120:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003122:	7afb      	ldrb	r3, [r7, #11]
 8003124:	f003 0207 	and.w	r2, r3, #7
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2200      	movs	r2, #0
 800314a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2200      	movs	r2, #0
 8003150:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003152:	7afb      	ldrb	r3, [r7, #11]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	b2da      	uxtb	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6979      	ldr	r1, [r7, #20]
 8003164:	4618      	mov	r0, r3
 8003166:	f003 ff45 	bl	8006ff4 <USB_EPStartXfer>

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	460b      	mov	r3, r1
 8003182:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003184:	7afb      	ldrb	r3, [r7, #11]
 8003186:	f003 0207 	and.w	r2, r3, #7
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	3310      	adds	r3, #16
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2200      	movs	r2, #0
 80031b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2201      	movs	r2, #1
 80031be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c0:	7afb      	ldrb	r3, [r7, #11]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6979      	ldr	r1, [r7, #20]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f003 ff0e 	bl	8006ff4 <USB_EPStartXfer>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	7912      	ldrb	r2, [r2, #4]
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e03e      	b.n	800327e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003204:	2b00      	cmp	r3, #0
 8003206:	da0e      	bge.n	8003226 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 0207 	and.w	r2, r3, #7
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	3310      	adds	r3, #16
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	705a      	strb	r2, [r3, #1]
 8003224:	e00c      	b.n	8003240 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4413      	add	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_PCD_EP_SetStall+0x7e>
 800325c:	2302      	movs	r3, #2
 800325e:	e00e      	b.n	800327e <HAL_PCD_EP_SetStall+0x9c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	4618      	mov	r0, r3
 8003270:	f004 fc6f 	bl	8007b52 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	7912      	ldrb	r2, [r2, #4]
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e040      	b.n	8003326 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da0e      	bge.n	80032ca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f003 0207 	and.w	r2, r3, #7
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	3310      	adds	r3, #16
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	705a      	strb	r2, [r3, #1]
 80032c8:	e00e      	b.n	80032e8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	f003 0207 	and.w	r2, r3, #7
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_PCD_EP_ClrStall+0x82>
 8003304:	2302      	movs	r3, #2
 8003306:	e00e      	b.n	8003326 <HAL_PCD_EP_ClrStall+0xa0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68f9      	ldr	r1, [r7, #12]
 8003316:	4618      	mov	r0, r3
 8003318:	f004 fc6c 	bl	8007bf4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b092      	sub	sp, #72	@ 0x48
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003336:	e333      	b.n	80039a0 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003340:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003342:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800334e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 8108 	bne.w	8003568 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003358:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b00      	cmp	r3, #0
 8003360:	d14c      	bne.n	80033fc <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	b29b      	uxth	r3, r3
 800336a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800336e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003372:	813b      	strh	r3, [r7, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	893b      	ldrh	r3, [r7, #8]
 800337a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800337e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003382:	b29b      	uxth	r3, r3
 8003384:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3310      	adds	r3, #16
 800338a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003394:	b29b      	uxth	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	4413      	add	r3, r2
 80033a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	441a      	add	r2, r3
 80033be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033c2:	2100      	movs	r1, #0
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f006 ff2e 	bl	800a226 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7b1b      	ldrb	r3, [r3, #12]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 82e5 	beq.w	80039a0 <PCD_EP_ISR_Handler+0x672>
 80033d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f040 82e0 	bne.w	80039a0 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	7b1b      	ldrb	r3, [r3, #12]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	731a      	strb	r2, [r3, #12]
 80033fa:	e2d1      	b.n	80039a0 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003402:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800340c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800340e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003412:	2b00      	cmp	r3, #0
 8003414:	d032      	beq.n	800347c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800341e:	b29b      	uxth	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	4413      	add	r3, r2
 8003430:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800343a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800343c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800344a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800344c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800344e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003450:	b29b      	uxth	r3, r3
 8003452:	f004 fd0b 	bl	8007e6c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b29a      	uxth	r2, r3
 800345e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003462:	4013      	ands	r3, r2
 8003464:	817b      	strh	r3, [r7, #10]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	897a      	ldrh	r2, [r7, #10]
 800346c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003470:	b292      	uxth	r2, r2
 8003472:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f006 fea9 	bl	800a1cc <HAL_PCD_SetupStageCallback>
 800347a:	e291      	b.n	80039a0 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800347c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003480:	2b00      	cmp	r3, #0
 8003482:	f280 828d 	bge.w	80039a0 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	b29a      	uxth	r2, r3
 800348e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003492:	4013      	ands	r3, r2
 8003494:	81fb      	strh	r3, [r7, #14]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	89fa      	ldrh	r2, [r7, #14]
 800349c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034a0:	b292      	uxth	r2, r2
 80034a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	4413      	add	r3, r2
 80034be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80034cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d019      	beq.n	8003508 <PCD_EP_ISR_Handler+0x1da>
 80034d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d015      	beq.n	8003508 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e2:	6959      	ldr	r1, [r3, #20]
 80034e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f004 fcbd 	bl	8007e6c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	441a      	add	r2, r3
 80034fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034fe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003500:	2100      	movs	r1, #0
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f006 fe74 	bl	800a1f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003510:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003512:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 8242 	bne.w	80039a0 <PCD_EP_ISR_Handler+0x672>
 800351c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800351e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003522:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003526:	f000 823b 	beq.w	80039a0 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353a:	81bb      	strh	r3, [r7, #12]
 800353c:	89bb      	ldrh	r3, [r7, #12]
 800353e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003542:	81bb      	strh	r3, [r7, #12]
 8003544:	89bb      	ldrh	r3, [r7, #12]
 8003546:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800354a:	81bb      	strh	r3, [r7, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	89bb      	ldrh	r3, [r7, #12]
 8003552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800355a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800355e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003562:	b29b      	uxth	r3, r3
 8003564:	8013      	strh	r3, [r2, #0]
 8003566:	e21b      	b.n	80039a0 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800357a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800357e:	2b00      	cmp	r3, #0
 8003580:	f280 80f1 	bge.w	8003766 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29a      	uxth	r2, r3
 8003596:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800359a:	4013      	ands	r3, r2
 800359c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035b2:	b292      	uxth	r2, r2
 80035b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035b6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ce:	7b1b      	ldrb	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d123      	bne.n	800361c <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035dc:	b29b      	uxth	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	4413      	add	r3, r2
 80035ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80035fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 808b 	beq.w	800371c <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360c:	6959      	ldr	r1, [r3, #20]
 800360e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003610:	88da      	ldrh	r2, [r3, #6]
 8003612:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003616:	f004 fc29 	bl	8007e6c <USB_ReadPMA>
 800361a:	e07f      	b.n	800371c <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800361c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800361e:	78db      	ldrb	r3, [r3, #3]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d109      	bne.n	8003638 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003624:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003626:	461a      	mov	r2, r3
 8003628:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f9c6 	bl	80039bc <HAL_PCD_EP_DB_Receive>
 8003630:	4603      	mov	r3, r0
 8003632:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003636:	e071      	b.n	800371c <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800364e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003652:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800366c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003670:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003674:	b29b      	uxth	r3, r3
 8003676:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d022      	beq.n	80036d8 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800369a:	b29b      	uxth	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80036ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d02c      	beq.n	800371c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c8:	6959      	ldr	r1, [r3, #20]
 80036ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036cc:	891a      	ldrh	r2, [r3, #8]
 80036ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80036d2:	f004 fbcb 	bl	8007e6c <USB_ReadPMA>
 80036d6:	e021      	b.n	800371c <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	4413      	add	r3, r2
 80036f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8003700:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800370e:	6959      	ldr	r1, [r3, #20]
 8003710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003712:	895a      	ldrh	r2, [r3, #10]
 8003714:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003718:	f004 fba8 	bl	8007e6c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800371c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003724:	441a      	add	r2, r3
 8003726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003728:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800372a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003732:	441a      	add	r2, r3
 8003734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003736:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <PCD_EP_ISR_Handler+0x41e>
 8003740:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	429a      	cmp	r2, r3
 800374a:	d206      	bcs.n	800375a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800374c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	4619      	mov	r1, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f006 fd4c 	bl	800a1f0 <HAL_PCD_DataOutStageCallback>
 8003758:	e005      	b.n	8003766 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003760:	4618      	mov	r0, r3
 8003762:	f003 fc47 	bl	8006ff4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003766:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8117 	beq.w	80039a0 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8003772:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	3310      	adds	r3, #16
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800379c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	441a      	add	r2, r3
 80037b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80037b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80037be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c0:	78db      	ldrb	r3, [r3, #3]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	f040 80a1 	bne.w	800390a <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80037c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ca:	2200      	movs	r2, #0
 80037cc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80037ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d0:	7b1b      	ldrb	r3, [r3, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8092 	beq.w	80038fc <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80037da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d046      	beq.n	8003870 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d126      	bne.n	8003838 <PCD_EP_ISR_Handler+0x50a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	4413      	add	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	00da      	lsls	r2, r3, #3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	4413      	add	r3, r2
 800380c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800381c:	b29a      	uxth	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	801a      	strh	r2, [r3, #0]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800382c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003830:	b29a      	uxth	r2, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	e061      	b.n	80038fc <PCD_EP_ISR_Handler+0x5ce>
 8003838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d15d      	bne.n	80038fc <PCD_EP_ISR_Handler+0x5ce>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800384e:	b29b      	uxth	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	00da      	lsls	r2, r3, #3
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003866:	61bb      	str	r3, [r7, #24]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2200      	movs	r2, #0
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	e045      	b.n	80038fc <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d126      	bne.n	80038cc <PCD_EP_ISR_Handler+0x59e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800388c:	b29b      	uxth	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	4413      	add	r3, r2
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
 8003896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	00da      	lsls	r2, r3, #3
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	4413      	add	r3, r2
 80038a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038a4:	623b      	str	r3, [r7, #32]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	801a      	strh	r2, [r3, #0]
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	801a      	strh	r2, [r3, #0]
 80038ca:	e017      	b.n	80038fc <PCD_EP_ISR_Handler+0x5ce>
 80038cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ce:	785b      	ldrb	r3, [r3, #1]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d113      	bne.n	80038fc <PCD_EP_ISR_Handler+0x5ce>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038dc:	b29b      	uxth	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e2:	4413      	add	r3, r2
 80038e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	00da      	lsls	r2, r3, #3
 80038ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ee:	4413      	add	r3, r2
 80038f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f8:	2200      	movs	r2, #0
 80038fa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	4619      	mov	r1, r3
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f006 fc8f 	bl	800a226 <HAL_PCD_DataInStageCallback>
 8003908:	e04a      	b.n	80039a0 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800390a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800390c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d13f      	bne.n	8003994 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800391c:	b29b      	uxth	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4413      	add	r3, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	4413      	add	r3, r2
 800392e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003938:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800393a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003940:	429a      	cmp	r2, r3
 8003942:	d906      	bls.n	8003952 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800394a:	1ad2      	subs	r2, r2, r3
 800394c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394e:	619a      	str	r2, [r3, #24]
 8003950:	e002      	b.n	8003958 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f006 fc5d 	bl	800a226 <HAL_PCD_DataInStageCallback>
 800396c:	e018      	b.n	80039a0 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800396e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003974:	441a      	add	r2, r3
 8003976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003978:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800397a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003980:	441a      	add	r2, r3
 8003982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003984:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800398c:	4618      	mov	r0, r3
 800398e:	f003 fb31 	bl	8006ff4 <USB_EPStartXfer>
 8003992:	e005      	b.n	80039a0 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003994:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003996:	461a      	mov	r2, r3
 8003998:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f917 	bl	8003bce <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	b21b      	sxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f6ff acc3 	blt.w	8003338 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3748      	adds	r7, #72	@ 0x48
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d07c      	beq.n	8003ace <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039dc:	b29b      	uxth	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	4413      	add	r3, r2
 80039ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	8b7b      	ldrh	r3, [r7, #26]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d306      	bcc.n	8003a12 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	8b7b      	ldrh	r3, [r7, #26]
 8003a0a:	1ad2      	subs	r2, r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	619a      	str	r2, [r3, #24]
 8003a10:	e002      	b.n	8003a18 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2200      	movs	r2, #0
 8003a16:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d123      	bne.n	8003a68 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	833b      	strh	r3, [r7, #24]
 8003a3c:	8b3b      	ldrh	r3, [r7, #24]
 8003a3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a42:	833b      	strh	r3, [r7, #24]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	441a      	add	r2, r3
 8003a52:	8b3b      	ldrh	r3, [r7, #24]
 8003a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01f      	beq.n	8003ab2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8c:	82fb      	strh	r3, [r7, #22]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	441a      	add	r2, r3
 8003a9c:	8afb      	ldrh	r3, [r7, #22]
 8003a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ab2:	8b7b      	ldrh	r3, [r7, #26]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8085 	beq.w	8003bc4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6959      	ldr	r1, [r3, #20]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	891a      	ldrh	r2, [r3, #8]
 8003ac6:	8b7b      	ldrh	r3, [r7, #26]
 8003ac8:	f004 f9d0 	bl	8007e6c <USB_ReadPMA>
 8003acc:	e07a      	b.n	8003bc4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003af2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	8b7b      	ldrh	r3, [r7, #26]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d306      	bcc.n	8003b0c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	8b7b      	ldrh	r3, [r7, #26]
 8003b04:	1ad2      	subs	r2, r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	619a      	str	r2, [r3, #24]
 8003b0a:	e002      	b.n	8003b12 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d123      	bne.n	8003b62 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b34:	83fb      	strh	r3, [r7, #30]
 8003b36:	8bfb      	ldrh	r3, [r7, #30]
 8003b38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b3c:	83fb      	strh	r3, [r7, #30]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	441a      	add	r2, r3
 8003b4c:	8bfb      	ldrh	r3, [r7, #30]
 8003b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d11f      	bne.n	8003bac <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b86:	83bb      	strh	r3, [r7, #28]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	8bbb      	ldrh	r3, [r7, #28]
 8003b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bac:	8b7b      	ldrh	r3, [r7, #26]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	6959      	ldr	r1, [r3, #20]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	895a      	ldrh	r2, [r3, #10]
 8003bbe:	8b7b      	ldrh	r3, [r7, #26]
 8003bc0:	f004 f954 	bl	8007e6c <USB_ReadPMA>
    }
  }

  return count;
 8003bc4:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b0a6      	sub	sp, #152	@ 0x98
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 81f7 	beq.w	8003fd6 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	4413      	add	r3, r2
 8003c02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c0c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d907      	bls.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003c24:	1ad2      	subs	r2, r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	619a      	str	r2, [r3, #24]
 8003c2a:	e002      	b.n	8003c32 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 80e1 	bne.w	8003dfe <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	785b      	ldrb	r3, [r3, #1]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d126      	bne.n	8003c92 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	4413      	add	r3, r2
 8003c5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	00da      	lsls	r2, r3, #3
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	4413      	add	r3, r2
 8003c66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	e01a      	b.n	8003cc8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d116      	bne.n	8003cc8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cae:	4413      	add	r3, r2
 8003cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	00da      	lsls	r2, r3, #3
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cba:	4413      	add	r3, r2
 8003cbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	785b      	ldrb	r3, [r3, #1]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d126      	bne.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x156>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	4413      	add	r3, r2
 8003cec:	623b      	str	r3, [r7, #32]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	00da      	lsls	r2, r3, #3
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	801a      	strh	r2, [r3, #0]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	e017      	b.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x186>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	785b      	ldrb	r3, [r3, #1]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d113      	bne.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x186>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3a:	4413      	add	r3, r2
 8003d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	00da      	lsls	r2, r3, #3
 8003d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d46:	4413      	add	r3, r2
 8003d48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	2200      	movs	r2, #0
 8003d52:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	78db      	ldrb	r3, [r3, #3]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d123      	bne.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d76:	837b      	strh	r3, [r7, #26]
 8003d78:	8b7b      	ldrh	r3, [r7, #26]
 8003d7a:	f083 0320 	eor.w	r3, r3, #32
 8003d7e:	837b      	strh	r3, [r7, #26]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	441a      	add	r2, r3
 8003d8e:	8b7b      	ldrh	r3, [r7, #26]
 8003d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	4619      	mov	r1, r3
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f006 fa3b 	bl	800a226 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003db0:	88fb      	ldrh	r3, [r7, #6]
 8003db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01f      	beq.n	8003dfa <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd4:	833b      	strh	r3, [r7, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	441a      	add	r2, r3
 8003de4:	8b3b      	ldrh	r3, [r7, #24]
 8003de6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e31f      	b.n	800443e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d021      	beq.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e22:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	441a      	add	r2, r3
 8003e34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	f040 82ca 	bne.w	80043ec <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e60:	441a      	add	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003e6e:	441a      	add	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6a1a      	ldr	r2, [r3, #32]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d309      	bcc.n	8003e94 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6a1a      	ldr	r2, [r3, #32]
 8003e8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e8c:	1ad2      	subs	r2, r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	621a      	str	r2, [r3, #32]
 8003e92:	e015      	b.n	8003ec0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003e9c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003eaa:	e009      	b.n	8003ec0 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d15f      	bne.n	8003f88 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003edc:	4413      	add	r3, r2
 8003ede:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	00da      	lsls	r2, r3, #3
 8003ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee8:	4413      	add	r3, r2
 8003eea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x34e>
 8003f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	e051      	b.n	8003fc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f20:	d816      	bhi.n	8003f50 <HAL_PCD_EP_DB_Transmit+0x382>
 8003f22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f24:	085b      	lsrs	r3, r3, #1
 8003f26:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f34:	3301      	adds	r3, #1
 8003f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	029b      	lsls	r3, r3, #10
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4c:	801a      	strh	r2, [r3, #0]
 8003f4e:	e037      	b.n	8003fc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x398>
 8003f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f62:	3b01      	subs	r3, #1
 8003f64:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	029b      	lsls	r3, r3, #10
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	4313      	orrs	r3, r2
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f84:	801a      	strh	r2, [r3, #0]
 8003f86:	e01b      	b.n	8003fc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d117      	bne.n	8003fc0 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fa4:	4413      	add	r3, r2
 8003fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	00da      	lsls	r2, r3, #3
 8003fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fbe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6959      	ldr	r1, [r3, #20]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	891a      	ldrh	r2, [r3, #8]
 8003fcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f003 ff09 	bl	8007de6 <USB_WritePMA>
 8003fd4:	e20a      	b.n	80043ec <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ffa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004006:	429a      	cmp	r2, r3
 8004008:	d307      	bcc.n	800401a <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004012:	1ad2      	subs	r2, r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	619a      	str	r2, [r3, #24]
 8004018:	e002      	b.n	8004020 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2200      	movs	r2, #0
 800401e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	f040 80f6 	bne.w	8004216 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	785b      	ldrb	r3, [r3, #1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d126      	bne.n	8004080 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	677b      	str	r3, [r7, #116]	@ 0x74
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004040:	b29b      	uxth	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004046:	4413      	add	r3, r2
 8004048:	677b      	str	r3, [r7, #116]	@ 0x74
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	00da      	lsls	r2, r3, #3
 8004050:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004052:	4413      	add	r3, r2
 8004054:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004058:	673b      	str	r3, [r7, #112]	@ 0x70
 800405a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004064:	b29a      	uxth	r2, r3
 8004066:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004078:	b29a      	uxth	r2, r3
 800407a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	e01a      	b.n	80040b6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	785b      	ldrb	r3, [r3, #1]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d116      	bne.n	80040b6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800409c:	4413      	add	r3, r2
 800409e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	00da      	lsls	r2, r3, #3
 80040a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040a8:	4413      	add	r3, r2
 80040aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040b2:	2200      	movs	r2, #0
 80040b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	785b      	ldrb	r3, [r3, #1]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d12f      	bne.n	8004126 <HAL_PCD_EP_DB_Transmit+0x558>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040de:	4413      	add	r3, r2
 80040e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	00da      	lsls	r2, r3, #3
 80040ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ee:	4413      	add	r3, r2
 80040f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004104:	b29a      	uxth	r2, r3
 8004106:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800410a:	801a      	strh	r2, [r3, #0]
 800410c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800411c:	b29a      	uxth	r2, r3
 800411e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	e01c      	b.n	8004160 <HAL_PCD_EP_DB_Transmit+0x592>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	785b      	ldrb	r3, [r3, #1]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d118      	bne.n	8004160 <HAL_PCD_EP_DB_Transmit+0x592>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004136:	b29b      	uxth	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800413e:	4413      	add	r3, r2
 8004140:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	00da      	lsls	r2, r3, #3
 800414a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800414e:	4413      	add	r3, r2
 8004150:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004154:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004158:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800415c:	2200      	movs	r2, #0
 800415e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	78db      	ldrb	r3, [r3, #3]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d127      	bne.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800417e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004182:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004186:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800418a:	f083 0320 	eor.w	r3, r3, #32
 800418e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80041a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	4619      	mov	r1, r3
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f006 f831 	bl	800a226 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d121      	bne.n	8004212 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80041fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004206:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800420a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800420e:	b29b      	uxth	r3, r3
 8004210:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e113      	b.n	800443e <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d121      	bne.n	8004264 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	441a      	add	r2, r3
 800424c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004258:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800425c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004260:	b29b      	uxth	r3, r3
 8004262:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800426a:	2b01      	cmp	r3, #1
 800426c:	f040 80be 	bne.w	80043ec <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004278:	441a      	add	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004286:	441a      	add	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	429a      	cmp	r2, r3
 8004296:	d309      	bcc.n	80042ac <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042a4:	1ad2      	subs	r2, r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	621a      	str	r2, [r3, #32]
 80042aa:	e015      	b.n	80042d8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d107      	bne.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80042b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80042b8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042c2:	e009      	b.n	80042d8 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2200      	movs	r2, #0
 80042ce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d15f      	bne.n	80043a6 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042fa:	4413      	add	r3, r2
 80042fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	00da      	lsls	r2, r3, #3
 8004304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004306:	4413      	add	r3, r2
 8004308:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800430c:	667b      	str	r3, [r7, #100]	@ 0x64
 800430e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004318:	b29a      	uxth	r2, r3
 800431a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800431c:	801a      	strh	r2, [r3, #0]
 800431e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <HAL_PCD_EP_DB_Transmit+0x76c>
 8004324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800432e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004332:	b29a      	uxth	r2, r3
 8004334:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004336:	801a      	strh	r2, [r3, #0]
 8004338:	e04e      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800433a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800433c:	2b3e      	cmp	r3, #62	@ 0x3e
 800433e:	d816      	bhi.n	800436e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004340:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	663b      	str	r3, [r7, #96]	@ 0x60
 8004346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_PCD_EP_DB_Transmit+0x788>
 8004350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004352:	3301      	adds	r3, #1
 8004354:	663b      	str	r3, [r7, #96]	@ 0x60
 8004356:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29a      	uxth	r2, r3
 800435c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800435e:	b29b      	uxth	r3, r3
 8004360:	029b      	lsls	r3, r3, #10
 8004362:	b29b      	uxth	r3, r3
 8004364:	4313      	orrs	r3, r2
 8004366:	b29a      	uxth	r2, r3
 8004368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	e034      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 800436e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	663b      	str	r3, [r7, #96]	@ 0x60
 8004374:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800437e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004380:	3b01      	subs	r3, #1
 8004382:	663b      	str	r3, [r7, #96]	@ 0x60
 8004384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29a      	uxth	r2, r3
 800438a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800438c:	b29b      	uxth	r3, r3
 800438e:	029b      	lsls	r3, r3, #10
 8004390:	b29b      	uxth	r3, r3
 8004392:	4313      	orrs	r3, r2
 8004394:	b29b      	uxth	r3, r3
 8004396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800439e:	b29a      	uxth	r2, r3
 80043a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	e018      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d114      	bne.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x80a>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043bc:	4413      	add	r3, r2
 80043be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	00da      	lsls	r2, r3, #3
 80043c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043c8:	4413      	add	r3, r2
 80043ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6959      	ldr	r1, [r3, #20]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	895a      	ldrh	r2, [r3, #10]
 80043e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f003 fcfd 	bl	8007de6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004406:	82fb      	strh	r3, [r7, #22]
 8004408:	8afb      	ldrh	r3, [r7, #22]
 800440a:	f083 0310 	eor.w	r3, r3, #16
 800440e:	82fb      	strh	r3, [r7, #22]
 8004410:	8afb      	ldrh	r3, [r7, #22]
 8004412:	f083 0320 	eor.w	r3, r3, #32
 8004416:	82fb      	strh	r3, [r7, #22]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	441a      	add	r2, r3
 8004426:	8afb      	ldrh	r3, [r7, #22]
 8004428:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800442c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004438:	b29b      	uxth	r3, r3
 800443a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3798      	adds	r7, #152	@ 0x98
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	817b      	strh	r3, [r7, #10]
 8004454:	4613      	mov	r3, r2
 8004456:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004458:	897b      	ldrh	r3, [r7, #10]
 800445a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004464:	897b      	ldrh	r3, [r7, #10]
 8004466:	f003 0207 	and.w	r2, r3, #7
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	3310      	adds	r3, #16
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e009      	b.n	8004490 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800447c:	897a      	ldrh	r2, [r7, #10]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004490:	893b      	ldrh	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	80da      	strh	r2, [r3, #6]
 80044a4:	e00b      	b.n	80044be <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2201      	movs	r2, #1
 80044aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	0c1b      	lsrs	r3, r3, #16
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004504:	b29b      	uxth	r3, r3
 8004506:	f043 0302 	orr.w	r3, r3, #2
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d141      	bne.n	80045b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800452e:	4b4b      	ldr	r3, [pc, #300]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800453a:	d131      	bne.n	80045a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800453c:	4b47      	ldr	r3, [pc, #284]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004542:	4a46      	ldr	r2, [pc, #280]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004548:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800454c:	4b43      	ldr	r3, [pc, #268]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004554:	4a41      	ldr	r2, [pc, #260]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800455a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800455c:	4b40      	ldr	r3, [pc, #256]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2232      	movs	r2, #50	@ 0x32
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	4a3f      	ldr	r2, [pc, #252]	@ (8004664 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	0c9b      	lsrs	r3, r3, #18
 800456e:	3301      	adds	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004572:	e002      	b.n	800457a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3b01      	subs	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800457a:	4b38      	ldr	r3, [pc, #224]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004586:	d102      	bne.n	800458e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f2      	bne.n	8004574 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800458e:	4b33      	ldr	r3, [pc, #204]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459a:	d158      	bne.n	800464e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e057      	b.n	8004650 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045a0:	4b2e      	ldr	r3, [pc, #184]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045a6:	4a2d      	ldr	r2, [pc, #180]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045b0:	e04d      	b.n	800464e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b8:	d141      	bne.n	800463e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045ba:	4b28      	ldr	r3, [pc, #160]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c6:	d131      	bne.n	800462c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045c8:	4b24      	ldr	r3, [pc, #144]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ce:	4a23      	ldr	r2, [pc, #140]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045d8:	4b20      	ldr	r3, [pc, #128]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045e0:	4a1e      	ldr	r2, [pc, #120]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2232      	movs	r2, #50	@ 0x32
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004664 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	0c9b      	lsrs	r3, r3, #18
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045fe:	e002      	b.n	8004606 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3b01      	subs	r3, #1
 8004604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004612:	d102      	bne.n	800461a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f2      	bne.n	8004600 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800461a:	4b10      	ldr	r3, [pc, #64]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004626:	d112      	bne.n	800464e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e011      	b.n	8004650 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800462c:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004632:	4a0a      	ldr	r2, [pc, #40]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004638:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800463c:	e007      	b.n	800464e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800463e:	4b07      	ldr	r3, [pc, #28]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004646:	4a05      	ldr	r2, [pc, #20]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004648:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800464c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40007000 	.word	0x40007000
 8004660:	20000000 	.word	0x20000000
 8004664:	431bde83 	.word	0x431bde83

08004668 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800466c:	4b05      	ldr	r3, [pc, #20]	@ (8004684 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4a04      	ldr	r2, [pc, #16]	@ (8004684 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004676:	6093      	str	r3, [r2, #8]
}
 8004678:	bf00      	nop
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40007000 	.word	0x40007000

08004688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e2fe      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d075      	beq.n	8004792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046a6:	4b97      	ldr	r3, [pc, #604]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046b0:	4b94      	ldr	r3, [pc, #592]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d102      	bne.n	80046c6 <HAL_RCC_OscConfig+0x3e>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d002      	beq.n	80046cc <HAL_RCC_OscConfig+0x44>
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d10b      	bne.n	80046e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	4b8d      	ldr	r3, [pc, #564]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d05b      	beq.n	8004790 <HAL_RCC_OscConfig+0x108>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d157      	bne.n	8004790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e2d9      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ec:	d106      	bne.n	80046fc <HAL_RCC_OscConfig+0x74>
 80046ee:	4b85      	ldr	r3, [pc, #532]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a84      	ldr	r2, [pc, #528]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e01d      	b.n	8004738 <HAL_RCC_OscConfig+0xb0>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004704:	d10c      	bne.n	8004720 <HAL_RCC_OscConfig+0x98>
 8004706:	4b7f      	ldr	r3, [pc, #508]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a7e      	ldr	r2, [pc, #504]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800470c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	4b7c      	ldr	r3, [pc, #496]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a7b      	ldr	r2, [pc, #492]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e00b      	b.n	8004738 <HAL_RCC_OscConfig+0xb0>
 8004720:	4b78      	ldr	r3, [pc, #480]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a77      	ldr	r2, [pc, #476]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	4b75      	ldr	r3, [pc, #468]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a74      	ldr	r2, [pc, #464]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d013      	beq.n	8004768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fc f950 	bl	80009e4 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004748:	f7fc f94c 	bl	80009e4 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	@ 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e29e      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800475a:	4b6a      	ldr	r3, [pc, #424]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0xc0>
 8004766:	e014      	b.n	8004792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fc f93c 	bl	80009e4 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004770:	f7fc f938 	bl	80009e4 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b64      	cmp	r3, #100	@ 0x64
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e28a      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004782:	4b60      	ldr	r3, [pc, #384]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0xe8>
 800478e:	e000      	b.n	8004792 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d075      	beq.n	800488a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800479e:	4b59      	ldr	r3, [pc, #356]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a8:	4b56      	ldr	r3, [pc, #344]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	d102      	bne.n	80047be <HAL_RCC_OscConfig+0x136>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d002      	beq.n	80047c4 <HAL_RCC_OscConfig+0x13c>
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d11f      	bne.n	8004804 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_OscConfig+0x154>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e25d      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b49      	ldr	r3, [pc, #292]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	4946      	ldr	r1, [pc, #280]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047f0:	4b45      	ldr	r3, [pc, #276]	@ (8004908 <HAL_RCC_OscConfig+0x280>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fc f8a9 	bl	800094c <HAL_InitTick>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d043      	beq.n	8004888 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e249      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d023      	beq.n	8004854 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800480c:	4b3d      	ldr	r3, [pc, #244]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a3c      	ldr	r2, [pc, #240]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fc f8e4 	bl	80009e4 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004820:	f7fc f8e0 	bl	80009e4 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e232      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004832:	4b34      	ldr	r3, [pc, #208]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483e:	4b31      	ldr	r3, [pc, #196]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	061b      	lsls	r3, r3, #24
 800484c:	492d      	ldr	r1, [pc, #180]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	604b      	str	r3, [r1, #4]
 8004852:	e01a      	b.n	800488a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004854:	4b2b      	ldr	r3, [pc, #172]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2a      	ldr	r2, [pc, #168]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800485a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800485e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fc f8c0 	bl	80009e4 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004868:	f7fc f8bc 	bl	80009e4 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e20e      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800487a:	4b22      	ldr	r3, [pc, #136]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x1e0>
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004888:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d041      	beq.n	800491a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01c      	beq.n	80048d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800489e:	4b19      	ldr	r3, [pc, #100]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80048a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a4:	4a17      	ldr	r2, [pc, #92]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fc f899 	bl	80009e4 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b6:	f7fc f895 	bl	80009e4 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e1e7      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80048ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ef      	beq.n	80048b6 <HAL_RCC_OscConfig+0x22e>
 80048d6:	e020      	b.n	800491a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048de:	4a09      	ldr	r2, [pc, #36]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e8:	f7fc f87c 	bl	80009e4 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048ee:	e00d      	b.n	800490c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f0:	f7fc f878 	bl	80009e4 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d906      	bls.n	800490c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e1ca      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000
 8004908:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800490c:	4b8c      	ldr	r3, [pc, #560]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1ea      	bne.n	80048f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80a6 	beq.w	8004a74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004928:	2300      	movs	r3, #0
 800492a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800492c:	4b84      	ldr	r3, [pc, #528]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 800492e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_OscConfig+0x2b4>
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <HAL_RCC_OscConfig+0x2b6>
 800493c:	2300      	movs	r3, #0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004942:	4b7f      	ldr	r3, [pc, #508]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004946:	4a7e      	ldr	r2, [pc, #504]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800494c:	6593      	str	r3, [r2, #88]	@ 0x58
 800494e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800495a:	2301      	movs	r3, #1
 800495c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800495e:	4b79      	ldr	r3, [pc, #484]	@ (8004b44 <HAL_RCC_OscConfig+0x4bc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d118      	bne.n	800499c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800496a:	4b76      	ldr	r3, [pc, #472]	@ (8004b44 <HAL_RCC_OscConfig+0x4bc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a75      	ldr	r2, [pc, #468]	@ (8004b44 <HAL_RCC_OscConfig+0x4bc>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004976:	f7fc f835 	bl	80009e4 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497e:	f7fc f831 	bl	80009e4 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e183      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004990:	4b6c      	ldr	r3, [pc, #432]	@ (8004b44 <HAL_RCC_OscConfig+0x4bc>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d108      	bne.n	80049b6 <HAL_RCC_OscConfig+0x32e>
 80049a4:	4b66      	ldr	r3, [pc, #408]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049aa:	4a65      	ldr	r2, [pc, #404]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049b4:	e024      	b.n	8004a00 <HAL_RCC_OscConfig+0x378>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b05      	cmp	r3, #5
 80049bc:	d110      	bne.n	80049e0 <HAL_RCC_OscConfig+0x358>
 80049be:	4b60      	ldr	r3, [pc, #384]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049c6:	f043 0304 	orr.w	r3, r3, #4
 80049ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d4:	4a5a      	ldr	r2, [pc, #360]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049de:	e00f      	b.n	8004a00 <HAL_RCC_OscConfig+0x378>
 80049e0:	4b57      	ldr	r3, [pc, #348]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e6:	4a56      	ldr	r2, [pc, #344]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049f0:	4b53      	ldr	r3, [pc, #332]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f6:	4a52      	ldr	r2, [pc, #328]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d016      	beq.n	8004a36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fb ffec 	bl	80009e4 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	e00a      	b.n	8004a26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fb ffe8 	bl	80009e4 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e138      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a26:	4b46      	ldr	r3, [pc, #280]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0ed      	beq.n	8004a10 <HAL_RCC_OscConfig+0x388>
 8004a34:	e015      	b.n	8004a62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a36:	f7fb ffd5 	bl	80009e4 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a3c:	e00a      	b.n	8004a54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3e:	f7fb ffd1 	bl	80009e4 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e121      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a54:	4b3a      	ldr	r3, [pc, #232]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1ed      	bne.n	8004a3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a62:	7ffb      	ldrb	r3, [r7, #31]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d105      	bne.n	8004a74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a68:	4b35      	ldr	r3, [pc, #212]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6c:	4a34      	ldr	r2, [pc, #208]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d03c      	beq.n	8004afa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01c      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a88:	4b2d      	ldr	r3, [pc, #180]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a98:	f7fb ffa4 	bl	80009e4 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aa0:	f7fb ffa0 	bl	80009e4 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e0f2      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ab2:	4b23      	ldr	r3, [pc, #140]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0ef      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x418>
 8004ac0:	e01b      	b.n	8004afa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad2:	f7fb ff87 	bl	80009e4 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ada:	f7fb ff83 	bl	80009e4 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0d5      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004aec:	4b14      	ldr	r3, [pc, #80]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1ef      	bne.n	8004ada <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80c9 	beq.w	8004c96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b04:	4b0e      	ldr	r3, [pc, #56]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 030c 	and.w	r3, r3, #12
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	f000 8083 	beq.w	8004c18 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d15e      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1a:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a08      	ldr	r2, [pc, #32]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004b20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b26:	f7fb ff5d 	bl	80009e4 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b2c:	e00c      	b.n	8004b48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2e:	f7fb ff59 	bl	80009e4 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d905      	bls.n	8004b48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e0ab      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
 8004b40:	40021000 	.word	0x40021000
 8004b44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b48:	4b55      	ldr	r3, [pc, #340]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ec      	bne.n	8004b2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b54:	4b52      	ldr	r3, [pc, #328]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	4b52      	ldr	r3, [pc, #328]	@ (8004ca4 <HAL_RCC_OscConfig+0x61c>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6a11      	ldr	r1, [r2, #32]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b64:	3a01      	subs	r2, #1
 8004b66:	0112      	lsls	r2, r2, #4
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b6e:	0212      	lsls	r2, r2, #8
 8004b70:	4311      	orrs	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b76:	0852      	lsrs	r2, r2, #1
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	0552      	lsls	r2, r2, #21
 8004b7c:	4311      	orrs	r1, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b82:	0852      	lsrs	r2, r2, #1
 8004b84:	3a01      	subs	r2, #1
 8004b86:	0652      	lsls	r2, r2, #25
 8004b88:	4311      	orrs	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b8e:	06d2      	lsls	r2, r2, #27
 8004b90:	430a      	orrs	r2, r1
 8004b92:	4943      	ldr	r1, [pc, #268]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b98:	4b41      	ldr	r3, [pc, #260]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a40      	ldr	r2, [pc, #256]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a3d      	ldr	r2, [pc, #244]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fb ff18 	bl	80009e4 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fb ff14 	bl	80009e4 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e066      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bca:	4b35      	ldr	r3, [pc, #212]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x530>
 8004bd6:	e05e      	b.n	8004c96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd8:	4b31      	ldr	r3, [pc, #196]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a30      	ldr	r2, [pc, #192]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fb fefe 	bl	80009e4 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fb fefa 	bl	80009e4 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e04c      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfe:	4b28      	ldr	r3, [pc, #160]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c0a:	4b25      	ldr	r3, [pc, #148]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	4924      	ldr	r1, [pc, #144]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004c10:	4b25      	ldr	r3, [pc, #148]	@ (8004ca8 <HAL_RCC_OscConfig+0x620>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	60cb      	str	r3, [r1, #12]
 8004c16:	e03e      	b.n	8004c96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e039      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c24:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f003 0203 	and.w	r2, r3, #3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d12c      	bne.n	8004c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	3b01      	subs	r3, #1
 8004c44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d123      	bne.n	8004c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d11b      	bne.n	8004c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d113      	bne.n	8004c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	3b01      	subs	r3, #1
 8004c78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d109      	bne.n	8004c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	019f800c 	.word	0x019f800c
 8004ca8:	feeefffc 	.word	0xfeeefffc

08004cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e11e      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b91      	ldr	r3, [pc, #580]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d910      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b8e      	ldr	r3, [pc, #568]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 020f 	bic.w	r2, r3, #15
 8004cda:	498c      	ldr	r1, [pc, #560]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b8a      	ldr	r3, [pc, #552]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e106      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d073      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d129      	bne.n	8004d5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d08:	4b81      	ldr	r3, [pc, #516]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0f4      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d18:	f000 f964 	bl	8004fe4 <RCC_GetSysClockFreqFromPLLSource>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4a7c      	ldr	r2, [pc, #496]	@ (8004f14 <HAL_RCC_ClockConfig+0x268>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d93f      	bls.n	8004da6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d26:	4b7a      	ldr	r3, [pc, #488]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d033      	beq.n	8004da6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d12f      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d46:	4b72      	ldr	r3, [pc, #456]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d4e:	4a70      	ldr	r2, [pc, #448]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d56:	2380      	movs	r3, #128	@ 0x80
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	e024      	b.n	8004da6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d64:	4b6a      	ldr	r3, [pc, #424]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0c6      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d74:	4b66      	ldr	r3, [pc, #408]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0be      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d84:	f000 f8ce 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4a61      	ldr	r2, [pc, #388]	@ (8004f14 <HAL_RCC_ClockConfig+0x268>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d909      	bls.n	8004da6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d92:	4b5f      	ldr	r3, [pc, #380]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d9a:	4a5d      	ldr	r2, [pc, #372]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004da2:	2380      	movs	r3, #128	@ 0x80
 8004da4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004da6:	4b5a      	ldr	r3, [pc, #360]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f023 0203 	bic.w	r2, r3, #3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4957      	ldr	r1, [pc, #348]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db8:	f7fb fe14 	bl	80009e4 <HAL_GetTick>
 8004dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc0:	f7fb fe10 	bl	80009e4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e095      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 020c 	and.w	r2, r3, #12
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d1eb      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d023      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e00:	4b43      	ldr	r3, [pc, #268]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	4a42      	ldr	r2, [pc, #264]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e18:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e20:	4a3b      	ldr	r2, [pc, #236]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e28:	4b39      	ldr	r3, [pc, #228]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4936      	ldr	r1, [pc, #216]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2b80      	cmp	r3, #128	@ 0x80
 8004e40:	d105      	bne.n	8004e4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e42:	4b33      	ldr	r3, [pc, #204]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	4a32      	ldr	r2, [pc, #200]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d21d      	bcs.n	8004e98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f023 020f 	bic.w	r2, r3, #15
 8004e64:	4929      	ldr	r1, [pc, #164]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e6c:	f7fb fdba 	bl	80009e4 <HAL_GetTick>
 8004e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e74:	f7fb fdb6 	bl	80009e4 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e03b      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b20      	ldr	r3, [pc, #128]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d1ed      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4917      	ldr	r1, [pc, #92]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d009      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec2:	4b13      	ldr	r3, [pc, #76]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	490f      	ldr	r1, [pc, #60]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ed6:	f000 f825 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8004eda:	4602      	mov	r2, r0
 8004edc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	490c      	ldr	r1, [pc, #48]	@ (8004f18 <HAL_RCC_ClockConfig+0x26c>)
 8004ee8:	5ccb      	ldrb	r3, [r1, r3]
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8004f1c <HAL_RCC_ClockConfig+0x270>)
 8004ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f20 <HAL_RCC_ClockConfig+0x274>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fb fd26 	bl	800094c <HAL_InitTick>
 8004f00:	4603      	mov	r3, r0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40022000 	.word	0x40022000
 8004f10:	40021000 	.word	0x40021000
 8004f14:	04c4b400 	.word	0x04c4b400
 8004f18:	0800a81c 	.word	0x0800a81c
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	20000004 	.word	0x20000004

08004f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d102      	bne.n	8004f3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f36:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e047      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f3c:	4b27      	ldr	r3, [pc, #156]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 030c 	and.w	r3, r3, #12
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d102      	bne.n	8004f4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f48:	4b25      	ldr	r3, [pc, #148]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e03e      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f4e:	4b23      	ldr	r3, [pc, #140]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b0c      	cmp	r3, #12
 8004f58:	d136      	bne.n	8004fc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f5a:	4b20      	ldr	r3, [pc, #128]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f64:	4b1d      	ldr	r3, [pc, #116]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	3301      	adds	r3, #1
 8004f70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d10c      	bne.n	8004f92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f78:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	4a16      	ldr	r2, [pc, #88]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f82:	68d2      	ldr	r2, [r2, #12]
 8004f84:	0a12      	lsrs	r2, r2, #8
 8004f86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f8a:	fb02 f303 	mul.w	r3, r2, r3
 8004f8e:	617b      	str	r3, [r7, #20]
      break;
 8004f90:	e00c      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f92:	4a13      	ldr	r2, [pc, #76]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	4a10      	ldr	r2, [pc, #64]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f9c:	68d2      	ldr	r2, [r2, #12]
 8004f9e:	0a12      	lsrs	r2, r2, #8
 8004fa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fa4:	fb02 f303 	mul.w	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]
      break;
 8004faa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fac:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	0e5b      	lsrs	r3, r3, #25
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	e001      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fcc:	693b      	ldr	r3, [r7, #16]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	00f42400 	.word	0x00f42400

08004fe4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fea:	4b1e      	ldr	r3, [pc, #120]	@ (8005064 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8005064 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	091b      	lsrs	r3, r3, #4
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b03      	cmp	r3, #3
 8005006:	d10c      	bne.n	8005022 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005008:	4a17      	ldr	r2, [pc, #92]	@ (8005068 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005010:	4a14      	ldr	r2, [pc, #80]	@ (8005064 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005012:	68d2      	ldr	r2, [r2, #12]
 8005014:	0a12      	lsrs	r2, r2, #8
 8005016:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800501a:	fb02 f303 	mul.w	r3, r2, r3
 800501e:	617b      	str	r3, [r7, #20]
    break;
 8005020:	e00c      	b.n	800503c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005022:	4a11      	ldr	r2, [pc, #68]	@ (8005068 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	4a0e      	ldr	r2, [pc, #56]	@ (8005064 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800502c:	68d2      	ldr	r2, [r2, #12]
 800502e:	0a12      	lsrs	r2, r2, #8
 8005030:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005034:	fb02 f303 	mul.w	r3, r2, r3
 8005038:	617b      	str	r3, [r7, #20]
    break;
 800503a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800503c:	4b09      	ldr	r3, [pc, #36]	@ (8005064 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	0e5b      	lsrs	r3, r3, #25
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	3301      	adds	r3, #1
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005056:	687b      	ldr	r3, [r7, #4]
}
 8005058:	4618      	mov	r0, r3
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40021000 	.word	0x40021000
 8005068:	00f42400 	.word	0x00f42400

0800506c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005074:	2300      	movs	r3, #0
 8005076:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005078:	2300      	movs	r3, #0
 800507a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8098 	beq.w	80051ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800508a:	2300      	movs	r3, #0
 800508c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508e:	4b43      	ldr	r3, [pc, #268]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10d      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800509a:	4b40      	ldr	r3, [pc, #256]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800509c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509e:	4a3f      	ldr	r2, [pc, #252]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80050a6:	4b3d      	ldr	r3, [pc, #244]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b2:	2301      	movs	r3, #1
 80050b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b6:	4b3a      	ldr	r3, [pc, #232]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a39      	ldr	r2, [pc, #228]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050c2:	f7fb fc8f 	bl	80009e4 <HAL_GetTick>
 80050c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050c8:	e009      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ca:	f7fb fc8b 	bl	80009e4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d902      	bls.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	74fb      	strb	r3, [r7, #19]
        break;
 80050dc:	e005      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050de:	4b30      	ldr	r3, [pc, #192]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0ef      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d159      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050f0:	4b2a      	ldr	r3, [pc, #168]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01e      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	d019      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800510c:	4b23      	ldr	r3, [pc, #140]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005116:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005118:	4b20      	ldr	r3, [pc, #128]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511e:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005128:	4b1c      	ldr	r3, [pc, #112]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512e:	4a1b      	ldr	r2, [pc, #108]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005138:	4a18      	ldr	r2, [pc, #96]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514a:	f7fb fc4b 	bl	80009e4 <HAL_GetTick>
 800514e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005150:	e00b      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fb fc47 	bl	80009e4 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	d902      	bls.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	74fb      	strb	r3, [r7, #19]
            break;
 8005168:	e006      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800516a:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0ec      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800517e:	4b07      	ldr	r3, [pc, #28]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	4903      	ldr	r1, [pc, #12]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005194:	e008      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	74bb      	strb	r3, [r7, #18]
 800519a:	e005      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800519c:	40021000 	.word	0x40021000
 80051a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a8:	7c7b      	ldrb	r3, [r7, #17]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d105      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ae:	4ba6      	ldr	r3, [pc, #664]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b2:	4aa5      	ldr	r2, [pc, #660]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051c6:	4ba0      	ldr	r3, [pc, #640]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051cc:	f023 0203 	bic.w	r2, r3, #3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	499c      	ldr	r1, [pc, #624]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051e8:	4b97      	ldr	r3, [pc, #604]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	f023 020c 	bic.w	r2, r3, #12
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	4994      	ldr	r1, [pc, #592]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800520a:	4b8f      	ldr	r3, [pc, #572]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005210:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	498b      	ldr	r1, [pc, #556]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800522c:	4b86      	ldr	r3, [pc, #536]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005232:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	4983      	ldr	r1, [pc, #524]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800524e:	4b7e      	ldr	r3, [pc, #504]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005254:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	497a      	ldr	r1, [pc, #488]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005270:	4b75      	ldr	r3, [pc, #468]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005276:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	4972      	ldr	r1, [pc, #456]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005292:	4b6d      	ldr	r3, [pc, #436]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005298:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4969      	ldr	r1, [pc, #420]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052b4:	4b64      	ldr	r3, [pc, #400]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4961      	ldr	r1, [pc, #388]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e4:	4958      	ldr	r1, [pc, #352]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d015      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052f8:	4b53      	ldr	r3, [pc, #332]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005306:	4950      	ldr	r1, [pc, #320]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005316:	d105      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005318:	4b4b      	ldr	r3, [pc, #300]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a4a      	ldr	r2, [pc, #296]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005322:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800532c:	2b00      	cmp	r3, #0
 800532e:	d015      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005330:	4b45      	ldr	r3, [pc, #276]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005336:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	4942      	ldr	r1, [pc, #264]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800534e:	d105      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005350:	4b3d      	ldr	r3, [pc, #244]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4a3c      	ldr	r2, [pc, #240]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800535a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d015      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005368:	4b37      	ldr	r3, [pc, #220]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005376:	4934      	ldr	r1, [pc, #208]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005382:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005386:	d105      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005388:	4b2f      	ldr	r3, [pc, #188]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4a2e      	ldr	r2, [pc, #184]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005392:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d015      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053a0:	4b29      	ldr	r3, [pc, #164]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ae:	4926      	ldr	r1, [pc, #152]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053be:	d105      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c0:	4b21      	ldr	r3, [pc, #132]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a20      	ldr	r2, [pc, #128]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d015      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e6:	4918      	ldr	r1, [pc, #96]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053f6:	d105      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f8:	4b13      	ldr	r3, [pc, #76]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4a12      	ldr	r2, [pc, #72]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005402:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d015      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005410:	4b0d      	ldr	r3, [pc, #52]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005416:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	490a      	ldr	r1, [pc, #40]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542e:	d105      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005430:	4b05      	ldr	r3, [pc, #20]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4a04      	ldr	r2, [pc, #16]	@ (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800543c:	7cbb      	ldrb	r3, [r7, #18]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40021000 	.word	0x40021000

0800544c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e049      	b.n	80054f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fb f976 	bl	8000764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f000 fba4 	bl	8005bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e049      	b.n	80055a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f841 	bl	80055a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f000 fb4d 	bl	8005bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <HAL_TIM_PWM_Start+0x24>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	bf14      	ite	ne
 80055d8:	2301      	movne	r3, #1
 80055da:	2300      	moveq	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e03c      	b.n	800565a <HAL_TIM_PWM_Start+0x9e>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d109      	bne.n	80055fa <HAL_TIM_PWM_Start+0x3e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	bf14      	ite	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2300      	moveq	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	e02f      	b.n	800565a <HAL_TIM_PWM_Start+0x9e>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d109      	bne.n	8005614 <HAL_TIM_PWM_Start+0x58>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	bf14      	ite	ne
 800560c:	2301      	movne	r3, #1
 800560e:	2300      	moveq	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	e022      	b.n	800565a <HAL_TIM_PWM_Start+0x9e>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b0c      	cmp	r3, #12
 8005618:	d109      	bne.n	800562e <HAL_TIM_PWM_Start+0x72>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	e015      	b.n	800565a <HAL_TIM_PWM_Start+0x9e>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b10      	cmp	r3, #16
 8005632:	d109      	bne.n	8005648 <HAL_TIM_PWM_Start+0x8c>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e008      	b.n	800565a <HAL_TIM_PWM_Start+0x9e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e097      	b.n	8005792 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <HAL_TIM_PWM_Start+0xb6>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005670:	e023      	b.n	80056ba <HAL_TIM_PWM_Start+0xfe>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b04      	cmp	r3, #4
 8005676:	d104      	bne.n	8005682 <HAL_TIM_PWM_Start+0xc6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005680:	e01b      	b.n	80056ba <HAL_TIM_PWM_Start+0xfe>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b08      	cmp	r3, #8
 8005686:	d104      	bne.n	8005692 <HAL_TIM_PWM_Start+0xd6>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005690:	e013      	b.n	80056ba <HAL_TIM_PWM_Start+0xfe>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b0c      	cmp	r3, #12
 8005696:	d104      	bne.n	80056a2 <HAL_TIM_PWM_Start+0xe6>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056a0:	e00b      	b.n	80056ba <HAL_TIM_PWM_Start+0xfe>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d104      	bne.n	80056b2 <HAL_TIM_PWM_Start+0xf6>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056b0:	e003      	b.n	80056ba <HAL_TIM_PWM_Start+0xfe>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2201      	movs	r2, #1
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 feb6 	bl	8006434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a33      	ldr	r2, [pc, #204]	@ (800579c <HAL_TIM_PWM_Start+0x1e0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d013      	beq.n	80056fa <HAL_TIM_PWM_Start+0x13e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a32      	ldr	r2, [pc, #200]	@ (80057a0 <HAL_TIM_PWM_Start+0x1e4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00e      	beq.n	80056fa <HAL_TIM_PWM_Start+0x13e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a30      	ldr	r2, [pc, #192]	@ (80057a4 <HAL_TIM_PWM_Start+0x1e8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d009      	beq.n	80056fa <HAL_TIM_PWM_Start+0x13e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2f      	ldr	r2, [pc, #188]	@ (80057a8 <HAL_TIM_PWM_Start+0x1ec>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d004      	beq.n	80056fa <HAL_TIM_PWM_Start+0x13e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2d      	ldr	r2, [pc, #180]	@ (80057ac <HAL_TIM_PWM_Start+0x1f0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d101      	bne.n	80056fe <HAL_TIM_PWM_Start+0x142>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <HAL_TIM_PWM_Start+0x144>
 80056fe:	2300      	movs	r3, #0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005712:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a20      	ldr	r2, [pc, #128]	@ (800579c <HAL_TIM_PWM_Start+0x1e0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d018      	beq.n	8005750 <HAL_TIM_PWM_Start+0x194>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005726:	d013      	beq.n	8005750 <HAL_TIM_PWM_Start+0x194>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a20      	ldr	r2, [pc, #128]	@ (80057b0 <HAL_TIM_PWM_Start+0x1f4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00e      	beq.n	8005750 <HAL_TIM_PWM_Start+0x194>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1f      	ldr	r2, [pc, #124]	@ (80057b4 <HAL_TIM_PWM_Start+0x1f8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d009      	beq.n	8005750 <HAL_TIM_PWM_Start+0x194>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a17      	ldr	r2, [pc, #92]	@ (80057a0 <HAL_TIM_PWM_Start+0x1e4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d004      	beq.n	8005750 <HAL_TIM_PWM_Start+0x194>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a16      	ldr	r2, [pc, #88]	@ (80057a4 <HAL_TIM_PWM_Start+0x1e8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d115      	bne.n	800577c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	4b18      	ldr	r3, [pc, #96]	@ (80057b8 <HAL_TIM_PWM_Start+0x1fc>)
 8005758:	4013      	ands	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b06      	cmp	r3, #6
 8005760:	d015      	beq.n	800578e <HAL_TIM_PWM_Start+0x1d2>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005768:	d011      	beq.n	800578e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0201 	orr.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577a:	e008      	b.n	800578e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	e000      	b.n	8005790 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40012c00 	.word	0x40012c00
 80057a0:	40013400 	.word	0x40013400
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40014400 	.word	0x40014400
 80057ac:	40014800 	.word	0x40014800
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800
 80057b8:	00010007 	.word	0x00010007

080057bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e0ff      	b.n	80059da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b14      	cmp	r3, #20
 80057e6:	f200 80f0 	bhi.w	80059ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057ea:	a201      	add	r2, pc, #4	@ (adr r2, 80057f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f0:	08005845 	.word	0x08005845
 80057f4:	080059cb 	.word	0x080059cb
 80057f8:	080059cb 	.word	0x080059cb
 80057fc:	080059cb 	.word	0x080059cb
 8005800:	08005885 	.word	0x08005885
 8005804:	080059cb 	.word	0x080059cb
 8005808:	080059cb 	.word	0x080059cb
 800580c:	080059cb 	.word	0x080059cb
 8005810:	080058c7 	.word	0x080058c7
 8005814:	080059cb 	.word	0x080059cb
 8005818:	080059cb 	.word	0x080059cb
 800581c:	080059cb 	.word	0x080059cb
 8005820:	08005907 	.word	0x08005907
 8005824:	080059cb 	.word	0x080059cb
 8005828:	080059cb 	.word	0x080059cb
 800582c:	080059cb 	.word	0x080059cb
 8005830:	08005949 	.word	0x08005949
 8005834:	080059cb 	.word	0x080059cb
 8005838:	080059cb 	.word	0x080059cb
 800583c:	080059cb 	.word	0x080059cb
 8005840:	08005989 	.word	0x08005989
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fa60 	bl	8005d10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0208 	orr.w	r2, r2, #8
 800585e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0204 	bic.w	r2, r2, #4
 800586e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6999      	ldr	r1, [r3, #24]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	619a      	str	r2, [r3, #24]
      break;
 8005882:	e0a5      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fad0 	bl	8005e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800589e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6999      	ldr	r1, [r3, #24]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	021a      	lsls	r2, r3, #8
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	619a      	str	r2, [r3, #24]
      break;
 80058c4:	e084      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fb39 	bl	8005f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0208 	orr.w	r2, r2, #8
 80058e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0204 	bic.w	r2, r2, #4
 80058f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69d9      	ldr	r1, [r3, #28]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	61da      	str	r2, [r3, #28]
      break;
 8005904:	e064      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fba1 	bl	8006054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69d9      	ldr	r1, [r3, #28]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	021a      	lsls	r2, r3, #8
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	61da      	str	r2, [r3, #28]
      break;
 8005946:	e043      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fc0a 	bl	8006168 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0208 	orr.w	r2, r2, #8
 8005962:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0204 	bic.w	r2, r2, #4
 8005972:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005986:	e023      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fc4e 	bl	8006230 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	021a      	lsls	r2, r3, #8
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059c8:	e002      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
      break;
 80059ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop

080059e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIM_ConfigClockSource+0x1c>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e0de      	b.n	8005bbe <HAL_TIM_ConfigClockSource+0x1da>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005a1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a63      	ldr	r2, [pc, #396]	@ (8005bc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	f000 80a9 	beq.w	8005b92 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a40:	4a61      	ldr	r2, [pc, #388]	@ (8005bc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	f200 80ae 	bhi.w	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a48:	4a60      	ldr	r2, [pc, #384]	@ (8005bcc <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	f000 80a1 	beq.w	8005b92 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a50:	4a5e      	ldr	r2, [pc, #376]	@ (8005bcc <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	f200 80a6 	bhi.w	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a58:	4a5d      	ldr	r2, [pc, #372]	@ (8005bd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	f000 8099 	beq.w	8005b92 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a60:	4a5b      	ldr	r2, [pc, #364]	@ (8005bd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	f200 809e 	bhi.w	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a68:	4a5a      	ldr	r2, [pc, #360]	@ (8005bd4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	f000 8091 	beq.w	8005b92 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a70:	4a58      	ldr	r2, [pc, #352]	@ (8005bd4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	f200 8096 	bhi.w	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a7c:	f000 8089 	beq.w	8005b92 <HAL_TIM_ConfigClockSource+0x1ae>
 8005a80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a84:	f200 808e 	bhi.w	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a8c:	d03e      	beq.n	8005b0c <HAL_TIM_ConfigClockSource+0x128>
 8005a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a92:	f200 8087 	bhi.w	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a9a:	f000 8086 	beq.w	8005baa <HAL_TIM_ConfigClockSource+0x1c6>
 8005a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa2:	d87f      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005aa4:	2b70      	cmp	r3, #112	@ 0x70
 8005aa6:	d01a      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0xfa>
 8005aa8:	2b70      	cmp	r3, #112	@ 0x70
 8005aaa:	d87b      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005aac:	2b60      	cmp	r3, #96	@ 0x60
 8005aae:	d050      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0x16e>
 8005ab0:	2b60      	cmp	r3, #96	@ 0x60
 8005ab2:	d877      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ab4:	2b50      	cmp	r3, #80	@ 0x50
 8005ab6:	d03c      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0x14e>
 8005ab8:	2b50      	cmp	r3, #80	@ 0x50
 8005aba:	d873      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005abc:	2b40      	cmp	r3, #64	@ 0x40
 8005abe:	d058      	beq.n	8005b72 <HAL_TIM_ConfigClockSource+0x18e>
 8005ac0:	2b40      	cmp	r3, #64	@ 0x40
 8005ac2:	d86f      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ac4:	2b30      	cmp	r3, #48	@ 0x30
 8005ac6:	d064      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ac8:	2b30      	cmp	r3, #48	@ 0x30
 8005aca:	d86b      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d060      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d867      	bhi.n	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d05c      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d05a      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x1ae>
 8005adc:	e062      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aee:	f000 fc81 	bl	80063f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	609a      	str	r2, [r3, #8]
      break;
 8005b0a:	e04f      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b1c:	f000 fc6a 	bl	80063f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b2e:	609a      	str	r2, [r3, #8]
      break;
 8005b30:	e03c      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f000 fbdc 	bl	80062fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2150      	movs	r1, #80	@ 0x50
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fc35 	bl	80063ba <TIM_ITRx_SetConfig>
      break;
 8005b50:	e02c      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f000 fbfb 	bl	800635a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2160      	movs	r1, #96	@ 0x60
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fc25 	bl	80063ba <TIM_ITRx_SetConfig>
      break;
 8005b70:	e01c      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f000 fbbc 	bl	80062fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2140      	movs	r1, #64	@ 0x40
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fc15 	bl	80063ba <TIM_ITRx_SetConfig>
      break;
 8005b90:	e00c      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	f000 fc0c 	bl	80063ba <TIM_ITRx_SetConfig>
      break;
 8005ba2:	e003      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba8:	e000      	b.n	8005bac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	00100070 	.word	0x00100070
 8005bcc:	00100040 	.word	0x00100040
 8005bd0:	00100030 	.word	0x00100030
 8005bd4:	00100020 	.word	0x00100020

08005bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a42      	ldr	r2, [pc, #264]	@ (8005cf4 <TIM_Base_SetConfig+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00f      	beq.n	8005c10 <TIM_Base_SetConfig+0x38>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf6:	d00b      	beq.n	8005c10 <TIM_Base_SetConfig+0x38>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8005cf8 <TIM_Base_SetConfig+0x120>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d007      	beq.n	8005c10 <TIM_Base_SetConfig+0x38>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a3e      	ldr	r2, [pc, #248]	@ (8005cfc <TIM_Base_SetConfig+0x124>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_Base_SetConfig+0x38>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a3d      	ldr	r2, [pc, #244]	@ (8005d00 <TIM_Base_SetConfig+0x128>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d108      	bne.n	8005c22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a33      	ldr	r2, [pc, #204]	@ (8005cf4 <TIM_Base_SetConfig+0x11c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01b      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c30:	d017      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a30      	ldr	r2, [pc, #192]	@ (8005cf8 <TIM_Base_SetConfig+0x120>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005cfc <TIM_Base_SetConfig+0x124>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00f      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a2e      	ldr	r2, [pc, #184]	@ (8005d00 <TIM_Base_SetConfig+0x128>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00b      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005d04 <TIM_Base_SetConfig+0x12c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d007      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2c      	ldr	r2, [pc, #176]	@ (8005d08 <TIM_Base_SetConfig+0x130>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_Base_SetConfig+0x8a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8005d0c <TIM_Base_SetConfig+0x134>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d108      	bne.n	8005c74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a16      	ldr	r2, [pc, #88]	@ (8005cf4 <TIM_Base_SetConfig+0x11c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00f      	beq.n	8005cc0 <TIM_Base_SetConfig+0xe8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a17      	ldr	r2, [pc, #92]	@ (8005d00 <TIM_Base_SetConfig+0x128>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00b      	beq.n	8005cc0 <TIM_Base_SetConfig+0xe8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a16      	ldr	r2, [pc, #88]	@ (8005d04 <TIM_Base_SetConfig+0x12c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <TIM_Base_SetConfig+0xe8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a15      	ldr	r2, [pc, #84]	@ (8005d08 <TIM_Base_SetConfig+0x130>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_Base_SetConfig+0xe8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a14      	ldr	r2, [pc, #80]	@ (8005d0c <TIM_Base_SetConfig+0x134>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d103      	bne.n	8005cc8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f023 0201 	bic.w	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	611a      	str	r2, [r3, #16]
  }
}
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40012c00 	.word	0x40012c00
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40014400 	.word	0x40014400
 8005d0c:	40014800 	.word	0x40014800

08005d10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	f023 0201 	bic.w	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f023 0302 	bic.w	r3, r3, #2
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8005e1c <TIM_OC1_SetConfig+0x10c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00f      	beq.n	8005d90 <TIM_OC1_SetConfig+0x80>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a2b      	ldr	r2, [pc, #172]	@ (8005e20 <TIM_OC1_SetConfig+0x110>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <TIM_OC1_SetConfig+0x80>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8005e24 <TIM_OC1_SetConfig+0x114>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d007      	beq.n	8005d90 <TIM_OC1_SetConfig+0x80>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a29      	ldr	r2, [pc, #164]	@ (8005e28 <TIM_OC1_SetConfig+0x118>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC1_SetConfig+0x80>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a28      	ldr	r2, [pc, #160]	@ (8005e2c <TIM_OC1_SetConfig+0x11c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d10c      	bne.n	8005daa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f023 0308 	bic.w	r3, r3, #8
 8005d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f023 0304 	bic.w	r3, r3, #4
 8005da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a1b      	ldr	r2, [pc, #108]	@ (8005e1c <TIM_OC1_SetConfig+0x10c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00f      	beq.n	8005dd2 <TIM_OC1_SetConfig+0xc2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a1a      	ldr	r2, [pc, #104]	@ (8005e20 <TIM_OC1_SetConfig+0x110>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00b      	beq.n	8005dd2 <TIM_OC1_SetConfig+0xc2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a19      	ldr	r2, [pc, #100]	@ (8005e24 <TIM_OC1_SetConfig+0x114>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d007      	beq.n	8005dd2 <TIM_OC1_SetConfig+0xc2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a18      	ldr	r2, [pc, #96]	@ (8005e28 <TIM_OC1_SetConfig+0x118>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d003      	beq.n	8005dd2 <TIM_OC1_SetConfig+0xc2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a17      	ldr	r2, [pc, #92]	@ (8005e2c <TIM_OC1_SetConfig+0x11c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d111      	bne.n	8005df6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	621a      	str	r2, [r3, #32]
}
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40012c00 	.word	0x40012c00
 8005e20:	40013400 	.word	0x40013400
 8005e24:	40014000 	.word	0x40014000
 8005e28:	40014400 	.word	0x40014400
 8005e2c:	40014800 	.word	0x40014800

08005e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	f023 0210 	bic.w	r2, r3, #16
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	021b      	lsls	r3, r3, #8
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0320 	bic.w	r3, r3, #32
 8005e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a28      	ldr	r2, [pc, #160]	@ (8005f30 <TIM_OC2_SetConfig+0x100>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_OC2_SetConfig+0x6c>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a27      	ldr	r2, [pc, #156]	@ (8005f34 <TIM_OC2_SetConfig+0x104>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d10d      	bne.n	8005eb8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a1d      	ldr	r2, [pc, #116]	@ (8005f30 <TIM_OC2_SetConfig+0x100>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00f      	beq.n	8005ee0 <TIM_OC2_SetConfig+0xb0>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f34 <TIM_OC2_SetConfig+0x104>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00b      	beq.n	8005ee0 <TIM_OC2_SetConfig+0xb0>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a1b      	ldr	r2, [pc, #108]	@ (8005f38 <TIM_OC2_SetConfig+0x108>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <TIM_OC2_SetConfig+0xb0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f3c <TIM_OC2_SetConfig+0x10c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_OC2_SetConfig+0xb0>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a19      	ldr	r2, [pc, #100]	@ (8005f40 <TIM_OC2_SetConfig+0x110>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d113      	bne.n	8005f08 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005eee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	40013400 	.word	0x40013400
 8005f38:	40014000 	.word	0x40014000
 8005f3c:	40014400 	.word	0x40014400
 8005f40:	40014800 	.word	0x40014800

08005f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0303 	bic.w	r3, r3, #3
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a27      	ldr	r2, [pc, #156]	@ (8006040 <TIM_OC3_SetConfig+0xfc>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d003      	beq.n	8005fae <TIM_OC3_SetConfig+0x6a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a26      	ldr	r2, [pc, #152]	@ (8006044 <TIM_OC3_SetConfig+0x100>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d10d      	bne.n	8005fca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	021b      	lsls	r3, r3, #8
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006040 <TIM_OC3_SetConfig+0xfc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00f      	beq.n	8005ff2 <TIM_OC3_SetConfig+0xae>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8006044 <TIM_OC3_SetConfig+0x100>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_OC3_SetConfig+0xae>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8006048 <TIM_OC3_SetConfig+0x104>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_OC3_SetConfig+0xae>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	@ (800604c <TIM_OC3_SetConfig+0x108>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_OC3_SetConfig+0xae>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a18      	ldr	r2, [pc, #96]	@ (8006050 <TIM_OC3_SetConfig+0x10c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d113      	bne.n	800601a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	621a      	str	r2, [r3, #32]
}
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40012c00 	.word	0x40012c00
 8006044:	40013400 	.word	0x40013400
 8006048:	40014000 	.word	0x40014000
 800604c:	40014400 	.word	0x40014400
 8006050:	40014800 	.word	0x40014800

08006054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800608e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	031b      	lsls	r3, r3, #12
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a28      	ldr	r2, [pc, #160]	@ (8006154 <TIM_OC4_SetConfig+0x100>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <TIM_OC4_SetConfig+0x6c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a27      	ldr	r2, [pc, #156]	@ (8006158 <TIM_OC4_SetConfig+0x104>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10d      	bne.n	80060dc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	031b      	lsls	r3, r3, #12
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1d      	ldr	r2, [pc, #116]	@ (8006154 <TIM_OC4_SetConfig+0x100>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00f      	beq.n	8006104 <TIM_OC4_SetConfig+0xb0>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006158 <TIM_OC4_SetConfig+0x104>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_OC4_SetConfig+0xb0>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1b      	ldr	r2, [pc, #108]	@ (800615c <TIM_OC4_SetConfig+0x108>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_OC4_SetConfig+0xb0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006160 <TIM_OC4_SetConfig+0x10c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_OC4_SetConfig+0xb0>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a19      	ldr	r2, [pc, #100]	@ (8006164 <TIM_OC4_SetConfig+0x110>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d113      	bne.n	800612c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800610a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006112:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	019b      	lsls	r3, r3, #6
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	019b      	lsls	r3, r3, #6
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40012c00 	.word	0x40012c00
 8006158:	40013400 	.word	0x40013400
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800

08006168 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80061ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	041b      	lsls	r3, r3, #16
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a17      	ldr	r2, [pc, #92]	@ (800621c <TIM_OC5_SetConfig+0xb4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00f      	beq.n	80061e2 <TIM_OC5_SetConfig+0x7a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a16      	ldr	r2, [pc, #88]	@ (8006220 <TIM_OC5_SetConfig+0xb8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00b      	beq.n	80061e2 <TIM_OC5_SetConfig+0x7a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a15      	ldr	r2, [pc, #84]	@ (8006224 <TIM_OC5_SetConfig+0xbc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d007      	beq.n	80061e2 <TIM_OC5_SetConfig+0x7a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a14      	ldr	r2, [pc, #80]	@ (8006228 <TIM_OC5_SetConfig+0xc0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d003      	beq.n	80061e2 <TIM_OC5_SetConfig+0x7a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a13      	ldr	r2, [pc, #76]	@ (800622c <TIM_OC5_SetConfig+0xc4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d109      	bne.n	80061f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	621a      	str	r2, [r3, #32]
}
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	40012c00 	.word	0x40012c00
 8006220:	40013400 	.word	0x40013400
 8006224:	40014000 	.word	0x40014000
 8006228:	40014400 	.word	0x40014400
 800622c:	40014800 	.word	0x40014800

08006230 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800625e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	051b      	lsls	r3, r3, #20
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a18      	ldr	r2, [pc, #96]	@ (80062e8 <TIM_OC6_SetConfig+0xb8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00f      	beq.n	80062ac <TIM_OC6_SetConfig+0x7c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a17      	ldr	r2, [pc, #92]	@ (80062ec <TIM_OC6_SetConfig+0xbc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00b      	beq.n	80062ac <TIM_OC6_SetConfig+0x7c>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a16      	ldr	r2, [pc, #88]	@ (80062f0 <TIM_OC6_SetConfig+0xc0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_OC6_SetConfig+0x7c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a15      	ldr	r2, [pc, #84]	@ (80062f4 <TIM_OC6_SetConfig+0xc4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_OC6_SetConfig+0x7c>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a14      	ldr	r2, [pc, #80]	@ (80062f8 <TIM_OC6_SetConfig+0xc8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d109      	bne.n	80062c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	029b      	lsls	r3, r3, #10
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40012c00 	.word	0x40012c00
 80062ec:	40013400 	.word	0x40013400
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800

080062fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f023 0201 	bic.w	r2, r3, #1
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f023 030a 	bic.w	r3, r3, #10
 8006338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	621a      	str	r2, [r3, #32]
}
 800634e:	bf00      	nop
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800635a:	b480      	push	{r7}
 800635c:	b087      	sub	sp, #28
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	f023 0210 	bic.w	r2, r3, #16
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006384:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	031b      	lsls	r3, r3, #12
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006396:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80063d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	f043 0307 	orr.w	r3, r3, #7
 80063e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	609a      	str	r2, [r3, #8]
}
 80063e8:	bf00      	nop
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800640e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	021a      	lsls	r2, r3, #8
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	431a      	orrs	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4313      	orrs	r3, r2
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	bf00      	nop
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	2201      	movs	r2, #1
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1a      	ldr	r2, [r3, #32]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	43db      	mvns	r3, r3
 8006456:	401a      	ands	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1a      	ldr	r2, [r3, #32]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	fa01 f303 	lsl.w	r3, r1, r3
 800646c:	431a      	orrs	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006494:	2302      	movs	r3, #2
 8006496:	e065      	b.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d004      	beq.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d108      	bne.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80064e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a1b      	ldr	r2, [pc, #108]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d018      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650e:	d013      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a18      	ldr	r2, [pc, #96]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00e      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a17      	ldr	r2, [pc, #92]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d009      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a12      	ldr	r2, [pc, #72]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d004      	beq.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a13      	ldr	r2, [pc, #76]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d10c      	bne.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800653e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	4313      	orrs	r3, r2
 8006548:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40013400 	.word	0x40013400
 8006578:	40000400 	.word	0x40000400
 800657c:	40000800 	.word	0x40000800
 8006580:	40014000 	.word	0x40014000

08006584 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006594:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006598:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	b29a      	uxth	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065ba:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80065be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	43db      	mvns	r3, r3
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	4013      	ands	r3, r2
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006624:	b480      	push	{r7}
 8006626:	b0a7      	sub	sp, #156	@ 0x9c
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800664a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	78db      	ldrb	r3, [r3, #3]
 8006652:	2b03      	cmp	r3, #3
 8006654:	d81f      	bhi.n	8006696 <USB_ActivateEndpoint+0x72>
 8006656:	a201      	add	r2, pc, #4	@ (adr r2, 800665c <USB_ActivateEndpoint+0x38>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	0800666d 	.word	0x0800666d
 8006660:	08006689 	.word	0x08006689
 8006664:	0800669f 	.word	0x0800669f
 8006668:	0800667b 	.word	0x0800667b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800666c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006670:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006674:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006678:	e012      	b.n	80066a0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800667a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800667e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006682:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006686:	e00b      	b.n	80066a0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006688:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800668c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006690:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006694:	e004      	b.n	80066a0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800669c:	e000      	b.n	80066a0 <USB_ActivateEndpoint+0x7c>
      break;
 800669e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	441a      	add	r2, r3
 80066aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80066ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066be:	b29b      	uxth	r3, r3
 80066c0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	b21b      	sxth	r3, r3
 80066d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066da:	b21a      	sxth	r2, r3
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	b21b      	sxth	r3, r3
 80066e2:	4313      	orrs	r3, r2
 80066e4:	b21b      	sxth	r3, r3
 80066e6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80066f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006708:	b29b      	uxth	r3, r3
 800670a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	7b1b      	ldrb	r3, [r3, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f040 8180 	bne.w	8006a16 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8084 	beq.w	8006828 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	61bb      	str	r3, [r7, #24]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800672a:	b29b      	uxth	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	4413      	add	r3, r2
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	00da      	lsls	r2, r3, #3
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	88db      	ldrh	r3, [r3, #6]
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	b29b      	uxth	r3, r3
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	827b      	strh	r3, [r7, #18]
 8006762:	8a7b      	ldrh	r3, [r7, #18]
 8006764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01b      	beq.n	80067a4 <USB_ActivateEndpoint+0x180>
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800677e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006782:	823b      	strh	r3, [r7, #16]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	441a      	add	r2, r3
 800678e:	8a3b      	ldrh	r3, [r7, #16]
 8006790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800679c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	78db      	ldrb	r3, [r3, #3]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d020      	beq.n	80067ee <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067c2:	81bb      	strh	r3, [r7, #12]
 80067c4:	89bb      	ldrh	r3, [r7, #12]
 80067c6:	f083 0320 	eor.w	r3, r3, #32
 80067ca:	81bb      	strh	r3, [r7, #12]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	441a      	add	r2, r3
 80067d6:	89bb      	ldrh	r3, [r7, #12]
 80067d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	8013      	strh	r3, [r2, #0]
 80067ec:	e3f9      	b.n	8006fe2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006804:	81fb      	strh	r3, [r7, #14]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	89fb      	ldrh	r3, [r7, #14]
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800681e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]
 8006826:	e3dc      	b.n	8006fe2 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	633b      	str	r3, [r7, #48]	@ 0x30
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006832:	b29b      	uxth	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	4413      	add	r3, r2
 800683a:	633b      	str	r3, [r7, #48]	@ 0x30
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	00da      	lsls	r2, r3, #3
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	4413      	add	r3, r2
 8006846:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800684a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	88db      	ldrh	r3, [r3, #6]
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	b29b      	uxth	r3, r3
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686c:	4413      	add	r3, r2
 800686e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	00da      	lsls	r2, r3, #3
 8006876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006878:	4413      	add	r3, r2
 800687a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800687e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800688a:	b29a      	uxth	r2, r3
 800688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688e:	801a      	strh	r2, [r3, #0]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10a      	bne.n	80068ae <USB_ActivateEndpoint+0x28a>
 8006898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29b      	uxth	r3, r3
 800689e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	801a      	strh	r2, [r3, #0]
 80068ac:	e041      	b.n	8006932 <USB_ActivateEndpoint+0x30e>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80068b4:	d81c      	bhi.n	80068f0 <USB_ActivateEndpoint+0x2cc>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <USB_ActivateEndpoint+0x2b2>
 80068cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068d0:	3301      	adds	r3, #1
 80068d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29a      	uxth	r2, r3
 80068dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	029b      	lsls	r3, r3, #10
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	4313      	orrs	r3, r2
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	801a      	strh	r2, [r3, #0]
 80068ee:	e020      	b.n	8006932 <USB_ActivateEndpoint+0x30e>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	095b      	lsrs	r3, r3, #5
 80068f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <USB_ActivateEndpoint+0x2ec>
 8006906:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800690a:	3b01      	subs	r3, #1
 800690c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29a      	uxth	r2, r3
 8006916:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800691a:	b29b      	uxth	r3, r3
 800691c:	029b      	lsls	r3, r3, #10
 800691e:	b29b      	uxth	r3, r3
 8006920:	4313      	orrs	r3, r2
 8006922:	b29b      	uxth	r3, r3
 8006924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692c:	b29a      	uxth	r2, r3
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006940:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d01b      	beq.n	8006982 <USB_ActivateEndpoint+0x35e>
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800695c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006960:	843b      	strh	r3, [r7, #32]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	441a      	add	r2, r3
 800696c:	8c3b      	ldrh	r3, [r7, #32]
 800696e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006976:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800697a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800697e:	b29b      	uxth	r3, r3
 8006980:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d124      	bne.n	80069d4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800699c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a0:	83bb      	strh	r3, [r7, #28]
 80069a2:	8bbb      	ldrh	r3, [r7, #28]
 80069a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069a8:	83bb      	strh	r3, [r7, #28]
 80069aa:	8bbb      	ldrh	r3, [r7, #28]
 80069ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069b0:	83bb      	strh	r3, [r7, #28]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	441a      	add	r2, r3
 80069bc:	8bbb      	ldrh	r3, [r7, #28]
 80069be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	8013      	strh	r3, [r2, #0]
 80069d2:	e306      	b.n	8006fe2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ea:	83fb      	strh	r3, [r7, #30]
 80069ec:	8bfb      	ldrh	r3, [r7, #30]
 80069ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069f2:	83fb      	strh	r3, [r7, #30]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	441a      	add	r2, r3
 80069fe:	8bfb      	ldrh	r3, [r7, #30]
 8006a00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	8013      	strh	r3, [r2, #0]
 8006a14:	e2e5      	b.n	8006fe2 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	78db      	ldrb	r3, [r3, #3]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d11e      	bne.n	8006a5c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a34:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	441a      	add	r2, r3
 8006a42:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a4e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8013      	strh	r3, [r2, #0]
 8006a5a:	e01d      	b.n	8006a98 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a72:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	441a      	add	r2, r3
 8006a80:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006aa8:	4413      	add	r3, r2
 8006aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	00da      	lsls	r2, r3, #3
 8006ab2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006aba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	891b      	ldrh	r3, [r3, #8]
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006adc:	4413      	add	r3, r2
 8006ade:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	00da      	lsls	r2, r3, #3
 8006ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ae8:	4413      	add	r3, r2
 8006aea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006aee:	673b      	str	r3, [r7, #112]	@ 0x70
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	895b      	ldrh	r3, [r3, #10]
 8006af4:	085b      	lsrs	r3, r3, #1
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006afe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	785b      	ldrb	r3, [r3, #1]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f040 81af 	bne.w	8006e68 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006b1a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d01d      	beq.n	8006b62 <USB_ActivateEndpoint+0x53e>
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	441a      	add	r2, r3
 8006b4a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006b72:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d01d      	beq.n	8006bba <USB_ActivateEndpoint+0x596>
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b94:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	441a      	add	r2, r3
 8006ba2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006baa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bb2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d16b      	bne.n	8006c9a <USB_ActivateEndpoint+0x676>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bd2:	4413      	add	r3, r2
 8006bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	00da      	lsls	r2, r3, #3
 8006bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bde:	4413      	add	r3, r2
 8006be0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bf4:	801a      	strh	r2, [r3, #0]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <USB_ActivateEndpoint+0x5f0>
 8006bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e05d      	b.n	8006cd0 <USB_ActivateEndpoint+0x6ac>
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c1a:	d81c      	bhi.n	8006c56 <USB_ActivateEndpoint+0x632>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	085b      	lsrs	r3, r3, #1
 8006c22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d004      	beq.n	8006c3c <USB_ActivateEndpoint+0x618>
 8006c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c36:	3301      	adds	r3, #1
 8006c38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	029b      	lsls	r3, r3, #10
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c52:	801a      	strh	r2, [r3, #0]
 8006c54:	e03c      	b.n	8006cd0 <USB_ActivateEndpoint+0x6ac>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f003 031f 	and.w	r3, r3, #31
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <USB_ActivateEndpoint+0x652>
 8006c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c70:	3b01      	subs	r3, #1
 8006c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	029b      	lsls	r3, r3, #10
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	4313      	orrs	r3, r2
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c96:	801a      	strh	r2, [r3, #0]
 8006c98:	e01a      	b.n	8006cd0 <USB_ActivateEndpoint+0x6ac>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	785b      	ldrb	r3, [r3, #1]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d116      	bne.n	8006cd0 <USB_ActivateEndpoint+0x6ac>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	461a      	mov	r2, r3
 8006cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cb2:	4413      	add	r3, r2
 8006cb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	00da      	lsls	r2, r3, #3
 8006cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	785b      	ldrb	r3, [r3, #1]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d16b      	bne.n	8006db4 <USB_ActivateEndpoint+0x790>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cec:	4413      	add	r3, r2
 8006cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	00da      	lsls	r2, r3, #3
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <USB_ActivateEndpoint+0x70a>
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	801a      	strh	r2, [r3, #0]
 8006d2c:	e05b      	b.n	8006de6 <USB_ActivateEndpoint+0x7c2>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d34:	d81c      	bhi.n	8006d70 <USB_ActivateEndpoint+0x74c>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	085b      	lsrs	r3, r3, #1
 8006d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <USB_ActivateEndpoint+0x732>
 8006d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d50:	3301      	adds	r3, #1
 8006d52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	029b      	lsls	r3, r3, #10
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	4313      	orrs	r3, r2
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6c:	801a      	strh	r2, [r3, #0]
 8006d6e:	e03a      	b.n	8006de6 <USB_ActivateEndpoint+0x7c2>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	095b      	lsrs	r3, r3, #5
 8006d76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d104      	bne.n	8006d90 <USB_ActivateEndpoint+0x76c>
 8006d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	029b      	lsls	r3, r3, #10
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	4313      	orrs	r3, r2
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db0:	801a      	strh	r2, [r3, #0]
 8006db2:	e018      	b.n	8006de6 <USB_ActivateEndpoint+0x7c2>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d114      	bne.n	8006de6 <USB_ActivateEndpoint+0x7c2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dc8:	4413      	add	r3, r2
 8006dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	00da      	lsls	r2, r3, #3
 8006dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006dda:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dfc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006dfe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e00:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e04:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e44:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	441a      	add	r2, r3
 8006e50:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	8013      	strh	r3, [r2, #0]
 8006e66:	e0bc      	b.n	8006fe2 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8006e78:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01d      	beq.n	8006ec0 <USB_ActivateEndpoint+0x89c>
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e9a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	441a      	add	r2, r3
 8006ea8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006eac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006ed0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01d      	beq.n	8006f18 <USB_ActivateEndpoint+0x8f4>
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ef2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	441a      	add	r2, r3
 8006f00:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006f04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	78db      	ldrb	r3, [r3, #3]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d024      	beq.n	8006f6a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f36:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006f3a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006f3e:	f083 0320 	eor.w	r3, r3, #32
 8006f42:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	441a      	add	r2, r3
 8006f50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006f54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	8013      	strh	r3, [r2, #0]
 8006f68:	e01d      	b.n	8006fa6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f80:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	441a      	add	r2, r3
 8006f8e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006f92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fbc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	441a      	add	r2, r3
 8006fca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006fce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006fe2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	379c      	adds	r7, #156	@ 0x9c
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop

08006ff4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b0ac      	sub	sp, #176	@ 0xb0
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	785b      	ldrb	r3, [r3, #1]
 8007002:	2b01      	cmp	r3, #1
 8007004:	f040 84ca 	bne.w	800799c <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	699a      	ldr	r2, [r3, #24]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	429a      	cmp	r2, r3
 8007012:	d904      	bls.n	800701e <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800701c:	e003      	b.n	8007026 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	7b1b      	ldrb	r3, [r3, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d122      	bne.n	8007074 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	6959      	ldr	r1, [r3, #20]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	88da      	ldrh	r2, [r3, #6]
 8007036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800703a:	b29b      	uxth	r3, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fed2 	bl	8007de6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800704c:	b29b      	uxth	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	4413      	add	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	00da      	lsls	r2, r3, #3
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	801a      	strh	r2, [r3, #0]
 8007070:	f000 bc6f 	b.w	8007952 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	78db      	ldrb	r3, [r3, #3]
 8007078:	2b02      	cmp	r3, #2
 800707a:	f040 831e 	bne.w	80076ba <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6a1a      	ldr	r2, [r3, #32]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	429a      	cmp	r2, r3
 8007088:	f240 82cf 	bls.w	800762a <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	b29b      	uxth	r3, r3
 800709a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800709e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	441a      	add	r2, r3
 80070b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80070b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070bc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80070c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	6a1a      	ldr	r2, [r3, #32]
 80070cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070d0:	1ad2      	subs	r2, r2, r3
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 814f 	beq.w	800738c <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	785b      	ldrb	r3, [r3, #1]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d16b      	bne.n	80071d2 <USB_EPStartXfer+0x1de>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007104:	b29b      	uxth	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	4413      	add	r3, r2
 800710c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	00da      	lsls	r2, r3, #3
 8007114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007116:	4413      	add	r3, r2
 8007118:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800711c:	627b      	str	r3, [r7, #36]	@ 0x24
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	b29b      	uxth	r3, r3
 8007124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007128:	b29a      	uxth	r2, r3
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	801a      	strh	r2, [r3, #0]
 800712e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <USB_EPStartXfer+0x158>
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007144:	b29a      	uxth	r2, r3
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e05b      	b.n	8007204 <USB_EPStartXfer+0x210>
 800714c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007150:	2b3e      	cmp	r3, #62	@ 0x3e
 8007152:	d81c      	bhi.n	800718e <USB_EPStartXfer+0x19a>
 8007154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007158:	085b      	lsrs	r3, r3, #1
 800715a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800715e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <USB_EPStartXfer+0x180>
 800716a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800716e:	3301      	adds	r3, #1
 8007170:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29a      	uxth	r2, r3
 800717a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800717e:	b29b      	uxth	r3, r3
 8007180:	029b      	lsls	r3, r3, #10
 8007182:	b29b      	uxth	r3, r3
 8007184:	4313      	orrs	r3, r2
 8007186:	b29a      	uxth	r2, r3
 8007188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e03a      	b.n	8007204 <USB_EPStartXfer+0x210>
 800718e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007192:	095b      	lsrs	r3, r3, #5
 8007194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d104      	bne.n	80071ae <USB_EPStartXfer+0x1ba>
 80071a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071a8:	3b01      	subs	r3, #1
 80071aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	029b      	lsls	r3, r3, #10
 80071bc:	b29b      	uxth	r3, r3
 80071be:	4313      	orrs	r3, r2
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	e018      	b.n	8007204 <USB_EPStartXfer+0x210>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	785b      	ldrb	r3, [r3, #1]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d114      	bne.n	8007204 <USB_EPStartXfer+0x210>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	461a      	mov	r2, r3
 80071e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e6:	4413      	add	r3, r2
 80071e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	00da      	lsls	r2, r3, #3
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	4413      	add	r3, r2
 80071f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80071f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071fe:	b29a      	uxth	r2, r3
 8007200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007202:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	895b      	ldrh	r3, [r3, #10]
 8007208:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	6959      	ldr	r1, [r3, #20]
 8007210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007214:	b29b      	uxth	r3, r3
 8007216:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fde3 	bl	8007de6 <USB_WritePMA>
            ep->xfer_buff += len;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	695a      	ldr	r2, [r3, #20]
 8007224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007228:	441a      	add	r2, r3
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	6a1a      	ldr	r2, [r3, #32]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	429a      	cmp	r2, r3
 8007238:	d907      	bls.n	800724a <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	6a1a      	ldr	r2, [r3, #32]
 800723e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007242:	1ad2      	subs	r2, r2, r3
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	621a      	str	r2, [r3, #32]
 8007248:	e006      	b.n	8007258 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2200      	movs	r2, #0
 8007256:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d16b      	bne.n	8007338 <USB_EPStartXfer+0x344>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	61bb      	str	r3, [r7, #24]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800726a:	b29b      	uxth	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	4413      	add	r3, r2
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	00da      	lsls	r2, r3, #3
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	4413      	add	r3, r2
 800727e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29b      	uxth	r3, r3
 800728a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800728e:	b29a      	uxth	r2, r3
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	801a      	strh	r2, [r3, #0]
 8007294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <USB_EPStartXfer+0x2be>
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	801a      	strh	r2, [r3, #0]
 80072b0:	e05d      	b.n	800736e <USB_EPStartXfer+0x37a>
 80072b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80072b8:	d81c      	bhi.n	80072f4 <USB_EPStartXfer+0x300>
 80072ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072be:	085b      	lsrs	r3, r3, #1
 80072c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <USB_EPStartXfer+0x2e6>
 80072d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072d4:	3301      	adds	r3, #1
 80072d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	b29a      	uxth	r2, r3
 80072e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	029b      	lsls	r3, r3, #10
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	4313      	orrs	r3, r2
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	801a      	strh	r2, [r3, #0]
 80072f2:	e03c      	b.n	800736e <USB_EPStartXfer+0x37a>
 80072f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072f8:	095b      	lsrs	r3, r3, #5
 80072fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007302:	f003 031f 	and.w	r3, r3, #31
 8007306:	2b00      	cmp	r3, #0
 8007308:	d104      	bne.n	8007314 <USB_EPStartXfer+0x320>
 800730a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800730e:	3b01      	subs	r3, #1
 8007310:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29a      	uxth	r2, r3
 800731a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800731e:	b29b      	uxth	r3, r3
 8007320:	029b      	lsls	r3, r3, #10
 8007322:	b29b      	uxth	r3, r3
 8007324:	4313      	orrs	r3, r2
 8007326:	b29b      	uxth	r3, r3
 8007328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800732c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007330:	b29a      	uxth	r2, r3
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	e01a      	b.n	800736e <USB_EPStartXfer+0x37a>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d116      	bne.n	800736e <USB_EPStartXfer+0x37a>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	623b      	str	r3, [r7, #32]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800734a:	b29b      	uxth	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	4413      	add	r3, r2
 8007352:	623b      	str	r3, [r7, #32]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	00da      	lsls	r2, r3, #3
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	4413      	add	r3, r2
 800735e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007368:	b29a      	uxth	r2, r3
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	891b      	ldrh	r3, [r3, #8]
 8007372:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6959      	ldr	r1, [r3, #20]
 800737a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800737e:	b29b      	uxth	r3, r3
 8007380:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fd2e 	bl	8007de6 <USB_WritePMA>
 800738a:	e2e2      	b.n	8007952 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d16b      	bne.n	800746c <USB_EPStartXfer+0x478>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800739e:	b29b      	uxth	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073a4:	4413      	add	r3, r2
 80073a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	00da      	lsls	r2, r3, #3
 80073ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073b0:	4413      	add	r3, r2
 80073b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80073b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073c6:	801a      	strh	r2, [r3, #0]
 80073c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <USB_EPStartXfer+0x3f2>
 80073d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073de:	b29a      	uxth	r2, r3
 80073e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073e2:	801a      	strh	r2, [r3, #0]
 80073e4:	e05d      	b.n	80074a2 <USB_EPStartXfer+0x4ae>
 80073e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80073ec:	d81c      	bhi.n	8007428 <USB_EPStartXfer+0x434>
 80073ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073f2:	085b      	lsrs	r3, r3, #1
 80073f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <USB_EPStartXfer+0x41a>
 8007404:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007408:	3301      	adds	r3, #1
 800740a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800740e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29a      	uxth	r2, r3
 8007414:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007418:	b29b      	uxth	r3, r3
 800741a:	029b      	lsls	r3, r3, #10
 800741c:	b29b      	uxth	r3, r3
 800741e:	4313      	orrs	r3, r2
 8007420:	b29a      	uxth	r2, r3
 8007422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007424:	801a      	strh	r2, [r3, #0]
 8007426:	e03c      	b.n	80074a2 <USB_EPStartXfer+0x4ae>
 8007428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <USB_EPStartXfer+0x454>
 800743e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007442:	3b01      	subs	r3, #1
 8007444:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	b29a      	uxth	r2, r3
 800744e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007452:	b29b      	uxth	r3, r3
 8007454:	029b      	lsls	r3, r3, #10
 8007456:	b29b      	uxth	r3, r3
 8007458:	4313      	orrs	r3, r2
 800745a:	b29b      	uxth	r3, r3
 800745c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007464:	b29a      	uxth	r2, r3
 8007466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	e01a      	b.n	80074a2 <USB_EPStartXfer+0x4ae>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	785b      	ldrb	r3, [r3, #1]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d116      	bne.n	80074a2 <USB_EPStartXfer+0x4ae>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	653b      	str	r3, [r7, #80]	@ 0x50
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800747e:	b29b      	uxth	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007484:	4413      	add	r3, r2
 8007486:	653b      	str	r3, [r7, #80]	@ 0x50
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	00da      	lsls	r2, r3, #3
 800748e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007490:	4413      	add	r3, r2
 8007492:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800749c:	b29a      	uxth	r2, r3
 800749e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	891b      	ldrh	r3, [r3, #8]
 80074a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	6959      	ldr	r1, [r3, #20]
 80074ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fc94 	bl	8007de6 <USB_WritePMA>
            ep->xfer_buff += len;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074c6:	441a      	add	r2, r3
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	6a1a      	ldr	r2, [r3, #32]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d907      	bls.n	80074e8 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	6a1a      	ldr	r2, [r3, #32]
 80074dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074e0:	1ad2      	subs	r2, r2, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	621a      	str	r2, [r3, #32]
 80074e6:	e006      	b.n	80074f6 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2200      	movs	r2, #0
 80074f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d16b      	bne.n	80075da <USB_EPStartXfer+0x5e6>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800750c:	b29b      	uxth	r3, r3
 800750e:	461a      	mov	r2, r3
 8007510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007512:	4413      	add	r3, r2
 8007514:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	00da      	lsls	r2, r3, #3
 800751c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751e:	4413      	add	r3, r2
 8007520:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
 8007526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007530:	b29a      	uxth	r2, r3
 8007532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007534:	801a      	strh	r2, [r3, #0]
 8007536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <USB_EPStartXfer+0x560>
 800753e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800754c:	b29a      	uxth	r2, r3
 800754e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007550:	801a      	strh	r2, [r3, #0]
 8007552:	e05b      	b.n	800760c <USB_EPStartXfer+0x618>
 8007554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007558:	2b3e      	cmp	r3, #62	@ 0x3e
 800755a:	d81c      	bhi.n	8007596 <USB_EPStartXfer+0x5a2>
 800755c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007560:	085b      	lsrs	r3, r3, #1
 8007562:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <USB_EPStartXfer+0x588>
 8007572:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007576:	3301      	adds	r3, #1
 8007578:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800757c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29a      	uxth	r2, r3
 8007582:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007586:	b29b      	uxth	r3, r3
 8007588:	029b      	lsls	r3, r3, #10
 800758a:	b29b      	uxth	r3, r3
 800758c:	4313      	orrs	r3, r2
 800758e:	b29a      	uxth	r2, r3
 8007590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	e03a      	b.n	800760c <USB_EPStartXfer+0x618>
 8007596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800759a:	095b      	lsrs	r3, r3, #5
 800759c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075a4:	f003 031f 	and.w	r3, r3, #31
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d104      	bne.n	80075b6 <USB_EPStartXfer+0x5c2>
 80075ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075b0:	3b01      	subs	r3, #1
 80075b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	029b      	lsls	r3, r3, #10
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	4313      	orrs	r3, r2
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	e018      	b.n	800760c <USB_EPStartXfer+0x618>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	785b      	ldrb	r3, [r3, #1]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d114      	bne.n	800760c <USB_EPStartXfer+0x618>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ee:	4413      	add	r3, r2
 80075f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	00da      	lsls	r2, r3, #3
 80075f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075fa:	4413      	add	r3, r2
 80075fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007606:	b29a      	uxth	r2, r3
 8007608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800760a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	895b      	ldrh	r3, [r3, #10]
 8007610:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	6959      	ldr	r1, [r3, #20]
 8007618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800761c:	b29b      	uxth	r3, r3
 800761e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fbdf 	bl	8007de6 <USB_WritePMA>
 8007628:	e193      	b.n	8007952 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007648:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	441a      	add	r2, r3
 8007656:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800765a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800765e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800766a:	b29b      	uxth	r3, r3
 800766c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007678:	b29b      	uxth	r3, r3
 800767a:	461a      	mov	r2, r3
 800767c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800767e:	4413      	add	r3, r2
 8007680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	00da      	lsls	r2, r3, #3
 8007688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800768a:	4413      	add	r3, r2
 800768c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007690:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007696:	b29a      	uxth	r2, r3
 8007698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800769a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	891b      	ldrh	r3, [r3, #8]
 80076a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	6959      	ldr	r1, [r3, #20]
 80076a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fb97 	bl	8007de6 <USB_WritePMA>
 80076b8:	e14b      	b.n	8007952 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	6a1a      	ldr	r2, [r3, #32]
 80076be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076c2:	1ad2      	subs	r2, r2, r3
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 809a 	beq.w	8007814 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d16b      	bne.n	80077c4 <USB_EPStartXfer+0x7d0>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076fc:	4413      	add	r3, r2
 80076fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	00da      	lsls	r2, r3, #3
 8007706:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007708:	4413      	add	r3, r2
 800770a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800770e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800771a:	b29a      	uxth	r2, r3
 800771c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <USB_EPStartXfer+0x74a>
 8007728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007736:	b29a      	uxth	r2, r3
 8007738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800773a:	801a      	strh	r2, [r3, #0]
 800773c:	e05b      	b.n	80077f6 <USB_EPStartXfer+0x802>
 800773e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007742:	2b3e      	cmp	r3, #62	@ 0x3e
 8007744:	d81c      	bhi.n	8007780 <USB_EPStartXfer+0x78c>
 8007746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800774a:	085b      	lsrs	r3, r3, #1
 800774c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d004      	beq.n	8007766 <USB_EPStartXfer+0x772>
 800775c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007760:	3301      	adds	r3, #1
 8007762:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007766:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29a      	uxth	r2, r3
 800776c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007770:	b29b      	uxth	r3, r3
 8007772:	029b      	lsls	r3, r3, #10
 8007774:	b29b      	uxth	r3, r3
 8007776:	4313      	orrs	r3, r2
 8007778:	b29a      	uxth	r2, r3
 800777a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	e03a      	b.n	80077f6 <USB_EPStartXfer+0x802>
 8007780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007784:	095b      	lsrs	r3, r3, #5
 8007786:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800778a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800778e:	f003 031f 	and.w	r3, r3, #31
 8007792:	2b00      	cmp	r3, #0
 8007794:	d104      	bne.n	80077a0 <USB_EPStartXfer+0x7ac>
 8007796:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800779a:	3b01      	subs	r3, #1
 800779c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	029b      	lsls	r3, r3, #10
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	4313      	orrs	r3, r2
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077bc:	b29a      	uxth	r2, r3
 80077be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077c0:	801a      	strh	r2, [r3, #0]
 80077c2:	e018      	b.n	80077f6 <USB_EPStartXfer+0x802>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	785b      	ldrb	r3, [r3, #1]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d114      	bne.n	80077f6 <USB_EPStartXfer+0x802>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077d8:	4413      	add	r3, r2
 80077da:	673b      	str	r3, [r7, #112]	@ 0x70
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	00da      	lsls	r2, r3, #3
 80077e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077e4:	4413      	add	r3, r2
 80077e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	895b      	ldrh	r3, [r3, #10]
 80077fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6959      	ldr	r1, [r3, #20]
 8007802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007806:	b29b      	uxth	r3, r3
 8007808:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 faea 	bl	8007de6 <USB_WritePMA>
 8007812:	e09e      	b.n	8007952 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d16b      	bne.n	80078f4 <USB_EPStartXfer+0x900>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007826:	b29b      	uxth	r3, r3
 8007828:	461a      	mov	r2, r3
 800782a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800782c:	4413      	add	r3, r2
 800782e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	00da      	lsls	r2, r3, #3
 8007836:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007838:	4413      	add	r3, r2
 800783a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800783e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007840:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800784a:	b29a      	uxth	r2, r3
 800784c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10a      	bne.n	800786e <USB_EPStartXfer+0x87a>
 8007858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007866:	b29a      	uxth	r2, r3
 8007868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800786a:	801a      	strh	r2, [r3, #0]
 800786c:	e063      	b.n	8007936 <USB_EPStartXfer+0x942>
 800786e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007872:	2b3e      	cmp	r3, #62	@ 0x3e
 8007874:	d81c      	bhi.n	80078b0 <USB_EPStartXfer+0x8bc>
 8007876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d004      	beq.n	8007896 <USB_EPStartXfer+0x8a2>
 800788c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007890:	3301      	adds	r3, #1
 8007892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007896:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29a      	uxth	r2, r3
 800789c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	029b      	lsls	r3, r3, #10
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4313      	orrs	r3, r2
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	e042      	b.n	8007936 <USB_EPStartXfer+0x942>
 80078b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078b4:	095b      	lsrs	r3, r3, #5
 80078b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078be:	f003 031f 	and.w	r3, r3, #31
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d104      	bne.n	80078d0 <USB_EPStartXfer+0x8dc>
 80078c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078ca:	3b01      	subs	r3, #1
 80078cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078da:	b29b      	uxth	r3, r3
 80078dc:	029b      	lsls	r3, r3, #10
 80078de:	b29b      	uxth	r3, r3
 80078e0:	4313      	orrs	r3, r2
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078f0:	801a      	strh	r2, [r3, #0]
 80078f2:	e020      	b.n	8007936 <USB_EPStartXfer+0x942>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	785b      	ldrb	r3, [r3, #1]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d11c      	bne.n	8007936 <USB_EPStartXfer+0x942>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007908:	b29b      	uxth	r3, r3
 800790a:	461a      	mov	r2, r3
 800790c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007910:	4413      	add	r3, r2
 8007912:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	00da      	lsls	r2, r3, #3
 800791c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007920:	4413      	add	r3, r2
 8007922:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007926:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800792a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800792e:	b29a      	uxth	r2, r3
 8007930:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007934:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	891b      	ldrh	r3, [r3, #8]
 800793a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	6959      	ldr	r1, [r3, #20]
 8007942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007946:	b29b      	uxth	r3, r3
 8007948:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fa4a 	bl	8007de6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007968:	817b      	strh	r3, [r7, #10]
 800796a:	897b      	ldrh	r3, [r7, #10]
 800796c:	f083 0310 	eor.w	r3, r3, #16
 8007970:	817b      	strh	r3, [r7, #10]
 8007972:	897b      	ldrh	r3, [r7, #10]
 8007974:	f083 0320 	eor.w	r3, r3, #32
 8007978:	817b      	strh	r3, [r7, #10]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	441a      	add	r2, r3
 8007984:	897b      	ldrh	r3, [r7, #10]
 8007986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800798a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800798e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007996:	b29b      	uxth	r3, r3
 8007998:	8013      	strh	r3, [r2, #0]
 800799a:	e0d5      	b.n	8007b48 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	7b1b      	ldrb	r3, [r3, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d156      	bne.n	8007a52 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d122      	bne.n	80079f2 <USB_EPStartXfer+0x9fe>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	78db      	ldrb	r3, [r3, #3]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d11e      	bne.n	80079f2 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ca:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	441a      	add	r2, r3
 80079d8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80079dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079e4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80079e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	8013      	strh	r3, [r2, #0]
 80079f0:	e01d      	b.n	8007a2e <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a08:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	441a      	add	r2, r3
 8007a16:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d907      	bls.n	8007a4a <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	1ad2      	subs	r2, r2, r3
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	619a      	str	r2, [r3, #24]
 8007a48:	e054      	b.n	8007af4 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	619a      	str	r2, [r3, #24]
 8007a50:	e050      	b.n	8007af4 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	78db      	ldrb	r3, [r3, #3]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d142      	bne.n	8007ae0 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d048      	beq.n	8007af4 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a72:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <USB_EPStartXfer+0xa96>
 8007a7e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10b      	bne.n	8007aa2 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a8a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d12e      	bne.n	8007af4 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a96:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d128      	bne.n	8007af4 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab8:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	441a      	add	r2, r3
 8007ac6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ad6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	8013      	strh	r3, [r2, #0]
 8007ade:	e009      	b.n	8007af4 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	78db      	ldrb	r3, [r3, #3]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d103      	bne.n	8007af0 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	619a      	str	r2, [r3, #24]
 8007aee:	e001      	b.n	8007af4 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e02a      	b.n	8007b4a <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b0a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b12:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b16:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b22:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	441a      	add	r2, r3
 8007b30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	37b0      	adds	r7, #176	@ 0xb0
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d020      	beq.n	8007ba6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b7a:	81bb      	strh	r3, [r7, #12]
 8007b7c:	89bb      	ldrh	r3, [r7, #12]
 8007b7e:	f083 0310 	eor.w	r3, r3, #16
 8007b82:	81bb      	strh	r3, [r7, #12]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	441a      	add	r2, r3
 8007b8e:	89bb      	ldrh	r3, [r7, #12]
 8007b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	8013      	strh	r3, [r2, #0]
 8007ba4:	e01f      	b.n	8007be6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bbc:	81fb      	strh	r3, [r7, #14]
 8007bbe:	89fb      	ldrh	r3, [r7, #14]
 8007bc0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007bc4:	81fb      	strh	r3, [r7, #14]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	441a      	add	r2, r3
 8007bd0:	89fb      	ldrh	r3, [r7, #14]
 8007bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d04c      	beq.n	8007ca0 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	823b      	strh	r3, [r7, #16]
 8007c14:	8a3b      	ldrh	r3, [r7, #16]
 8007c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d01b      	beq.n	8007c56 <USB_EPClearStall+0x62>
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c34:	81fb      	strh	r3, [r7, #14]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	441a      	add	r2, r3
 8007c40:	89fb      	ldrh	r3, [r7, #14]
 8007c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	78db      	ldrb	r3, [r3, #3]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d06c      	beq.n	8007d38 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c74:	81bb      	strh	r3, [r7, #12]
 8007c76:	89bb      	ldrh	r3, [r7, #12]
 8007c78:	f083 0320 	eor.w	r3, r3, #32
 8007c7c:	81bb      	strh	r3, [r7, #12]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	441a      	add	r2, r3
 8007c88:	89bb      	ldrh	r3, [r7, #12]
 8007c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	8013      	strh	r3, [r2, #0]
 8007c9e:	e04b      	b.n	8007d38 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	82fb      	strh	r3, [r7, #22]
 8007cae:	8afb      	ldrh	r3, [r7, #22]
 8007cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d01b      	beq.n	8007cf0 <USB_EPClearStall+0xfc>
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cce:	82bb      	strh	r3, [r7, #20]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	441a      	add	r2, r3
 8007cda:	8abb      	ldrh	r3, [r7, #20]
 8007cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d06:	827b      	strh	r3, [r7, #18]
 8007d08:	8a7b      	ldrh	r3, [r7, #18]
 8007d0a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d0e:	827b      	strh	r3, [r7, #18]
 8007d10:	8a7b      	ldrh	r3, [r7, #18]
 8007d12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d16:	827b      	strh	r3, [r7, #18]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	441a      	add	r2, r3
 8007d22:	8a7b      	ldrh	r3, [r7, #18]
 8007d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d52:	78fb      	ldrb	r3, [r7, #3]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2280      	movs	r2, #128	@ 0x80
 8007d5c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b085      	sub	sp, #20
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b08b      	sub	sp, #44	@ 0x2c
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	4611      	mov	r1, r2
 8007df2:	461a      	mov	r2, r3
 8007df4:	460b      	mov	r3, r1
 8007df6:	80fb      	strh	r3, [r7, #6]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007dfc:	88bb      	ldrh	r3, [r7, #4]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	085b      	lsrs	r3, r3, #1
 8007e02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e0c:	88fa      	ldrh	r2, [r7, #6]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e16:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e1c:	e01c      	b.n	8007e58 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	3301      	adds	r3, #1
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	b21b      	sxth	r3, r3
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	b21a      	sxth	r2, r3
 8007e30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	b21b      	sxth	r3, r3
 8007e38:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	8a7a      	ldrh	r2, [r7, #18]
 8007e3e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	3302      	adds	r3, #2
 8007e44:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e54:	3b01      	subs	r3, #1
 8007e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1df      	bne.n	8007e1e <USB_WritePMA+0x38>
  }
}
 8007e5e:	bf00      	nop
 8007e60:	bf00      	nop
 8007e62:	372c      	adds	r7, #44	@ 0x2c
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b08b      	sub	sp, #44	@ 0x2c
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4611      	mov	r1, r2
 8007e78:	461a      	mov	r2, r3
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	80fb      	strh	r3, [r7, #6]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e82:	88bb      	ldrh	r3, [r7, #4]
 8007e84:	085b      	lsrs	r3, r3, #1
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e92:	88fa      	ldrh	r2, [r7, #6]
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e9c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ea2:	e018      	b.n	8007ed6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	3302      	adds	r3, #2
 8007eb0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	0a1b      	lsrs	r3, r3, #8
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e3      	bne.n	8007ea4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007edc:	88bb      	ldrh	r3, [r7, #4]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d007      	beq.n	8007ef8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	701a      	strb	r2, [r3, #0]
  }
}
 8007ef8:	bf00      	nop
 8007efa:	372c      	adds	r7, #44	@ 0x2c
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <__NVIC_SystemReset>:
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007f08:	f3bf 8f4f 	dsb	sy
}
 8007f0c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007f0e:	4b06      	ldr	r3, [pc, #24]	@ (8007f28 <__NVIC_SystemReset+0x24>)
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007f16:	4904      	ldr	r1, [pc, #16]	@ (8007f28 <__NVIC_SystemReset+0x24>)
 8007f18:	4b04      	ldr	r3, [pc, #16]	@ (8007f2c <__NVIC_SystemReset+0x28>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007f1e:	f3bf 8f4f 	dsb	sy
}
 8007f22:	bf00      	nop
    __NOP();
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <__NVIC_SystemReset+0x20>
 8007f28:	e000ed00 	.word	0xe000ed00
 8007f2c:	05fa0004 	.word	0x05fa0004

08007f30 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8007f3c:	f240 401c 	movw	r0, #1052	@ 0x41c
 8007f40:	f002 fb92 	bl	800a668 <USBD_static_malloc>
 8007f44:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d105      	bne.n	8007f58 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f54:	2302      	movs	r3, #2
 8007f56:	e03f      	b.n	8007fd8 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007f6e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	4798      	blx	r3
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e000      	b.n	8007fd8 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	e027      	b.n	800804a <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008000:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2202      	movs	r2, #2
 8008016:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800803a:	4618      	mov	r0, r3
 800803c:	f002 fb22 	bl	800a684 <USBD_static_free>
  pdev->pClassData = NULL;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008064:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800807c:	2303      	movs	r3, #3
 800807e:	e0d5      	b.n	800822c <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008088:	2b00      	cmp	r3, #0
 800808a:	d03e      	beq.n	800810a <USBD_DFU_Setup+0xb6>
 800808c:	2b20      	cmp	r3, #32
 800808e:	f040 80c5 	bne.w	800821c <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	785b      	ldrb	r3, [r3, #1]
 8008096:	2b06      	cmp	r3, #6
 8008098:	d82f      	bhi.n	80080fa <USBD_DFU_Setup+0xa6>
 800809a:	a201      	add	r2, pc, #4	@ (adr r2, 80080a0 <USBD_DFU_Setup+0x4c>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	080080f1 	.word	0x080080f1
 80080a4:	080080bd 	.word	0x080080bd
 80080a8:	080080c7 	.word	0x080080c7
 80080ac:	080080d1 	.word	0x080080d1
 80080b0:	080080d9 	.word	0x080080d9
 80080b4:	080080e1 	.word	0x080080e1
 80080b8:	080080e9 	.word	0x080080e9
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fa6c 	bl	800859c <DFU_Download>
          break;
 80080c4:	e020      	b.n	8008108 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fad3 	bl	8008674 <DFU_Upload>
          break;
 80080ce:	e01b      	b.n	8008108 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fba9 	bl	8008828 <DFU_GetStatus>
          break;
 80080d6:	e017      	b.n	8008108 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fc5b 	bl	8008994 <DFU_ClearStatus>
          break;
 80080de:	e013      	b.n	8008108 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fcab 	bl	8008a3c <DFU_GetState>
          break;
 80080e6:	e00f      	b.n	8008108 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fcbf 	bl	8008a6c <DFU_Abort>
          break;
 80080ee:	e00b      	b.n	8008108 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f9ee 	bl	80084d4 <DFU_Detach>
          break;
 80080f8:	e006      	b.n	8008108 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 fdb1 	bl	8009c64 <USBD_CtlError>
          ret = USBD_FAIL;
 8008102:	2303      	movs	r3, #3
 8008104:	77fb      	strb	r3, [r7, #31]
          break;
 8008106:	bf00      	nop
      }
      break;
 8008108:	e08f      	b.n	800822a <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	2b0b      	cmp	r3, #11
 8008110:	d87b      	bhi.n	800820a <USBD_DFU_Setup+0x1b6>
 8008112:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <USBD_DFU_Setup+0xc4>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	08008149 	.word	0x08008149
 800811c:	08008219 	.word	0x08008219
 8008120:	0800820b 	.word	0x0800820b
 8008124:	0800820b 	.word	0x0800820b
 8008128:	0800820b 	.word	0x0800820b
 800812c:	0800820b 	.word	0x0800820b
 8008130:	08008173 	.word	0x08008173
 8008134:	0800820b 	.word	0x0800820b
 8008138:	0800820b 	.word	0x0800820b
 800813c:	0800820b 	.word	0x0800820b
 8008140:	0800819d 	.word	0x0800819d
 8008144:	080081c9 	.word	0x080081c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b03      	cmp	r3, #3
 8008152:	d107      	bne.n	8008164 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008154:	f107 030e 	add.w	r3, r7, #14
 8008158:	2202      	movs	r2, #2
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 fdf2 	bl	8009d46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008162:	e05a      	b.n	800821a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 fd7c 	bl	8009c64 <USBD_CtlError>
            ret = USBD_FAIL;
 800816c:	2303      	movs	r3, #3
 800816e:	77fb      	strb	r3, [r7, #31]
          break;
 8008170:	e053      	b.n	800821a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	885b      	ldrh	r3, [r3, #2]
 8008176:	0a1b      	lsrs	r3, r3, #8
 8008178:	b29b      	uxth	r3, r3
 800817a:	2b21      	cmp	r3, #33	@ 0x21
 800817c:	d107      	bne.n	800818e <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800817e:	4b2d      	ldr	r3, [pc, #180]	@ (8008234 <USBD_DFU_Setup+0x1e0>)
 8008180:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	88db      	ldrh	r3, [r3, #6]
 8008186:	2b09      	cmp	r3, #9
 8008188:	bf28      	it	cs
 800818a:	2309      	movcs	r3, #9
 800818c:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800818e:	8afb      	ldrh	r3, [r7, #22]
 8008190:	461a      	mov	r2, r3
 8008192:	69b9      	ldr	r1, [r7, #24]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 fdd6 	bl	8009d46 <USBD_CtlSendData>
          break;
 800819a:	e03e      	b.n	800821a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d108      	bne.n	80081ba <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081ae:	2201      	movs	r2, #1
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fdc7 	bl	8009d46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081b8:	e02f      	b.n	800821a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 fd51 	bl	8009c64 <USBD_CtlError>
            ret = USBD_FAIL;
 80081c2:	2303      	movs	r3, #3
 80081c4:	77fb      	strb	r3, [r7, #31]
          break;
 80081c6:	e028      	b.n	800821a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	885b      	ldrh	r3, [r3, #2]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d114      	bne.n	80081fc <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d107      	bne.n	80081ee <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	885b      	ldrh	r3, [r3, #2]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081ec:	e015      	b.n	800821a <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 fd37 	bl	8009c64 <USBD_CtlError>
              ret = USBD_FAIL;
 80081f6:	2303      	movs	r3, #3
 80081f8:	77fb      	strb	r3, [r7, #31]
          break;
 80081fa:	e00e      	b.n	800821a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f001 fd30 	bl	8009c64 <USBD_CtlError>
            ret = USBD_FAIL;
 8008204:	2303      	movs	r3, #3
 8008206:	77fb      	strb	r3, [r7, #31]
          break;
 8008208:	e007      	b.n	800821a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 fd29 	bl	8009c64 <USBD_CtlError>
          ret = USBD_FAIL;
 8008212:	2303      	movs	r3, #3
 8008214:	77fb      	strb	r3, [r7, #31]
          break;
 8008216:	e000      	b.n	800821a <USBD_DFU_Setup+0x1c6>
          break;
 8008218:	bf00      	nop
      }
      break;
 800821a:	e006      	b.n	800822a <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f001 fd20 	bl	8009c64 <USBD_CtlError>
      ret = USBD_FAIL;
 8008224:	2303      	movs	r3, #3
 8008226:	77fb      	strb	r3, [r7, #31]
      break;
 8008228:	bf00      	nop
  }

  return (uint8_t)ret;
 800822a:	7ffb      	ldrb	r3, [r7, #31]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	2000005a 	.word	0x2000005a

08008238 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	221b      	movs	r2, #27
 8008244:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8008246:	4b03      	ldr	r3, [pc, #12]	@ (8008254 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8008248:	4618      	mov	r0, r3
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	20000048 	.word	0x20000048

08008258 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b088      	sub	sp, #32
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800827c:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008284:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800828c:	2303      	movs	r3, #3
 800828e:	e0ce      	b.n	800842e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008296:	2b04      	cmp	r3, #4
 8008298:	f040 80bd 	bne.w	8008416 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d17c      	bne.n	80083a0 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	f000 8093 	beq.w	80083d8 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80082b8:	2b05      	cmp	r3, #5
 80082ba:	d15e      	bne.n	800837a <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2b21      	cmp	r3, #33	@ 0x21
 80082c2:	d124      	bne.n	800830e <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	461a      	mov	r2, r3
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	789b      	ldrb	r3, [r3, #2]
 80082da:	021b      	lsls	r3, r3, #8
 80082dc:	441a      	add	r2, r3
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	78db      	ldrb	r3, [r3, #3]
 80082ee:	041b      	lsls	r3, r3, #16
 80082f0:	441a      	add	r2, r3
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	791b      	ldrb	r3, [r3, #4]
 8008302:	061b      	lsls	r3, r3, #24
 8008304:	441a      	add	r2, r3
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800830c:	e064      	b.n	80083d8 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b41      	cmp	r3, #65	@ 0x41
 8008314:	d12f      	bne.n	8008376 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	461a      	mov	r2, r3
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	789b      	ldrb	r3, [r3, #2]
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	441a      	add	r2, r3
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	78db      	ldrb	r3, [r3, #3]
 8008340:	041b      	lsls	r3, r3, #16
 8008342:	441a      	add	r2, r3
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	791b      	ldrb	r3, [r3, #4]
 8008354:	061b      	lsls	r3, r3, #24
 8008356:	441a      	add	r2, r3
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8008368:	4610      	mov	r0, r2
 800836a:	4798      	blx	r3
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d032      	beq.n	80083d8 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8008372:	2303      	movs	r3, #3
 8008374:	e05b      	b.n	800842e <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8008376:	2303      	movs	r3, #3
 8008378:	e059      	b.n	800842e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	2200      	movs	r2, #0
 800837e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	2200      	movs	r2, #0
 8008386:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800838e:	2301      	movs	r3, #1
 8008390:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8008392:	f107 030c 	add.w	r3, r7, #12
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fc63 	bl	8009c64 <USBD_CtlError>
 800839e:	e01b      	b.n	80083d8 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d916      	bls.n	80083d8 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80083b0:	3b02      	subs	r3, #2
 80083b2:	029a      	lsls	r2, r3, #10
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80083ba:	4413      	add	r3, r2
 80083bc:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	69f8      	ldr	r0, [r7, #28]
 80083c4:	6979      	ldr	r1, [r7, #20]
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80083cc:	4798      	blx	r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e02a      	b.n	800842e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	2203      	movs	r2, #3
 80083ec:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008414:	e00a      	b.n	800842c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800841c:	2b07      	cmp	r3, #7
 800841e:	d103      	bne.n	8008428 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fb75 	bl	8008b10 <DFU_Leave>
 8008426:	e001      	b.n	800842c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8008428:	2303      	movs	r3, #3
 800842a:	e000      	b.n	800842e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3720      	adds	r7, #32
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	220a      	movs	r2, #10
 8008458:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800845a:	4b03      	ldr	r3, [pc, #12]	@ (8008468 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800845c:	4618      	mov	r0, r3
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	20000064 	.word	0x20000064

0800846c <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	460b      	mov	r3, r1
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008480:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	2b06      	cmp	r3, #6
 8008486:	d808      	bhi.n	800849a <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	4905      	ldr	r1, [pc, #20]	@ (80084a4 <USBD_DFU_GetUsrStringDesc+0x38>)
 8008490:	4618      	mov	r0, r3
 8008492:	f001 fbf8 	bl	8009c86 <USBD_GetString>
    return USBD_StrDesc;
 8008496:	4b03      	ldr	r3, [pc, #12]	@ (80084a4 <USBD_DFU_GetUsrStringDesc+0x38>)
 8008498:	e000      	b.n	800849c <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800849a:	2300      	movs	r3, #0
  }
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	200001c8 	.word	0x200001c8

080084a8 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e004      	b.n	80084c6 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
	...

080084d4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084e4:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d051      	beq.n	8008590 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d013      	beq.n	800851e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d00e      	beq.n	800851e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008506:	2b05      	cmp	r3, #5
 8008508:	d009      	beq.n	800851e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008510:	2b06      	cmp	r3, #6
 8008512:	d004      	beq.n	800851e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800851a:	2b09      	cmp	r3, #9
 800851c:	d125      	bne.n	800856a <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2202      	movs	r2, #2
 8008522:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800856a:	4b0b      	ldr	r3, [pc, #44]	@ (8008598 <DFU_Detach+0xc4>)
 800856c:	7d5b      	ldrb	r3, [r3, #21]
 800856e:	f003 0310 	and.w	r3, r3, #16
 8008572:	2b00      	cmp	r3, #0
 8008574:	d006      	beq.n	8008584 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fb7b 	bl	8008c72 <USBD_Stop>
    (void)USBD_Start(pdev);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fb6c 	bl	8008c5a <USBD_Start>
 8008582:	e006      	b.n	8008592 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	885b      	ldrh	r3, [r3, #2]
 8008588:	4618      	mov	r0, r3
 800858a:	f7f8 fa37 	bl	80009fc <HAL_Delay>
 800858e:	e000      	b.n	8008592 <DFU_Detach+0xbe>
    return;
 8008590:	bf00      	nop
  }
}
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	20000048 	.word	0x20000048

0800859c <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085ac:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d05b      	beq.n	800866c <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	88db      	ldrh	r3, [r3, #6]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d02d      	beq.n	8008618 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d004      	beq.n	80085d0 <DFU_Download+0x34>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80085cc:	2b05      	cmp	r3, #5
 80085ce:	d11e      	bne.n	800860e <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	885b      	ldrh	r3, [r3, #2]
 80085d4:	461a      	mov	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	88db      	ldrh	r3, [r3, #6]
 80085e0:	461a      	mov	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2203      	movs	r2, #3
 80085ec:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 80085fc:	68f9      	ldr	r1, [r7, #12]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008604:	461a      	mov	r2, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 fbc9 	bl	8009d9e <USBD_CtlPrepareRx>
 800860c:	e02f      	b.n	800866e <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 fb27 	bl	8009c64 <USBD_CtlError>
 8008616:	e02a      	b.n	800866e <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800861e:	2b05      	cmp	r3, #5
 8008620:	d004      	beq.n	800862c <DFU_Download+0x90>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008628:	2b02      	cmp	r3, #2
 800862a:	d11a      	bne.n	8008662 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2206      	movs	r2, #6
 8008638:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008660:	e005      	b.n	800866e <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 fafd 	bl	8009c64 <USBD_CtlError>
 800866a:	e000      	b.n	800866e <DFU_Download+0xd2>
    return;
 800866c:	bf00      	nop
    }
  }
}
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008684:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800868c:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 80c4 	beq.w	800881e <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	88db      	ldrh	r3, [r3, #6]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 80a8 	beq.w	80087f0 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d005      	beq.n	80086b6 <DFU_Upload+0x42>
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80086b0:	2b09      	cmp	r3, #9
 80086b2:	f040 8090 	bne.w	80087d6 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	885b      	ldrh	r3, [r3, #2]
 80086ba:	461a      	mov	r2, r3
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	88db      	ldrh	r3, [r3, #6]
 80086c6:	461a      	mov	r2, r3
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d12c      	bne.n	8008732 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d901      	bls.n	80086e6 <DFU_Upload+0x72>
 80086e2:	2202      	movs	r2, #2
 80086e4:	e000      	b.n	80086e8 <DFU_Upload+0x74>
 80086e6:	2209      	movs	r2, #9
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2200      	movs	r2, #0
 8008716:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2221      	movs	r2, #33	@ 0x21
 800871c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2241      	movs	r2, #65	@ 0x41
 8008722:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2203      	movs	r2, #3
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 fb0b 	bl	8009d46 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008730:	e076      	b.n	8008820 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008738:	2b01      	cmp	r3, #1
 800873a:	d931      	bls.n	80087a0 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2209      	movs	r2, #9
 8008740:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800876e:	3b02      	subs	r3, #2
 8008770:	029a      	lsls	r2, r3, #10
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8008778:	4413      	add	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	6979      	ldr	r1, [r7, #20]
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800878a:	4798      	blx	r3
 800878c:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008794:	461a      	mov	r2, r3
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 fad4 	bl	8009d46 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800879e:	e03f      	b.n	8008820 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	220f      	movs	r2, #15
 80087a4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 fa48 	bl	8009c64 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80087d4:	e024      	b.n	8008820 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2200      	movs	r2, #0
 80087da:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f001 fa3b 	bl	8009c64 <USBD_CtlError>
 80087ee:	e017      	b.n	8008820 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800881c:	e000      	b.n	8008820 <DFU_Upload+0x1ac>
    return;
 800881e:	bf00      	nop
  }
}
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008836:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800883e:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	f000 80a0 	beq.w	8008988 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800884e:	2b03      	cmp	r3, #3
 8008850:	d002      	beq.n	8008858 <DFU_GetStatus+0x30>
 8008852:	2b06      	cmp	r3, #6
 8008854:	d051      	beq.n	80088fa <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 8008856:	e08e      	b.n	8008976 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800885e:	2b00      	cmp	r3, #0
 8008860:	d034      	beq.n	80088cc <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2204      	movs	r2, #4
 8008866:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10e      	bne.n	80088b6 <DFU_GetStatus+0x8e>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b41      	cmp	r3, #65	@ 0x41
 800889e:	d10a      	bne.n	80088b6 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80088b0:	2100      	movs	r1, #0
 80088b2:	4798      	blx	r3
      break;
 80088b4:	e05f      	b.n	8008976 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80088c6:	2101      	movs	r1, #1
 80088c8:	4798      	blx	r3
      break;
 80088ca:	e054      	b.n	8008976 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2205      	movs	r2, #5
 80088d0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80088f8:	e03d      	b.n	8008976 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8008900:	2b01      	cmp	r3, #1
 8008902:	d116      	bne.n	8008932 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2207      	movs	r2, #7
 8008908:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008930:	e020      	b.n	8008974 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8008938:	2b00      	cmp	r3, #0
 800893a:	d11b      	bne.n	8008974 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 800893c:	4b14      	ldr	r3, [pc, #80]	@ (8008990 <DFU_GetStatus+0x168>)
 800893e:	7d1b      	ldrb	r3, [r3, #20]
 8008940:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008944:	2b00      	cmp	r3, #0
 8008946:	d015      	beq.n	8008974 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008974:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800897c:	2206      	movs	r2, #6
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 f9e0 	bl	8009d46 <USBD_CtlSendData>
 8008986:	e000      	b.n	800898a <DFU_GetStatus+0x162>
    return;
 8008988:	bf00      	nop
}
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20000048 	.word	0x20000048

08008994 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089a2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d042      	beq.n	8008a30 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80089b0:	2b0a      	cmp	r3, #10
 80089b2:	d11e      	bne.n	80089f2 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2202      	movs	r2, #2
 80089b8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 80089f0:	e01f      	b.n	8008a32 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	220a      	movs	r2, #10
 80089f6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	220e      	movs	r2, #14
 80089fe:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8008a2e:	e000      	b.n	8008a32 <DFU_ClearStatus+0x9e>
    return;
 8008a30:	bf00      	nop
  }
}
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a4a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d008      	beq.n	8008a64 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8008a58:	2201      	movs	r2, #1
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 f972 	bl	8009d46 <USBD_CtlSendData>
 8008a62:	e000      	b.n	8008a66 <DFU_GetState+0x2a>
    return;
 8008a64:	bf00      	nop
}
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a7a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d03f      	beq.n	8008b02 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d013      	beq.n	8008ab4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d00e      	beq.n	8008ab4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008a9c:	2b05      	cmp	r3, #5
 8008a9e:	d009      	beq.n	8008ab4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008aa6:	2b06      	cmp	r3, #6
 8008aa8:	d004      	beq.n	8008ab4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008ab0:	2b09      	cmp	r3, #9
 8008ab2:	d127      	bne.n	8008b04 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8008b00:	e000      	b.n	8008b04 <DFU_Abort+0x98>
    return;
 8008b02:	bf00      	nop
  }
}
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
	...

08008b10 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b1e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d03b      	beq.n	8008b9e <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8008b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ba8 <DFU_Leave+0x98>)
 8008b30:	7d1b      	ldrb	r3, [r3, #20]
 8008b32:	f003 0304 	and.w	r3, r3, #4
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d016      	beq.n	8008b68 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2206      	movs	r2, #6
 8008b3e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 8008b66:	e01b      	b.n	8008ba0 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2208      	movs	r2, #8
 8008b6c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f86c 	bl	8008c72 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8008b9a:	f7ff f9b3 	bl	8007f04 <__NVIC_SystemReset>
    return;
 8008b9e:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000048 	.word	0x20000048

08008bac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e01f      	b.n	8008c04 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	79fa      	ldrb	r2, [r7, #7]
 8008bf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f001 fb91 	bl	800a320 <USBD_LL_Init>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e016      	b.n	8008c52 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00b      	beq.n	8008c50 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c40:	f107 020e 	add.w	r2, r7, #14
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	4602      	mov	r2, r0
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 fba2 	bl	800a3ac <USBD_LL_Start>
 8008c68:	4603      	mov	r3, r0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 fbb1 	bl	800a3e2 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d009      	beq.n	8008c9e <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	6852      	ldr	r2, [r2, #4]
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	4611      	mov	r1, r2
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4798      	blx	r3
  }

  return USBD_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d009      	beq.n	8008cec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	78fa      	ldrb	r2, [r7, #3]
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	4798      	blx	r3
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d007      	beq.n	8008d1c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	78fa      	ldrb	r2, [r7, #3]
 8008d16:	4611      	mov	r1, r2
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	4798      	blx	r3
  }

  return USBD_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 ff59 	bl	8009bf0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d01a      	beq.n	8008d98 <USBD_LL_SetupStage+0x72>
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d822      	bhi.n	8008dac <USBD_LL_SetupStage+0x86>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <USBD_LL_SetupStage+0x4a>
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d00a      	beq.n	8008d84 <USBD_LL_SetupStage+0x5e>
 8008d6e:	e01d      	b.n	8008dac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f9ef 	bl	800915c <USBD_StdDevReq>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	73fb      	strb	r3, [r7, #15]
      break;
 8008d82:	e020      	b.n	8008dc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fa53 	bl	8009238 <USBD_StdItfReq>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73fb      	strb	r3, [r7, #15]
      break;
 8008d96:	e016      	b.n	8008dc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fa92 	bl	80092ca <USBD_StdEPReq>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
      break;
 8008daa:	e00c      	b.n	8008dc6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008db2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f001 fb52 	bl	800a464 <USBD_LL_StallEP>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc4:	bf00      	nop
  }

  return ret;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008dde:	7afb      	ldrb	r3, [r7, #11]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d138      	bne.n	8008e56 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008dea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d14a      	bne.n	8008e8c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d913      	bls.n	8008e2a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	1ad2      	subs	r2, r2, r3
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	bf28      	it	cs
 8008e1c:	4613      	movcs	r3, r2
 8008e1e:	461a      	mov	r2, r3
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 ffd8 	bl	8009dd8 <USBD_CtlContinueRx>
 8008e28:	e030      	b.n	8008e8c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d10b      	bne.n	8008e4e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d005      	beq.n	8008e4e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 ffd3 	bl	8009dfa <USBD_CtlSendStatus>
 8008e54:	e01a      	b.n	8008e8c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d114      	bne.n	8008e8c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00e      	beq.n	8008e8c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	7afa      	ldrb	r2, [r7, #11]
 8008e78:	4611      	mov	r1, r2
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	4798      	blx	r3
 8008e7e:	4603      	mov	r3, r0
 8008e80:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	e000      	b.n	8008e8e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3718      	adds	r7, #24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b086      	sub	sp, #24
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	607a      	str	r2, [r7, #4]
 8008ea2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ea4:	7afb      	ldrb	r3, [r7, #11]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d16b      	bne.n	8008f82 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3314      	adds	r3, #20
 8008eae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d156      	bne.n	8008f68 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d914      	bls.n	8008ef0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 ff4d 	bl	8009d7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f001 fb65 	bl	800a5b8 <USBD_LL_PrepareReceive>
 8008eee:	e03b      	b.n	8008f68 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d11c      	bne.n	8008f36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d316      	bcc.n	8008f36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d20f      	bcs.n	8008f36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f16:	2200      	movs	r2, #0
 8008f18:	2100      	movs	r1, #0
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 ff2e 	bl	8009d7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f28:	2300      	movs	r3, #0
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f001 fb42 	bl	800a5b8 <USBD_LL_PrepareReceive>
 8008f34:	e018      	b.n	8008f68 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d10b      	bne.n	8008f5a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d005      	beq.n	8008f5a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f5a:	2180      	movs	r1, #128	@ 0x80
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f001 fa81 	bl	800a464 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 ff5c 	bl	8009e20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d122      	bne.n	8008fb8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f7ff fe98 	bl	8008ca8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008f80:	e01a      	b.n	8008fb8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d114      	bne.n	8008fb8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00e      	beq.n	8008fb8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	7afa      	ldrb	r2, [r7, #11]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	4798      	blx	r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
 8008fb6:	e000      	b.n	8008fba <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b082      	sub	sp, #8
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e02f      	b.n	8009056 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00f      	beq.n	8009020 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d009      	beq.n	8009020 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	6852      	ldr	r2, [r2, #4]
 8009018:	b2d2      	uxtb	r2, r2
 800901a:	4611      	mov	r1, r2
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009020:	2340      	movs	r3, #64	@ 0x40
 8009022:	2200      	movs	r2, #0
 8009024:	2100      	movs	r1, #0
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f001 f9f6 	bl	800a418 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2240      	movs	r2, #64	@ 0x40
 8009038:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800903c:	2340      	movs	r3, #64	@ 0x40
 800903e:	2200      	movs	r2, #0
 8009040:	2180      	movs	r1, #128	@ 0x80
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f001 f9e8 	bl	800a418 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2240      	movs	r2, #64	@ 0x40
 8009052:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	460b      	mov	r3, r1
 8009068:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	78fa      	ldrb	r2, [r7, #3]
 800906e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800907e:	b480      	push	{r7}
 8009080:	b083      	sub	sp, #12
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800908c:	b2da      	uxtb	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2204      	movs	r2, #4
 8009098:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b04      	cmp	r3, #4
 80090bc:	d106      	bne.n	80090cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e012      	b.n	8009116 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d10b      	bne.n	8009114 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d005      	beq.n	8009114 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800911e:	b480      	push	{r7}
 8009120:	b087      	sub	sp, #28
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	3301      	adds	r3, #1
 8009134:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800913c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009140:	021b      	lsls	r3, r3, #8
 8009142:	b21a      	sxth	r2, r3
 8009144:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009148:	4313      	orrs	r3, r2
 800914a:	b21b      	sxth	r3, r3
 800914c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800914e:	89fb      	ldrh	r3, [r7, #14]
}
 8009150:	4618      	mov	r0, r3
 8009152:	371c      	adds	r7, #28
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009172:	2b40      	cmp	r3, #64	@ 0x40
 8009174:	d005      	beq.n	8009182 <USBD_StdDevReq+0x26>
 8009176:	2b40      	cmp	r3, #64	@ 0x40
 8009178:	d853      	bhi.n	8009222 <USBD_StdDevReq+0xc6>
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00b      	beq.n	8009196 <USBD_StdDevReq+0x3a>
 800917e:	2b20      	cmp	r3, #32
 8009180:	d14f      	bne.n	8009222 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	4798      	blx	r3
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
      break;
 8009194:	e04a      	b.n	800922c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	2b09      	cmp	r3, #9
 800919c:	d83b      	bhi.n	8009216 <USBD_StdDevReq+0xba>
 800919e:	a201      	add	r2, pc, #4	@ (adr r2, 80091a4 <USBD_StdDevReq+0x48>)
 80091a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a4:	080091f9 	.word	0x080091f9
 80091a8:	0800920d 	.word	0x0800920d
 80091ac:	08009217 	.word	0x08009217
 80091b0:	08009203 	.word	0x08009203
 80091b4:	08009217 	.word	0x08009217
 80091b8:	080091d7 	.word	0x080091d7
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	08009217 	.word	0x08009217
 80091c4:	080091ef 	.word	0x080091ef
 80091c8:	080091e1 	.word	0x080091e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f9de 	bl	8009590 <USBD_GetDescriptor>
          break;
 80091d4:	e024      	b.n	8009220 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fb7f 	bl	80098dc <USBD_SetAddress>
          break;
 80091de:	e01f      	b.n	8009220 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fbbe 	bl	8009964 <USBD_SetConfig>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
          break;
 80091ec:	e018      	b.n	8009220 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fc5d 	bl	8009ab0 <USBD_GetConfig>
          break;
 80091f6:	e013      	b.n	8009220 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fc8e 	bl	8009b1c <USBD_GetStatus>
          break;
 8009200:	e00e      	b.n	8009220 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fcbd 	bl	8009b84 <USBD_SetFeature>
          break;
 800920a:	e009      	b.n	8009220 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fccc 	bl	8009bac <USBD_ClrFeature>
          break;
 8009214:	e004      	b.n	8009220 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fd23 	bl	8009c64 <USBD_CtlError>
          break;
 800921e:	bf00      	nop
      }
      break;
 8009220:	e004      	b.n	800922c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fd1d 	bl	8009c64 <USBD_CtlError>
      break;
 800922a:	bf00      	nop
  }

  return ret;
 800922c:	7bfb      	ldrb	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop

08009238 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800924e:	2b40      	cmp	r3, #64	@ 0x40
 8009250:	d005      	beq.n	800925e <USBD_StdItfReq+0x26>
 8009252:	2b40      	cmp	r3, #64	@ 0x40
 8009254:	d82f      	bhi.n	80092b6 <USBD_StdItfReq+0x7e>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <USBD_StdItfReq+0x26>
 800925a:	2b20      	cmp	r3, #32
 800925c:	d12b      	bne.n	80092b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009264:	b2db      	uxtb	r3, r3
 8009266:	3b01      	subs	r3, #1
 8009268:	2b02      	cmp	r3, #2
 800926a:	d81d      	bhi.n	80092a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	889b      	ldrh	r3, [r3, #4]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b01      	cmp	r3, #1
 8009274:	d813      	bhi.n	800929e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	4798      	blx	r3
 8009284:	4603      	mov	r3, r0
 8009286:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	88db      	ldrh	r3, [r3, #6]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d110      	bne.n	80092b2 <USBD_StdItfReq+0x7a>
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10d      	bne.n	80092b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fdaf 	bl	8009dfa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800929c:	e009      	b.n	80092b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fcdf 	bl	8009c64 <USBD_CtlError>
          break;
 80092a6:	e004      	b.n	80092b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fcda 	bl	8009c64 <USBD_CtlError>
          break;
 80092b0:	e000      	b.n	80092b4 <USBD_StdItfReq+0x7c>
          break;
 80092b2:	bf00      	nop
      }
      break;
 80092b4:	e004      	b.n	80092c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fcd3 	bl	8009c64 <USBD_CtlError>
      break;
 80092be:	bf00      	nop
  }

  return ret;
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b084      	sub	sp, #16
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	889b      	ldrh	r3, [r3, #4]
 80092dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092e6:	2b40      	cmp	r3, #64	@ 0x40
 80092e8:	d007      	beq.n	80092fa <USBD_StdEPReq+0x30>
 80092ea:	2b40      	cmp	r3, #64	@ 0x40
 80092ec:	f200 8145 	bhi.w	800957a <USBD_StdEPReq+0x2b0>
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00c      	beq.n	800930e <USBD_StdEPReq+0x44>
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	f040 8140 	bne.w	800957a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	4798      	blx	r3
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]
      break;
 800930c:	e13a      	b.n	8009584 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	785b      	ldrb	r3, [r3, #1]
 8009312:	2b03      	cmp	r3, #3
 8009314:	d007      	beq.n	8009326 <USBD_StdEPReq+0x5c>
 8009316:	2b03      	cmp	r3, #3
 8009318:	f300 8129 	bgt.w	800956e <USBD_StdEPReq+0x2a4>
 800931c:	2b00      	cmp	r3, #0
 800931e:	d07f      	beq.n	8009420 <USBD_StdEPReq+0x156>
 8009320:	2b01      	cmp	r3, #1
 8009322:	d03c      	beq.n	800939e <USBD_StdEPReq+0xd4>
 8009324:	e123      	b.n	800956e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b02      	cmp	r3, #2
 8009330:	d002      	beq.n	8009338 <USBD_StdEPReq+0x6e>
 8009332:	2b03      	cmp	r3, #3
 8009334:	d016      	beq.n	8009364 <USBD_StdEPReq+0x9a>
 8009336:	e02c      	b.n	8009392 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00d      	beq.n	800935a <USBD_StdEPReq+0x90>
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b80      	cmp	r3, #128	@ 0x80
 8009342:	d00a      	beq.n	800935a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 f88b 	bl	800a464 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800934e:	2180      	movs	r1, #128	@ 0x80
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 f887 	bl	800a464 <USBD_LL_StallEP>
 8009356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009358:	e020      	b.n	800939c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fc81 	bl	8009c64 <USBD_CtlError>
              break;
 8009362:	e01b      	b.n	800939c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	885b      	ldrh	r3, [r3, #2]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10e      	bne.n	800938a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00b      	beq.n	800938a <USBD_StdEPReq+0xc0>
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b80      	cmp	r3, #128	@ 0x80
 8009376:	d008      	beq.n	800938a <USBD_StdEPReq+0xc0>
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	88db      	ldrh	r3, [r3, #6]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d104      	bne.n	800938a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 f86d 	bl	800a464 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fd35 	bl	8009dfa <USBD_CtlSendStatus>

              break;
 8009390:	e004      	b.n	800939c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc65 	bl	8009c64 <USBD_CtlError>
              break;
 800939a:	bf00      	nop
          }
          break;
 800939c:	e0ec      	b.n	8009578 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d002      	beq.n	80093b0 <USBD_StdEPReq+0xe6>
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d016      	beq.n	80093dc <USBD_StdEPReq+0x112>
 80093ae:	e030      	b.n	8009412 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00d      	beq.n	80093d2 <USBD_StdEPReq+0x108>
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	2b80      	cmp	r3, #128	@ 0x80
 80093ba:	d00a      	beq.n	80093d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f84f 	bl	800a464 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093c6:	2180      	movs	r1, #128	@ 0x80
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 f84b 	bl	800a464 <USBD_LL_StallEP>
 80093ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093d0:	e025      	b.n	800941e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fc45 	bl	8009c64 <USBD_CtlError>
              break;
 80093da:	e020      	b.n	800941e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	885b      	ldrh	r3, [r3, #2]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d11b      	bne.n	800941c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d004      	beq.n	80093f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80093ee:	7bbb      	ldrb	r3, [r7, #14]
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f001 f855 	bl	800a4a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fcfe 	bl	8009dfa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	4798      	blx	r3
 800940c:	4603      	mov	r3, r0
 800940e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009410:	e004      	b.n	800941c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fc25 	bl	8009c64 <USBD_CtlError>
              break;
 800941a:	e000      	b.n	800941e <USBD_StdEPReq+0x154>
              break;
 800941c:	bf00      	nop
          }
          break;
 800941e:	e0ab      	b.n	8009578 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b02      	cmp	r3, #2
 800942a:	d002      	beq.n	8009432 <USBD_StdEPReq+0x168>
 800942c:	2b03      	cmp	r3, #3
 800942e:	d032      	beq.n	8009496 <USBD_StdEPReq+0x1cc>
 8009430:	e097      	b.n	8009562 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d007      	beq.n	8009448 <USBD_StdEPReq+0x17e>
 8009438:	7bbb      	ldrb	r3, [r7, #14]
 800943a:	2b80      	cmp	r3, #128	@ 0x80
 800943c:	d004      	beq.n	8009448 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fc0f 	bl	8009c64 <USBD_CtlError>
                break;
 8009446:	e091      	b.n	800956c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800944c:	2b00      	cmp	r3, #0
 800944e:	da0b      	bge.n	8009468 <USBD_StdEPReq+0x19e>
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	3310      	adds	r3, #16
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	4413      	add	r3, r2
 8009464:	3304      	adds	r3, #4
 8009466:	e00b      	b.n	8009480 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800946e:	4613      	mov	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	4413      	add	r3, r2
 800947e:	3304      	adds	r3, #4
 8009480:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2202      	movs	r2, #2
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fc59 	bl	8009d46 <USBD_CtlSendData>
              break;
 8009494:	e06a      	b.n	800956c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009496:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800949a:	2b00      	cmp	r3, #0
 800949c:	da11      	bge.n	80094c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800949e:	7bbb      	ldrb	r3, [r7, #14]
 80094a0:	f003 020f 	and.w	r2, r3, #15
 80094a4:	6879      	ldr	r1, [r7, #4]
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	440b      	add	r3, r1
 80094b0:	3324      	adds	r3, #36	@ 0x24
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d117      	bne.n	80094e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fbd2 	bl	8009c64 <USBD_CtlError>
                  break;
 80094c0:	e054      	b.n	800956c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
 80094c4:	f003 020f 	and.w	r2, r3, #15
 80094c8:	6879      	ldr	r1, [r7, #4]
 80094ca:	4613      	mov	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	440b      	add	r3, r1
 80094d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d104      	bne.n	80094e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fbbf 	bl	8009c64 <USBD_CtlError>
                  break;
 80094e6:	e041      	b.n	800956c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	da0b      	bge.n	8009508 <USBD_StdEPReq+0x23e>
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
 80094f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094f6:	4613      	mov	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	3310      	adds	r3, #16
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	4413      	add	r3, r2
 8009504:	3304      	adds	r3, #4
 8009506:	e00b      	b.n	8009520 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800950e:	4613      	mov	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4413      	add	r3, r2
 800951e:	3304      	adds	r3, #4
 8009520:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <USBD_StdEPReq+0x264>
 8009528:	7bbb      	ldrb	r3, [r7, #14]
 800952a:	2b80      	cmp	r3, #128	@ 0x80
 800952c:	d103      	bne.n	8009536 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	e00e      	b.n	8009554 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 ffd0 	bl	800a4e0 <USBD_LL_IsStallEP>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d003      	beq.n	800954e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2201      	movs	r2, #1
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	e002      	b.n	8009554 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2200      	movs	r2, #0
 8009552:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2202      	movs	r2, #2
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fbf3 	bl	8009d46 <USBD_CtlSendData>
              break;
 8009560:	e004      	b.n	800956c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fb7d 	bl	8009c64 <USBD_CtlError>
              break;
 800956a:	bf00      	nop
          }
          break;
 800956c:	e004      	b.n	8009578 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fb77 	bl	8009c64 <USBD_CtlError>
          break;
 8009576:	bf00      	nop
      }
      break;
 8009578:	e004      	b.n	8009584 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fb71 	bl	8009c64 <USBD_CtlError>
      break;
 8009582:	bf00      	nop
  }

  return ret;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800959e:	2300      	movs	r3, #0
 80095a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	885b      	ldrh	r3, [r3, #2]
 80095aa:	0a1b      	lsrs	r3, r3, #8
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	2b0e      	cmp	r3, #14
 80095b2:	f200 8165 	bhi.w	8009880 <USBD_GetDescriptor+0x2f0>
 80095b6:	a201      	add	r2, pc, #4	@ (adr r2, 80095bc <USBD_GetDescriptor+0x2c>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	0800962d 	.word	0x0800962d
 80095c0:	08009645 	.word	0x08009645
 80095c4:	08009685 	.word	0x08009685
 80095c8:	08009881 	.word	0x08009881
 80095cc:	08009881 	.word	0x08009881
 80095d0:	08009821 	.word	0x08009821
 80095d4:	0800984d 	.word	0x0800984d
 80095d8:	08009881 	.word	0x08009881
 80095dc:	08009881 	.word	0x08009881
 80095e0:	08009881 	.word	0x08009881
 80095e4:	08009881 	.word	0x08009881
 80095e8:	08009881 	.word	0x08009881
 80095ec:	08009881 	.word	0x08009881
 80095f0:	08009881 	.word	0x08009881
 80095f4:	080095f9 	.word	0x080095f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00b      	beq.n	800961c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	7c12      	ldrb	r2, [r2, #16]
 8009610:	f107 0108 	add.w	r1, r7, #8
 8009614:	4610      	mov	r0, r2
 8009616:	4798      	blx	r3
 8009618:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800961a:	e139      	b.n	8009890 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fb20 	bl	8009c64 <USBD_CtlError>
        err++;
 8009624:	7afb      	ldrb	r3, [r7, #11]
 8009626:	3301      	adds	r3, #1
 8009628:	72fb      	strb	r3, [r7, #11]
      break;
 800962a:	e131      	b.n	8009890 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	7c12      	ldrb	r2, [r2, #16]
 8009638:	f107 0108 	add.w	r1, r7, #8
 800963c:	4610      	mov	r0, r2
 800963e:	4798      	blx	r3
 8009640:	60f8      	str	r0, [r7, #12]
      break;
 8009642:	e125      	b.n	8009890 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	7c1b      	ldrb	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10d      	bne.n	8009668 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009654:	f107 0208 	add.w	r2, r7, #8
 8009658:	4610      	mov	r0, r2
 800965a:	4798      	blx	r3
 800965c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3301      	adds	r3, #1
 8009662:	2202      	movs	r2, #2
 8009664:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009666:	e113      	b.n	8009890 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800966e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009670:	f107 0208 	add.w	r2, r7, #8
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
 8009678:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3301      	adds	r3, #1
 800967e:	2202      	movs	r2, #2
 8009680:	701a      	strb	r2, [r3, #0]
      break;
 8009682:	e105      	b.n	8009890 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	885b      	ldrh	r3, [r3, #2]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b05      	cmp	r3, #5
 800968c:	f200 80ac 	bhi.w	80097e8 <USBD_GetDescriptor+0x258>
 8009690:	a201      	add	r2, pc, #4	@ (adr r2, 8009698 <USBD_GetDescriptor+0x108>)
 8009692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009696:	bf00      	nop
 8009698:	080096b1 	.word	0x080096b1
 800969c:	080096e5 	.word	0x080096e5
 80096a0:	08009719 	.word	0x08009719
 80096a4:	0800974d 	.word	0x0800974d
 80096a8:	08009781 	.word	0x08009781
 80096ac:	080097b5 	.word	0x080097b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00b      	beq.n	80096d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	7c12      	ldrb	r2, [r2, #16]
 80096c8:	f107 0108 	add.w	r1, r7, #8
 80096cc:	4610      	mov	r0, r2
 80096ce:	4798      	blx	r3
 80096d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096d2:	e0a4      	b.n	800981e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fac4 	bl	8009c64 <USBD_CtlError>
            err++;
 80096dc:	7afb      	ldrb	r3, [r7, #11]
 80096de:	3301      	adds	r3, #1
 80096e0:	72fb      	strb	r3, [r7, #11]
          break;
 80096e2:	e09c      	b.n	800981e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00b      	beq.n	8009708 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	7c12      	ldrb	r2, [r2, #16]
 80096fc:	f107 0108 	add.w	r1, r7, #8
 8009700:	4610      	mov	r0, r2
 8009702:	4798      	blx	r3
 8009704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009706:	e08a      	b.n	800981e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 faaa 	bl	8009c64 <USBD_CtlError>
            err++;
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	3301      	adds	r3, #1
 8009714:	72fb      	strb	r3, [r7, #11]
          break;
 8009716:	e082      	b.n	800981e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00b      	beq.n	800973c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	7c12      	ldrb	r2, [r2, #16]
 8009730:	f107 0108 	add.w	r1, r7, #8
 8009734:	4610      	mov	r0, r2
 8009736:	4798      	blx	r3
 8009738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973a:	e070      	b.n	800981e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fa90 	bl	8009c64 <USBD_CtlError>
            err++;
 8009744:	7afb      	ldrb	r3, [r7, #11]
 8009746:	3301      	adds	r3, #1
 8009748:	72fb      	strb	r3, [r7, #11]
          break;
 800974a:	e068      	b.n	800981e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00b      	beq.n	8009770 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	7c12      	ldrb	r2, [r2, #16]
 8009764:	f107 0108 	add.w	r1, r7, #8
 8009768:	4610      	mov	r0, r2
 800976a:	4798      	blx	r3
 800976c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976e:	e056      	b.n	800981e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fa76 	bl	8009c64 <USBD_CtlError>
            err++;
 8009778:	7afb      	ldrb	r3, [r7, #11]
 800977a:	3301      	adds	r3, #1
 800977c:	72fb      	strb	r3, [r7, #11]
          break;
 800977e:	e04e      	b.n	800981e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009786:	695b      	ldr	r3, [r3, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00b      	beq.n	80097a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	7c12      	ldrb	r2, [r2, #16]
 8009798:	f107 0108 	add.w	r1, r7, #8
 800979c:	4610      	mov	r0, r2
 800979e:	4798      	blx	r3
 80097a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a2:	e03c      	b.n	800981e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fa5c 	bl	8009c64 <USBD_CtlError>
            err++;
 80097ac:	7afb      	ldrb	r3, [r7, #11]
 80097ae:	3301      	adds	r3, #1
 80097b0:	72fb      	strb	r3, [r7, #11]
          break;
 80097b2:	e034      	b.n	800981e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00b      	beq.n	80097d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	7c12      	ldrb	r2, [r2, #16]
 80097cc:	f107 0108 	add.w	r1, r7, #8
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097d6:	e022      	b.n	800981e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fa42 	bl	8009c64 <USBD_CtlError>
            err++;
 80097e0:	7afb      	ldrb	r3, [r7, #11]
 80097e2:	3301      	adds	r3, #1
 80097e4:	72fb      	strb	r3, [r7, #11]
          break;
 80097e6:	e01a      	b.n	800981e <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00c      	beq.n	800980e <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	8852      	ldrh	r2, [r2, #2]
 8009800:	b2d1      	uxtb	r1, r2
 8009802:	f107 0208 	add.w	r2, r7, #8
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
 800980a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800980c:	e006      	b.n	800981c <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fa27 	bl	8009c64 <USBD_CtlError>
            err++;
 8009816:	7afb      	ldrb	r3, [r7, #11]
 8009818:	3301      	adds	r3, #1
 800981a:	72fb      	strb	r3, [r7, #11]
          break;
 800981c:	bf00      	nop
      }
      break;
 800981e:	e037      	b.n	8009890 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	7c1b      	ldrb	r3, [r3, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d109      	bne.n	800983c <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800982e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009830:	f107 0208 	add.w	r2, r7, #8
 8009834:	4610      	mov	r0, r2
 8009836:	4798      	blx	r3
 8009838:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800983a:	e029      	b.n	8009890 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa10 	bl	8009c64 <USBD_CtlError>
        err++;
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	3301      	adds	r3, #1
 8009848:	72fb      	strb	r3, [r7, #11]
      break;
 800984a:	e021      	b.n	8009890 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	7c1b      	ldrb	r3, [r3, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10d      	bne.n	8009870 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800985a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800985c:	f107 0208 	add.w	r2, r7, #8
 8009860:	4610      	mov	r0, r2
 8009862:	4798      	blx	r3
 8009864:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	3301      	adds	r3, #1
 800986a:	2207      	movs	r2, #7
 800986c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800986e:	e00f      	b.n	8009890 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f9f6 	bl	8009c64 <USBD_CtlError>
        err++;
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	3301      	adds	r3, #1
 800987c:	72fb      	strb	r3, [r7, #11]
      break;
 800987e:	e007      	b.n	8009890 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f9ee 	bl	8009c64 <USBD_CtlError>
      err++;
 8009888:	7afb      	ldrb	r3, [r7, #11]
 800988a:	3301      	adds	r3, #1
 800988c:	72fb      	strb	r3, [r7, #11]
      break;
 800988e:	bf00      	nop
  }

  if (err != 0U)
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d11e      	bne.n	80098d4 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	88db      	ldrh	r3, [r3, #6]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d016      	beq.n	80098cc <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 800989e:	893b      	ldrh	r3, [r7, #8]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00e      	beq.n	80098c2 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	88da      	ldrh	r2, [r3, #6]
 80098a8:	893b      	ldrh	r3, [r7, #8]
 80098aa:	4293      	cmp	r3, r2
 80098ac:	bf28      	it	cs
 80098ae:	4613      	movcs	r3, r2
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098b4:	893b      	ldrh	r3, [r7, #8]
 80098b6:	461a      	mov	r2, r3
 80098b8:	68f9      	ldr	r1, [r7, #12]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fa43 	bl	8009d46 <USBD_CtlSendData>
 80098c0:	e009      	b.n	80098d6 <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f9cd 	bl	8009c64 <USBD_CtlError>
 80098ca:	e004      	b.n	80098d6 <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fa94 	bl	8009dfa <USBD_CtlSendStatus>
 80098d2:	e000      	b.n	80098d6 <USBD_GetDescriptor+0x346>
    return;
 80098d4:	bf00      	nop
  }
}
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	889b      	ldrh	r3, [r3, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d131      	bne.n	8009952 <USBD_SetAddress+0x76>
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	88db      	ldrh	r3, [r3, #6]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d12d      	bne.n	8009952 <USBD_SetAddress+0x76>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	885b      	ldrh	r3, [r3, #2]
 80098fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80098fc:	d829      	bhi.n	8009952 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	885b      	ldrh	r3, [r3, #2]
 8009902:	b2db      	uxtb	r3, r3
 8009904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009908:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b03      	cmp	r3, #3
 8009914:	d104      	bne.n	8009920 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f9a3 	bl	8009c64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800991e:	e01d      	b.n	800995c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	7bfa      	ldrb	r2, [r7, #15]
 8009924:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fe03 	bl	800a538 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fa61 	bl	8009dfa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d004      	beq.n	8009948 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2202      	movs	r2, #2
 8009942:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009946:	e009      	b.n	800995c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009950:	e004      	b.n	800995c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f985 	bl	8009c64 <USBD_CtlError>
  }
}
 800995a:	bf00      	nop
 800995c:	bf00      	nop
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	885b      	ldrh	r3, [r3, #2]
 8009976:	b2da      	uxtb	r2, r3
 8009978:	4b4c      	ldr	r3, [pc, #304]	@ (8009aac <USBD_SetConfig+0x148>)
 800997a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800997c:	4b4b      	ldr	r3, [pc, #300]	@ (8009aac <USBD_SetConfig+0x148>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d905      	bls.n	8009990 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f96c 	bl	8009c64 <USBD_CtlError>
    return USBD_FAIL;
 800998c:	2303      	movs	r3, #3
 800998e:	e088      	b.n	8009aa2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b02      	cmp	r3, #2
 800999a:	d002      	beq.n	80099a2 <USBD_SetConfig+0x3e>
 800999c:	2b03      	cmp	r3, #3
 800999e:	d025      	beq.n	80099ec <USBD_SetConfig+0x88>
 80099a0:	e071      	b.n	8009a86 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099a2:	4b42      	ldr	r3, [pc, #264]	@ (8009aac <USBD_SetConfig+0x148>)
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d01c      	beq.n	80099e4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80099aa:	4b40      	ldr	r3, [pc, #256]	@ (8009aac <USBD_SetConfig+0x148>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099b4:	4b3d      	ldr	r3, [pc, #244]	@ (8009aac <USBD_SetConfig+0x148>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7ff f97f 	bl	8008cbe <USBD_SetClassConfig>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d004      	beq.n	80099d4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f949 	bl	8009c64 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099d2:	e065      	b.n	8009aa0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fa10 	bl	8009dfa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2203      	movs	r2, #3
 80099de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80099e2:	e05d      	b.n	8009aa0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fa08 	bl	8009dfa <USBD_CtlSendStatus>
      break;
 80099ea:	e059      	b.n	8009aa0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80099ec:	4b2f      	ldr	r3, [pc, #188]	@ (8009aac <USBD_SetConfig+0x148>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d112      	bne.n	8009a1a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80099fc:	4b2b      	ldr	r3, [pc, #172]	@ (8009aac <USBD_SetConfig+0x148>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a06:	4b29      	ldr	r3, [pc, #164]	@ (8009aac <USBD_SetConfig+0x148>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff f972 	bl	8008cf6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f9f1 	bl	8009dfa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a18:	e042      	b.n	8009aa0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009a1a:	4b24      	ldr	r3, [pc, #144]	@ (8009aac <USBD_SetConfig+0x148>)
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d02a      	beq.n	8009a7e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff f960 	bl	8008cf6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a36:	4b1d      	ldr	r3, [pc, #116]	@ (8009aac <USBD_SetConfig+0x148>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a40:	4b1a      	ldr	r3, [pc, #104]	@ (8009aac <USBD_SetConfig+0x148>)
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	4619      	mov	r1, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7ff f939 	bl	8008cbe <USBD_SetClassConfig>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00f      	beq.n	8009a76 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f903 	bl	8009c64 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7ff f945 	bl	8008cf6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a74:	e014      	b.n	8009aa0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f9bf 	bl	8009dfa <USBD_CtlSendStatus>
      break;
 8009a7c:	e010      	b.n	8009aa0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f9bb 	bl	8009dfa <USBD_CtlSendStatus>
      break;
 8009a84:	e00c      	b.n	8009aa0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f8eb 	bl	8009c64 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a8e:	4b07      	ldr	r3, [pc, #28]	@ (8009aac <USBD_SetConfig+0x148>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7ff f92e 	bl	8008cf6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a9e:	bf00      	nop
  }

  return ret;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	200002c7 	.word	0x200002c7

08009ab0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	88db      	ldrh	r3, [r3, #6]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d004      	beq.n	8009acc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f8cd 	bl	8009c64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009aca:	e023      	b.n	8009b14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	dc02      	bgt.n	8009ade <USBD_GetConfig+0x2e>
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dc03      	bgt.n	8009ae4 <USBD_GetConfig+0x34>
 8009adc:	e015      	b.n	8009b0a <USBD_GetConfig+0x5a>
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d00b      	beq.n	8009afa <USBD_GetConfig+0x4a>
 8009ae2:	e012      	b.n	8009b0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3308      	adds	r3, #8
 8009aee:	2201      	movs	r2, #1
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f927 	bl	8009d46 <USBD_CtlSendData>
        break;
 8009af8:	e00c      	b.n	8009b14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	3304      	adds	r3, #4
 8009afe:	2201      	movs	r2, #1
 8009b00:	4619      	mov	r1, r3
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f91f 	bl	8009d46 <USBD_CtlSendData>
        break;
 8009b08:	e004      	b.n	8009b14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f8a9 	bl	8009c64 <USBD_CtlError>
        break;
 8009b12:	bf00      	nop
}
 8009b14:	bf00      	nop
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d81e      	bhi.n	8009b72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	88db      	ldrh	r3, [r3, #6]
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d004      	beq.n	8009b46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f890 	bl	8009c64 <USBD_CtlError>
        break;
 8009b44:	e01a      	b.n	8009b7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d005      	beq.n	8009b62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	f043 0202 	orr.w	r2, r3, #2
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	330c      	adds	r3, #12
 8009b66:	2202      	movs	r2, #2
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f8eb 	bl	8009d46 <USBD_CtlSendData>
      break;
 8009b70:	e004      	b.n	8009b7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f875 	bl	8009c64 <USBD_CtlError>
      break;
 8009b7a:	bf00      	nop
  }
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	885b      	ldrh	r3, [r3, #2]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d106      	bne.n	8009ba4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f92b 	bl	8009dfa <USBD_CtlSendStatus>
  }
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d80b      	bhi.n	8009bdc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	885b      	ldrh	r3, [r3, #2]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d10c      	bne.n	8009be6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f910 	bl	8009dfa <USBD_CtlSendStatus>
      }
      break;
 8009bda:	e004      	b.n	8009be6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f840 	bl	8009c64 <USBD_CtlError>
      break;
 8009be4:	e000      	b.n	8009be8 <USBD_ClrFeature+0x3c>
      break;
 8009be6:	bf00      	nop
  }
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	781a      	ldrb	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	781a      	ldrb	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	3301      	adds	r3, #1
 8009c18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f7ff fa7f 	bl	800911e <SWAPBYTE>
 8009c20:	4603      	mov	r3, r0
 8009c22:	461a      	mov	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f7ff fa72 	bl	800911e <SWAPBYTE>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3301      	adds	r3, #1
 8009c46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7ff fa65 	bl	800911e <SWAPBYTE>
 8009c54:	4603      	mov	r3, r0
 8009c56:	461a      	mov	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	80da      	strh	r2, [r3, #6]
}
 8009c5c:	bf00      	nop
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c6e:	2180      	movs	r1, #128	@ 0x80
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fbf7 	bl	800a464 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c76:	2100      	movs	r1, #0
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fbf3 	bl	800a464 <USBD_LL_StallEP>
}
 8009c7e:	bf00      	nop
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b086      	sub	sp, #24
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	60b9      	str	r1, [r7, #8]
 8009c90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d036      	beq.n	8009d0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009ca0:	6938      	ldr	r0, [r7, #16]
 8009ca2:	f000 f836 	bl	8009d12 <USBD_GetLen>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	3301      	adds	r3, #1
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	4413      	add	r3, r2
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	7812      	ldrb	r2, [r2, #0]
 8009cbe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cc0:	7dfb      	ldrb	r3, [r7, #23]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	4413      	add	r3, r2
 8009ccc:	2203      	movs	r2, #3
 8009cce:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009cd6:	e013      	b.n	8009d00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	4413      	add	r3, r2
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	7812      	ldrb	r2, [r2, #0]
 8009ce2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	613b      	str	r3, [r7, #16]
    idx++;
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	3301      	adds	r3, #1
 8009cee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	701a      	strb	r2, [r3, #0]
    idx++;
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1e7      	bne.n	8009cd8 <USBD_GetString+0x52>
 8009d08:	e000      	b.n	8009d0c <USBD_GetString+0x86>
    return;
 8009d0a:	bf00      	nop
  }
}
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b085      	sub	sp, #20
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d22:	e005      	b.n	8009d30 <USBD_GetLen+0x1e>
  {
    len++;
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	3301      	adds	r3, #1
 8009d28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1f5      	bne.n	8009d24 <USBD_GetLen+0x12>
  }

  return len;
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b084      	sub	sp, #16
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	60b9      	str	r1, [r7, #8]
 8009d50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2202      	movs	r2, #2
 8009d56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 fc02 	bl	800a576 <USBD_LL_Transmit>

  return USBD_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 fbf1 	bl	800a576 <USBD_LL_Transmit>

  return USBD_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2203      	movs	r2, #3
 8009dae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f000 fbf5 	bl	800a5b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	2100      	movs	r1, #0
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f000 fbe4 	bl	800a5b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2204      	movs	r2, #4
 8009e06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2100      	movs	r1, #0
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fbb0 	bl	800a576 <USBD_LL_Transmit>

  return USBD_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2205      	movs	r2, #5
 8009e2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e30:	2300      	movs	r3, #0
 8009e32:	2200      	movs	r2, #0
 8009e34:	2100      	movs	r1, #0
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fbbe 	bl	800a5b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4912      	ldr	r1, [pc, #72]	@ (8009e98 <MX_USB_Device_Init+0x50>)
 8009e50:	4812      	ldr	r0, [pc, #72]	@ (8009e9c <MX_USB_Device_Init+0x54>)
 8009e52:	f7fe feab 	bl	8008bac <USBD_Init>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009e5c:	f7f6 fbf0 	bl	8000640 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 8009e60:	490f      	ldr	r1, [pc, #60]	@ (8009ea0 <MX_USB_Device_Init+0x58>)
 8009e62:	480e      	ldr	r0, [pc, #56]	@ (8009e9c <MX_USB_Device_Init+0x54>)
 8009e64:	f7fe fed2 	bl	8008c0c <USBD_RegisterClass>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009e6e:	f7f6 fbe7 	bl	8000640 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 8009e72:	490c      	ldr	r1, [pc, #48]	@ (8009ea4 <MX_USB_Device_Init+0x5c>)
 8009e74:	4809      	ldr	r0, [pc, #36]	@ (8009e9c <MX_USB_Device_Init+0x54>)
 8009e76:	f7fe fb17 	bl	80084a8 <USBD_DFU_RegisterMedia>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009e80:	f7f6 fbde 	bl	8000640 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009e84:	4805      	ldr	r0, [pc, #20]	@ (8009e9c <MX_USB_Device_Init+0x54>)
 8009e86:	f7fe fee8 	bl	8008c5a <USBD_Start>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009e90:	f7f6 fbd6 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009e94:	bf00      	nop
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000070 	.word	0x20000070
 8009e9c:	200002c8 	.word	0x200002c8
 8009ea0:	2000000c 	.word	0x2000000c
 8009ea4:	200000c4 	.word	0x200000c4

08009ea8 <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	6039      	str	r1, [r7, #0]
 8009eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2212      	movs	r2, #18
 8009eb8:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 8009eba:	4b03      	ldr	r3, [pc, #12]	@ (8009ec8 <USBD_DFU_DeviceDescriptor+0x20>)
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr
 8009ec8:	20000090 	.word	0x20000090

08009ecc <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	6039      	str	r1, [r7, #0]
 8009ed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	2204      	movs	r2, #4
 8009edc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009ede:	4b03      	ldr	r3, [pc, #12]	@ (8009eec <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	200000a4 	.word	0x200000a4

08009ef0 <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	6039      	str	r1, [r7, #0]
 8009efa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009efc:	79fb      	ldrb	r3, [r7, #7]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d105      	bne.n	8009f0e <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	4907      	ldr	r1, [pc, #28]	@ (8009f24 <USBD_DFU_ProductStrDescriptor+0x34>)
 8009f06:	4808      	ldr	r0, [pc, #32]	@ (8009f28 <USBD_DFU_ProductStrDescriptor+0x38>)
 8009f08:	f7ff febd 	bl	8009c86 <USBD_GetString>
 8009f0c:	e004      	b.n	8009f18 <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	4904      	ldr	r1, [pc, #16]	@ (8009f24 <USBD_DFU_ProductStrDescriptor+0x34>)
 8009f12:	4805      	ldr	r0, [pc, #20]	@ (8009f28 <USBD_DFU_ProductStrDescriptor+0x38>)
 8009f14:	f7ff feb7 	bl	8009c86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f18:	4b02      	ldr	r3, [pc, #8]	@ (8009f24 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20000598 	.word	0x20000598
 8009f28:	0800a76c 	.word	0x0800a76c

08009f2c <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	6039      	str	r1, [r7, #0]
 8009f36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	4904      	ldr	r1, [pc, #16]	@ (8009f4c <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 8009f3c:	4804      	ldr	r0, [pc, #16]	@ (8009f50 <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 8009f3e:	f7ff fea2 	bl	8009c86 <USBD_GetString>
  return USBD_StrDesc;
 8009f42:	4b02      	ldr	r3, [pc, #8]	@ (8009f4c <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20000598 	.word	0x20000598
 8009f50:	0800a78c 	.word	0x0800a78c

08009f54 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	6039      	str	r1, [r7, #0]
 8009f5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	221a      	movs	r2, #26
 8009f64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f66:	f000 f843 	bl	8009ff0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009f6a:	4b02      	ldr	r3, [pc, #8]	@ (8009f74 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	200000a8 	.word	0x200000a8

08009f78 <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	6039      	str	r1, [r7, #0]
 8009f82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f84:	79fb      	ldrb	r3, [r7, #7]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d105      	bne.n	8009f96 <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	4907      	ldr	r1, [pc, #28]	@ (8009fac <USBD_DFU_ConfigStrDescriptor+0x34>)
 8009f8e:	4808      	ldr	r0, [pc, #32]	@ (8009fb0 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8009f90:	f7ff fe79 	bl	8009c86 <USBD_GetString>
 8009f94:	e004      	b.n	8009fa0 <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	4904      	ldr	r1, [pc, #16]	@ (8009fac <USBD_DFU_ConfigStrDescriptor+0x34>)
 8009f9a:	4805      	ldr	r0, [pc, #20]	@ (8009fb0 <USBD_DFU_ConfigStrDescriptor+0x38>)
 8009f9c:	f7ff fe73 	bl	8009c86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fa0:	4b02      	ldr	r3, [pc, #8]	@ (8009fac <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20000598 	.word	0x20000598
 8009fb0:	0800a7a0 	.word	0x0800a7a0

08009fb4 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	6039      	str	r1, [r7, #0]
 8009fbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d105      	bne.n	8009fd2 <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	4907      	ldr	r1, [pc, #28]	@ (8009fe8 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8009fca:	4808      	ldr	r0, [pc, #32]	@ (8009fec <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8009fcc:	f7ff fe5b 	bl	8009c86 <USBD_GetString>
 8009fd0:	e004      	b.n	8009fdc <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	4904      	ldr	r1, [pc, #16]	@ (8009fe8 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8009fd6:	4805      	ldr	r0, [pc, #20]	@ (8009fec <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8009fd8:	f7ff fe55 	bl	8009c86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fdc:	4b02      	ldr	r3, [pc, #8]	@ (8009fe8 <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000598 	.word	0x20000598
 8009fec:	0800a7ac 	.word	0x0800a7ac

08009ff0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	@ (800a034 <Get_SerialNum+0x44>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ffc:	4b0e      	ldr	r3, [pc, #56]	@ (800a038 <Get_SerialNum+0x48>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a002:	4b0e      	ldr	r3, [pc, #56]	@ (800a03c <Get_SerialNum+0x4c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4413      	add	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d009      	beq.n	800a02a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a016:	2208      	movs	r2, #8
 800a018:	4909      	ldr	r1, [pc, #36]	@ (800a040 <Get_SerialNum+0x50>)
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f000 f814 	bl	800a048 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a020:	2204      	movs	r2, #4
 800a022:	4908      	ldr	r1, [pc, #32]	@ (800a044 <Get_SerialNum+0x54>)
 800a024:	68b8      	ldr	r0, [r7, #8]
 800a026:	f000 f80f 	bl	800a048 <IntToUnicode>
  }
}
 800a02a:	bf00      	nop
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	1fff7590 	.word	0x1fff7590
 800a038:	1fff7594 	.word	0x1fff7594
 800a03c:	1fff7598 	.word	0x1fff7598
 800a040:	200000aa 	.word	0x200000aa
 800a044:	200000ba 	.word	0x200000ba

0800a048 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	4613      	mov	r3, r2
 800a054:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a05a:	2300      	movs	r3, #0
 800a05c:	75fb      	strb	r3, [r7, #23]
 800a05e:	e027      	b.n	800a0b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	0f1b      	lsrs	r3, r3, #28
 800a064:	2b09      	cmp	r3, #9
 800a066:	d80b      	bhi.n	800a080 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	0f1b      	lsrs	r3, r3, #28
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
 800a070:	005b      	lsls	r3, r3, #1
 800a072:	4619      	mov	r1, r3
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	440b      	add	r3, r1
 800a078:	3230      	adds	r2, #48	@ 0x30
 800a07a:	b2d2      	uxtb	r2, r2
 800a07c:	701a      	strb	r2, [r3, #0]
 800a07e:	e00a      	b.n	800a096 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	0f1b      	lsrs	r3, r3, #28
 800a084:	b2da      	uxtb	r2, r3
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	005b      	lsls	r3, r3, #1
 800a08a:	4619      	mov	r1, r3
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	440b      	add	r3, r1
 800a090:	3237      	adds	r2, #55	@ 0x37
 800a092:	b2d2      	uxtb	r2, r2
 800a094:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	011b      	lsls	r3, r3, #4
 800a09a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	005b      	lsls	r3, r3, #1
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0aa:	7dfb      	ldrb	r3, [r7, #23]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	75fb      	strb	r3, [r7, #23]
 800a0b0:	7dfa      	ldrb	r2, [r7, #23]
 800a0b2:	79fb      	ldrb	r3, [r7, #7]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d3d3      	bcc.n	800a060 <IntToUnicode+0x18>
  }
}
 800a0b8:	bf00      	nop
 800a0ba:	bf00      	nop
 800a0bc:	371c      	adds	r7, #28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800a0ca:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800a0da:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800a0ee:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800a108:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a116:	b480      	push	{r7}
 800a118:	b085      	sub	sp, #20
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 800a122:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800a132:	b480      	push	{r7}
 800a134:	b085      	sub	sp, #20
 800a136:	af00      	add	r7, sp, #0
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	460b      	mov	r3, r1
 800a13c:	607a      	str	r2, [r7, #4]
 800a13e:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800a140:	7afb      	ldrb	r3, [r7, #11]
 800a142:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800a144:	bf00      	nop
  }
  return (USBD_OK);
 800a146:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b094      	sub	sp, #80	@ 0x50
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a15c:	f107 030c 	add.w	r3, r7, #12
 800a160:	2244      	movs	r2, #68	@ 0x44
 800a162:	2100      	movs	r1, #0
 800a164:	4618      	mov	r0, r3
 800a166:	f000 fac9 	bl	800a6fc <memset>
  if(pcdHandle->Instance==USB)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a15      	ldr	r2, [pc, #84]	@ (800a1c4 <HAL_PCD_MspInit+0x70>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d123      	bne.n	800a1bc <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a174:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a178:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800a17a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a17e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a180:	f107 030c 	add.w	r3, r7, #12
 800a184:	4618      	mov	r0, r3
 800a186:	f7fa ff71 	bl	800506c <HAL_RCCEx_PeriphCLKConfig>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800a190:	f7f6 fa56 	bl	8000640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a194:	4b0c      	ldr	r3, [pc, #48]	@ (800a1c8 <HAL_PCD_MspInit+0x74>)
 800a196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a198:	4a0b      	ldr	r2, [pc, #44]	@ (800a1c8 <HAL_PCD_MspInit+0x74>)
 800a19a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a19e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1a0:	4b09      	ldr	r3, [pc, #36]	@ (800a1c8 <HAL_PCD_MspInit+0x74>)
 800a1a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1a8:	60bb      	str	r3, [r7, #8]
 800a1aa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	2014      	movs	r0, #20
 800a1b2:	f7f6 fd20 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a1b6:	2014      	movs	r0, #20
 800a1b8:	f7f6 fd37 	bl	8000c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a1bc:	bf00      	nop
 800a1be:	3750      	adds	r7, #80	@ 0x50
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	40005c00 	.word	0x40005c00
 800a1c8:	40021000 	.word	0x40021000

0800a1cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	f7fe fd9f 	bl	8008d26 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a202:	78fa      	ldrb	r2, [r7, #3]
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	4613      	mov	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	00db      	lsls	r3, r3, #3
 800a20e:	440b      	add	r3, r1
 800a210:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	78fb      	ldrb	r3, [r7, #3]
 800a218:	4619      	mov	r1, r3
 800a21a:	f7fe fdd9 	bl	8008dd0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a21e:	bf00      	nop
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	460b      	mov	r3, r1
 800a230:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a238:	78fa      	ldrb	r2, [r7, #3]
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	4613      	mov	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	440b      	add	r3, r1
 800a246:	3324      	adds	r3, #36	@ 0x24
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	78fb      	ldrb	r3, [r7, #3]
 800a24c:	4619      	mov	r1, r3
 800a24e:	f7fe fe22 	bl	8008e96 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a252:	bf00      	nop
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fe ff36 	bl	80090da <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a26e:	bf00      	nop
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b084      	sub	sp, #16
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a27e:	2301      	movs	r3, #1
 800a280:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	795b      	ldrb	r3, [r3, #5]
 800a286:	2b02      	cmp	r3, #2
 800a288:	d001      	beq.n	800a28e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a28a:	f7f6 f9d9 	bl	8000640 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a294:	7bfa      	ldrb	r2, [r7, #15]
 800a296:	4611      	mov	r1, r2
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fe fee0 	bl	800905e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fe fe8c 	bl	8008fc2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe fedb 	bl	800907e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	7a5b      	ldrb	r3, [r3, #9]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d005      	beq.n	800a2dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2d0:	4b04      	ldr	r3, [pc, #16]	@ (800a2e4 <HAL_PCD_SuspendCallback+0x30>)
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	4a03      	ldr	r2, [pc, #12]	@ (800a2e4 <HAL_PCD_SuspendCallback+0x30>)
 800a2d6:	f043 0306 	orr.w	r3, r3, #6
 800a2da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	e000ed00 	.word	0xe000ed00

0800a2e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	7a5b      	ldrb	r3, [r3, #9]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d007      	beq.n	800a308 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2f8:	4b08      	ldr	r3, [pc, #32]	@ (800a31c <HAL_PCD_ResumeCallback+0x34>)
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	4a07      	ldr	r2, [pc, #28]	@ (800a31c <HAL_PCD_ResumeCallback+0x34>)
 800a2fe:	f023 0306 	bic.w	r3, r3, #6
 800a302:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a304:	f000 f9c8 	bl	800a698 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fecb 	bl	80090aa <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a314:	bf00      	nop
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	e000ed00 	.word	0xe000ed00

0800a320 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a328:	4a1e      	ldr	r2, [pc, #120]	@ (800a3a4 <USBD_LL_Init+0x84>)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4a1c      	ldr	r2, [pc, #112]	@ (800a3a4 <USBD_LL_Init+0x84>)
 800a334:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a338:	4b1a      	ldr	r3, [pc, #104]	@ (800a3a4 <USBD_LL_Init+0x84>)
 800a33a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3a8 <USBD_LL_Init+0x88>)
 800a33c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a33e:	4b19      	ldr	r3, [pc, #100]	@ (800a3a4 <USBD_LL_Init+0x84>)
 800a340:	2208      	movs	r2, #8
 800a342:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a344:	4b17      	ldr	r3, [pc, #92]	@ (800a3a4 <USBD_LL_Init+0x84>)
 800a346:	2202      	movs	r2, #2
 800a348:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a34a:	4b16      	ldr	r3, [pc, #88]	@ (800a3a4 <USBD_LL_Init+0x84>)
 800a34c:	2202      	movs	r2, #2
 800a34e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a350:	4b14      	ldr	r3, [pc, #80]	@ (800a3a4 <USBD_LL_Init+0x84>)
 800a352:	2200      	movs	r2, #0
 800a354:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a356:	4b13      	ldr	r3, [pc, #76]	@ (800a3a4 <USBD_LL_Init+0x84>)
 800a358:	2200      	movs	r2, #0
 800a35a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a35c:	4b11      	ldr	r3, [pc, #68]	@ (800a3a4 <USBD_LL_Init+0x84>)
 800a35e:	2200      	movs	r2, #0
 800a360:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a362:	4b10      	ldr	r3, [pc, #64]	@ (800a3a4 <USBD_LL_Init+0x84>)
 800a364:	2200      	movs	r2, #0
 800a366:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a368:	480e      	ldr	r0, [pc, #56]	@ (800a3a4 <USBD_LL_Init+0x84>)
 800a36a:	f7f8 fc16 	bl	8002b9a <HAL_PCD_Init>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d001      	beq.n	800a378 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a374:	f7f6 f964 	bl	8000640 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a37e:	2318      	movs	r3, #24
 800a380:	2200      	movs	r2, #0
 800a382:	2100      	movs	r1, #0
 800a384:	f7fa f85f 	bl	8004446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a38e:	2358      	movs	r3, #88	@ 0x58
 800a390:	2200      	movs	r2, #0
 800a392:	2180      	movs	r1, #128	@ 0x80
 800a394:	f7fa f857 	bl	8004446 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000798 	.word	0x20000798
 800a3a8:	40005c00 	.word	0x40005c00

0800a3ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7f8 fcb7 	bl	8002d36 <HAL_PCD_Start>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f000 f968 	bl	800a6a4 <USBD_Get_USB_Status>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7f8 fcbe 	bl	8002d7a <HAL_PCD_Stop>
 800a3fe:	4603      	mov	r3, r0
 800a400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a402:	7bfb      	ldrb	r3, [r7, #15]
 800a404:	4618      	mov	r0, r3
 800a406:	f000 f94d 	bl	800a6a4 <USBD_Get_USB_Status>
 800a40a:	4603      	mov	r3, r0
 800a40c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a40e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	4608      	mov	r0, r1
 800a422:	4611      	mov	r1, r2
 800a424:	461a      	mov	r2, r3
 800a426:	4603      	mov	r3, r0
 800a428:	70fb      	strb	r3, [r7, #3]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70bb      	strb	r3, [r7, #2]
 800a42e:	4613      	mov	r3, r2
 800a430:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a440:	78bb      	ldrb	r3, [r7, #2]
 800a442:	883a      	ldrh	r2, [r7, #0]
 800a444:	78f9      	ldrb	r1, [r7, #3]
 800a446:	f7f8 fe05 	bl	8003054 <HAL_PCD_EP_Open>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	4618      	mov	r0, r3
 800a452:	f000 f927 	bl	800a6a4 <USBD_Get_USB_Status>
 800a456:	4603      	mov	r3, r0
 800a458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a47e:	78fa      	ldrb	r2, [r7, #3]
 800a480:	4611      	mov	r1, r2
 800a482:	4618      	mov	r0, r3
 800a484:	f7f8 fead 	bl	80031e2 <HAL_PCD_EP_SetStall>
 800a488:	4603      	mov	r3, r0
 800a48a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 f908 	bl	800a6a4 <USBD_Get_USB_Status>
 800a494:	4603      	mov	r3, r0
 800a496:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a498:	7bbb      	ldrb	r3, [r7, #14]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4bc:	78fa      	ldrb	r2, [r7, #3]
 800a4be:	4611      	mov	r1, r2
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7f8 fee0 	bl	8003286 <HAL_PCD_EP_ClrStall>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 f8e9 	bl	800a6a4 <USBD_Get_USB_Status>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a4f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	da0b      	bge.n	800a514 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a4fc:	78fb      	ldrb	r3, [r7, #3]
 800a4fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a502:	68f9      	ldr	r1, [r7, #12]
 800a504:	4613      	mov	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	00db      	lsls	r3, r3, #3
 800a50c:	440b      	add	r3, r1
 800a50e:	3312      	adds	r3, #18
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	e00b      	b.n	800a52c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a51a:	68f9      	ldr	r1, [r7, #12]
 800a51c:	4613      	mov	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	440b      	add	r3, r1
 800a526:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a52a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a552:	78fa      	ldrb	r2, [r7, #3]
 800a554:	4611      	mov	r1, r2
 800a556:	4618      	mov	r0, r3
 800a558:	f7f8 fd58 	bl	800300c <HAL_PCD_SetAddress>
 800a55c:	4603      	mov	r3, r0
 800a55e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	4618      	mov	r0, r3
 800a564:	f000 f89e 	bl	800a6a4 <USBD_Get_USB_Status>
 800a568:	4603      	mov	r3, r0
 800a56a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b086      	sub	sp, #24
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	603b      	str	r3, [r7, #0]
 800a582:	460b      	mov	r3, r1
 800a584:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a594:	7af9      	ldrb	r1, [r7, #11]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	f7f8 fdeb 	bl	8003174 <HAL_PCD_EP_Transmit>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 f87d 	bl	800a6a4 <USBD_Get_USB_Status>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	607a      	str	r2, [r7, #4]
 800a5c2:	603b      	str	r3, [r7, #0]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a5d6:	7af9      	ldrb	r1, [r7, #11]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	f7f8 fd99 	bl	8003112 <HAL_PCD_EP_Receive>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 f85c 	bl	800a6a4 <USBD_Get_USB_Status>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3718      	adds	r7, #24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <HAL_PCDEx_LPM_Callback+0x18>
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d013      	beq.n	800a63a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a612:	e023      	b.n	800a65c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7a5b      	ldrb	r3, [r3, #9]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d007      	beq.n	800a62c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a61c:	f000 f83c 	bl	800a698 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a620:	4b10      	ldr	r3, [pc, #64]	@ (800a664 <HAL_PCDEx_LPM_Callback+0x68>)
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	4a0f      	ldr	r2, [pc, #60]	@ (800a664 <HAL_PCDEx_LPM_Callback+0x68>)
 800a626:	f023 0306 	bic.w	r3, r3, #6
 800a62a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fd39 	bl	80090aa <USBD_LL_Resume>
    break;
 800a638:	e010      	b.n	800a65c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fd1c 	bl	800907e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	7a5b      	ldrb	r3, [r3, #9]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d005      	beq.n	800a65a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a64e:	4b05      	ldr	r3, [pc, #20]	@ (800a664 <HAL_PCDEx_LPM_Callback+0x68>)
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	4a04      	ldr	r2, [pc, #16]	@ (800a664 <HAL_PCDEx_LPM_Callback+0x68>)
 800a654:	f043 0306 	orr.w	r3, r3, #6
 800a658:	6113      	str	r3, [r2, #16]
    break;
 800a65a:	bf00      	nop
}
 800a65c:	bf00      	nop
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	e000ed00 	.word	0xe000ed00

0800a668 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a670:	4b03      	ldr	r3, [pc, #12]	@ (800a680 <USBD_static_malloc+0x18>)
}
 800a672:	4618      	mov	r0, r3
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	20000a74 	.word	0x20000a74

0800a684 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]

}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a69c:	f7f5 fe7a 	bl	8000394 <SystemClock_Config>
}
 800a6a0:	bf00      	nop
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d817      	bhi.n	800a6e8 <USBD_Get_USB_Status+0x44>
 800a6b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c0 <USBD_Get_USB_Status+0x1c>)
 800a6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6be:	bf00      	nop
 800a6c0:	0800a6d1 	.word	0x0800a6d1
 800a6c4:	0800a6d7 	.word	0x0800a6d7
 800a6c8:	0800a6dd 	.word	0x0800a6dd
 800a6cc:	0800a6e3 	.word	0x0800a6e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a6d4:	e00b      	b.n	800a6ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a6da:	e008      	b.n	800a6ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	73fb      	strb	r3, [r7, #15]
    break;
 800a6e0:	e005      	b.n	800a6ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a6e6:	e002      	b.n	800a6ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a6ec:	bf00      	nop
  }
  return usb_status;
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <memset>:
 800a6fc:	4402      	add	r2, r0
 800a6fe:	4603      	mov	r3, r0
 800a700:	4293      	cmp	r3, r2
 800a702:	d100      	bne.n	800a706 <memset+0xa>
 800a704:	4770      	bx	lr
 800a706:	f803 1b01 	strb.w	r1, [r3], #1
 800a70a:	e7f9      	b.n	800a700 <memset+0x4>

0800a70c <__libc_init_array>:
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	4d0d      	ldr	r5, [pc, #52]	@ (800a744 <__libc_init_array+0x38>)
 800a710:	4c0d      	ldr	r4, [pc, #52]	@ (800a748 <__libc_init_array+0x3c>)
 800a712:	1b64      	subs	r4, r4, r5
 800a714:	10a4      	asrs	r4, r4, #2
 800a716:	2600      	movs	r6, #0
 800a718:	42a6      	cmp	r6, r4
 800a71a:	d109      	bne.n	800a730 <__libc_init_array+0x24>
 800a71c:	4d0b      	ldr	r5, [pc, #44]	@ (800a74c <__libc_init_array+0x40>)
 800a71e:	4c0c      	ldr	r4, [pc, #48]	@ (800a750 <__libc_init_array+0x44>)
 800a720:	f000 f818 	bl	800a754 <_init>
 800a724:	1b64      	subs	r4, r4, r5
 800a726:	10a4      	asrs	r4, r4, #2
 800a728:	2600      	movs	r6, #0
 800a72a:	42a6      	cmp	r6, r4
 800a72c:	d105      	bne.n	800a73a <__libc_init_array+0x2e>
 800a72e:	bd70      	pop	{r4, r5, r6, pc}
 800a730:	f855 3b04 	ldr.w	r3, [r5], #4
 800a734:	4798      	blx	r3
 800a736:	3601      	adds	r6, #1
 800a738:	e7ee      	b.n	800a718 <__libc_init_array+0xc>
 800a73a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a73e:	4798      	blx	r3
 800a740:	3601      	adds	r6, #1
 800a742:	e7f2      	b.n	800a72a <__libc_init_array+0x1e>
 800a744:	0800a82c 	.word	0x0800a82c
 800a748:	0800a82c 	.word	0x0800a82c
 800a74c:	0800a82c 	.word	0x0800a82c
 800a750:	0800a830 	.word	0x0800a830

0800a754 <_init>:
 800a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a756:	bf00      	nop
 800a758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75a:	bc08      	pop	{r3}
 800a75c:	469e      	mov	lr, r3
 800a75e:	4770      	bx	lr

0800a760 <_fini>:
 800a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a762:	bf00      	nop
 800a764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a766:	bc08      	pop	{r3}
 800a768:	469e      	mov	lr, r3
 800a76a:	4770      	bx	lr
